/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Cpu_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_Total struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Total
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Total) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Total.
func (*System_Cpu_Total) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_User struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_User.
func (*System_Cpu_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_Wait struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Wait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Wait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Wait.
func (*System_Cpu_Wait) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns represents the /openconfig-system/system/dns YANG schema element.
type System_Dns struct {
	ΛMetadata  []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	HostEntry  map[string]*System_Dns_HostEntry `path:"host-entries/host-entry" module:"openconfig-system/openconfig-system"`
	ΛHostEntry []ygot.Annotation                `path:"host-entries/@host-entry" ygotAnnotation:"true"`
	Search     []string                         `path:"config/search" module:"openconfig-system/openconfig-system"`
	ΛSearch    []ygot.Annotation                `path:"config/@search" ygotAnnotation:"true"`
	Server     *System_Dns_Server_OrderedMap    `path:"servers/server" module:"openconfig-system/openconfig-system"`
	ΛServer    []ygot.Annotation                `path:"servers/@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewHostEntry(Hostname string) (*System_Dns_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &System_Dns_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateHostEntry(Hostname string) *System_Dns_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetHostEntry(Hostname string) *System_Dns_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied System_Dns_HostEntry struct to the
// list HostEntry of System_Dns. If the key value(s) specified in
// the supplied System_Dns_HostEntry already exist in the list, an error is
// returned.
func (t *System_Dns) AppendHostEntry(v *System_Dns_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// GetSearch retrieves the value of the leaf Search from the System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Search is set, it can
// safely use t.GetSearch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Search == nil' before retrieving the leaf's value.
func (t *System_Dns) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// AppendNewServer creates a new entry in the Server
// ordered map of the System_Dns struct. The keys of the list are
// populated from the input arguments.
func (s *System_Dns) AppendNewServer(Address string) (*System_Dns_Server, error) {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.AppendNew(Address)
}

// AppendServer appends the supplied System_Dns_Server struct
// to the list Server of System_Dns. If the key value(s)
// specified in the supplied System_Dns_Server already exist in the list, an
// error is returned.
func (s *System_Dns) AppendServer(v *System_Dns_Server) error {
	if s.Server == nil {
		s.Server = &System_Dns_Server_OrderedMap{}
	}
	return s.Server.Append(v)
}

// GetServer retrieves the value with the specified key from the
// Server map field of System_Dns. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *System_Dns) GetServer(Address string) *System_Dns_Server {
	if s == nil {
		return nil
	}
	key := Address
	return s.Server.Get(key)
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the
// function is a no-op.
func (s *System_Dns) DeleteServer(Address string) bool {
	key := Address
	return s.Server.Delete(key)
}

// System_Dns_Server_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-system/system/dns/servers/server.
type System_Dns_Server_OrderedMap struct {
	keys     []string
	valueMap map[string]*System_Dns_Server
}

// IsYANGOrderedList ensures that System_Dns_Server_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*System_Dns_Server_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *System_Dns_Server_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*System_Dns_Server{}
	}
}

// Keys returns a copy of the list's keys.
func (o *System_Dns_Server_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *System_Dns_Server_OrderedMap) Values() []*System_Dns_Server {
	if o == nil {
		return nil
	}
	var values []*System_Dns_Server
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of System_Dns_Server_OrderedMap
func (o *System_Dns_Server_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *System_Dns_Server_OrderedMap) Get(key string) *System_Dns_Server {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *System_Dns_Server_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a System_Dns_Server, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *System_Dns_Server_OrderedMap) Append(v *System_Dns_Server) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	if v == nil {
		return fmt.Errorf("nil System_Dns_Server")
	}
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new System_Dns_Server, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *System_Dns_Server_OrderedMap) AppendNew(Address string) (*System_Dns_Server, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append System_Dns_Server")
	}
	key := Address

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &System_Dns_Server{
		Address: &Address,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostEntry {
		e.PopulateDefaults()
	}
	for _, e := range t.Server.Values() {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns.
func (*System_Dns) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntry struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"config/alias" module:"openconfig-system/openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"config/@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"config/hostname|hostname" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"config/@hostname|@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"config/ipv4-address" module:"openconfig-system/openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"config/@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"config/ipv6-address" module:"openconfig-system/openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"config/@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_HostEntry) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_HostEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_HostEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Dns_HostEntry struct, which is a YANG list entry.
func (t *System_Dns_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_HostEntry.
func (*System_Dns_HostEntry) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_Server struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"config/@address|@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"config/port" module:"openconfig-system/openconfig-system"`
	ΛPort     []ygot.Annotation `path:"config/@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Dns_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the System_Dns_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Dns_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 53
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the System_Dns_Server struct, which is a YANG list entry.
func (t *System_Dns_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_Server.
func (*System_Dns_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_GrpcServer represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServer struct {
	ΛMetadata               []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	CertificateId           *string                                   `path:"config/certificate-id" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛCertificateId          []ygot.Annotation                         `path:"config/@certificate-id" ygotAnnotation:"true"`
	Enable                  *bool                                     `path:"config/enable" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛEnable                 []ygot.Annotation                         `path:"config/@enable" ygotAnnotation:"true"`
	ListenAddresses         []System_GrpcServer_ListenAddresses_Union `path:"config/listen-addresses" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛListenAddresses        []ygot.Annotation                         `path:"config/@listen-addresses" ygotAnnotation:"true"`
	MetadataAuthentication  *bool                                     `path:"config/metadata-authentication" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛMetadataAuthentication []ygot.Annotation                         `path:"config/@metadata-authentication" ygotAnnotation:"true"`
	Name                    *string                                   `path:"config/name|name" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc"`
	ΛName                   []ygot.Annotation                         `path:"config/@name|@name" ygotAnnotation:"true"`
	NetworkInstance         *string                                   `path:"config/network-instance" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛNetworkInstance        []ygot.Annotation                         `path:"config/@network-instance" ygotAnnotation:"true"`
	Port                    *uint16                                   `path:"config/port" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛPort                   []ygot.Annotation                         `path:"config/@port" ygotAnnotation:"true"`
	Services                []E_SystemGrpc_GRPC_SERVICE               `path:"config/services" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛServices               []ygot.Annotation                         `path:"config/@services" ygotAnnotation:"true"`
	TransportSecurity       *bool                                     `path:"config/transport-security" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛTransportSecurity      []ygot.Annotation                         `path:"config/@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateId is set, it can
// safely use t.GetCertificateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListenAddresses is set, it can
// safely use t.GetListenAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListenAddresses == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetListenAddresses() []System_GrpcServer_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetMetadataAuthentication retrieves the value of the leaf MetadataAuthentication from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetadataAuthentication is set, it can
// safely use t.GetMetadataAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetadataAuthentication == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetMetadataAuthentication() bool {
	if t == nil || t.MetadataAuthentication == nil {
		return false
	}
	return *t.MetadataAuthentication
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetName() string {
	if t == nil || t.Name == nil {
		return "DEFAULT"
	}
	return *t.Name
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPort retrieves the value of the leaf Port from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetServices retrieves the value of the leaf Services from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Services is set, it can
// safely use t.GetServices() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Services == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetServices() []E_SystemGrpc_GRPC_SERVICE {
	if t == nil || t.Services == nil {
		return nil
	}
	return t.Services
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return true
	}
	return *t.TransportSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the System_GrpcServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_GrpcServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "DEFAULT"
		t.Name = &v
	}
	if t.TransportSecurity == nil {
		var v bool = true
		t.TransportSecurity = &v
	}
}

// ΛListKeyMap returns the keys of the System_GrpcServer struct, which is a YANG list entry.
func (t *System_GrpcServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer.
func (*System_GrpcServer) ΛBelongingModule() string {
	return "openconfig-system-grpc"
}

// System_License represents the /openconfig-system/system/license YANG schema element.
type System_License struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	License   map[string]*System_License_License `path:"licenses/license" module:"openconfig-system/openconfig-system"`
	ΛLicense  []ygot.Annotation                  `path:"licenses/@license" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// System_License struct. The keys of the list are populated from the input
// arguments.
func (t *System_License) NewLicense(LicenseId string) (*System_License_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &System_License_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the System_License struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_License) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver System_License. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_License) GetOrCreateLicense(LicenseId string) *System_License_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of System_License. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_License) GetLicense(LicenseId string) *System_License_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver System_License. If there is no such element, the function
// is a no-op.
func (t *System_License) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied System_License_License struct to the
// list License of System_License. If the key value(s) specified in
// the supplied System_License_License already exist in the list, an error is
// returned.
func (t *System_License) AppendLicense(v *System_License_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.License {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License.
func (*System_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_License_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_License struct {
	ΛMetadata       []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Active          *bool                                    `path:"config/active" module:"openconfig-system/openconfig-system"`
	ΛActive         []ygot.Annotation                        `path:"config/@active" ygotAnnotation:"true"`
	Description     *string                                  `path:"state/description" module:"openconfig-system/openconfig-system"`
	ΛDescription    []ygot.Annotation                        `path:"state/@description" ygotAnnotation:"true"`
	ExpirationDate  *uint64                                  `path:"state/expiration-date" module:"openconfig-system/openconfig-system"`
	ΛExpirationDate []ygot.Annotation                        `path:"state/@expiration-date" ygotAnnotation:"true"`
	Expired         *bool                                    `path:"state/expired" module:"openconfig-system/openconfig-system"`
	ΛExpired        []ygot.Annotation                        `path:"state/@expired" ygotAnnotation:"true"`
	InUse           *bool                                    `path:"state/in-use" module:"openconfig-system/openconfig-system"`
	ΛInUse          []ygot.Annotation                        `path:"state/@in-use" ygotAnnotation:"true"`
	IssueDate       *uint64                                  `path:"state/issue-date" module:"openconfig-system/openconfig-system"`
	ΛIssueDate      []ygot.Annotation                        `path:"state/@issue-date" ygotAnnotation:"true"`
	LicenseData     System_License_License_LicenseData_Union `path:"config/license-data" module:"openconfig-system/openconfig-system"`
	ΛLicenseData    []ygot.Annotation                        `path:"config/@license-data" ygotAnnotation:"true"`
	LicenseId       *string                                  `path:"config/license-id|license-id" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛLicenseId      []ygot.Annotation                        `path:"config/@license-id|@license-id" ygotAnnotation:"true"`
	Valid           *bool                                    `path:"state/valid" module:"openconfig-system/openconfig-system"`
	ΛValid          []ygot.Annotation                        `path:"state/@valid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_License_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License_License) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *System_License_License) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetDescription retrieves the value of the leaf Description from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *System_License_License) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExpirationDate retrieves the value of the leaf ExpirationDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpirationDate is set, it can
// safely use t.GetExpirationDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpirationDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpirationDate() uint64 {
	if t == nil || t.ExpirationDate == nil {
		return 0
	}
	return *t.ExpirationDate
}

// GetExpired retrieves the value of the leaf Expired from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expired is set, it can
// safely use t.GetExpired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expired == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpired() bool {
	if t == nil || t.Expired == nil {
		return false
	}
	return *t.Expired
}

// GetInUse retrieves the value of the leaf InUse from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUse is set, it can
// safely use t.GetInUse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUse == nil' before retrieving the leaf's value.
func (t *System_License_License) GetInUse() bool {
	if t == nil || t.InUse == nil {
		return false
	}
	return *t.InUse
}

// GetIssueDate retrieves the value of the leaf IssueDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IssueDate is set, it can
// safely use t.GetIssueDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IssueDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetIssueDate() uint64 {
	if t == nil || t.IssueDate == nil {
		return 0
	}
	return *t.IssueDate
}

// GetLicenseData retrieves the value of the leaf LicenseData from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseData is set, it can
// safely use t.GetLicenseData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseData == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseData() System_License_License_LicenseData_Union {
	if t == nil || t.LicenseData == nil {
		return nil
	}
	return t.LicenseData
}

// GetLicenseId retrieves the value of the leaf LicenseId from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseId is set, it can
// safely use t.GetLicenseId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseId == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseId() string {
	if t == nil || t.LicenseId == nil {
		return ""
	}
	return *t.LicenseId
}

// GetValid retrieves the value of the leaf Valid from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *System_License_License) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// PopulateDefaults recursively populates unset leaf fields in the System_License_License
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_License_License) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
}

// ΛListKeyMap returns the keys of the System_License_License struct, which is a YANG list entry.
func (t *System_License_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License_License.
func (*System_License_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging represents the /openconfig-system/system/logging YANG schema element.
type System_Logging struct {
	ΛMetadata     []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Console       *System_Logging_Console                          `path:"console" module:"openconfig-system"`
	ΛConsole      []ygot.Annotation                                `path:"@console" ygotAnnotation:"true"`
	File          map[System_Logging_File_Key]*System_Logging_File `path:"files/file" module:"openconfig-system/openconfig-system"`
	ΛFile         []ygot.Annotation                                `path:"files/@file" ygotAnnotation:"true"`
	RemoteServer  map[string]*System_Logging_RemoteServer          `path:"remote-servers/remote-server" module:"openconfig-system/openconfig-system"`
	ΛRemoteServer []ygot.Annotation                                `path:"remote-servers/@remote-server" ygotAnnotation:"true"`
	Vty           *System_Logging_Vty                              `path:"vty" module:"openconfig-system"`
	ΛVty          []ygot.Annotation                                `path:"@vty" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging) IsYANGGoStruct() {}

// System_Logging_File_Key represents the key for list File of element /openconfig-system/system/logging.
type System_Logging_File_Key struct {
	Path           string `path:"path"`
	FilenamePrefix string `path:"filename-prefix"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_File_Key key struct.
func (t System_Logging_File_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path":            t.Path,
		"filename-prefix": t.FilenamePrefix,
	}, nil
}

// NewFile creates a new entry in the File list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewFile(Path string, FilenamePrefix string) (*System_Logging_File, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.File[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list File", key)
	}

	t.File[key] = &System_Logging_File{
		Path:           &Path,
		FilenamePrefix: &FilenamePrefix,
	}

	return t.File[key], nil
}

// RenameFile renames an entry in the list File within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameFile(oldK, newK System_Logging_File_Key) error {
	if _, ok := t.File[newK]; ok {
		return fmt.Errorf("key %v already exists in File", newK)
	}

	e, ok := t.File[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in File", oldK)
	}
	e.Path = &newK.Path
	e.FilenamePrefix = &newK.FilenamePrefix

	t.File[newK] = e
	delete(t.File, oldK)
	return nil
}

// GetOrCreateFile retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateFile(Path string, FilenamePrefix string) *System_Logging_File {

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if v, ok := t.File[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFile(Path, FilenamePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFile got unexpected error: %v", err))
	}
	return v
}

// GetFile retrieves the value with the specified key from
// the File map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetFile(Path string, FilenamePrefix string) *System_Logging_File {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	if lm, ok := t.File[key]; ok {
		return lm
	}
	return nil
}

// DeleteFile deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteFile(Path string, FilenamePrefix string) {
	key := System_Logging_File_Key{
		Path:           Path,
		FilenamePrefix: FilenamePrefix,
	}

	delete(t.File, key)
}

// AppendFile appends the supplied System_Logging_File struct to the
// list File of System_Logging. If the key value(s) specified in
// the supplied System_Logging_File already exist in the list, an error is
// returned.
func (t *System_Logging) AppendFile(v *System_Logging_File) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key for Path")
	}

	if v.FilenamePrefix == nil {
		return fmt.Errorf("invalid nil key for FilenamePrefix")
	}

	key := System_Logging_File_Key{
		Path:           *v.Path,
		FilenamePrefix: *v.FilenamePrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.File == nil {
		t.File = make(map[System_Logging_File_Key]*System_Logging_File)
	}

	if _, ok := t.File[key]; ok {
		return fmt.Errorf("duplicate key for list File %v", key)
	}

	t.File[key] = v
	return nil
}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewRemoteServer(Host string) (*System_Logging_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &System_Logging_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateRemoteServer(Host string) *System_Logging_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetRemoteServer(Host string) *System_Logging_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied System_Logging_RemoteServer struct to the
// list RemoteServer of System_Logging. If the key value(s) specified in
// the supplied System_Logging_RemoteServer already exist in the list, an error is
// returned.
func (t *System_Logging) AppendRemoteServer(v *System_Logging_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateConsole() *System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Logging_Console{}
	return t.Console
}

// GetOrCreateVty retrieves the value of the Vty field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateVty() *System_Logging_Vty {
	if t.Vty != nil {
		return t.Vty
	}
	t.Vty = &System_Logging_Vty{}
	return t.Vty
}

// GetConsole returns the value of the Console struct pointer
// from System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetConsole() *System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetVty returns the value of the Vty struct pointer
// from System_Logging. If the receiver or the field Vty is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetVty() *System_Logging_Vty {
	if t != nil && t.Vty != nil {
		return t.Vty
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Console.PopulateDefaults()
	t.Vty.PopulateDefaults()
	for _, e := range t.File {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteServer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging.
func (*System_Logging) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_Console struct {
	ΛMetadata []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	Selector  map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	ΛSelector []ygot.Annotation                                                        `path:"selectors/@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console) IsYANGGoStruct() {}

// System_Logging_Console_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console.
type System_Logging_Console_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Console_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Console_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_Console_Selector_Key key struct.
func (t System_Logging_Console_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Console struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Console) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Console_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Console_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Console struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Console) RenameSelector(oldK, newK System_Logging_Console_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Console. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Console) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Console. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Console) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Console. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Console) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Console_Selector struct to the
// list Selector of System_Logging_Console. If the key value(s) specified in
// the supplied System_Logging_Console_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Console) AppendSelector(v *System_Logging_Console_Selector) error {
	key := System_Logging_Console_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console.
func (*System_Logging_Console) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_Selector struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Facility  E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛFacility []ygot.Annotation               `path:"config/@facility|@facility" ygotAnnotation:"true"`
	Severity  E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛSeverity []ygot.Annotation               `path:"config/@severity|@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_Console_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Console_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Console_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_Console_Selector struct, which is a YANG list entry.
func (t *System_Logging_Console_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console_Selector.
func (*System_Logging_Console_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_File struct {
	ΛMetadata       []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	FilenamePrefix  *string                                                            `path:"config/filename-prefix|filename-prefix" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛFilenamePrefix []ygot.Annotation                                                  `path:"config/@filename-prefix|@filename-prefix" ygotAnnotation:"true"`
	MaxOpenTime     *uint32                                                            `path:"config/max-open-time" module:"openconfig-system/openconfig-system"`
	ΛMaxOpenTime    []ygot.Annotation                                                  `path:"config/@max-open-time" ygotAnnotation:"true"`
	MaxSize         *uint32                                                            `path:"config/max-size" module:"openconfig-system/openconfig-system"`
	ΛMaxSize        []ygot.Annotation                                                  `path:"config/@max-size" ygotAnnotation:"true"`
	OpenLogfile     *string                                                            `path:"state/open-logfile" module:"openconfig-system/openconfig-system"`
	ΛOpenLogfile    []ygot.Annotation                                                  `path:"state/@open-logfile" ygotAnnotation:"true"`
	Path            *string                                                            `path:"config/path|path" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛPath           []ygot.Annotation                                                  `path:"config/@path|@path" ygotAnnotation:"true"`
	Rotate          *uint32                                                            `path:"config/rotate" module:"openconfig-system/openconfig-system"`
	ΛRotate         []ygot.Annotation                                                  `path:"config/@rotate" ygotAnnotation:"true"`
	Selector        map[System_Logging_File_Selector_Key]*System_Logging_File_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	ΛSelector       []ygot.Annotation                                                  `path:"selectors/@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File) IsYANGGoStruct() {}

// System_Logging_File_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/files/file.
type System_Logging_File_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_File_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_File_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_File_Selector_Key key struct.
func (t System_Logging_File_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_File struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_File) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_File_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_File_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_File struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_File) RenameSelector(oldK, newK System_Logging_File_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_File. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_File) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_File. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_File) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_File. If there is no such element, the function
// is a no-op.
func (t *System_Logging_File) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_File_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_File_Selector struct to the
// list Selector of System_Logging_File. If the key value(s) specified in
// the supplied System_Logging_File_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_File) AppendSelector(v *System_Logging_File_Selector) error {
	key := System_Logging_File_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_File_Selector_Key]*System_Logging_File_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetFilenamePrefix retrieves the value of the leaf FilenamePrefix from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilenamePrefix is set, it can
// safely use t.GetFilenamePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilenamePrefix == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetFilenamePrefix() string {
	if t == nil || t.FilenamePrefix == nil {
		return ""
	}
	return *t.FilenamePrefix
}

// GetMaxOpenTime retrieves the value of the leaf MaxOpenTime from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxOpenTime is set, it can
// safely use t.GetMaxOpenTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxOpenTime == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxOpenTime() uint32 {
	if t == nil || t.MaxOpenTime == nil {
		return 1440
	}
	return *t.MaxOpenTime
}

// GetMaxSize retrieves the value of the leaf MaxSize from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSize is set, it can
// safely use t.GetMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSize == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetMaxSize() uint32 {
	if t == nil || t.MaxSize == nil {
		return 1000
	}
	return *t.MaxSize
}

// GetOpenLogfile retrieves the value of the leaf OpenLogfile from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpenLogfile is set, it can
// safely use t.GetOpenLogfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpenLogfile == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetOpenLogfile() string {
	if t == nil || t.OpenLogfile == nil {
		return ""
	}
	return *t.OpenLogfile
}

// GetPath retrieves the value of the leaf Path from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetPath() string {
	if t == nil || t.Path == nil {
		return ""
	}
	return *t.Path
}

// GetRotate retrieves the value of the leaf Rotate from the System_Logging_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rotate is set, it can
// safely use t.GetRotate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rotate == nil' before retrieving the leaf's value.
func (t *System_Logging_File) GetRotate() uint32 {
	if t == nil || t.Rotate == nil {
		return 0
	}
	return *t.Rotate
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxOpenTime == nil {
		var v uint32 = 1440
		t.MaxOpenTime = &v
	}
	if t.MaxSize == nil {
		var v uint32 = 1000
		t.MaxSize = &v
	}
	if t.Rotate == nil {
		var v uint32 = 0
		t.Rotate = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Logging_File struct, which is a YANG list entry.
func (t *System_Logging_File) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilenamePrefix == nil {
		return nil, fmt.Errorf("nil value for key FilenamePrefix")
	}

	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"filename-prefix": *t.FilenamePrefix,
		"path":            *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_File.
func (*System_Logging_File) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_File_Selector represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_Selector struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Facility  E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛFacility []ygot.Annotation               `path:"config/@facility|@facility" ygotAnnotation:"true"`
	Severity  E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛSeverity []ygot.Annotation               `path:"config/@severity|@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_File_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_File_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_File_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_File_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_File_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_File_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_File_Selector struct, which is a YANG list entry.
func (t *System_Logging_File_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_File_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_File_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_File_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_File_Selector.
func (*System_Logging_File_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServer struct {
	ΛMetadata        []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Host             *string                                                                            `path:"config/host|host" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛHost            []ygot.Annotation                                                                  `path:"config/@host|@host" ygotAnnotation:"true"`
	NetworkInstance  *string                                                                            `path:"config/network-instance" module:"openconfig-system/openconfig-system"`
	ΛNetworkInstance []ygot.Annotation                                                                  `path:"config/@network-instance" ygotAnnotation:"true"`
	RemotePort       *uint16                                                                            `path:"config/remote-port" module:"openconfig-system/openconfig-system"`
	ΛRemotePort      []ygot.Annotation                                                                  `path:"config/@remote-port" ygotAnnotation:"true"`
	Selector         map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	ΛSelector        []ygot.Annotation                                                                  `path:"selectors/@selector" ygotAnnotation:"true"`
	SourceAddress    *string                                                                            `path:"config/source-address" module:"openconfig-system/openconfig-system"`
	ΛSourceAddress   []ygot.Annotation                                                                  `path:"config/@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer) IsYANGGoStruct() {}

// System_Logging_RemoteServer_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server.
type System_Logging_RemoteServer_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_RemoteServer_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_RemoteServer_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_RemoteServer_Selector_Key key struct.
func (t System_Logging_RemoteServer_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_RemoteServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_RemoteServer) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_RemoteServer_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_RemoteServer_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_RemoteServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_RemoteServer) RenameSelector(oldK, newK System_Logging_RemoteServer_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_RemoteServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_RemoteServer) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_RemoteServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_RemoteServer) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_RemoteServer. If there is no such element, the function
// is a no-op.
func (t *System_Logging_RemoteServer) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_RemoteServer_Selector struct to the
// list Selector of System_Logging_RemoteServer. If the key value(s) specified in
// the supplied System_Logging_RemoteServer_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_RemoteServer) AppendSelector(v *System_Logging_RemoteServer_Selector) error {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetHost retrieves the value of the leaf Host from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Host is set, it can
// safely use t.GetHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Host == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetRemotePort retrieves the value of the leaf RemotePort from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePort is set, it can
// safely use t.GetRemotePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePort == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemotePort == nil {
		var v uint16 = 514
		t.RemotePort = &v
	}
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer.
func (*System_Logging_RemoteServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_Selector struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Facility  E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛFacility []ygot.Annotation               `path:"config/@facility|@facility" ygotAnnotation:"true"`
	Severity  E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛSeverity []ygot.Annotation               `path:"config/@severity|@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_RemoteServer_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_RemoteServer_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer_Selector struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer_Selector.
func (*System_Logging_RemoteServer_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_Vty struct {
	ΛMetadata []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	Selector  map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	ΛSelector []ygot.Annotation                                                `path:"selectors/@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_Vty implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty) IsYANGGoStruct() {}

// System_Logging_Vty_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/vty.
type System_Logging_Vty_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// IsYANGGoKeyStruct ensures that System_Logging_Vty_Selector_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (System_Logging_Vty_Selector_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the System_Logging_Vty_Selector_Key key struct.
func (t System_Logging_Vty_Selector_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Vty struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Vty) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Vty_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Vty_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Vty struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Vty) RenameSelector(oldK, newK System_Logging_Vty_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Vty. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Vty) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Vty. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Vty) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Vty. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Vty) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Vty_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Vty_Selector struct to the
// list Selector of System_Logging_Vty. If the key value(s) specified in
// the supplied System_Logging_Vty_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Vty) AppendSelector(v *System_Logging_Vty_Selector) error {
	key := System_Logging_Vty_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Vty_Selector_Key]*System_Logging_Vty_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Selector {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty.
func (*System_Logging_Vty) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Vty_Selector represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_Selector struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Facility  E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛFacility []ygot.Annotation               `path:"config/@facility|@facility" ygotAnnotation:"true"`
	Severity  E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛSeverity []ygot.Annotation               `path:"config/@severity|@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Logging_Vty_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Vty_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Vty_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Vty_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the System_Logging_Vty_Selector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Logging_Vty_Selector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Logging_Vty_Selector struct, which is a YANG list entry.
func (t *System_Logging_Vty_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Vty_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Vty_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Vty_Selector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Vty_Selector.
func (*System_Logging_Vty_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MacAddress represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddress struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	RoutingMac  *string           `path:"config/routing-mac" module:"openconfig-system/openconfig-system"`
	ΛRoutingMac []ygot.Annotation `path:"config/@routing-mac" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MacAddress) IsYANGGoStruct() {}

// GetRoutingMac retrieves the value of the leaf RoutingMac from the System_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutingMac is set, it can
// safely use t.GetRoutingMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutingMac == nil' before retrieving the leaf's value.
func (t *System_MacAddress) GetRoutingMac() string {
	if t == nil || t.RoutingMac == nil {
		return ""
	}
	return *t.RoutingMac
}

// PopulateDefaults recursively populates unset leaf fields in the System_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MacAddress.
func (*System_MacAddress) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory represents the /openconfig-system/system/memory YANG schema element.
type System_Memory struct {
	ΛMetadata []ygot.Annotation       `path:"@" ygotAnnotation:"true"`
	Counters  *System_Memory_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	ΛCounters []ygot.Annotation       `path:"state/@counters" ygotAnnotation:"true"`
	Free      *uint64                 `path:"state/free" module:"openconfig-system/openconfig-system"`
	ΛFree     []ygot.Annotation       `path:"state/@free" ygotAnnotation:"true"`
	Physical  *uint64                 `path:"state/physical" module:"openconfig-system/openconfig-system"`
	ΛPhysical []ygot.Annotation       `path:"state/@physical" ygotAnnotation:"true"`
	Reserved  *uint64                 `path:"state/reserved" module:"openconfig-system/openconfig-system"`
	ΛReserved []ygot.Annotation       `path:"state/@reserved" ygotAnnotation:"true"`
	Used      *uint64                 `path:"state/used" module:"openconfig-system/openconfig-system"`
	ΛUsed     []ygot.Annotation       `path:"state/@used" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Memory) GetOrCreateCounters() *System_Memory_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Memory_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Memory. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Memory) GetCounters() *System_Memory_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetFree retrieves the value of the leaf Free from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *System_Memory) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetPhysical retrieves the value of the leaf Physical from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Physical is set, it can
// safely use t.GetPhysical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Physical == nil' before retrieving the leaf's value.
func (t *System_Memory) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *System_Memory) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUsed retrieves the value of the leaf Used from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *System_Memory) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory.
func (*System_Memory) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_Counters struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CorrectableEccErrors    *uint64           `path:"correctable-ecc-errors" module:"openconfig-system"`
	ΛCorrectableEccErrors   []ygot.Annotation `path:"@correctable-ecc-errors" ygotAnnotation:"true"`
	TotalEccErrors          *uint64           `path:"total-ecc-errors" module:"openconfig-system"`
	ΛTotalEccErrors         []ygot.Annotation `path:"@total-ecc-errors" ygotAnnotation:"true"`
	UncorrectableEccErrors  *uint64           `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
	ΛUncorrectableEccErrors []ygot.Annotation `path:"@uncorrectable-ecc-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Memory_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory_Counters) IsYANGGoStruct() {}

// GetCorrectableEccErrors retrieves the value of the leaf CorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectableEccErrors is set, it can
// safely use t.GetCorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetCorrectableEccErrors() uint64 {
	if t == nil || t.CorrectableEccErrors == nil {
		return 0
	}
	return *t.CorrectableEccErrors
}

// GetTotalEccErrors retrieves the value of the leaf TotalEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalEccErrors is set, it can
// safely use t.GetTotalEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetTotalEccErrors() uint64 {
	if t == nil || t.TotalEccErrors == nil {
		return 0
	}
	return *t.TotalEccErrors
}

// GetUncorrectableEccErrors retrieves the value of the leaf UncorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectableEccErrors is set, it can
// safely use t.GetUncorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetUncorrectableEccErrors() uint64 {
	if t == nil || t.UncorrectableEccErrors == nil {
		return 0
	}
	return *t.UncorrectableEccErrors
}

// PopulateDefaults recursively populates unset leaf fields in the System_Memory_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Memory_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory_Counters.
func (*System_Memory_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages represents the /openconfig-system/system/messages YANG schema element.
type System_Messages struct {
	ΛMetadata     []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	DebugService  map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService `path:"debug-entries/debug-service" module:"openconfig-system/openconfig-system"`
	ΛDebugService []ygot.Annotation                                          `path:"debug-entries/@debug-service" ygotAnnotation:"true"`
	Message       *System_Messages_Message                                   `path:"state/message" module:"openconfig-system/openconfig-system"`
	ΛMessage      []ygot.Annotation                                          `path:"state/@message" ygotAnnotation:"true"`
	Severity      E_SystemLogging_SyslogSeverity                             `path:"config/severity" module:"openconfig-system/openconfig-system"`
	ΛSeverity     []ygot.Annotation                                          `path:"config/@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// System_Messages struct. The keys of the list are populated from the input
// arguments.
func (t *System_Messages) NewDebugService(Service E_Messages_DEBUG_SERVICE) (*System_Messages_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &System_Messages_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the System_Messages struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Messages) RenameDebugService(oldK, newK E_Messages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver System_Messages. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Messages) GetOrCreateDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of System_Messages. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Messages) GetDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver System_Messages. If there is no such element, the function
// is a no-op.
func (t *System_Messages) DeleteDebugService(Service E_Messages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied System_Messages_DebugService struct to the
// list DebugService of System_Messages. If the key value(s) specified in
// the supplied System_Messages_DebugService already exist in the list, an error is
// returned.
func (t *System_Messages) AppendDebugService(v *System_Messages_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *System_Messages) GetOrCreateMessage() *System_Messages_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &System_Messages_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from System_Messages. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Messages) GetMessage() *System_Messages_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity retrieves the value of the leaf Severity from the System_Messages
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Messages) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Message.PopulateDefaults()
	for _, e := range t.DebugService {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages.
func (*System_Messages) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugService struct {
	ΛMetadata []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                    `path:"config/enabled" module:"openconfig-system/openconfig-system"`
	ΛEnabled  []ygot.Annotation        `path:"config/@enabled" ygotAnnotation:"true"`
	Service   E_Messages_DEBUG_SERVICE `path:"config/service|service" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛService  []ygot.Annotation        `path:"config/@service|@service" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Messages_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_DebugService) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetService retrieves the value of the leaf Service from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetService() E_Messages_DEBUG_SERVICE {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_DebugService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_DebugService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// ΛListKeyMap returns the keys of the System_Messages_DebugService struct, which is a YANG list entry.
func (t *System_Messages_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_DebugService.
func (*System_Messages_DebugService) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_Message struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AppName   *string           `path:"app-name" module:"openconfig-system"`
	ΛAppName  []ygot.Annotation `path:"@app-name" ygotAnnotation:"true"`
	Msg       *string           `path:"msg" module:"openconfig-system"`
	ΛMsg      []ygot.Annotation `path:"@msg" ygotAnnotation:"true"`
	Msgid     *string           `path:"msgid" module:"openconfig-system"`
	ΛMsgid    []ygot.Annotation `path:"@msgid" ygotAnnotation:"true"`
	Priority  *uint8            `path:"priority" module:"openconfig-system"`
	ΛPriority []ygot.Annotation `path:"@priority" ygotAnnotation:"true"`
	Procid    *string           `path:"procid" module:"openconfig-system"`
	ΛProcid   []ygot.Annotation `path:"@procid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Messages_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_Message) IsYANGGoStruct() {}

// GetAppName retrieves the value of the leaf AppName from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppName is set, it can
// safely use t.GetAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppName == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetAppName() string {
	if t == nil || t.AppName == nil {
		return ""
	}
	return *t.AppName
}

// GetMsg retrieves the value of the leaf Msg from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msg is set, it can
// safely use t.GetMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msg == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsg() string {
	if t == nil || t.Msg == nil {
		return ""
	}
	return *t.Msg
}

// GetMsgid retrieves the value of the leaf Msgid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msgid is set, it can
// safely use t.GetMsgid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msgid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsgid() string {
	if t == nil || t.Msgid == nil {
		return ""
	}
	return *t.Msgid
}

// GetPriority retrieves the value of the leaf Priority from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetProcid retrieves the value of the leaf Procid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Procid is set, it can
// safely use t.GetProcid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Procid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetProcid() string {
	if t == nil || t.Procid == nil {
		return ""
	}
	return *t.Procid
}

// PopulateDefaults recursively populates unset leaf fields in the System_Messages_Message
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Messages_Message) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_Message.
func (*System_Messages_Message) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPoint struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available         *uint64           `path:"state/available" module:"openconfig-system/openconfig-system"`
	ΛAvailable        []ygot.Annotation `path:"state/@available" ygotAnnotation:"true"`
	Name              *string           `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛName             []ygot.Annotation `path:"state/@name|@name" ygotAnnotation:"true"`
	Size              *uint64           `path:"state/size" module:"openconfig-system/openconfig-system"`
	ΛSize             []ygot.Annotation `path:"state/@size" ygotAnnotation:"true"`
	StorageComponent  *string           `path:"state/storage-component" module:"openconfig-system/openconfig-system"`
	ΛStorageComponent []ygot.Annotation `path:"state/@storage-component" ygotAnnotation:"true"`
	Utilized          *uint64           `path:"state/utilized" module:"openconfig-system/openconfig-system"`
	ΛUtilized         []ygot.Annotation `path:"state/@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MountPoint) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetName retrieves the value of the leaf Name from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSize retrieves the value of the leaf Size from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetSize() uint64 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetStorageComponent retrieves the value of the leaf StorageComponent from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StorageComponent is set, it can
// safely use t.GetStorageComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StorageComponent == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetStorageComponent() string {
	if t == nil || t.StorageComponent == nil {
		return ""
	}
	return *t.StorageComponent
}

// GetUtilized retrieves the value of the leaf Utilized from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// PopulateDefaults recursively populates unset leaf fields in the System_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_MountPoint struct, which is a YANG list entry.
func (t *System_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MountPoint.
func (*System_MountPoint) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type System_Ntp struct {
	ΛMetadata      []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	AuthMismatch   *uint64                       `path:"state/auth-mismatch" module:"openconfig-system/openconfig-system"`
	ΛAuthMismatch  []ygot.Annotation             `path:"state/@auth-mismatch" ygotAnnotation:"true"`
	EnableNtpAuth  *bool                         `path:"config/enable-ntp-auth" module:"openconfig-system/openconfig-system"`
	ΛEnableNtpAuth []ygot.Annotation             `path:"config/@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled        *bool                         `path:"config/enabled" module:"openconfig-system/openconfig-system"`
	ΛEnabled       []ygot.Annotation             `path:"config/@enabled" ygotAnnotation:"true"`
	NtpKey         map[uint16]*System_Ntp_NtpKey `path:"ntp-keys/ntp-key" module:"openconfig-system/openconfig-system"`
	ΛNtpKey        []ygot.Annotation             `path:"ntp-keys/@ntp-key" ygotAnnotation:"true"`
	Server         map[string]*System_Ntp_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	ΛServer        []ygot.Annotation             `path:"servers/@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewNtpKey(KeyId uint16) (*System_Ntp_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &System_Ntp_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied System_Ntp_NtpKey struct to the
// list NtpKey of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_NtpKey already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendNtpKey(v *System_Ntp_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewServer(Address string) (*System_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateServer(Address string) *System_Ntp_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetServer(Address string) *System_Ntp_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Ntp_Server struct to the
// list Server of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_Server already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendServer(v *System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMismatch is set, it can
// safely use t.GetAuthMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMismatch == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableNtpAuth is set, it can
// safely use t.GetEnableNtpAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableNtpAuth == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableNtpAuth == nil {
		var v bool = false
		t.EnableNtpAuth = &v
	}
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	for _, e := range t.NtpKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp.
func (*System_Ntp) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKey struct {
	ΛMetadata []ygot.Annotation      `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                `path:"config/key-id|key-id" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛKeyId    []ygot.Annotation      `path:"config/@key-id|@key-id" ygotAnnotation:"true"`
	KeyType   E_System_NTP_AUTH_TYPE `path:"config/key-type" module:"openconfig-system/openconfig-system"`
	ΛKeyType  []ygot.Annotation      `path:"config/@key-type" ygotAnnotation:"true"`
	KeyValue  *string                `path:"config/key-value" module:"openconfig-system/openconfig-system"`
	ΛKeyValue []ygot.Annotation      `path:"config/@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Ntp_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_NtpKey) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyType is set, it can
// safely use t.GetKeyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyType == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyType() E_System_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_NtpKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_NtpKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Ntp_NtpKey struct, which is a YANG list entry.
func (t *System_Ntp_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_NtpKey.
func (*System_Ntp_NtpKey) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_Server struct {
	ΛMetadata        []ygot.Annotation        `path:"@" ygotAnnotation:"true"`
	Address          *string                  `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛAddress         []ygot.Annotation        `path:"config/@address|@address" ygotAnnotation:"true"`
	AssociationType  E_Server_AssociationType `path:"config/association-type" module:"openconfig-system/openconfig-system"`
	ΛAssociationType []ygot.Annotation        `path:"config/@association-type" ygotAnnotation:"true"`
	Iburst           *bool                    `path:"config/iburst" module:"openconfig-system/openconfig-system"`
	ΛIburst          []ygot.Annotation        `path:"config/@iburst" ygotAnnotation:"true"`
	NetworkInstance  *string                  `path:"config/network-instance" module:"openconfig-system/openconfig-system"`
	ΛNetworkInstance []ygot.Annotation        `path:"config/@network-instance" ygotAnnotation:"true"`
	Offset           *uint64                  `path:"state/offset" module:"openconfig-system/openconfig-system"`
	ΛOffset          []ygot.Annotation        `path:"state/@offset" ygotAnnotation:"true"`
	PollInterval     *uint32                  `path:"state/poll-interval" module:"openconfig-system/openconfig-system"`
	ΛPollInterval    []ygot.Annotation        `path:"state/@poll-interval" ygotAnnotation:"true"`
	Port             *uint16                  `path:"config/port" module:"openconfig-system/openconfig-system"`
	ΛPort            []ygot.Annotation        `path:"config/@port" ygotAnnotation:"true"`
	Prefer           *bool                    `path:"config/prefer" module:"openconfig-system/openconfig-system"`
	ΛPrefer          []ygot.Annotation        `path:"config/@prefer" ygotAnnotation:"true"`
	RootDelay        *uint32                  `path:"state/root-delay" module:"openconfig-system/openconfig-system"`
	ΛRootDelay       []ygot.Annotation        `path:"state/@root-delay" ygotAnnotation:"true"`
	RootDispersion   *uint64                  `path:"state/root-dispersion" module:"openconfig-system/openconfig-system"`
	ΛRootDispersion  []ygot.Annotation        `path:"state/@root-dispersion" ygotAnnotation:"true"`
	SourceAddress    *string                  `path:"config/source-address" module:"openconfig-system/openconfig-system"`
	ΛSourceAddress   []ygot.Annotation        `path:"config/@source-address" ygotAnnotation:"true"`
	Stratum          *uint8                   `path:"state/stratum" module:"openconfig-system/openconfig-system"`
	ΛStratum         []ygot.Annotation        `path:"state/@stratum" ygotAnnotation:"true"`
	Version          *uint8                   `path:"config/version" module:"openconfig-system/openconfig-system"`
	ΛVersion         []ygot.Annotation        `path:"config/@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationType is set, it can
// safely use t.GetAssociationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationType == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAssociationType() E_Server_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return Server_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetOffset retrieves the value of the leaf Offset from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetOffset() uint64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDelay is set, it can
// safely use t.GetRootDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDelay == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDelay() uint32 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDispersion is set, it can
// safely use t.GetRootDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDispersion == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDispersion() uint64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStratum retrieves the value of the leaf Stratum from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stratum is set, it can
// safely use t.GetStratum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stratum == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the System_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationType == 0 {
		t.AssociationType = Server_AssociationType_SERVER
	}
	if t.Iburst == nil {
		var v bool = false
		t.Iburst = &v
	}
	if t.Port == nil {
		var v uint16 = 123
		t.Port = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint8 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the System_Ntp_Server struct, which is a YANG list entry.
func (t *System_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_Server.
func (*System_Ntp_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Process represents the /openconfig-system/system/processes/process YANG schema element.
type System_Process struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Args               []string          `path:"state/args" module:"openconfig-system/openconfig-system"`
	ΛArgs              []ygot.Annotation `path:"state/@args" ygotAnnotation:"true"`
	CpuUsageSystem     *uint64           `path:"state/cpu-usage-system" module:"openconfig-system/openconfig-system"`
	ΛCpuUsageSystem    []ygot.Annotation `path:"state/@cpu-usage-system" ygotAnnotation:"true"`
	CpuUsageUser       *uint64           `path:"state/cpu-usage-user" module:"openconfig-system/openconfig-system"`
	ΛCpuUsageUser      []ygot.Annotation `path:"state/@cpu-usage-user" ygotAnnotation:"true"`
	CpuUtilization     *uint8            `path:"state/cpu-utilization" module:"openconfig-system/openconfig-system"`
	ΛCpuUtilization    []ygot.Annotation `path:"state/@cpu-utilization" ygotAnnotation:"true"`
	MemoryUsage        *uint64           `path:"state/memory-usage" module:"openconfig-system/openconfig-system"`
	ΛMemoryUsage       []ygot.Annotation `path:"state/@memory-usage" ygotAnnotation:"true"`
	MemoryUtilization  *uint8            `path:"state/memory-utilization" module:"openconfig-system/openconfig-system"`
	ΛMemoryUtilization []ygot.Annotation `path:"state/@memory-utilization" ygotAnnotation:"true"`
	Name               *string           `path:"state/name" module:"openconfig-system/openconfig-system"`
	ΛName              []ygot.Annotation `path:"state/@name" ygotAnnotation:"true"`
	Pid                *uint64           `path:"state/pid|pid" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛPid               []ygot.Annotation `path:"state/@pid|@pid" ygotAnnotation:"true"`
	StartTime          *uint64           `path:"state/start-time" module:"openconfig-system/openconfig-system"`
	ΛStartTime         []ygot.Annotation `path:"state/@start-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Process) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Args is set, it can
// safely use t.GetArgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Args == nil' before retrieving the leaf's value.
func (t *System_Process) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageSystem is set, it can
// safely use t.GetCpuUsageSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageSystem == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageUser is set, it can
// safely use t.GetCpuUsageUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageUser == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUtilization is set, it can
// safely use t.GetCpuUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUsage is set, it can
// safely use t.GetMemoryUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUsage == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUtilization is set, it can
// safely use t.GetMemoryUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Process) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pid is set, it can
// safely use t.GetPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pid == nil' before retrieving the leaf's value.
func (t *System_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *System_Process) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Process
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Process) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Process struct, which is a YANG list entry.
func (t *System_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Process.
func (*System_Process) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServer struct {
	ΛMetadata        []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	Enable           *bool                       `path:"config/enable" module:"openconfig-system/openconfig-system"`
	ΛEnable          []ygot.Annotation           `path:"config/@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_SshServer_ProtocolVersion `path:"config/protocol-version" module:"openconfig-system/openconfig-system"`
	ΛProtocolVersion []ygot.Annotation           `path:"config/@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                     `path:"config/rate-limit" module:"openconfig-system/openconfig-system"`
	ΛRateLimit       []ygot.Annotation           `path:"config/@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                     `path:"config/session-limit" module:"openconfig-system/openconfig-system"`
	ΛSessionLimit    []ygot.Annotation           `path:"config/@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                     `path:"config/timeout" module:"openconfig-system/openconfig-system"`
	ΛTimeout         []ygot.Annotation           `path:"config/@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolVersion is set, it can
// safely use t.GetProtocolVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetProtocolVersion() E_SshServer_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return SshServer_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the System_SshServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_SshServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = true
		t.Enable = &v
	}
	if t.ProtocolVersion == 0 {
		t.ProtocolVersion = SshServer_ProtocolVersion_V2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_SshServer.
func (*System_SshServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServer struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"config/enable" module:"openconfig-system/openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"config/rate-limit" module:"openconfig-system/openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"config/@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"config/session-limit" module:"openconfig-system/openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"config/@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"config/timeout" module:"openconfig-system/openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"config/@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_TelnetServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the System_TelnetServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_TelnetServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_TelnetServer.
func (*System_TelnetServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// TelemetrySystem represents the /openconfig-telemetry/telemetry-system YANG schema element.
type TelemetrySystem struct {
	ΛMetadata         []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	DestinationGroup  map[string]*TelemetrySystem_DestinationGroup `path:"destination-groups/destination-group" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDestinationGroup []ygot.Annotation                            `path:"destination-groups/@destination-group" ygotAnnotation:"true"`
	SensorGroup       map[string]*TelemetrySystem_SensorGroup      `path:"sensor-groups/sensor-group" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSensorGroup      []ygot.Annotation                            `path:"sensor-groups/@sensor-group" ygotAnnotation:"true"`
	Subscriptions     *TelemetrySystem_Subscriptions               `path:"subscriptions" module:"openconfig-telemetry"`
	ΛSubscriptions    []ygot.Annotation                            `path:"@subscriptions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// TelemetrySystem struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem) NewDestinationGroup(GroupId string) (*TelemetrySystem_DestinationGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &TelemetrySystem_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// RenameDestinationGroup renames an entry in the list DestinationGroup within
// the TelemetrySystem struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem) RenameDestinationGroup(oldK, newK string) error {
	if _, ok := t.DestinationGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationGroup", newK)
	}

	e, ok := t.DestinationGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationGroup", oldK)
	}
	e.GroupId = &newK

	t.DestinationGroup[newK] = e
	delete(t.DestinationGroup, oldK)
	return nil
}

// GetOrCreateDestinationGroup retrieves the value with the specified keys from
// the receiver TelemetrySystem. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem) GetOrCreateDestinationGroup(GroupId string) *TelemetrySystem_DestinationGroup {

	key := GroupId

	if v, ok := t.DestinationGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationGroup got unexpected error: %v", err))
	}
	return v
}

// GetDestinationGroup retrieves the value with the specified key from
// the DestinationGroup map field of TelemetrySystem. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem) GetDestinationGroup(GroupId string) *TelemetrySystem_DestinationGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.DestinationGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationGroup deletes the value with the specified keys from
// the receiver TelemetrySystem. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem) DeleteDestinationGroup(GroupId string) {
	key := GroupId

	delete(t.DestinationGroup, key)
}

// AppendDestinationGroup appends the supplied TelemetrySystem_DestinationGroup struct to the
// list DestinationGroup of TelemetrySystem. If the key value(s) specified in
// the supplied TelemetrySystem_DestinationGroup already exist in the list, an error is
// returned.
func (t *TelemetrySystem) AppendDestinationGroup(v *TelemetrySystem_DestinationGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_DestinationGroup)
	}

	if _, ok := t.DestinationGroup[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationGroup %v", key)
	}

	t.DestinationGroup[key] = v
	return nil
}

// NewSensorGroup creates a new entry in the SensorGroup list of the
// TelemetrySystem struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem) NewSensorGroup(SensorGroupId string) (*TelemetrySystem_SensorGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*TelemetrySystem_SensorGroup)
	}

	key := SensorGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorGroup", key)
	}

	t.SensorGroup[key] = &TelemetrySystem_SensorGroup{
		SensorGroupId: &SensorGroupId,
	}

	return t.SensorGroup[key], nil
}

// RenameSensorGroup renames an entry in the list SensorGroup within
// the TelemetrySystem struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem) RenameSensorGroup(oldK, newK string) error {
	if _, ok := t.SensorGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorGroup", newK)
	}

	e, ok := t.SensorGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorGroup", oldK)
	}
	e.SensorGroupId = &newK

	t.SensorGroup[newK] = e
	delete(t.SensorGroup, oldK)
	return nil
}

// GetOrCreateSensorGroup retrieves the value with the specified keys from
// the receiver TelemetrySystem. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem) GetOrCreateSensorGroup(SensorGroupId string) *TelemetrySystem_SensorGroup {

	key := SensorGroupId

	if v, ok := t.SensorGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorGroup(SensorGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorGroup got unexpected error: %v", err))
	}
	return v
}

// GetSensorGroup retrieves the value with the specified key from
// the SensorGroup map field of TelemetrySystem. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem) GetSensorGroup(SensorGroupId string) *TelemetrySystem_SensorGroup {

	if t == nil {
		return nil
	}

	key := SensorGroupId

	if lm, ok := t.SensorGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorGroup deletes the value with the specified keys from
// the receiver TelemetrySystem. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem) DeleteSensorGroup(SensorGroupId string) {
	key := SensorGroupId

	delete(t.SensorGroup, key)
}

// AppendSensorGroup appends the supplied TelemetrySystem_SensorGroup struct to the
// list SensorGroup of TelemetrySystem. If the key value(s) specified in
// the supplied TelemetrySystem_SensorGroup already exist in the list, an error is
// returned.
func (t *TelemetrySystem) AppendSensorGroup(v *TelemetrySystem_SensorGroup) error {
	if v.SensorGroupId == nil {
		return fmt.Errorf("invalid nil key received for SensorGroupId")
	}

	key := *v.SensorGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*TelemetrySystem_SensorGroup)
	}

	if _, ok := t.SensorGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SensorGroup %v", key)
	}

	t.SensorGroup[key] = v
	return nil
}

// GetOrCreateSubscriptions retrieves the value of the Subscriptions field
// or returns the existing field if it already exists.
func (t *TelemetrySystem) GetOrCreateSubscriptions() *TelemetrySystem_Subscriptions {
	if t.Subscriptions != nil {
		return t.Subscriptions
	}
	t.Subscriptions = &TelemetrySystem_Subscriptions{}
	return t.Subscriptions
}

// GetSubscriptions returns the value of the Subscriptions struct pointer
// from TelemetrySystem. If the receiver or the field Subscriptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TelemetrySystem) GetSubscriptions() *TelemetrySystem_Subscriptions {
	if t != nil && t.Subscriptions != nil {
		return t.Subscriptions
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Subscriptions.PopulateDefaults()
	for _, e := range t.DestinationGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SensorGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem.
func (*TelemetrySystem) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_DestinationGroup represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group YANG schema element.
type TelemetrySystem_DestinationGroup struct {
	ΛMetadata    []ygot.Annotation                                                                                  `path:"@" ygotAnnotation:"true"`
	Destination  map[TelemetrySystem_DestinationGroup_Destination_Key]*TelemetrySystem_DestinationGroup_Destination `path:"destinations/destination" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDestination []ygot.Annotation                                                                                  `path:"destinations/@destination" ygotAnnotation:"true"`
	GroupId      *string                                                                                            `path:"config/group-id|group-id" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛGroupId     []ygot.Annotation                                                                                  `path:"config/@group-id|@group-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_DestinationGroup) IsYANGGoStruct() {}

// TelemetrySystem_DestinationGroup_Destination_Key represents the key for list Destination of element /openconfig-telemetry/telemetry-system/destination-groups/destination-group.
type TelemetrySystem_DestinationGroup_Destination_Key struct {
	DestinationAddress string `path:"destination-address"`
	DestinationPort    uint16 `path:"destination-port"`
}

// IsYANGGoKeyStruct ensures that TelemetrySystem_DestinationGroup_Destination_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (TelemetrySystem_DestinationGroup_Destination_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the TelemetrySystem_DestinationGroup_Destination_Key key struct.
func (t TelemetrySystem_DestinationGroup_Destination_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"destination-address": t.DestinationAddress,
		"destination-port":    t.DestinationPort,
	}, nil
}

// NewDestination creates a new entry in the Destination list of the
// TelemetrySystem_DestinationGroup struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_DestinationGroup) NewDestination(DestinationAddress string, DestinationPort uint16) (*TelemetrySystem_DestinationGroup_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[TelemetrySystem_DestinationGroup_Destination_Key]*TelemetrySystem_DestinationGroup_Destination)
	}

	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort:    DestinationPort,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &TelemetrySystem_DestinationGroup_Destination{
		DestinationAddress: &DestinationAddress,
		DestinationPort:    &DestinationPort,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the TelemetrySystem_DestinationGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_DestinationGroup) RenameDestination(oldK, newK TelemetrySystem_DestinationGroup_Destination_Key) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.DestinationAddress = &newK.DestinationAddress
	e.DestinationPort = &newK.DestinationPort

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver TelemetrySystem_DestinationGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_DestinationGroup) GetOrCreateDestination(DestinationAddress string, DestinationPort uint16) *TelemetrySystem_DestinationGroup_Destination {

	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort:    DestinationPort,
	}

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(DestinationAddress, DestinationPort)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of TelemetrySystem_DestinationGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_DestinationGroup) GetDestination(DestinationAddress string, DestinationPort uint16) *TelemetrySystem_DestinationGroup_Destination {

	if t == nil {
		return nil
	}

	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort:    DestinationPort,
	}

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver TelemetrySystem_DestinationGroup. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_DestinationGroup) DeleteDestination(DestinationAddress string, DestinationPort uint16) {
	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort:    DestinationPort,
	}

	delete(t.Destination, key)
}

// AppendDestination appends the supplied TelemetrySystem_DestinationGroup_Destination struct to the
// list Destination of TelemetrySystem_DestinationGroup. If the key value(s) specified in
// the supplied TelemetrySystem_DestinationGroup_Destination already exist in the list, an error is
// returned.
func (t *TelemetrySystem_DestinationGroup) AppendDestination(v *TelemetrySystem_DestinationGroup_Destination) error {
	if v.DestinationAddress == nil {
		return fmt.Errorf("invalid nil key for DestinationAddress")
	}

	if v.DestinationPort == nil {
		return fmt.Errorf("invalid nil key for DestinationPort")
	}

	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: *v.DestinationAddress,
		DestinationPort:    *v.DestinationPort,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[TelemetrySystem_DestinationGroup_Destination_Key]*TelemetrySystem_DestinationGroup_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetGroupId retrieves the value of the leaf GroupId from the TelemetrySystem_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_DestinationGroup) GetGroupId() string {
	if t == nil || t.GroupId == nil {
		return ""
	}
	return *t.GroupId
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_DestinationGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_DestinationGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TelemetrySystem_DestinationGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_DestinationGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_DestinationGroup.
func (*TelemetrySystem_DestinationGroup) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_DestinationGroup_Destination represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination YANG schema element.
type TelemetrySystem_DestinationGroup_Destination struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DestinationAddress  *string           `path:"config/destination-address|destination-address" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛDestinationAddress []ygot.Annotation `path:"config/@destination-address|@destination-address" ygotAnnotation:"true"`
	DestinationPort     *uint16           `path:"config/destination-port|destination-port" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛDestinationPort    []ygot.Annotation `path:"config/@destination-port|@destination-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_DestinationGroup_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_DestinationGroup_Destination) IsYANGGoStruct() {}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the TelemetrySystem_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_DestinationGroup_Destination) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the TelemetrySystem_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_DestinationGroup_Destination) GetDestinationPort() uint16 {
	if t == nil || t.DestinationPort == nil {
		return 0
	}
	return *t.DestinationPort
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_DestinationGroup_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_DestinationGroup_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TelemetrySystem_DestinationGroup_Destination struct, which is a YANG list entry.
func (t *TelemetrySystem_DestinationGroup_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	if t.DestinationPort == nil {
		return nil, fmt.Errorf("nil value for key DestinationPort")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
		"destination-port":    *t.DestinationPort,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_DestinationGroup_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_DestinationGroup_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_DestinationGroup_Destination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_DestinationGroup_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_DestinationGroup_Destination.
func (*TelemetrySystem_DestinationGroup_Destination) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_SensorGroup represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group YANG schema element.
type TelemetrySystem_SensorGroup struct {
	ΛMetadata      []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	SensorGroupId  *string                                            `path:"config/sensor-group-id|sensor-group-id" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛSensorGroupId []ygot.Annotation                                  `path:"config/@sensor-group-id|@sensor-group-id" ygotAnnotation:"true"`
	SensorPath     map[string]*TelemetrySystem_SensorGroup_SensorPath `path:"sensor-paths/sensor-path" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSensorPath    []ygot.Annotation                                  `path:"sensor-paths/@sensor-path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_SensorGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_SensorGroup) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// TelemetrySystem_SensorGroup struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_SensorGroup) NewSensorPath(Path string) (*TelemetrySystem_SensorGroup_SensorPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_SensorGroup_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &TelemetrySystem_SensorGroup_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// RenameSensorPath renames an entry in the list SensorPath within
// the TelemetrySystem_SensorGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_SensorGroup) RenameSensorPath(oldK, newK string) error {
	if _, ok := t.SensorPath[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorPath", newK)
	}

	e, ok := t.SensorPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorPath", oldK)
	}
	e.Path = &newK

	t.SensorPath[newK] = e
	delete(t.SensorPath, oldK)
	return nil
}

// GetOrCreateSensorPath retrieves the value with the specified keys from
// the receiver TelemetrySystem_SensorGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_SensorGroup) GetOrCreateSensorPath(Path string) *TelemetrySystem_SensorGroup_SensorPath {

	key := Path

	if v, ok := t.SensorPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorPath(Path)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorPath got unexpected error: %v", err))
	}
	return v
}

// GetSensorPath retrieves the value with the specified key from
// the SensorPath map field of TelemetrySystem_SensorGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_SensorGroup) GetSensorPath(Path string) *TelemetrySystem_SensorGroup_SensorPath {

	if t == nil {
		return nil
	}

	key := Path

	if lm, ok := t.SensorPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorPath deletes the value with the specified keys from
// the receiver TelemetrySystem_SensorGroup. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_SensorGroup) DeleteSensorPath(Path string) {
	key := Path

	delete(t.SensorPath, key)
}

// AppendSensorPath appends the supplied TelemetrySystem_SensorGroup_SensorPath struct to the
// list SensorPath of TelemetrySystem_SensorGroup. If the key value(s) specified in
// the supplied TelemetrySystem_SensorGroup_SensorPath already exist in the list, an error is
// returned.
func (t *TelemetrySystem_SensorGroup) AppendSensorPath(v *TelemetrySystem_SensorGroup_SensorPath) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key received for Path")
	}

	key := *v.Path

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_SensorGroup_SensorPath)
	}

	if _, ok := t.SensorPath[key]; ok {
		return fmt.Errorf("duplicate key for list SensorPath %v", key)
	}

	t.SensorPath[key] = v
	return nil
}

// GetSensorGroupId retrieves the value of the leaf SensorGroupId from the TelemetrySystem_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SensorGroupId is set, it can
// safely use t.GetSensorGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SensorGroupId == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_SensorGroup) GetSensorGroupId() string {
	if t == nil || t.SensorGroupId == nil {
		return ""
	}
	return *t.SensorGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_SensorGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_SensorGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SensorPath {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TelemetrySystem_SensorGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_SensorGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroupId == nil {
		return nil, fmt.Errorf("nil value for key SensorGroupId")
	}

	return map[string]interface{}{
		"sensor-group-id": *t.SensorGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_SensorGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_SensorGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_SensorGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_SensorGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_SensorGroup.
func (*TelemetrySystem_SensorGroup) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_SensorGroup_SensorPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeFilter  *string           `path:"config/exclude-filter" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛExcludeFilter []ygot.Annotation `path:"config/@exclude-filter" ygotAnnotation:"true"`
	Path           *string           `path:"config/path|path" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛPath          []ygot.Annotation `path:"config/@path|@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_SensorGroup_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_SensorGroup_SensorPath) IsYANGGoStruct() {}

// GetExcludeFilter retrieves the value of the leaf ExcludeFilter from the TelemetrySystem_SensorGroup_SensorPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeFilter is set, it can
// safely use t.GetExcludeFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeFilter == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_SensorGroup_SensorPath) GetExcludeFilter() string {
	if t == nil || t.ExcludeFilter == nil {
		return ""
	}
	return *t.ExcludeFilter
}

// GetPath retrieves the value of the leaf Path from the TelemetrySystem_SensorGroup_SensorPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_SensorGroup_SensorPath) GetPath() string {
	if t == nil || t.Path == nil {
		return ""
	}
	return *t.Path
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_SensorGroup_SensorPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_SensorGroup_SensorPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TelemetrySystem_SensorGroup_SensorPath struct, which is a YANG list entry.
func (t *TelemetrySystem_SensorGroup_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_SensorGroup_SensorPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_SensorGroup_SensorPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_SensorGroup_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_SensorGroup_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_SensorGroup_SensorPath.
func (*TelemetrySystem_SensorGroup_SensorPath) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions represents the /openconfig-telemetry/telemetry-system/subscriptions YANG schema element.
type TelemetrySystem_Subscriptions struct {
	ΛMetadata               []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	DynamicSubscription     map[uint64]*TelemetrySystem_Subscriptions_DynamicSubscription    `path:"dynamic-subscriptions/dynamic-subscription" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDynamicSubscription    []ygot.Annotation                                                `path:"dynamic-subscriptions/@dynamic-subscription" ygotAnnotation:"true"`
	PersistentSubscription  map[string]*TelemetrySystem_Subscriptions_PersistentSubscription `path:"persistent-subscriptions/persistent-subscription" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛPersistentSubscription []ygot.Annotation                                                `path:"persistent-subscriptions/@persistent-subscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions) IsYANGGoStruct() {}

// NewDynamicSubscription creates a new entry in the DynamicSubscription list of the
// TelemetrySystem_Subscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions) NewDynamicSubscription(Id uint64) (*TelemetrySystem_Subscriptions_DynamicSubscription, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicSubscription == nil {
		t.DynamicSubscription = make(map[uint64]*TelemetrySystem_Subscriptions_DynamicSubscription)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DynamicSubscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DynamicSubscription", key)
	}

	t.DynamicSubscription[key] = &TelemetrySystem_Subscriptions_DynamicSubscription{
		Id: &Id,
	}

	return t.DynamicSubscription[key], nil
}

// RenameDynamicSubscription renames an entry in the list DynamicSubscription within
// the TelemetrySystem_Subscriptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_Subscriptions) RenameDynamicSubscription(oldK, newK uint64) error {
	if _, ok := t.DynamicSubscription[newK]; ok {
		return fmt.Errorf("key %v already exists in DynamicSubscription", newK)
	}

	e, ok := t.DynamicSubscription[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DynamicSubscription", oldK)
	}
	e.Id = &newK

	t.DynamicSubscription[newK] = e
	delete(t.DynamicSubscription, oldK)
	return nil
}

// GetOrCreateDynamicSubscription retrieves the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_Subscriptions) GetOrCreateDynamicSubscription(Id uint64) *TelemetrySystem_Subscriptions_DynamicSubscription {

	key := Id

	if v, ok := t.DynamicSubscription[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDynamicSubscription(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDynamicSubscription got unexpected error: %v", err))
	}
	return v
}

// GetDynamicSubscription retrieves the value with the specified key from
// the DynamicSubscription map field of TelemetrySystem_Subscriptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_Subscriptions) GetDynamicSubscription(Id uint64) *TelemetrySystem_Subscriptions_DynamicSubscription {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.DynamicSubscription[key]; ok {
		return lm
	}
	return nil
}

// DeleteDynamicSubscription deletes the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_Subscriptions) DeleteDynamicSubscription(Id uint64) {
	key := Id

	delete(t.DynamicSubscription, key)
}

// AppendDynamicSubscription appends the supplied TelemetrySystem_Subscriptions_DynamicSubscription struct to the
// list DynamicSubscription of TelemetrySystem_Subscriptions. If the key value(s) specified in
// the supplied TelemetrySystem_Subscriptions_DynamicSubscription already exist in the list, an error is
// returned.
func (t *TelemetrySystem_Subscriptions) AppendDynamicSubscription(v *TelemetrySystem_Subscriptions_DynamicSubscription) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicSubscription == nil {
		t.DynamicSubscription = make(map[uint64]*TelemetrySystem_Subscriptions_DynamicSubscription)
	}

	if _, ok := t.DynamicSubscription[key]; ok {
		return fmt.Errorf("duplicate key for list DynamicSubscription %v", key)
	}

	t.DynamicSubscription[key] = v
	return nil
}

// NewPersistentSubscription creates a new entry in the PersistentSubscription list of the
// TelemetrySystem_Subscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions) NewPersistentSubscription(Name string) (*TelemetrySystem_Subscriptions_PersistentSubscription, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PersistentSubscription == nil {
		t.PersistentSubscription = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PersistentSubscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PersistentSubscription", key)
	}

	t.PersistentSubscription[key] = &TelemetrySystem_Subscriptions_PersistentSubscription{
		Name: &Name,
	}

	return t.PersistentSubscription[key], nil
}

// RenamePersistentSubscription renames an entry in the list PersistentSubscription within
// the TelemetrySystem_Subscriptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_Subscriptions) RenamePersistentSubscription(oldK, newK string) error {
	if _, ok := t.PersistentSubscription[newK]; ok {
		return fmt.Errorf("key %v already exists in PersistentSubscription", newK)
	}

	e, ok := t.PersistentSubscription[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PersistentSubscription", oldK)
	}
	e.Name = &newK

	t.PersistentSubscription[newK] = e
	delete(t.PersistentSubscription, oldK)
	return nil
}

// GetOrCreatePersistentSubscription retrieves the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_Subscriptions) GetOrCreatePersistentSubscription(Name string) *TelemetrySystem_Subscriptions_PersistentSubscription {

	key := Name

	if v, ok := t.PersistentSubscription[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPersistentSubscription(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePersistentSubscription got unexpected error: %v", err))
	}
	return v
}

// GetPersistentSubscription retrieves the value with the specified key from
// the PersistentSubscription map field of TelemetrySystem_Subscriptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_Subscriptions) GetPersistentSubscription(Name string) *TelemetrySystem_Subscriptions_PersistentSubscription {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PersistentSubscription[key]; ok {
		return lm
	}
	return nil
}

// DeletePersistentSubscription deletes the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_Subscriptions) DeletePersistentSubscription(Name string) {
	key := Name

	delete(t.PersistentSubscription, key)
}

// AppendPersistentSubscription appends the supplied TelemetrySystem_Subscriptions_PersistentSubscription struct to the
// list PersistentSubscription of TelemetrySystem_Subscriptions. If the key value(s) specified in
// the supplied TelemetrySystem_Subscriptions_PersistentSubscription already exist in the list, an error is
// returned.
func (t *TelemetrySystem_Subscriptions) AppendPersistentSubscription(v *TelemetrySystem_Subscriptions_PersistentSubscription) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PersistentSubscription == nil {
		t.PersistentSubscription = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription)
	}

	if _, ok := t.PersistentSubscription[key]; ok {
		return fmt.Errorf("duplicate key for list PersistentSubscription %v", key)
	}

	t.PersistentSubscription[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DynamicSubscription {
		e.PopulateDefaults()
	}
	for _, e := range t.PersistentSubscription {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions.
func (*TelemetrySystem_Subscriptions) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions_DynamicSubscription represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription struct {
	ΛMetadata             []ygot.Annotation                                                        `path:"@" ygotAnnotation:"true"`
	DestinationAddress    *string                                                                  `path:"state/destination-address" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDestinationAddress   []ygot.Annotation                                                        `path:"state/@destination-address" ygotAnnotation:"true"`
	DestinationPort       *uint16                                                                  `path:"state/destination-port" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDestinationPort      []ygot.Annotation                                                        `path:"state/@destination-port" ygotAnnotation:"true"`
	Encoding              E_TelemetryTypes_DATA_ENCODING_METHOD                                    `path:"state/encoding" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛEncoding             []ygot.Annotation                                                        `path:"state/@encoding" ygotAnnotation:"true"`
	HeartbeatInterval     *uint64                                                                  `path:"state/heartbeat-interval" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛHeartbeatInterval    []ygot.Annotation                                                        `path:"state/@heartbeat-interval" ygotAnnotation:"true"`
	Id                    *uint64                                                                  `path:"state/id|id" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛId                   []ygot.Annotation                                                        `path:"state/@id|@id" ygotAnnotation:"true"`
	OriginatedQosMarking  *uint8                                                                   `path:"state/originated-qos-marking" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛOriginatedQosMarking []ygot.Annotation                                                        `path:"state/@originated-qos-marking" ygotAnnotation:"true"`
	Protocol              E_TelemetryTypes_STREAM_PROTOCOL                                         `path:"state/protocol" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛProtocol             []ygot.Annotation                                                        `path:"state/@protocol" ygotAnnotation:"true"`
	SampleInterval        *uint64                                                                  `path:"state/sample-interval" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSampleInterval       []ygot.Annotation                                                        `path:"state/@sample-interval" ygotAnnotation:"true"`
	SensorPath            map[string]*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath `path:"sensor-paths/sensor-path" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSensorPath           []ygot.Annotation                                                        `path:"sensor-paths/@sensor-path" ygotAnnotation:"true"`
	SuppressRedundant     *bool                                                                    `path:"state/suppress-redundant" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSuppressRedundant    []ygot.Annotation                                                        `path:"state/@suppress-redundant" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_DynamicSubscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_DynamicSubscription) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// TelemetrySystem_Subscriptions_DynamicSubscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) NewSensorPath(Path string) (*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// RenameSensorPath renames an entry in the list SensorPath within
// the TelemetrySystem_Subscriptions_DynamicSubscription struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) RenameSensorPath(oldK, newK string) error {
	if _, ok := t.SensorPath[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorPath", newK)
	}

	e, ok := t.SensorPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorPath", oldK)
	}
	e.Path = &newK

	t.SensorPath[newK] = e
	delete(t.SensorPath, oldK)
	return nil
}

// GetOrCreateSensorPath retrieves the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_DynamicSubscription. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetOrCreateSensorPath(Path string) *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath {

	key := Path

	if v, ok := t.SensorPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorPath(Path)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorPath got unexpected error: %v", err))
	}
	return v
}

// GetSensorPath retrieves the value with the specified key from
// the SensorPath map field of TelemetrySystem_Subscriptions_DynamicSubscription. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetSensorPath(Path string) *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath {

	if t == nil {
		return nil
	}

	key := Path

	if lm, ok := t.SensorPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorPath deletes the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_DynamicSubscription. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) DeleteSensorPath(Path string) {
	key := Path

	delete(t.SensorPath, key)
}

// AppendSensorPath appends the supplied TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath struct to the
// list SensorPath of TelemetrySystem_Subscriptions_DynamicSubscription. If the key value(s) specified in
// the supplied TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath already exist in the list, an error is
// returned.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) AppendSensorPath(v *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) error {
	if v.Path == nil {
		return fmt.Errorf("invalid nil key received for Path")
	}

	key := *v.Path

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath)
	}

	if _, ok := t.SensorPath[key]; ok {
		return fmt.Errorf("duplicate key for list SensorPath %v", key)
	}

	t.SensorPath[key] = v
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetDestinationPort() uint16 {
	if t == nil || t.DestinationPort == nil {
		return 0
	}
	return *t.DestinationPort
}

// GetEncoding retrieves the value of the leaf Encoding from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetEncoding() E_TelemetryTypes_DATA_ENCODING_METHOD {
	if t == nil || t.Encoding == 0 {
		return 0
	}
	return t.Encoding
}

// GetHeartbeatInterval retrieves the value of the leaf HeartbeatInterval from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HeartbeatInterval is set, it can
// safely use t.GetHeartbeatInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HeartbeatInterval == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetHeartbeatInterval() uint64 {
	if t == nil || t.HeartbeatInterval == nil {
		return 0
	}
	return *t.HeartbeatInterval
}

// GetId retrieves the value of the leaf Id from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetId() uint64 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetOriginatedQosMarking retrieves the value of the leaf OriginatedQosMarking from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatedQosMarking is set, it can
// safely use t.GetOriginatedQosMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatedQosMarking == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetOriginatedQosMarking() uint8 {
	if t == nil || t.OriginatedQosMarking == nil {
		return 0
	}
	return *t.OriginatedQosMarking
}

// GetProtocol retrieves the value of the leaf Protocol from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetProtocol() E_TelemetryTypes_STREAM_PROTOCOL {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetSampleInterval() uint64 {
	if t == nil || t.SampleInterval == nil {
		return 0
	}
	return *t.SampleInterval
}

// GetSuppressRedundant retrieves the value of the leaf SuppressRedundant from the TelemetrySystem_Subscriptions_DynamicSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressRedundant is set, it can
// safely use t.GetSuppressRedundant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressRedundant == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) GetSuppressRedundant() bool {
	if t == nil || t.SuppressRedundant == nil {
		return false
	}
	return *t.SuppressRedundant
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions_DynamicSubscription
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SensorPath {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_DynamicSubscription struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_DynamicSubscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions_DynamicSubscription.
func (*TelemetrySystem_Subscriptions_DynamicSubscription) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExcludeFilter  *string           `path:"state/exclude-filter" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛExcludeFilter []ygot.Annotation `path:"state/@exclude-filter" ygotAnnotation:"true"`
	Path           *string           `path:"state/path|path" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛPath          []ygot.Annotation `path:"state/@path|@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) IsYANGGoStruct() {}

// GetExcludeFilter retrieves the value of the leaf ExcludeFilter from the TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeFilter is set, it can
// safely use t.GetExcludeFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeFilter == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) GetExcludeFilter() string {
	if t == nil || t.ExcludeFilter == nil {
		return ""
	}
	return *t.ExcludeFilter
}

// GetPath retrieves the value of the leaf Path from the TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) GetPath() string {
	if t == nil || t.Path == nil {
		return ""
	}
	return *t.Path
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath.
func (*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions_PersistentSubscription represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription struct {
	ΛMetadata             []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	DestinationGroup      map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup `path:"destination-groups/destination-group" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛDestinationGroup     []ygot.Annotation                                                                 `path:"destination-groups/@destination-group" ygotAnnotation:"true"`
	Encoding              E_TelemetryTypes_DATA_ENCODING_METHOD                                             `path:"config/encoding" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛEncoding             []ygot.Annotation                                                                 `path:"config/@encoding" ygotAnnotation:"true"`
	Id                    *uint64                                                                           `path:"state/id" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛId                   []ygot.Annotation                                                                 `path:"state/@id" ygotAnnotation:"true"`
	LocalSourceAddress    *string                                                                           `path:"config/local-source-address" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛLocalSourceAddress   []ygot.Annotation                                                                 `path:"config/@local-source-address" ygotAnnotation:"true"`
	Name                  *string                                                                           `path:"config/name|name" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛName                 []ygot.Annotation                                                                 `path:"config/@name|@name" ygotAnnotation:"true"`
	OriginatedQosMarking  *uint8                                                                            `path:"config/originated-qos-marking" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛOriginatedQosMarking []ygot.Annotation                                                                 `path:"config/@originated-qos-marking" ygotAnnotation:"true"`
	Protocol              E_TelemetryTypes_STREAM_PROTOCOL                                                  `path:"config/protocol" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛProtocol             []ygot.Annotation                                                                 `path:"config/@protocol" ygotAnnotation:"true"`
	SensorProfile         map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile    `path:"sensor-profiles/sensor-profile" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSensorProfile        []ygot.Annotation                                                                 `path:"sensor-profiles/@sensor-profile" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_PersistentSubscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_PersistentSubscription) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// TelemetrySystem_Subscriptions_PersistentSubscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) NewDestinationGroup(GroupId string) (*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// RenameDestinationGroup renames an entry in the list DestinationGroup within
// the TelemetrySystem_Subscriptions_PersistentSubscription struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) RenameDestinationGroup(oldK, newK string) error {
	if _, ok := t.DestinationGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationGroup", newK)
	}

	e, ok := t.DestinationGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationGroup", oldK)
	}
	e.GroupId = &newK

	t.DestinationGroup[newK] = e
	delete(t.DestinationGroup, oldK)
	return nil
}

// GetOrCreateDestinationGroup retrieves the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_PersistentSubscription. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetOrCreateDestinationGroup(GroupId string) *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup {

	key := GroupId

	if v, ok := t.DestinationGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationGroup got unexpected error: %v", err))
	}
	return v
}

// GetDestinationGroup retrieves the value with the specified key from
// the DestinationGroup map field of TelemetrySystem_Subscriptions_PersistentSubscription. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetDestinationGroup(GroupId string) *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.DestinationGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationGroup deletes the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_PersistentSubscription. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) DeleteDestinationGroup(GroupId string) {
	key := GroupId

	delete(t.DestinationGroup, key)
}

// AppendDestinationGroup appends the supplied TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup struct to the
// list DestinationGroup of TelemetrySystem_Subscriptions_PersistentSubscription. If the key value(s) specified in
// the supplied TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup already exist in the list, an error is
// returned.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) AppendDestinationGroup(v *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup)
	}

	if _, ok := t.DestinationGroup[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationGroup %v", key)
	}

	t.DestinationGroup[key] = v
	return nil
}

// NewSensorProfile creates a new entry in the SensorProfile list of the
// TelemetrySystem_Subscriptions_PersistentSubscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) NewSensorProfile(SensorGroup string) (*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorProfile == nil {
		t.SensorProfile = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile)
	}

	key := SensorGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorProfile", key)
	}

	t.SensorProfile[key] = &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile{
		SensorGroup: &SensorGroup,
	}

	return t.SensorProfile[key], nil
}

// RenameSensorProfile renames an entry in the list SensorProfile within
// the TelemetrySystem_Subscriptions_PersistentSubscription struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) RenameSensorProfile(oldK, newK string) error {
	if _, ok := t.SensorProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorProfile", newK)
	}

	e, ok := t.SensorProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorProfile", oldK)
	}
	e.SensorGroup = &newK

	t.SensorProfile[newK] = e
	delete(t.SensorProfile, oldK)
	return nil
}

// GetOrCreateSensorProfile retrieves the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_PersistentSubscription. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetOrCreateSensorProfile(SensorGroup string) *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile {

	key := SensorGroup

	if v, ok := t.SensorProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorProfile(SensorGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorProfile got unexpected error: %v", err))
	}
	return v
}

// GetSensorProfile retrieves the value with the specified key from
// the SensorProfile map field of TelemetrySystem_Subscriptions_PersistentSubscription. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetSensorProfile(SensorGroup string) *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile {

	if t == nil {
		return nil
	}

	key := SensorGroup

	if lm, ok := t.SensorProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorProfile deletes the value with the specified keys from
// the receiver TelemetrySystem_Subscriptions_PersistentSubscription. If there is no such element, the function
// is a no-op.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) DeleteSensorProfile(SensorGroup string) {
	key := SensorGroup

	delete(t.SensorProfile, key)
}

// AppendSensorProfile appends the supplied TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile struct to the
// list SensorProfile of TelemetrySystem_Subscriptions_PersistentSubscription. If the key value(s) specified in
// the supplied TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile already exist in the list, an error is
// returned.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) AppendSensorProfile(v *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) error {
	if v.SensorGroup == nil {
		return fmt.Errorf("invalid nil key received for SensorGroup")
	}

	key := *v.SensorGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorProfile == nil {
		t.SensorProfile = make(map[string]*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile)
	}

	if _, ok := t.SensorProfile[key]; ok {
		return fmt.Errorf("duplicate key for list SensorProfile %v", key)
	}

	t.SensorProfile[key] = v
	return nil
}

// GetEncoding retrieves the value of the leaf Encoding from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetEncoding() E_TelemetryTypes_DATA_ENCODING_METHOD {
	if t == nil || t.Encoding == 0 {
		return 0
	}
	return t.Encoding
}

// GetId retrieves the value of the leaf Id from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetId() uint64 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetLocalSourceAddress retrieves the value of the leaf LocalSourceAddress from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSourceAddress is set, it can
// safely use t.GetLocalSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSourceAddress == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetLocalSourceAddress() string {
	if t == nil || t.LocalSourceAddress == nil {
		return ""
	}
	return *t.LocalSourceAddress
}

// GetName retrieves the value of the leaf Name from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginatedQosMarking retrieves the value of the leaf OriginatedQosMarking from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatedQosMarking is set, it can
// safely use t.GetOriginatedQosMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatedQosMarking == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetOriginatedQosMarking() uint8 {
	if t == nil || t.OriginatedQosMarking == nil {
		return 0
	}
	return *t.OriginatedQosMarking
}

// GetProtocol retrieves the value of the leaf Protocol from the TelemetrySystem_Subscriptions_PersistentSubscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) GetProtocol() E_TelemetryTypes_STREAM_PROTOCOL {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions_PersistentSubscription
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestinationGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SensorProfile {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_PersistentSubscription struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_PersistentSubscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions_PersistentSubscription.
func (*TelemetrySystem_Subscriptions_PersistentSubscription) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	GroupId   *string           `path:"config/group-id|group-id" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛGroupId  []ygot.Annotation `path:"config/@group-id|@group-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) IsYANGGoStruct() {}

// GetGroupId retrieves the value of the leaf GroupId from the TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) GetGroupId() string {
	if t == nil || t.GroupId == nil {
		return ""
	}
	return *t.GroupId
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup.
func (*TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HeartbeatInterval  *uint64           `path:"config/heartbeat-interval" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛHeartbeatInterval []ygot.Annotation `path:"config/@heartbeat-interval" ygotAnnotation:"true"`
	SampleInterval     *uint64           `path:"config/sample-interval" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSampleInterval    []ygot.Annotation `path:"config/@sample-interval" ygotAnnotation:"true"`
	SensorGroup        *string           `path:"config/sensor-group|sensor-group" module:"openconfig-telemetry/openconfig-telemetry|openconfig-telemetry"`
	ΛSensorGroup       []ygot.Annotation `path:"config/@sensor-group|@sensor-group" ygotAnnotation:"true"`
	SuppressRedundant  *bool             `path:"config/suppress-redundant" module:"openconfig-telemetry/openconfig-telemetry"`
	ΛSuppressRedundant []ygot.Annotation `path:"config/@suppress-redundant" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) IsYANGGoStruct() {}

// GetHeartbeatInterval retrieves the value of the leaf HeartbeatInterval from the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HeartbeatInterval is set, it can
// safely use t.GetHeartbeatInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HeartbeatInterval == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) GetHeartbeatInterval() uint64 {
	if t == nil || t.HeartbeatInterval == nil {
		return 0
	}
	return *t.HeartbeatInterval
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) GetSampleInterval() uint64 {
	if t == nil || t.SampleInterval == nil {
		return 0
	}
	return *t.SampleInterval
}

// GetSensorGroup retrieves the value of the leaf SensorGroup from the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SensorGroup is set, it can
// safely use t.GetSensorGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SensorGroup == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) GetSensorGroup() string {
	if t == nil || t.SensorGroup == nil {
		return ""
	}
	return *t.SensorGroup
}

// GetSuppressRedundant retrieves the value of the leaf SuppressRedundant from the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressRedundant is set, it can
// safely use t.GetSuppressRedundant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressRedundant == nil' before retrieving the leaf's value.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) GetSuppressRedundant() bool {
	if t == nil || t.SuppressRedundant == nil {
		return false
	}
	return *t.SuppressRedundant
}

// PopulateDefaults recursively populates unset leaf fields in the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroup == nil {
		return nil, fmt.Errorf("nil value for key SensorGroup")
	}

	return map[string]interface{}{
		"sensor-group": *t.SensorGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile.
func (*TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile) ΛBelongingModule() string {
	return "openconfig-telemetry"
}

// TerminalDevice represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevice struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Channel   map[uint32]*TerminalDevice_Channel `path:"logical-channels/channel" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛChannel  []ygot.Annotation                  `path:"logical-channels/@channel" ygotAnnotation:"true"`
	Mode      map[uint16]*TerminalDevice_Mode    `path:"operational-modes/mode" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛMode     []ygot.Annotation                  `path:"operational-modes/@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// TerminalDevice struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice) NewChannel(Index uint32) (*TerminalDevice_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*TerminalDevice_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &TerminalDevice_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the TerminalDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice) RenameChannel(oldK, newK uint32) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver TerminalDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice) GetOrCreateChannel(Index uint32) *TerminalDevice_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of TerminalDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice) GetChannel(Index uint32) *TerminalDevice_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver TerminalDevice. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice) DeleteChannel(Index uint32) {
	key := Index

	delete(t.Channel, key)
}

// AppendChannel appends the supplied TerminalDevice_Channel struct to the
// list Channel of TerminalDevice. If the key value(s) specified in
// the supplied TerminalDevice_Channel already exist in the list, an error is
// returned.
func (t *TerminalDevice) AppendChannel(v *TerminalDevice_Channel) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*TerminalDevice_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// NewMode creates a new entry in the Mode list of the
// TerminalDevice struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice) NewMode(ModeId uint16) (*TerminalDevice_Mode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*TerminalDevice_Mode)
	}

	key := ModeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mode", key)
	}

	t.Mode[key] = &TerminalDevice_Mode{
		ModeId: &ModeId,
	}

	return t.Mode[key], nil
}

// RenameMode renames an entry in the list Mode within
// the TerminalDevice struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice) RenameMode(oldK, newK uint16) error {
	if _, ok := t.Mode[newK]; ok {
		return fmt.Errorf("key %v already exists in Mode", newK)
	}

	e, ok := t.Mode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mode", oldK)
	}
	e.ModeId = &newK

	t.Mode[newK] = e
	delete(t.Mode, oldK)
	return nil
}

// GetOrCreateMode retrieves the value with the specified keys from
// the receiver TerminalDevice. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice) GetOrCreateMode(ModeId uint16) *TerminalDevice_Mode {

	key := ModeId

	if v, ok := t.Mode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMode(ModeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMode got unexpected error: %v", err))
	}
	return v
}

// GetMode retrieves the value with the specified key from
// the Mode map field of TerminalDevice. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice) GetMode(ModeId uint16) *TerminalDevice_Mode {

	if t == nil {
		return nil
	}

	key := ModeId

	if lm, ok := t.Mode[key]; ok {
		return lm
	}
	return nil
}

// DeleteMode deletes the value with the specified keys from
// the receiver TerminalDevice. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice) DeleteMode(ModeId uint16) {
	key := ModeId

	delete(t.Mode, key)
}

// AppendMode appends the supplied TerminalDevice_Mode struct to the
// list Mode of TerminalDevice. If the key value(s) specified in
// the supplied TerminalDevice_Mode already exist in the list, an error is
// returned.
func (t *TerminalDevice) AppendMode(v *TerminalDevice_Mode) error {
	if v.ModeId == nil {
		return fmt.Errorf("invalid nil key received for ModeId")
	}

	key := *v.ModeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*TerminalDevice_Mode)
	}

	if _, ok := t.Mode[key]; ok {
		return fmt.Errorf("duplicate key for list Mode %v", key)
	}

	t.Mode[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
	for _, e := range t.Mode {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice.
func (*TerminalDevice) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_Channel struct {
	ΛMetadata           []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	AdminState          E_TransportTypes_AdminStateType                `path:"config/admin-state" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAdminState         []ygot.Annotation                              `path:"config/@admin-state" ygotAnnotation:"true"`
	Assignment          map[uint32]*TerminalDevice_Channel_Assignment  `path:"logical-channel-assignments/assignment" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAssignment         []ygot.Annotation                              `path:"logical-channel-assignments/@assignment" ygotAnnotation:"true"`
	ClientMappingMode   E_TransportTypes_CLIENT_MAPPING_MODE           `path:"config/client-mapping-mode" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛClientMappingMode  []ygot.Annotation                              `path:"config/@client-mapping-mode" ygotAnnotation:"true"`
	Description         *string                                        `path:"config/description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                              `path:"config/@description" ygotAnnotation:"true"`
	Ethernet            *TerminalDevice_Channel_Ethernet               `path:"ethernet" module:"openconfig-terminal-device"`
	ΛEthernet           []ygot.Annotation                              `path:"@ethernet" ygotAnnotation:"true"`
	Index               *uint32                                        `path:"config/index|index" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                              `path:"config/@index|@index" ygotAnnotation:"true"`
	Ingress             *TerminalDevice_Channel_Ingress                `path:"ingress" module:"openconfig-terminal-device"`
	ΛIngress            []ygot.Annotation                              `path:"@ingress" ygotAnnotation:"true"`
	LinkState           E_Channel_LinkState                            `path:"state/link-state" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLinkState          []ygot.Annotation                              `path:"state/@link-state" ygotAnnotation:"true"`
	LogicalChannelType  E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE `path:"config/logical-channel-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLogicalChannelType []ygot.Annotation                              `path:"config/@logical-channel-type" ygotAnnotation:"true"`
	LoopbackMode        E_TransportTypes_LoopbackModeType              `path:"config/loopback-mode" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLoopbackMode       []ygot.Annotation                              `path:"config/@loopback-mode" ygotAnnotation:"true"`
	Otn                 *TerminalDevice_Channel_Otn                    `path:"otn" module:"openconfig-terminal-device"`
	ΛOtn                []ygot.Annotation                              `path:"@otn" ygotAnnotation:"true"`
	RateClass           E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE     `path:"config/rate-class" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛRateClass          []ygot.Annotation                              `path:"config/@rate-class" ygotAnnotation:"true"`
	TestSignal          *bool                                          `path:"config/test-signal" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTestSignal         []ygot.Annotation                              `path:"config/@test-signal" ygotAnnotation:"true"`
	TribProtocol        E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE       `path:"config/trib-protocol" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTribProtocol       []ygot.Annotation                              `path:"config/@trib-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel) IsYANGGoStruct() {}

// NewAssignment creates a new entry in the Assignment list of the
// TerminalDevice_Channel struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel) NewAssignment(Index uint32) (*TerminalDevice_Channel_Assignment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*TerminalDevice_Channel_Assignment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Assignment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Assignment", key)
	}

	t.Assignment[key] = &TerminalDevice_Channel_Assignment{
		Index: &Index,
	}

	return t.Assignment[key], nil
}

// RenameAssignment renames an entry in the list Assignment within
// the TerminalDevice_Channel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel) RenameAssignment(oldK, newK uint32) error {
	if _, ok := t.Assignment[newK]; ok {
		return fmt.Errorf("key %v already exists in Assignment", newK)
	}

	e, ok := t.Assignment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Assignment", oldK)
	}
	e.Index = &newK

	t.Assignment[newK] = e
	delete(t.Assignment, oldK)
	return nil
}

// GetOrCreateAssignment retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel) GetOrCreateAssignment(Index uint32) *TerminalDevice_Channel_Assignment {

	key := Index

	if v, ok := t.Assignment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssignment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssignment got unexpected error: %v", err))
	}
	return v
}

// GetAssignment retrieves the value with the specified key from
// the Assignment map field of TerminalDevice_Channel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel) GetAssignment(Index uint32) *TerminalDevice_Channel_Assignment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Assignment[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssignment deletes the value with the specified keys from
// the receiver TerminalDevice_Channel. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel) DeleteAssignment(Index uint32) {
	key := Index

	delete(t.Assignment, key)
}

// AppendAssignment appends the supplied TerminalDevice_Channel_Assignment struct to the
// list Assignment of TerminalDevice_Channel. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Assignment already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel) AppendAssignment(v *TerminalDevice_Channel_Assignment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*TerminalDevice_Channel_Assignment)
	}

	if _, ok := t.Assignment[key]; ok {
		return fmt.Errorf("duplicate key for list Assignment %v", key)
	}

	t.Assignment[key] = v
	return nil
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateEthernet() *TerminalDevice_Channel_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &TerminalDevice_Channel_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateIngress() *TerminalDevice_Channel_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &TerminalDevice_Channel_Ingress{}
	return t.Ingress
}

// GetOrCreateOtn retrieves the value of the Otn field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel) GetOrCreateOtn() *TerminalDevice_Channel_Otn {
	if t.Otn != nil {
		return t.Otn
	}
	t.Otn = &TerminalDevice_Channel_Otn{}
	return t.Otn
}

// GetEthernet returns the value of the Ethernet struct pointer
// from TerminalDevice_Channel. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetEthernet() *TerminalDevice_Channel_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from TerminalDevice_Channel. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetIngress() *TerminalDevice_Channel_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetOtn returns the value of the Otn struct pointer
// from TerminalDevice_Channel. If the receiver or the field Otn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel) GetOtn() *TerminalDevice_Channel_Otn {
	if t != nil && t.Otn != nil {
		return t.Otn
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetAdminState() E_TransportTypes_AdminStateType {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetClientMappingMode retrieves the value of the leaf ClientMappingMode from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMappingMode is set, it can
// safely use t.GetClientMappingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMappingMode == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetClientMappingMode() E_TransportTypes_CLIENT_MAPPING_MODE {
	if t == nil || t.ClientMappingMode == 0 {
		return 0
	}
	return t.ClientMappingMode
}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLinkState retrieves the value of the leaf LinkState from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkState is set, it can
// safely use t.GetLinkState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkState == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLinkState() E_Channel_LinkState {
	if t == nil || t.LinkState == 0 {
		return 0
	}
	return t.LinkState
}

// GetLogicalChannelType retrieves the value of the leaf LogicalChannelType from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalChannelType is set, it can
// safely use t.GetLogicalChannelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalChannelType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLogicalChannelType() E_TransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE {
	if t == nil || t.LogicalChannelType == 0 {
		return 0
	}
	return t.LogicalChannelType
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackMode is set, it can
// safely use t.GetLoopbackMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackMode == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetLoopbackMode() E_TransportTypes_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return TransportTypes_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetRateClass retrieves the value of the leaf RateClass from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateClass is set, it can
// safely use t.GetRateClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateClass == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetRateClass() E_TransportTypes_TRIBUTARY_RATE_CLASS_TYPE {
	if t == nil || t.RateClass == 0 {
		return 0
	}
	return t.RateClass
}

// GetTestSignal retrieves the value of the leaf TestSignal from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestSignal is set, it can
// safely use t.GetTestSignal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestSignal == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// GetTribProtocol retrieves the value of the leaf TribProtocol from the TerminalDevice_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TribProtocol is set, it can
// safely use t.GetTribProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TribProtocol == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel) GetTribProtocol() E_TransportTypes_TRIBUTARY_PROTOCOL_TYPE {
	if t == nil || t.TribProtocol == 0 {
		return 0
	}
	return t.TribProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoopbackMode == 0 {
		t.LoopbackMode = TransportTypes_LoopbackModeType_NONE
	}
	t.Ethernet.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Otn.PopulateDefaults()
	for _, e := range t.Assignment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel struct, which is a YANG list entry.
func (t *TerminalDevice_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel.
func (*TerminalDevice_Channel) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Assignment represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_Assignment struct {
	ΛMetadata           []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	Allocation          *float64                                `path:"config/allocation" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAllocation         []ygot.Annotation                       `path:"config/@allocation" ygotAnnotation:"true"`
	AssignmentType      E_Assignment_AssignmentType             `path:"config/assignment-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAssignmentType     []ygot.Annotation                       `path:"config/@assignment-type" ygotAnnotation:"true"`
	Description         *string                                 `path:"config/description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                       `path:"config/@description" ygotAnnotation:"true"`
	Index               *uint32                                 `path:"config/index|index" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                       `path:"config/@index|@index" ygotAnnotation:"true"`
	LogicalChannel      *uint32                                 `path:"config/logical-channel" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLogicalChannel     []ygot.Annotation                       `path:"config/@logical-channel" ygotAnnotation:"true"`
	Mapping             E_TransportTypes_FRAME_MAPPING_PROTOCOL `path:"config/mapping" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛMapping            []ygot.Annotation                       `path:"config/@mapping" ygotAnnotation:"true"`
	OpticalChannel      *string                                 `path:"config/optical-channel" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOpticalChannel     []ygot.Annotation                       `path:"config/@optical-channel" ygotAnnotation:"true"`
	TributarySlotIndex  *int32                                  `path:"config/tributary-slot-index" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTributarySlotIndex []ygot.Annotation                       `path:"config/@tributary-slot-index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Assignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Assignment) IsYANGGoStruct() {}

// GetAllocation retrieves the value of the leaf Allocation from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Allocation is set, it can
// safely use t.GetAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Allocation == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetAllocation() float64 {
	if t == nil || t.Allocation == nil {
		return 0.0
	}
	return *t.Allocation
}

// GetAssignmentType retrieves the value of the leaf AssignmentType from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssignmentType is set, it can
// safely use t.GetAssignmentType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssignmentType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetAssignmentType() E_Assignment_AssignmentType {
	if t == nil || t.AssignmentType == 0 {
		return 0
	}
	return t.AssignmentType
}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLogicalChannel retrieves the value of the leaf LogicalChannel from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalChannel is set, it can
// safely use t.GetLogicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetLogicalChannel() uint32 {
	if t == nil || t.LogicalChannel == nil {
		return 0
	}
	return *t.LogicalChannel
}

// GetMapping retrieves the value of the leaf Mapping from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mapping is set, it can
// safely use t.GetMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mapping == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetMapping() E_TransportTypes_FRAME_MAPPING_PROTOCOL {
	if t == nil || t.Mapping == 0 {
		return 0
	}
	return t.Mapping
}

// GetOpticalChannel retrieves the value of the leaf OpticalChannel from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpticalChannel is set, it can
// safely use t.GetOpticalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpticalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetOpticalChannel() string {
	if t == nil || t.OpticalChannel == nil {
		return ""
	}
	return *t.OpticalChannel
}

// GetTributarySlotIndex retrieves the value of the leaf TributarySlotIndex from the TerminalDevice_Channel_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TributarySlotIndex is set, it can
// safely use t.GetTributarySlotIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TributarySlotIndex == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Assignment) GetTributarySlotIndex() int32 {
	if t == nil || t.TributarySlotIndex == nil {
		return 0
	}
	return *t.TributarySlotIndex
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Assignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Assignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Assignment struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Assignment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Assignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Assignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Assignment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Assignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Assignment.
func (*TerminalDevice_Channel_Assignment) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_Ethernet struct {
	ΛMetadata                    []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	AlsDelay                     *uint32                                     `path:"config/als-delay" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAlsDelay                    []ygot.Annotation                           `path:"config/@als-delay" ygotAnnotation:"true"`
	ClientAls                    E_Ethernet_ClientAls                        `path:"config/client-als" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛClientAls                   []ygot.Annotation                           `path:"config/@client-als" ygotAnnotation:"true"`
	Esnr                         *TerminalDevice_Channel_Ethernet_Esnr       `path:"state/esnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛEsnr                        []ygot.Annotation                           `path:"state/@esnr" ygotAnnotation:"true"`
	FecUncorrectableBlocks       *uint64                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecUncorrectableBlocks      []ygot.Annotation                           `path:"state/@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	In_8021QFrames               *uint64                                     `path:"state/in-8021q-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛIn_8021QFrames              []ygot.Annotation                           `path:"state/@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors                *uint64                                     `path:"state/in-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInBlockErrors               []ygot.Annotation                           `path:"state/@in-block-errors" ygotAnnotation:"true"`
	InCarrierErrors              *uint64                                     `path:"state/in-carrier-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInCarrierErrors             []ygot.Annotation                           `path:"state/@in-carrier-errors" ygotAnnotation:"true"`
	InCrcErrors                  *uint64                                     `path:"state/in-crc-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInCrcErrors                 []ygot.Annotation                           `path:"state/@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames             *uint64                                     `path:"state/in-fragment-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInFragmentFrames            []ygot.Annotation                           `path:"state/@in-fragment-frames" ygotAnnotation:"true"`
	InInterruptedTx              *uint64                                     `path:"state/in-interrupted-tx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInInterruptedTx             []ygot.Annotation                           `path:"state/@in-interrupted-tx" ygotAnnotation:"true"`
	InJabberFrames               *uint64                                     `path:"state/in-jabber-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInJabberFrames              []ygot.Annotation                           `path:"state/@in-jabber-frames" ygotAnnotation:"true"`
	InLateCollision              *uint64                                     `path:"state/in-late-collision" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInLateCollision             []ygot.Annotation                           `path:"state/@in-late-collision" ygotAnnotation:"true"`
	InMacControlFrames           *uint64                                     `path:"state/in-mac-control-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInMacControlFrames          []ygot.Annotation                           `path:"state/@in-mac-control-frames" ygotAnnotation:"true"`
	InMacErrorsRx                *uint64                                     `path:"state/in-mac-errors-rx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInMacErrorsRx               []ygot.Annotation                           `path:"state/@in-mac-errors-rx" ygotAnnotation:"true"`
	InMacPauseFrames             *uint64                                     `path:"state/in-mac-pause-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInMacPauseFrames            []ygot.Annotation                           `path:"state/@in-mac-pause-frames" ygotAnnotation:"true"`
	InMaxsizeExceeded            *uint64                                     `path:"state/in-maxsize-exceeded" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInMaxsizeExceeded           []ygot.Annotation                           `path:"state/@in-maxsize-exceeded" ygotAnnotation:"true"`
	InOversizeFrames             *uint64                                     `path:"state/in-oversize-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInOversizeFrames            []ygot.Annotation                           `path:"state/@in-oversize-frames" ygotAnnotation:"true"`
	InPcsBipErrors               *uint64                                     `path:"state/in-pcs-bip-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInPcsBipErrors              []ygot.Annotation                           `path:"state/@in-pcs-bip-errors" ygotAnnotation:"true"`
	InPcsErroredSeconds          *uint64                                     `path:"state/in-pcs-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInPcsErroredSeconds         []ygot.Annotation                           `path:"state/@in-pcs-errored-seconds" ygotAnnotation:"true"`
	InPcsSeverelyErroredSeconds  *uint64                                     `path:"state/in-pcs-severely-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInPcsSeverelyErroredSeconds []ygot.Annotation                           `path:"state/@in-pcs-severely-errored-seconds" ygotAnnotation:"true"`
	InPcsUnavailableSeconds      *uint64                                     `path:"state/in-pcs-unavailable-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInPcsUnavailableSeconds     []ygot.Annotation                           `path:"state/@in-pcs-unavailable-seconds" ygotAnnotation:"true"`
	InSingleCollision            *uint64                                     `path:"state/in-single-collision" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInSingleCollision           []ygot.Annotation                           `path:"state/@in-single-collision" ygotAnnotation:"true"`
	InSymbolError                *uint64                                     `path:"state/in-symbol-error" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInSymbolError               []ygot.Annotation                           `path:"state/@in-symbol-error" ygotAnnotation:"true"`
	InUndersizeFrames            *uint64                                     `path:"state/in-undersize-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInUndersizeFrames           []ygot.Annotation                           `path:"state/@in-undersize-frames" ygotAnnotation:"true"`
	Lldp                         *TerminalDevice_Channel_Ethernet_Lldp       `path:"lldp" module:"openconfig-terminal-device"`
	ΛLldp                        []ygot.Annotation                           `path:"@lldp" ygotAnnotation:"true"`
	Out_8021QFrames              *uint64                                     `path:"state/out-8021q-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOut_8021QFrames             []ygot.Annotation                           `path:"state/@out-8021q-frames" ygotAnnotation:"true"`
	OutBlockErrors               *uint64                                     `path:"state/out-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutBlockErrors              []ygot.Annotation                           `path:"state/@out-block-errors" ygotAnnotation:"true"`
	OutCrcErrors                 *uint64                                     `path:"state/out-crc-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutCrcErrors                []ygot.Annotation                           `path:"state/@out-crc-errors" ygotAnnotation:"true"`
	OutMacControlFrames          *uint64                                     `path:"state/out-mac-control-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutMacControlFrames         []ygot.Annotation                           `path:"state/@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacErrorsTx               *uint64                                     `path:"state/out-mac-errors-tx" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutMacErrorsTx              []ygot.Annotation                           `path:"state/@out-mac-errors-tx" ygotAnnotation:"true"`
	OutMacPauseFrames            *uint64                                     `path:"state/out-mac-pause-frames" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutMacPauseFrames           []ygot.Annotation                           `path:"state/@out-mac-pause-frames" ygotAnnotation:"true"`
	OutPcsBipErrors              *uint64                                     `path:"state/out-pcs-bip-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutPcsBipErrors             []ygot.Annotation                           `path:"state/@out-pcs-bip-errors" ygotAnnotation:"true"`
	PostFecBer                   *TerminalDevice_Channel_Ethernet_PostFecBer `path:"state/post-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPostFecBer                  []ygot.Annotation                           `path:"state/@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer                    *TerminalDevice_Channel_Ethernet_PreFecBer  `path:"state/pre-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPreFecBer                   []ygot.Annotation                           `path:"state/@pre-fec-ber" ygotAnnotation:"true"`
	QValue                       *TerminalDevice_Channel_Ethernet_QValue     `path:"state/q-value" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛQValue                      []ygot.Annotation                           `path:"state/@q-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet) IsYANGGoStruct() {}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateEsnr() *TerminalDevice_Channel_Ethernet_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &TerminalDevice_Channel_Ethernet_Esnr{}
	return t.Esnr
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateLldp() *TerminalDevice_Channel_Ethernet_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &TerminalDevice_Channel_Ethernet_Lldp{}
	return t.Lldp
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreatePostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &TerminalDevice_Channel_Ethernet_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreatePreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &TerminalDevice_Channel_Ethernet_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet) GetOrCreateQValue() *TerminalDevice_Channel_Ethernet_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &TerminalDevice_Channel_Ethernet_QValue{}
	return t.QValue
}

// GetEsnr returns the value of the Esnr struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetEsnr() *TerminalDevice_Channel_Ethernet_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetLldp() *TerminalDevice_Channel_Ethernet_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetPostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetPreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from TerminalDevice_Channel_Ethernet. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet) GetQValue() *TerminalDevice_Channel_Ethernet_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetAlsDelay retrieves the value of the leaf AlsDelay from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlsDelay is set, it can
// safely use t.GetAlsDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlsDelay == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetAlsDelay() uint32 {
	if t == nil || t.AlsDelay == nil {
		return 0
	}
	return *t.AlsDelay
}

// GetClientAls retrieves the value of the leaf ClientAls from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientAls is set, it can
// safely use t.GetClientAls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientAls == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetClientAls() E_Ethernet_ClientAls {
	if t == nil || t.ClientAls == 0 {
		return Ethernet_ClientAls_ETHERNET
	}
	return t.ClientAls
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if In_8021QFrames is set, it can
// safely use t.GetIn_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.In_8021QFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBlockErrors is set, it can
// safely use t.GetInBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCarrierErrors retrieves the value of the leaf InCarrierErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCarrierErrors is set, it can
// safely use t.GetInCarrierErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCarrierErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInCarrierErrors() uint64 {
	if t == nil || t.InCarrierErrors == nil {
		return 0
	}
	return *t.InCarrierErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCrcErrors is set, it can
// safely use t.GetInCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCrcErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFragmentFrames is set, it can
// safely use t.GetInFragmentFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFragmentFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInInterruptedTx retrieves the value of the leaf InInterruptedTx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterruptedTx is set, it can
// safely use t.GetInInterruptedTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterruptedTx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInInterruptedTx() uint64 {
	if t == nil || t.InInterruptedTx == nil {
		return 0
	}
	return *t.InInterruptedTx
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InJabberFrames is set, it can
// safely use t.GetInJabberFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InJabberFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInLateCollision retrieves the value of the leaf InLateCollision from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLateCollision is set, it can
// safely use t.GetInLateCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLateCollision == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInLateCollision() uint64 {
	if t == nil || t.InLateCollision == nil {
		return 0
	}
	return *t.InLateCollision
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacControlFrames is set, it can
// safely use t.GetInMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacControlFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacErrorsRx retrieves the value of the leaf InMacErrorsRx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacErrorsRx is set, it can
// safely use t.GetInMacErrorsRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacErrorsRx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacErrorsRx() uint64 {
	if t == nil || t.InMacErrorsRx == nil {
		return 0
	}
	return *t.InMacErrorsRx
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacPauseFrames is set, it can
// safely use t.GetInMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacPauseFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInMaxsizeExceeded retrieves the value of the leaf InMaxsizeExceeded from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMaxsizeExceeded is set, it can
// safely use t.GetInMaxsizeExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMaxsizeExceeded == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInMaxsizeExceeded() uint64 {
	if t == nil || t.InMaxsizeExceeded == nil {
		return 0
	}
	return *t.InMaxsizeExceeded
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOversizeFrames is set, it can
// safely use t.GetInOversizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOversizeFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInPcsBipErrors retrieves the value of the leaf InPcsBipErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsBipErrors is set, it can
// safely use t.GetInPcsBipErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsBipErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsBipErrors() uint64 {
	if t == nil || t.InPcsBipErrors == nil {
		return 0
	}
	return *t.InPcsBipErrors
}

// GetInPcsErroredSeconds retrieves the value of the leaf InPcsErroredSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsErroredSeconds is set, it can
// safely use t.GetInPcsErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsErroredSeconds() uint64 {
	if t == nil || t.InPcsErroredSeconds == nil {
		return 0
	}
	return *t.InPcsErroredSeconds
}

// GetInPcsSeverelyErroredSeconds retrieves the value of the leaf InPcsSeverelyErroredSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsSeverelyErroredSeconds is set, it can
// safely use t.GetInPcsSeverelyErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsSeverelyErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsSeverelyErroredSeconds() uint64 {
	if t == nil || t.InPcsSeverelyErroredSeconds == nil {
		return 0
	}
	return *t.InPcsSeverelyErroredSeconds
}

// GetInPcsUnavailableSeconds retrieves the value of the leaf InPcsUnavailableSeconds from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPcsUnavailableSeconds is set, it can
// safely use t.GetInPcsUnavailableSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPcsUnavailableSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInPcsUnavailableSeconds() uint64 {
	if t == nil || t.InPcsUnavailableSeconds == nil {
		return 0
	}
	return *t.InPcsUnavailableSeconds
}

// GetInSingleCollision retrieves the value of the leaf InSingleCollision from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSingleCollision is set, it can
// safely use t.GetInSingleCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSingleCollision == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInSingleCollision() uint64 {
	if t == nil || t.InSingleCollision == nil {
		return 0
	}
	return *t.InSingleCollision
}

// GetInSymbolError retrieves the value of the leaf InSymbolError from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSymbolError is set, it can
// safely use t.GetInSymbolError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSymbolError == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInSymbolError() uint64 {
	if t == nil || t.InSymbolError == nil {
		return 0
	}
	return *t.InSymbolError
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUndersizeFrames is set, it can
// safely use t.GetInUndersizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUndersizeFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Out_8021QFrames is set, it can
// safely use t.GetOut_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Out_8021QFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutBlockErrors retrieves the value of the leaf OutBlockErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBlockErrors is set, it can
// safely use t.GetOutBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutBlockErrors() uint64 {
	if t == nil || t.OutBlockErrors == nil {
		return 0
	}
	return *t.OutBlockErrors
}

// GetOutCrcErrors retrieves the value of the leaf OutCrcErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutCrcErrors is set, it can
// safely use t.GetOutCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutCrcErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutCrcErrors() uint64 {
	if t == nil || t.OutCrcErrors == nil {
		return 0
	}
	return *t.OutCrcErrors
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacControlFrames is set, it can
// safely use t.GetOutMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacControlFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacErrorsTx retrieves the value of the leaf OutMacErrorsTx from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacErrorsTx is set, it can
// safely use t.GetOutMacErrorsTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacErrorsTx == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacErrorsTx() uint64 {
	if t == nil || t.OutMacErrorsTx == nil {
		return 0
	}
	return *t.OutMacErrorsTx
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacPauseFrames is set, it can
// safely use t.GetOutMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacPauseFrames == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// GetOutPcsBipErrors retrieves the value of the leaf OutPcsBipErrors from the TerminalDevice_Channel_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPcsBipErrors is set, it can
// safely use t.GetOutPcsBipErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPcsBipErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet) GetOutPcsBipErrors() uint64 {
	if t == nil || t.OutPcsBipErrors == nil {
		return 0
	}
	return *t.OutPcsBipErrors
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlsDelay == nil {
		var v uint32 = 0
		t.AlsDelay = &v
	}
	if t.ClientAls == 0 {
		t.ClientAls = Ethernet_ClientAls_ETHERNET
	}
	t.Esnr.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.QValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet.
func (*TerminalDevice_Channel_Ethernet) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Esnr represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Esnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Esnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Esnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Esnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Esnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Esnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Esnr.
func (*TerminalDevice_Channel_Ethernet_Esnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Counters  *TerminalDevice_Channel_Ethernet_Lldp_Counters            `path:"state/counters" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛCounters []ygot.Annotation                                         `path:"state/@counters" ygotAnnotation:"true"`
	Enabled   *bool                                                     `path:"config/enabled" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛEnabled  []ygot.Annotation                                         `path:"config/@enabled" ygotAnnotation:"true"`
	Neighbor  map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor `path:"neighbors/neighbor" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛNeighbor []ygot.Annotation                                         `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	Snooping  *bool                                                     `path:"config/snooping" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSnooping []ygot.Annotation                                         `path:"config/@snooping" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// TerminalDevice_Channel_Ethernet_Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel_Ethernet_Lldp) NewNeighbor(Id string) (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &TerminalDevice_Channel_Ethernet_Lldp_Neighbor{
		Id: &Id,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the TerminalDevice_Channel_Ethernet_Lldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Id = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetOrCreateNeighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor {

	key := Id

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of TerminalDevice_Channel_Ethernet_Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetNeighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel_Ethernet_Lldp) DeleteNeighbor(Id string) {
	key := Id

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct to the
// list Neighbor of TerminalDevice_Channel_Ethernet_Lldp. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel_Ethernet_Lldp) AppendNeighbor(v *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetOrCreateCounters() *TerminalDevice_Channel_Ethernet_Lldp_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &TerminalDevice_Channel_Ethernet_Lldp_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from TerminalDevice_Channel_Ethernet_Lldp. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetCounters() *TerminalDevice_Channel_Ethernet_Lldp_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the TerminalDevice_Channel_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetSnooping retrieves the value of the leaf Snooping from the TerminalDevice_Channel_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snooping is set, it can
// safely use t.GetSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snooping == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp) GetSnooping() bool {
	if t == nil || t.Snooping == nil {
		return false
	}
	return *t.Snooping
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	if t.Snooping == nil {
		var v bool = false
		t.Snooping = &v
	}
	t.Counters.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp.
func (*TerminalDevice_Channel_Ethernet_Lldp) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FrameDiscard   *uint64           `path:"frame-discard" module:"openconfig-terminal-device"`
	ΛFrameDiscard  []ygot.Annotation `path:"@frame-discard" ygotAnnotation:"true"`
	FrameErrorIn   *uint64           `path:"frame-error-in" module:"openconfig-terminal-device"`
	ΛFrameErrorIn  []ygot.Annotation `path:"@frame-error-in" ygotAnnotation:"true"`
	FrameErrorOut  *uint64           `path:"frame-error-out" module:"openconfig-terminal-device"`
	ΛFrameErrorOut []ygot.Annotation `path:"@frame-error-out" ygotAnnotation:"true"`
	FrameIn        *uint64           `path:"frame-in" module:"openconfig-terminal-device"`
	ΛFrameIn       []ygot.Annotation `path:"@frame-in" ygotAnnotation:"true"`
	FrameOut       *uint64           `path:"frame-out" module:"openconfig-terminal-device"`
	ΛFrameOut      []ygot.Annotation `path:"@frame-out" ygotAnnotation:"true"`
	LastClear      *string           `path:"last-clear" module:"openconfig-terminal-device"`
	ΛLastClear     []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	TlvDiscard     *uint64           `path:"tlv-discard" module:"openconfig-terminal-device"`
	ΛTlvDiscard    []ygot.Annotation `path:"@tlv-discard" ygotAnnotation:"true"`
	TlvUnknown     *uint64           `path:"tlv-unknown" module:"openconfig-terminal-device"`
	ΛTlvUnknown    []ygot.Annotation `path:"@tlv-unknown" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameDiscard is set, it can
// safely use t.GetFrameDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameDiscard == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorIn is set, it can
// safely use t.GetFrameErrorIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorIn == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameErrorOut retrieves the value of the leaf FrameErrorOut from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameErrorOut is set, it can
// safely use t.GetFrameErrorOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameErrorOut == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameErrorOut() uint64 {
	if t == nil || t.FrameErrorOut == nil {
		return 0
	}
	return *t.FrameErrorOut
}

// GetFrameIn retrieves the value of the leaf FrameIn from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameIn is set, it can
// safely use t.GetFrameIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameIn == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameOut is set, it can
// safely use t.GetFrameOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameOut == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvDiscard is set, it can
// safely use t.GetTlvDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvDiscard == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the TerminalDevice_Channel_Ethernet_Lldp_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlvUnknown is set, it can
// safely use t.GetTlvUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlvUnknown == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Counters.
func (*TerminalDevice_Channel_Ethernet_Lldp_Counters) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct {
	ΛMetadata              []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	Age                    *uint64                                                                                                      `path:"state/age" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛAge                   []ygot.Annotation                                                                                            `path:"state/@age" ygotAnnotation:"true"`
	ChassisId              *string                                                                                                      `path:"state/chassis-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛChassisId             []ygot.Annotation                                                                                            `path:"state/@chassis-id" ygotAnnotation:"true"`
	ChassisIdType          E_LldpTypes_ChassisIdType                                                                                    `path:"state/chassis-id-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛChassisIdType         []ygot.Annotation                                                                                            `path:"state/@chassis-id-type" ygotAnnotation:"true"`
	Id                     *string                                                                                                      `path:"state/id|id" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛId                    []ygot.Annotation                                                                                            `path:"state/@id|@id" ygotAnnotation:"true"`
	LastUpdate             *int64                                                                                                       `path:"state/last-update" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLastUpdate            []ygot.Annotation                                                                                            `path:"state/@last-update" ygotAnnotation:"true"`
	ManagementAddress      *string                                                                                                      `path:"state/management-address" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛManagementAddress     []ygot.Annotation                                                                                            `path:"state/@management-address" ygotAnnotation:"true"`
	ManagementAddressType  *string                                                                                                      `path:"state/management-address-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛManagementAddressType []ygot.Annotation                                                                                            `path:"state/@management-address-type" ygotAnnotation:"true"`
	PortDescription        *string                                                                                                      `path:"state/port-description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPortDescription       []ygot.Annotation                                                                                            `path:"state/@port-description" ygotAnnotation:"true"`
	PortId                 *string                                                                                                      `path:"state/port-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPortId                []ygot.Annotation                                                                                            `path:"state/@port-id" ygotAnnotation:"true"`
	PortIdType             E_LldpTypes_PortIdType                                                                                       `path:"state/port-id-type" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPortIdType            []ygot.Annotation                                                                                            `path:"state/@port-id-type" ygotAnnotation:"true"`
	SystemDescription      *string                                                                                                      `path:"state/system-description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSystemDescription     []ygot.Annotation                                                                                            `path:"state/@system-description" ygotAnnotation:"true"`
	SystemName             *string                                                                                                      `path:"state/system-name" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSystemName            []ygot.Annotation                                                                                            `path:"state/@system-name" ygotAnnotation:"true"`
	Tlv                    map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv `path:"custom-tlvs/tlv" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTlv                   []ygot.Annotation                                                                                            `path:"custom-tlvs/@tlv" ygotAnnotation:"true"`
	Ttl                    *uint16                                                                                                      `path:"state/ttl" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTtl                   []ygot.Annotation                                                                                            `path:"state/@ttl" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor) IsYANGGoStruct() {}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key represents the key for list Tlv of element /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key struct {
	Type       int32  `path:"type"`
	Oui        string `path:"oui"`
	OuiSubtype string `path:"oui-subtype"`
}

// IsYANGGoKeyStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key key struct.
func (t TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"type":        t.Type,
		"oui":         t.Oui,
		"oui-subtype": t.OuiSubtype,
	}, nil
}

// NewTlv creates a new entry in the Tlv list of the
// TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) NewTlv(Type int32, Oui string, OuiSubtype string) (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv)
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tlv", key)
	}

	t.Tlv[key] = &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv{
		Type:       &Type,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.Tlv[key], nil
}

// RenameTlv renames an entry in the list Tlv within
// the TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) RenameTlv(oldK, newK TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key) error {
	if _, ok := t.Tlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Tlv", newK)
	}

	e, ok := t.Tlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tlv", oldK)
	}
	e.Type = &newK.Type
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.Tlv[newK] = e
	delete(t.Tlv, oldK)
	return nil
}

// GetOrCreateTlv retrieves the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetOrCreateTlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv {

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.Tlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTlv(Type, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTlv got unexpected error: %v", err))
	}
	return v
}

// GetTlv retrieves the value with the specified key from
// the Tlv map field of TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetTlv(Type int32, Oui string, OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv {

	if t == nil {
		return nil
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.Tlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteTlv deletes the value with the specified keys from
// the receiver TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) DeleteTlv(Type int32, Oui string, OuiSubtype string) {
	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	delete(t.Tlv, key)
}

// AppendTlv appends the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct to the
// list Tlv of TerminalDevice_Channel_Ethernet_Lldp_Neighbor. If the key value(s) specified in
// the supplied TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv already exist in the list, an error is
// returned.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) AppendTlv(v *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) error {
	if v.Type == nil {
		return fmt.Errorf("invalid nil key for Type")
	}

	if v.Oui == nil {
		return fmt.Errorf("invalid nil key for Oui")
	}

	if v.OuiSubtype == nil {
		return fmt.Errorf("invalid nil key for OuiSubtype")
	}

	key := TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key{
		Type:       *v.Type,
		Oui:        *v.Oui,
		OuiSubtype: *v.OuiSubtype,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_Key]*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv)
	}

	if _, ok := t.Tlv[key]; ok {
		return fmt.Errorf("duplicate key for list Tlv %v", key)
	}

	t.Tlv[key] = v
	return nil
}

// GetAge retrieves the value of the leaf Age from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Age is set, it can
// safely use t.GetAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Age == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetAge() uint64 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisId is set, it can
// safely use t.GetChassisId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisIdType is set, it can
// safely use t.GetChassisIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisIdType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetChassisIdType() E_LldpTypes_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetId retrieves the value of the leaf Id from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastUpdate is set, it can
// safely use t.GetLastUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastUpdate == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetLastUpdate() int64 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddress is set, it can
// safely use t.GetManagementAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddress == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagementAddressType is set, it can
// safely use t.GetManagementAddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagementAddressType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetPortDescription retrieves the value of the leaf PortDescription from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDescription is set, it can
// safely use t.GetPortDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDescription == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdType is set, it can
// safely use t.GetPortIdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdType == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetPortIdType() E_LldpTypes_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemDescription is set, it can
// safely use t.GetSystemDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemDescription == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemName is set, it can
// safely use t.GetSystemName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemName == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) GetTtl() uint16 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Tlv {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Ethernet_Lldp_Neighbor struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Neighbor.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Oui         *string           `path:"state/oui|oui" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛOui        []ygot.Annotation `path:"state/@oui|@oui" ygotAnnotation:"true"`
	OuiSubtype  *string           `path:"state/oui-subtype|oui-subtype" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛOuiSubtype []ygot.Annotation `path:"state/@oui-subtype|@oui-subtype" ygotAnnotation:"true"`
	Type        *int32            `path:"state/type|type" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛType       []ygot.Annotation `path:"state/@type|@type" ygotAnnotation:"true"`
	Value       Binary            `path:"state/value" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛValue      []ygot.Annotation `path:"state/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) IsYANGGoStruct() {}

// GetOui retrieves the value of the leaf Oui from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oui is set, it can
// safely use t.GetOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oui == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuiSubtype is set, it can
// safely use t.GetOuiSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuiSubtype == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// GetType retrieves the value of the leaf Type from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv struct, which is a YANG list entry.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	if t.Type == nil {
		return nil, fmt.Errorf("nil value for key Type")
	}

	return map[string]interface{}{
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
		"type":        *t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv.
func (*TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_PostFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_PostFecBer.
func (*TerminalDevice_Channel_Ethernet_PostFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_PreFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_PreFecBer.
func (*TerminalDevice_Channel_Ethernet_PreFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ethernet_QValue represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ethernet_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ethernet_QValue) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Ethernet_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ethernet_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ethernet_QValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ethernet_QValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_QValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ethernet_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ethernet_QValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ethernet_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ethernet_QValue.
func (*TerminalDevice_Channel_Ethernet_QValue) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Ingress represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_Ingress struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface        *string           `path:"config/interface" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInterface       []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	PhysicalChannel  []uint16          `path:"config/physical-channel" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPhysicalChannel []ygot.Annotation `path:"config/@physical-channel" ygotAnnotation:"true"`
	Transceiver      *string           `path:"config/transceiver" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTransceiver     []ygot.Annotation `path:"config/@transceiver" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Ingress) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PhysicalChannel is set, it can
// safely use t.GetPhysicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PhysicalChannel == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTransceiver retrieves the value of the leaf Transceiver from the TerminalDevice_Channel_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transceiver is set, it can
// safely use t.GetTransceiver() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transceiver == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Ingress) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Ingress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Ingress.
func (*TerminalDevice_Channel_Ingress) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_Otn struct {
	ΛMetadata                 []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	BackgroundBlockErrors     *uint64                                     `path:"state/background-block-errors" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛBackgroundBlockErrors    []ygot.Annotation                           `path:"state/@background-block-errors" ygotAnnotation:"true"`
	CodeViolations            *uint64                                     `path:"state/code-violations" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛCodeViolations           []ygot.Annotation                           `path:"state/@code-violations" ygotAnnotation:"true"`
	ErroredBlocks             *uint64                                     `path:"state/errored-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛErroredBlocks            []ygot.Annotation                           `path:"state/@errored-blocks" ygotAnnotation:"true"`
	ErroredSeconds            *uint64                                     `path:"state/errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛErroredSeconds           []ygot.Annotation                           `path:"state/@errored-seconds" ygotAnnotation:"true"`
	Esnr                      *TerminalDevice_Channel_Otn_Esnr            `path:"state/esnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛEsnr                     []ygot.Annotation                           `path:"state/@esnr" ygotAnnotation:"true"`
	FecCorrectedBits          *uint64                                     `path:"state/fec-corrected-bits" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecCorrectedBits         []ygot.Annotation                           `path:"state/@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes         *uint64                                     `path:"state/fec-corrected-bytes" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecCorrectedBytes        []ygot.Annotation                           `path:"state/@fec-corrected-bytes" ygotAnnotation:"true"`
	FecUncorrectableBlocks    *uint64                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecUncorrectableBlocks   []ygot.Annotation                           `path:"state/@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords     *uint64                                     `path:"state/fec-uncorrectable-words" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecUncorrectableWords    []ygot.Annotation                           `path:"state/@fec-uncorrectable-words" ygotAnnotation:"true"`
	PostFecBer                *TerminalDevice_Channel_Otn_PostFecBer      `path:"state/post-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPostFecBer               []ygot.Annotation                           `path:"state/@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer                 *TerminalDevice_Channel_Otn_PreFecBer       `path:"state/pre-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPreFecBer                []ygot.Annotation                           `path:"state/@pre-fec-ber" ygotAnnotation:"true"`
	QValue                    *TerminalDevice_Channel_Otn_QValue          `path:"state/q-value" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛQValue                   []ygot.Annotation                           `path:"state/@q-value" ygotAnnotation:"true"`
	RdiMsg                    *string                                     `path:"state/rdi-msg" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛRdiMsg                   []ygot.Annotation                           `path:"state/@rdi-msg" ygotAnnotation:"true"`
	SeverelyErroredSeconds    *uint64                                     `path:"state/severely-errored-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSeverelyErroredSeconds   []ygot.Annotation                           `path:"state/@severely-errored-seconds" ygotAnnotation:"true"`
	TributarySlotGranularity  E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY `path:"config/tributary-slot-granularity" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTributarySlotGranularity []ygot.Annotation                           `path:"config/@tributary-slot-granularity" ygotAnnotation:"true"`
	TtiMsgAuto                *bool                                       `path:"config/tti-msg-auto" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTtiMsgAuto               []ygot.Annotation                           `path:"config/@tti-msg-auto" ygotAnnotation:"true"`
	TtiMsgExpected            *string                                     `path:"config/tti-msg-expected" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTtiMsgExpected           []ygot.Annotation                           `path:"config/@tti-msg-expected" ygotAnnotation:"true"`
	TtiMsgRecv                *string                                     `path:"state/tti-msg-recv" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTtiMsgRecv               []ygot.Annotation                           `path:"state/@tti-msg-recv" ygotAnnotation:"true"`
	TtiMsgTransmit            *string                                     `path:"config/tti-msg-transmit" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTtiMsgTransmit           []ygot.Annotation                           `path:"config/@tti-msg-transmit" ygotAnnotation:"true"`
	UnavailableSeconds        *uint64                                     `path:"state/unavailable-seconds" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛUnavailableSeconds       []ygot.Annotation                           `path:"state/@unavailable-seconds" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn) IsYANGGoStruct() {}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreateEsnr() *TerminalDevice_Channel_Otn_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &TerminalDevice_Channel_Otn_Esnr{}
	return t.Esnr
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreatePostFecBer() *TerminalDevice_Channel_Otn_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &TerminalDevice_Channel_Otn_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreatePreFecBer() *TerminalDevice_Channel_Otn_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &TerminalDevice_Channel_Otn_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *TerminalDevice_Channel_Otn) GetOrCreateQValue() *TerminalDevice_Channel_Otn_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &TerminalDevice_Channel_Otn_QValue{}
	return t.QValue
}

// GetEsnr returns the value of the Esnr struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetEsnr() *TerminalDevice_Channel_Otn_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetPostFecBer() *TerminalDevice_Channel_Otn_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetPreFecBer() *TerminalDevice_Channel_Otn_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from TerminalDevice_Channel_Otn. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *TerminalDevice_Channel_Otn) GetQValue() *TerminalDevice_Channel_Otn_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetBackgroundBlockErrors retrieves the value of the leaf BackgroundBlockErrors from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackgroundBlockErrors is set, it can
// safely use t.GetBackgroundBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackgroundBlockErrors == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetBackgroundBlockErrors() uint64 {
	if t == nil || t.BackgroundBlockErrors == nil {
		return 0
	}
	return *t.BackgroundBlockErrors
}

// GetCodeViolations retrieves the value of the leaf CodeViolations from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CodeViolations is set, it can
// safely use t.GetCodeViolations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CodeViolations == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetCodeViolations() uint64 {
	if t == nil || t.CodeViolations == nil {
		return 0
	}
	return *t.CodeViolations
}

// GetErroredBlocks retrieves the value of the leaf ErroredBlocks from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErroredBlocks is set, it can
// safely use t.GetErroredBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErroredBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetErroredBlocks() uint64 {
	if t == nil || t.ErroredBlocks == nil {
		return 0
	}
	return *t.ErroredBlocks
}

// GetErroredSeconds retrieves the value of the leaf ErroredSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErroredSeconds is set, it can
// safely use t.GetErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetErroredSeconds() uint64 {
	if t == nil || t.ErroredSeconds == nil {
		return 0
	}
	return *t.ErroredSeconds
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBits is set, it can
// safely use t.GetFecCorrectedBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBits == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBytes is set, it can
// safely use t.GetFecCorrectedBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBytes == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableWords is set, it can
// safely use t.GetFecUncorrectableWords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableWords == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetRdiMsg retrieves the value of the leaf RdiMsg from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdiMsg is set, it can
// safely use t.GetRdiMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdiMsg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetRdiMsg() string {
	if t == nil || t.RdiMsg == nil {
		return ""
	}
	return *t.RdiMsg
}

// GetSeverelyErroredSeconds retrieves the value of the leaf SeverelyErroredSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeverelyErroredSeconds is set, it can
// safely use t.GetSeverelyErroredSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeverelyErroredSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetSeverelyErroredSeconds() uint64 {
	if t == nil || t.SeverelyErroredSeconds == nil {
		return 0
	}
	return *t.SeverelyErroredSeconds
}

// GetTributarySlotGranularity retrieves the value of the leaf TributarySlotGranularity from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TributarySlotGranularity is set, it can
// safely use t.GetTributarySlotGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TributarySlotGranularity == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTributarySlotGranularity() E_TransportTypes_TRIBUTARY_SLOT_GRANULARITY {
	if t == nil || t.TributarySlotGranularity == 0 {
		return 0
	}
	return t.TributarySlotGranularity
}

// GetTtiMsgAuto retrieves the value of the leaf TtiMsgAuto from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgAuto is set, it can
// safely use t.GetTtiMsgAuto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgAuto == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgAuto() bool {
	if t == nil || t.TtiMsgAuto == nil {
		return false
	}
	return *t.TtiMsgAuto
}

// GetTtiMsgExpected retrieves the value of the leaf TtiMsgExpected from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgExpected is set, it can
// safely use t.GetTtiMsgExpected() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgExpected == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgExpected() string {
	if t == nil || t.TtiMsgExpected == nil {
		return ""
	}
	return *t.TtiMsgExpected
}

// GetTtiMsgRecv retrieves the value of the leaf TtiMsgRecv from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgRecv is set, it can
// safely use t.GetTtiMsgRecv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgRecv == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgRecv() string {
	if t == nil || t.TtiMsgRecv == nil {
		return ""
	}
	return *t.TtiMsgRecv
}

// GetTtiMsgTransmit retrieves the value of the leaf TtiMsgTransmit from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtiMsgTransmit is set, it can
// safely use t.GetTtiMsgTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtiMsgTransmit == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetTtiMsgTransmit() string {
	if t == nil || t.TtiMsgTransmit == nil {
		return ""
	}
	return *t.TtiMsgTransmit
}

// GetUnavailableSeconds retrieves the value of the leaf UnavailableSeconds from the TerminalDevice_Channel_Otn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnavailableSeconds is set, it can
// safely use t.GetUnavailableSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnavailableSeconds == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn) GetUnavailableSeconds() uint64 {
	if t == nil || t.UnavailableSeconds == nil {
		return 0
	}
	return *t.UnavailableSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Esnr.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.QValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn.
func (*TerminalDevice_Channel_Otn) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_Esnr represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_Esnr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_Esnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_Esnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_Esnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_Esnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_Esnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_Esnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_Esnr.
func (*TerminalDevice_Channel_Otn_Esnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_PostFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_PostFecBer.
func (*TerminalDevice_Channel_Otn_PostFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_PreFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_PreFecBer.
func (*TerminalDevice_Channel_Otn_PreFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Channel_Otn_QValue represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValue struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Channel_Otn_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Channel_Otn_QValue) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the TerminalDevice_Channel_Otn_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Channel_Otn_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Channel_Otn_QValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Channel_Otn_QValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_QValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Channel_Otn_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Channel_Otn_QValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Channel_Otn_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Channel_Otn_QValue.
func (*TerminalDevice_Channel_Otn_QValue) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// TerminalDevice_Mode represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_Mode struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"state/description" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛDescription []ygot.Annotation `path:"state/@description" ygotAnnotation:"true"`
	ModeId       *uint16           `path:"state/mode-id|mode-id" module:"openconfig-terminal-device/openconfig-terminal-device|openconfig-terminal-device"`
	ΛModeId      []ygot.Annotation `path:"state/@mode-id|@mode-id" ygotAnnotation:"true"`
	VendorId     *string           `path:"state/vendor-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛVendorId    []ygot.Annotation `path:"state/@vendor-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that TerminalDevice_Mode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TerminalDevice_Mode) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetModeId retrieves the value of the leaf ModeId from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModeId is set, it can
// safely use t.GetModeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModeId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetModeId() uint16 {
	if t == nil || t.ModeId == nil {
		return 0
	}
	return *t.ModeId
}

// GetVendorId retrieves the value of the leaf VendorId from the TerminalDevice_Mode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorId is set, it can
// safely use t.GetVendorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorId == nil' before retrieving the leaf's value.
func (t *TerminalDevice_Mode) GetVendorId() string {
	if t == nil || t.VendorId == nil {
		return ""
	}
	return *t.VendorId
}

// PopulateDefaults recursively populates unset leaf fields in the TerminalDevice_Mode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *TerminalDevice_Mode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the TerminalDevice_Mode struct, which is a YANG list entry.
func (t *TerminalDevice_Mode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ModeId == nil {
		return nil, fmt.Errorf("nil value for key ModeId")
	}

	return map[string]interface{}{
		"mode-id": *t.ModeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Mode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TerminalDevice_Mode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *TerminalDevice_Mode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TerminalDevice_Mode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of TerminalDevice_Mode.
func (*TerminalDevice_Mode) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}
