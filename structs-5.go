/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"config/authentication-key" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"config/@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) IsYANGGoStruct() {}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
	ForwardingHoldtime  *uint16           `path:"config/forwarding-holdtime" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛForwardingHoldtime []ygot.Annotation `path:"config/@forwarding-holdtime" ygotAnnotation:"true"`
	HelperEnable        *bool             `path:"config/helper-enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelperEnable       []ygot.Annotation `path:"config/@helper-enable" ygotAnnotation:"true"`
	ReconnectTime       *uint16           `path:"config/reconnect-time" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReconnectTime      []ygot.Annotation `path:"config/@reconnect-time" ygotAnnotation:"true"`
	RecoveryTime        *uint16           `path:"config/recovery-time" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRecoveryTime       []ygot.Annotation `path:"config/@recovery-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetForwardingHoldtime retrieves the value of the leaf ForwardingHoldtime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingHoldtime is set, it can
// safely use t.GetForwardingHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingHoldtime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetForwardingHoldtime() uint16 {
	if t == nil || t.ForwardingHoldtime == nil {
		return 0
	}
	return *t.ForwardingHoldtime
}

// GetHelperEnable retrieves the value of the leaf HelperEnable from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperEnable is set, it can
// safely use t.GetHelperEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperEnable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetHelperEnable() bool {
	if t == nil || t.HelperEnable == nil {
		return false
	}
	return *t.HelperEnable
}

// GetReconnectTime retrieves the value of the leaf ReconnectTime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTime is set, it can
// safely use t.GetReconnectTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetReconnectTime() uint16 {
	if t == nil || t.ReconnectTime == nil {
		return 0
	}
	return *t.ReconnectTime
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) GetRecoveryTime() uint16 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes struct {
	ΛMetadata      []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	HelloHoldtime  *uint16                                                                               `path:"config/hello-holdtime" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                     `path:"config/@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16                                                                               `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation                                                                     `path:"config/@hello-interval" ygotAnnotation:"true"`
	Interface      map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface     []ygot.Annotation                                                                     `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) NewInterface(InterfaceId string) (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface struct to the
// list Interface of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) AppendInterface(v *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface struct {
	ΛMetadata      []ygot.Annotation                                                                                                 `path:"@" ygotAnnotation:"true"`
	AddressFamily  map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily `path:"address-families/address-family" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                                                                 `path:"address-families/@address-family" ygotAnnotation:"true"`
	Counters       *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters                               `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                                                 `path:"state/@counters" ygotAnnotation:"true"`
	HelloHoldtime  *uint16                                                                                                           `path:"config/hello-holdtime" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                                                 `path:"config/@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16                                                                                                           `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation                                                                                                 `path:"config/@hello-interval" ygotAnnotation:"true"`
	InterfaceId    *string                                                                                                           `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId   []ygot.Annotation                                                                                                 `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef   *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef                           `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef  []ygot.Annotation                                                                                                 `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) IsYANGGoStruct() {}

// NewAddressFamily creates a new entry in the AddressFamily list of the
// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) NewAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
	}

	key := AfiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressFamily[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressFamily", key)
	}

	t.AddressFamily[key] = &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily{
		AfiName: AfiName,
	}

	return t.AddressFamily[key], nil
}

// RenameAddressFamily renames an entry in the list AddressFamily within
// the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) RenameAddressFamily(oldK, newK E_MplsLdp_MplsLdpAfi) error {
	if _, ok := t.AddressFamily[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressFamily", newK)
	}

	e, ok := t.AddressFamily[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressFamily", oldK)
	}
	e.AfiName = newK

	t.AddressFamily[newK] = e
	delete(t.AddressFamily, oldK)
	return nil
}

// GetOrCreateAddressFamily retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetOrCreateAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily {

	key := AfiName

	if v, ok := t.AddressFamily[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressFamily(AfiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressFamily got unexpected error: %v", err))
	}
	return v
}

// GetAddressFamily retrieves the value with the specified key from
// the AddressFamily map field of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily {

	if t == nil {
		return nil
	}

	key := AfiName

	if lm, ok := t.AddressFamily[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressFamily deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) DeleteAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) {
	key := AfiName

	delete(t.AddressFamily, key)
}

// AppendAddressFamily appends the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily struct to the
// list AddressFamily of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) AppendAddressFamily(v *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) error {
	key := v.AfiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
	}

	if _, ok := t.AddressFamily[key]; ok {
		return fmt.Errorf("duplicate key for list AddressFamily %v", key)
	}

	t.AddressFamily[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetOrCreateCounters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetCounters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.AddressFamily {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily struct {
	ΛMetadata []ygot.Annotation    `path:"@" ygotAnnotation:"true"`
	AfiName   E_MplsLdp_MplsLdpAfi `path:"config/afi-name|afi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation    `path:"config/@afi-name|@afi-name" ygotAnnotation:"true"`
	Enabled   *bool                `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation    `path:"config/@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) IsYANGGoStruct() {
}

// GetAfiName retrieves the value of the leaf AfiName from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiName is set, it can
// safely use t.GetAfiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) GetAfiName() E_MplsLdp_MplsLdpAfi {
	if t == nil || t.AfiName == 0 {
		return 0
	}
	return t.AfiName
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name": t.AfiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor struct {
	ΛMetadata                         []ygot.Annotation                                                                                                                                `path:"@" ygotAnnotation:"true"`
	Authentication                    *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication                                                                             `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication                   []ygot.Annotation                                                                                                                                `path:"@authentication" ygotAnnotation:"true"`
	EnableDownstreamOnDemand          *bool                                                                                                                                            `path:"config/enable-downstream-on-demand" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnableDownstreamOnDemand         []ygot.Annotation                                                                                                                                `path:"config/@enable-downstream-on-demand" ygotAnnotation:"true"`
	HelloAdjacency                    map[NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency `path:"hello-adjacencies/hello-adjacency" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloAdjacency                   []ygot.Annotation                                                                                                                                `path:"hello-adjacencies/@hello-adjacency" ygotAnnotation:"true"`
	LabelSpaceId                      *uint16                                                                                                                                          `path:"config/label-space-id|label-space-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLabelSpaceId                     []ygot.Annotation                                                                                                                                `path:"config/@label-space-id|@label-space-id" ygotAnnotation:"true"`
	LsrId                             *string                                                                                                                                          `path:"config/lsr-id|lsr-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLsrId                            []ygot.Annotation                                                                                                                                `path:"config/@lsr-id|@lsr-id" ygotAnnotation:"true"`
	NegotiatedLabelAdvertisementMode  E_MplsLdp_LabelAdvertisementMode                                                                                                                 `path:"state/negotiated-label-advertisement-mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNegotiatedLabelAdvertisementMode []ygot.Annotation                                                                                                                                `path:"state/@negotiated-label-advertisement-mode" ygotAnnotation:"true"`
	PeerLabelAdvertisementMode        E_MplsLdp_LabelAdvertisementMode                                                                                                                 `path:"state/peer-label-advertisement-mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPeerLabelAdvertisementMode       []ygot.Annotation                                                                                                                                `path:"state/@peer-label-advertisement-mode" ygotAnnotation:"true"`
	SessionState                      E_MplsLdp_Neighbor_SessionState                                                                                                                  `path:"state/session-state" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSessionState                     []ygot.Annotation                                                                                                                                `path:"state/@session-state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) IsYANGGoStruct() {}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key represents the key for list HelloAdjacency of element /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key struct {
	RemoteAddress string `path:"remote-address"`
	LocalAddress  string `path:"local-address"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key key struct.
func (t NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"remote-address": t.RemoteAddress,
		"local-address":  t.LocalAddress,
	}, nil
}

// NewHelloAdjacency creates a new entry in the HelloAdjacency list of the
// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) NewHelloAdjacency(RemoteAddress string, LocalAddress string) (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HelloAdjacency == nil {
		t.HelloAdjacency = make(map[NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
	}

	key := NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HelloAdjacency[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HelloAdjacency", key)
	}

	t.HelloAdjacency[key] = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency{
		RemoteAddress: &RemoteAddress,
		LocalAddress:  &LocalAddress,
	}

	return t.HelloAdjacency[key], nil
}

// RenameHelloAdjacency renames an entry in the list HelloAdjacency within
// the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) RenameHelloAdjacency(oldK, newK NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key) error {
	if _, ok := t.HelloAdjacency[newK]; ok {
		return fmt.Errorf("key %v already exists in HelloAdjacency", newK)
	}

	e, ok := t.HelloAdjacency[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HelloAdjacency", oldK)
	}
	e.RemoteAddress = &newK.RemoteAddress
	e.LocalAddress = &newK.LocalAddress

	t.HelloAdjacency[newK] = e
	delete(t.HelloAdjacency, oldK)
	return nil
}

// GetOrCreateHelloAdjacency retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetOrCreateHelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency {

	key := NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	if v, ok := t.HelloAdjacency[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHelloAdjacency(RemoteAddress, LocalAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHelloAdjacency got unexpected error: %v", err))
	}
	return v
}

// GetHelloAdjacency retrieves the value with the specified key from
// the HelloAdjacency map field of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetHelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	if lm, ok := t.HelloAdjacency[key]; ok {
		return lm
	}
	return nil
}

// DeleteHelloAdjacency deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) DeleteHelloAdjacency(RemoteAddress string, LocalAddress string) {
	key := NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key{
		RemoteAddress: RemoteAddress,
		LocalAddress:  LocalAddress,
	}

	delete(t.HelloAdjacency, key)
}

// AppendHelloAdjacency appends the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency struct to the
// list HelloAdjacency of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) AppendHelloAdjacency(v *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key for RemoteAddress")
	}

	if v.LocalAddress == nil {
		return fmt.Errorf("invalid nil key for LocalAddress")
	}

	key := NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key{
		RemoteAddress: *v.RemoteAddress,
		LocalAddress:  *v.LocalAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HelloAdjacency == nil {
		t.HelloAdjacency = make(map[NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
	}

	if _, ok := t.HelloAdjacency[key]; ok {
		return fmt.Errorf("duplicate key for list HelloAdjacency %v", key)
	}

	t.HelloAdjacency[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetOrCreateAuthentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetAuthentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetEnableDownstreamOnDemand retrieves the value of the leaf EnableDownstreamOnDemand from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableDownstreamOnDemand is set, it can
// safely use t.GetEnableDownstreamOnDemand() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableDownstreamOnDemand == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetEnableDownstreamOnDemand() bool {
	if t == nil || t.EnableDownstreamOnDemand == nil {
		return false
	}
	return *t.EnableDownstreamOnDemand
}

// GetLabelSpaceId retrieves the value of the leaf LabelSpaceId from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelSpaceId is set, it can
// safely use t.GetLabelSpaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelSpaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetLabelSpaceId() uint16 {
	if t == nil || t.LabelSpaceId == nil {
		return 0
	}
	return *t.LabelSpaceId
}

// GetLsrId retrieves the value of the leaf LsrId from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrId is set, it can
// safely use t.GetLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetLsrId() string {
	if t == nil || t.LsrId == nil {
		return ""
	}
	return *t.LsrId
}

// GetNegotiatedLabelAdvertisementMode retrieves the value of the leaf NegotiatedLabelAdvertisementMode from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NegotiatedLabelAdvertisementMode is set, it can
// safely use t.GetNegotiatedLabelAdvertisementMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NegotiatedLabelAdvertisementMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetNegotiatedLabelAdvertisementMode() E_MplsLdp_LabelAdvertisementMode {
	if t == nil || t.NegotiatedLabelAdvertisementMode == 0 {
		return 0
	}
	return t.NegotiatedLabelAdvertisementMode
}

// GetPeerLabelAdvertisementMode retrieves the value of the leaf PeerLabelAdvertisementMode from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerLabelAdvertisementMode is set, it can
// safely use t.GetPeerLabelAdvertisementMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerLabelAdvertisementMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetPeerLabelAdvertisementMode() E_MplsLdp_LabelAdvertisementMode {
	if t == nil || t.PeerLabelAdvertisementMode == 0 {
		return 0
	}
	return t.PeerLabelAdvertisementMode
}

// GetSessionState retrieves the value of the leaf SessionState from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionState is set, it can
// safely use t.GetSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionState == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) GetSessionState() E_MplsLdp_Neighbor_SessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableDownstreamOnDemand == nil {
		var v bool = false
		t.EnableDownstreamOnDemand = &v
	}
	t.Authentication.PopulateDefaults()
	for _, e := range t.HelloAdjacency {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LabelSpaceId == nil {
		return nil, fmt.Errorf("nil value for key LabelSpaceId")
	}

	if t.LsrId == nil {
		return nil, fmt.Errorf("nil value for key LsrId")
	}

	return map[string]interface{}{
		"label-space-id": *t.LabelSpaceId,
		"lsr-id":         *t.LsrId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationKey  *string           `path:"config/authentication-key" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAuthenticationKey []ygot.Annotation `path:"config/@authentication-key" ygotAnnotation:"true"`
	Enable             *bool             `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnable            []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) IsYANGGoStruct() {}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency struct {
	ΛMetadata      []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	AdjacencyType  E_MplsLdp_MplsLdpAdjacencyType                                                     `path:"state/adjacency-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdjacencyType []ygot.Annotation                                                                  `path:"state/@adjacency-type" ygotAnnotation:"true"`
	HelloDropped   *uint64                                                                            `path:"state/hello-dropped" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloDropped  []ygot.Annotation                                                                  `path:"state/@hello-dropped" ygotAnnotation:"true"`
	HelloHoldtime  *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime `path:"hello-holdtime" module:"openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                  `path:"@hello-holdtime" ygotAnnotation:"true"`
	HelloReceived  *uint64                                                                            `path:"state/hello-received" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloReceived []ygot.Annotation                                                                  `path:"state/@hello-received" ygotAnnotation:"true"`
	InterfaceRef   *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef  `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef  []ygot.Annotation                                                                  `path:"@interface-ref" ygotAnnotation:"true"`
	LastClear      *uint64                                                                            `path:"state/last-clear" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastClear     []ygot.Annotation                                                                  `path:"state/@last-clear" ygotAnnotation:"true"`
	LocalAddress   *string                                                                            `path:"state/local-address|local-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation                                                                  `path:"state/@local-address|@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string                                                                            `path:"state/remote-address|remote-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation                                                                  `path:"state/@remote-address|@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) IsYANGGoStruct() {}

// GetOrCreateHelloHoldtime retrieves the value of the HelloHoldtime field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetOrCreateHelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime {
	if t.HelloHoldtime != nil {
		return t.HelloHoldtime
	}
	t.HelloHoldtime = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime{}
	return t.HelloHoldtime
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetOrCreateInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef{}
	return t.InterfaceRef
}

// GetHelloHoldtime returns the value of the HelloHoldtime struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency. If the receiver or the field HelloHoldtime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetHelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime {
	if t != nil && t.HelloHoldtime != nil {
		return t.HelloHoldtime
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetAdjacencyType retrieves the value of the leaf AdjacencyType from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyType is set, it can
// safely use t.GetAdjacencyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetAdjacencyType() E_MplsLdp_MplsLdpAdjacencyType {
	if t == nil || t.AdjacencyType == 0 {
		return 0
	}
	return t.AdjacencyType
}

// GetHelloDropped retrieves the value of the leaf HelloDropped from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloDropped is set, it can
// safely use t.GetHelloDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloDropped == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetHelloDropped() uint64 {
	if t == nil || t.HelloDropped == nil {
		return 0
	}
	return *t.HelloDropped
}

// GetHelloReceived retrieves the value of the leaf HelloReceived from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloReceived is set, it can
// safely use t.GetHelloReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloReceived == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetHelloReceived() uint64 {
	if t == nil || t.HelloReceived == nil {
		return 0
	}
	return *t.HelloReceived
}

// GetLastClear retrieves the value of the leaf LastClear from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HelloHoldtime.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalAddress == nil {
		return nil, fmt.Errorf("nil value for key LocalAddress")
	}

	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"local-address":  *t.LocalAddress,
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Adjacent         *uint16           `path:"state/adjacent" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdjacent        []ygot.Annotation `path:"state/@adjacent" ygotAnnotation:"true"`
	HelloExpiration  *uint64           `path:"state/hello-expiration" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloExpiration []ygot.Annotation `path:"state/@hello-expiration" ygotAnnotation:"true"`
	Negotiated       *uint16           `path:"state/negotiated" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNegotiated      []ygot.Annotation `path:"state/@negotiated" ygotAnnotation:"true"`
	NextHello        *uint64           `path:"state/next-hello" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHello       []ygot.Annotation `path:"state/@next-hello" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) IsYANGGoStruct() {
}

// GetAdjacent retrieves the value of the leaf Adjacent from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjacent is set, it can
// safely use t.GetAdjacent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjacent == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) GetAdjacent() uint16 {
	if t == nil || t.Adjacent == nil {
		return 0
	}
	return *t.Adjacent
}

// GetHelloExpiration retrieves the value of the leaf HelloExpiration from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloExpiration is set, it can
// safely use t.GetHelloExpiration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloExpiration == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) GetHelloExpiration() uint64 {
	if t == nil || t.HelloExpiration == nil {
		return 0
	}
	return *t.HelloExpiration
}

// GetNegotiated retrieves the value of the leaf Negotiated from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Negotiated is set, it can
// safely use t.GetNegotiated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Negotiated == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) GetNegotiated() uint16 {
	if t == nil || t.Negotiated == nil {
		return 0
	}
	return *t.Negotiated
}

// GetNextHello retrieves the value of the leaf NextHello from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHello is set, it can
// safely use t.GetNextHello() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHello == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) GetNextHello() uint64 {
	if t == nil || t.NextHello == nil {
		return 0
	}
	return *t.NextHello
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"state/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"state/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"state/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted struct {
	ΛMetadata      []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	AddressFamily  map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily `path:"address-families/address-family" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                                                                            `path:"address-families/@address-family" ygotAnnotation:"true"`
	HelloAccept    *bool                                                                                        `path:"config/hello-accept" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloAccept   []ygot.Annotation                                                                            `path:"config/@hello-accept" ygotAnnotation:"true"`
	HelloHoldtime  *uint16                                                                                      `path:"config/hello-holdtime" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation                                                                            `path:"config/@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16                                                                                      `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation                                                                            `path:"config/@hello-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) IsYANGGoStruct() {}

// NewAddressFamily creates a new entry in the AddressFamily list of the
// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) NewAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
	}

	key := AfiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressFamily[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressFamily", key)
	}

	t.AddressFamily[key] = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily{
		AfiName: AfiName,
	}

	return t.AddressFamily[key], nil
}

// RenameAddressFamily renames an entry in the list AddressFamily within
// the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) RenameAddressFamily(oldK, newK E_MplsLdp_MplsLdpAfi) error {
	if _, ok := t.AddressFamily[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressFamily", newK)
	}

	e, ok := t.AddressFamily[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressFamily", oldK)
	}
	e.AfiName = newK

	t.AddressFamily[newK] = e
	delete(t.AddressFamily, oldK)
	return nil
}

// GetOrCreateAddressFamily retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetOrCreateAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily {

	key := AfiName

	if v, ok := t.AddressFamily[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressFamily(AfiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressFamily got unexpected error: %v", err))
	}
	return v
}

// GetAddressFamily retrieves the value with the specified key from
// the AddressFamily map field of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily {

	if t == nil {
		return nil
	}

	key := AfiName

	if lm, ok := t.AddressFamily[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressFamily deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) DeleteAddressFamily(AfiName E_MplsLdp_MplsLdpAfi) {
	key := AfiName

	delete(t.AddressFamily, key)
}

// AppendAddressFamily appends the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily struct to the
// list AddressFamily of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) AppendAddressFamily(v *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) error {
	key := v.AfiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressFamily == nil {
		t.AddressFamily = make(map[E_MplsLdp_MplsLdpAfi]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
	}

	if _, ok := t.AddressFamily[key]; ok {
		return fmt.Errorf("duplicate key for list AddressFamily %v", key)
	}

	t.AddressFamily[key] = v
	return nil
}

// GetHelloAccept retrieves the value of the leaf HelloAccept from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAccept is set, it can
// safely use t.GetHelloAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAccept == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetHelloAccept() bool {
	if t == nil || t.HelloAccept == nil {
		return false
	}
	return *t.HelloAccept
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AddressFamily {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	AfiName   E_MplsLdp_MplsLdpAfi                                                                  `path:"config/afi-name|afi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation                                                                     `path:"config/@afi-name|@afi-name" ygotAnnotation:"true"`
	Target    map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target `path:"targets/target" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTarget   []ygot.Annotation                                                                     `path:"targets/@target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) IsYANGGoStruct() {}

// NewTarget creates a new entry in the Target list of the
// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) NewTarget(RemoteAddress string) (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Target[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Target", key)
	}

	t.Target[key] = &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target{
		RemoteAddress: &RemoteAddress,
	}

	return t.Target[key], nil
}

// RenameTarget renames an entry in the list Target within
// the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) RenameTarget(oldK, newK string) error {
	if _, ok := t.Target[newK]; ok {
		return fmt.Errorf("key %v already exists in Target", newK)
	}

	e, ok := t.Target[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Target", oldK)
	}
	e.RemoteAddress = &newK

	t.Target[newK] = e
	delete(t.Target, oldK)
	return nil
}

// GetOrCreateTarget retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) GetOrCreateTarget(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target {

	key := RemoteAddress

	if v, ok := t.Target[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTarget(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTarget got unexpected error: %v", err))
	}
	return v
}

// GetTarget retrieves the value with the specified key from
// the Target map field of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) GetTarget(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Target[key]; ok {
		return lm
	}
	return nil
}

// DeleteTarget deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) DeleteTarget(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Target, key)
}

// AppendTarget appends the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target struct to the
// list Target of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) AppendTarget(v *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
	}

	if _, ok := t.Target[key]; ok {
		return fmt.Errorf("duplicate key for list Target %v", key)
	}

	t.Target[key] = v
	return nil
}

// GetAfiName retrieves the value of the leaf AfiName from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiName is set, it can
// safely use t.GetAfiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) GetAfiName() E_MplsLdp_MplsLdpAfi {
	if t == nil || t.AfiName == 0 {
		return 0
	}
	return t.AfiName
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Target {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name": t.AfiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled        *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
	HelloHoldtime  *uint16           `path:"config/hello-holdtime" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloHoldtime []ygot.Annotation `path:"config/@hello-holdtime" ygotAnnotation:"true"`
	HelloInterval  *uint16           `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval []ygot.Annotation `path:"config/@hello-interval" ygotAnnotation:"true"`
	LocalAddress   *string           `path:"config/local-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLocalAddress  []ygot.Annotation `path:"config/@local-address" ygotAnnotation:"true"`
	RemoteAddress  *string           `path:"config/remote-address|remote-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛRemoteAddress []ygot.Annotation `path:"config/@remote-address|@remote-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target.
func (*NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct {
	ΛMetadata  []ygot.Annotation                                                    `path:"@" ygotAnnotation:"true"`
	Global     *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global               `path:"global" module:"openconfig-network-instance"`
	ΛGlobal    []ygot.Annotation                                                    `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface `path:"interface-attributes/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                                    `path:"interface-attributes/@interface" ygotAnnotation:"true"`
	Neighbor   map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor  `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor  []ygot.Annotation                                                    `path:"neighbors/@neighbor" ygotAnnotation:"true"`
	Session    map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session   `path:"sessions/session" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSession   []ygot.Annotation                                                    `path:"sessions/@session" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) NewInterface(InterfaceId string) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface struct to the
// list Interface of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) AppendInterface(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) NewNeighbor(Address string) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateNeighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetNeighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor struct to the
// list Neighbor of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) AppendNeighbor(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// NewSession creates a new entry in the Session list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) NewSession(LocalIndex uint64) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session)
	}

	key := LocalIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Session[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Session", key)
	}

	t.Session[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session{
		LocalIndex: &LocalIndex,
	}

	return t.Session[key], nil
}

// RenameSession renames an entry in the list Session within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) RenameSession(oldK, newK uint64) error {
	if _, ok := t.Session[newK]; ok {
		return fmt.Errorf("key %v already exists in Session", newK)
	}

	e, ok := t.Session[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Session", oldK)
	}
	e.LocalIndex = &newK

	t.Session[newK] = e
	delete(t.Session, oldK)
	return nil
}

// GetOrCreateSession retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateSession(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session {

	key := LocalIndex

	if v, ok := t.Session[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSession(LocalIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSession got unexpected error: %v", err))
	}
	return v
}

// GetSession retrieves the value with the specified key from
// the Session map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetSession(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session {

	if t == nil {
		return nil
	}

	key := LocalIndex

	if lm, ok := t.Session[key]; ok {
		return lm
	}
	return nil
}

// DeleteSession deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) DeleteSession(LocalIndex uint64) {
	key := LocalIndex

	delete(t.Session, key)
}

// AppendSession appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct to the
// list Session of NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) AppendSession(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) error {
	if v.LocalIndex == nil {
		return fmt.Errorf("invalid nil key received for LocalIndex")
	}

	key := *v.LocalIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session)
	}

	if _, ok := t.Session[key]; ok {
		return fmt.Errorf("duplicate key for list Session %v", key)
	}

	t.Session[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetOrCreateGlobal() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) GetGlobal() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Global.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
	for _, e := range t.Session {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global struct {
	ΛMetadata        []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Counters         *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters        `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters        []ygot.Annotation                                                      `path:"state/@counters" ygotAnnotation:"true"`
	GracefulRestart  *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart []ygot.Annotation                                                      `path:"@graceful-restart" ygotAnnotation:"true"`
	Hellos           *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos          `path:"hellos" module:"openconfig-network-instance"`
	ΛHellos          []ygot.Annotation                                                      `path:"@hellos" ygotAnnotation:"true"`
	SoftPreemption   *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption  `path:"soft-preemption" module:"openconfig-network-instance"`
	ΛSoftPreemption  []ygot.Annotation                                                      `path:"@soft-preemption" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateCounters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters{}
	return t.Counters
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateGracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHellos retrieves the value of the Hellos field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateHellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos {
	if t.Hellos != nil {
		return t.Hellos
	}
	t.Hellos = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos{}
	return t.Hellos
}

// GetOrCreateSoftPreemption retrieves the value of the SoftPreemption field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetOrCreateSoftPreemption() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption {
	if t.SoftPreemption != nil {
		return t.SoftPreemption
	}
	t.SoftPreemption = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption{}
	return t.SoftPreemption
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetCounters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetGracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHellos returns the value of the Hellos struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field Hellos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetHellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos {
	if t != nil && t.Hellos != nil {
		return t.Hellos
	}
	return nil
}

// GetSoftPreemption returns the value of the SoftPreemption struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global. If the receiver or the field SoftPreemption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) GetSoftPreemption() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption {
	if t != nil && t.SoftPreemption != nil {
		return t.SoftPreemption
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Hellos.PopulateDefaults()
	t.SoftPreemption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters struct {
	ΛMetadata                    []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Errors                       *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors `path:"errors" module:"openconfig-network-instance"`
	ΛErrors                      []ygot.Annotation                                                      `path:"@errors" ygotAnnotation:"true"`
	InAckMessages                *uint64                                                                `path:"in-ack-messages" module:"openconfig-network-instance"`
	ΛInAckMessages               []ygot.Annotation                                                      `path:"@in-ack-messages" ygotAnnotation:"true"`
	InHelloMessages              *uint64                                                                `path:"in-hello-messages" module:"openconfig-network-instance"`
	ΛInHelloMessages             []ygot.Annotation                                                      `path:"@in-hello-messages" ygotAnnotation:"true"`
	InPathErrorMessages          *uint64                                                                `path:"in-path-error-messages" module:"openconfig-network-instance"`
	ΛInPathErrorMessages         []ygot.Annotation                                                      `path:"@in-path-error-messages" ygotAnnotation:"true"`
	InPathMessages               *uint64                                                                `path:"in-path-messages" module:"openconfig-network-instance"`
	ΛInPathMessages              []ygot.Annotation                                                      `path:"@in-path-messages" ygotAnnotation:"true"`
	InPathTearMessages           *uint64                                                                `path:"in-path-tear-messages" module:"openconfig-network-instance"`
	ΛInPathTearMessages          []ygot.Annotation                                                      `path:"@in-path-tear-messages" ygotAnnotation:"true"`
	InReservationErrorMessages   *uint64                                                                `path:"in-reservation-error-messages" module:"openconfig-network-instance"`
	ΛInReservationErrorMessages  []ygot.Annotation                                                      `path:"@in-reservation-error-messages" ygotAnnotation:"true"`
	InReservationMessages        *uint64                                                                `path:"in-reservation-messages" module:"openconfig-network-instance"`
	ΛInReservationMessages       []ygot.Annotation                                                      `path:"@in-reservation-messages" ygotAnnotation:"true"`
	InReservationTearMessages    *uint64                                                                `path:"in-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛInReservationTearMessages   []ygot.Annotation                                                      `path:"@in-reservation-tear-messages" ygotAnnotation:"true"`
	InSrefreshMessages           *uint64                                                                `path:"in-srefresh-messages" module:"openconfig-network-instance"`
	ΛInSrefreshMessages          []ygot.Annotation                                                      `path:"@in-srefresh-messages" ygotAnnotation:"true"`
	OutAckMessages               *uint64                                                                `path:"out-ack-messages" module:"openconfig-network-instance"`
	ΛOutAckMessages              []ygot.Annotation                                                      `path:"@out-ack-messages" ygotAnnotation:"true"`
	OutHelloMessages             *uint64                                                                `path:"out-hello-messages" module:"openconfig-network-instance"`
	ΛOutHelloMessages            []ygot.Annotation                                                      `path:"@out-hello-messages" ygotAnnotation:"true"`
	OutPathErrorMessages         *uint64                                                                `path:"out-path-error-messages" module:"openconfig-network-instance"`
	ΛOutPathErrorMessages        []ygot.Annotation                                                      `path:"@out-path-error-messages" ygotAnnotation:"true"`
	OutPathMessages              *uint64                                                                `path:"out-path-messages" module:"openconfig-network-instance"`
	ΛOutPathMessages             []ygot.Annotation                                                      `path:"@out-path-messages" ygotAnnotation:"true"`
	OutPathTearMessages          *uint64                                                                `path:"out-path-tear-messages" module:"openconfig-network-instance"`
	ΛOutPathTearMessages         []ygot.Annotation                                                      `path:"@out-path-tear-messages" ygotAnnotation:"true"`
	OutReservationErrorMessages  *uint64                                                                `path:"out-reservation-error-messages" module:"openconfig-network-instance"`
	ΛOutReservationErrorMessages []ygot.Annotation                                                      `path:"@out-reservation-error-messages" ygotAnnotation:"true"`
	OutReservationMessages       *uint64                                                                `path:"out-reservation-messages" module:"openconfig-network-instance"`
	ΛOutReservationMessages      []ygot.Annotation                                                      `path:"@out-reservation-messages" ygotAnnotation:"true"`
	OutReservationTearMessages   *uint64                                                                `path:"out-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛOutReservationTearMessages  []ygot.Annotation                                                      `path:"@out-reservation-tear-messages" ygotAnnotation:"true"`
	OutSrefreshMessages          *uint64                                                                `path:"out-srefresh-messages" module:"openconfig-network-instance"`
	ΛOutSrefreshMessages         []ygot.Annotation                                                      `path:"@out-srefresh-messages" ygotAnnotation:"true"`
	PathTimeouts                 *uint64                                                                `path:"path-timeouts" module:"openconfig-network-instance"`
	ΛPathTimeouts                []ygot.Annotation                                                      `path:"@path-timeouts" ygotAnnotation:"true"`
	RateLimitedMessages          *uint64                                                                `path:"rate-limited-messages" module:"openconfig-network-instance"`
	ΛRateLimitedMessages         []ygot.Annotation                                                      `path:"@rate-limited-messages" ygotAnnotation:"true"`
	ReservationTimeouts          *uint64                                                                `path:"reservation-timeouts" module:"openconfig-network-instance"`
	ΛReservationTimeouts         []ygot.Annotation                                                      `path:"@reservation-timeouts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) IsYANGGoStruct() {}

// GetOrCreateErrors retrieves the value of the Errors field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOrCreateErrors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors {
	if t.Errors != nil {
		return t.Errors
	}
	t.Errors = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors{}
	return t.Errors
}

// GetErrors returns the value of the Errors struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters. If the receiver or the field Errors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetErrors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors {
	if t != nil && t.Errors != nil {
		return t.Errors
	}
	return nil
}

// GetInAckMessages retrieves the value of the leaf InAckMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InAckMessages is set, it can
// safely use t.GetInAckMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InAckMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInAckMessages() uint64 {
	if t == nil || t.InAckMessages == nil {
		return 0
	}
	return *t.InAckMessages
}

// GetInHelloMessages retrieves the value of the leaf InHelloMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InHelloMessages is set, it can
// safely use t.GetInHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InHelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInHelloMessages() uint64 {
	if t == nil || t.InHelloMessages == nil {
		return 0
	}
	return *t.InHelloMessages
}

// GetInPathErrorMessages retrieves the value of the leaf InPathErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathErrorMessages is set, it can
// safely use t.GetInPathErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInPathErrorMessages() uint64 {
	if t == nil || t.InPathErrorMessages == nil {
		return 0
	}
	return *t.InPathErrorMessages
}

// GetInPathMessages retrieves the value of the leaf InPathMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathMessages is set, it can
// safely use t.GetInPathMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInPathMessages() uint64 {
	if t == nil || t.InPathMessages == nil {
		return 0
	}
	return *t.InPathMessages
}

// GetInPathTearMessages retrieves the value of the leaf InPathTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathTearMessages is set, it can
// safely use t.GetInPathTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInPathTearMessages() uint64 {
	if t == nil || t.InPathTearMessages == nil {
		return 0
	}
	return *t.InPathTearMessages
}

// GetInReservationErrorMessages retrieves the value of the leaf InReservationErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationErrorMessages is set, it can
// safely use t.GetInReservationErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInReservationErrorMessages() uint64 {
	if t == nil || t.InReservationErrorMessages == nil {
		return 0
	}
	return *t.InReservationErrorMessages
}

// GetInReservationMessages retrieves the value of the leaf InReservationMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationMessages is set, it can
// safely use t.GetInReservationMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInReservationMessages() uint64 {
	if t == nil || t.InReservationMessages == nil {
		return 0
	}
	return *t.InReservationMessages
}

// GetInReservationTearMessages retrieves the value of the leaf InReservationTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationTearMessages is set, it can
// safely use t.GetInReservationTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInReservationTearMessages() uint64 {
	if t == nil || t.InReservationTearMessages == nil {
		return 0
	}
	return *t.InReservationTearMessages
}

// GetInSrefreshMessages retrieves the value of the leaf InSrefreshMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSrefreshMessages is set, it can
// safely use t.GetInSrefreshMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSrefreshMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetInSrefreshMessages() uint64 {
	if t == nil || t.InSrefreshMessages == nil {
		return 0
	}
	return *t.InSrefreshMessages
}

// GetOutAckMessages retrieves the value of the leaf OutAckMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutAckMessages is set, it can
// safely use t.GetOutAckMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutAckMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutAckMessages() uint64 {
	if t == nil || t.OutAckMessages == nil {
		return 0
	}
	return *t.OutAckMessages
}

// GetOutHelloMessages retrieves the value of the leaf OutHelloMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutHelloMessages is set, it can
// safely use t.GetOutHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutHelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutHelloMessages() uint64 {
	if t == nil || t.OutHelloMessages == nil {
		return 0
	}
	return *t.OutHelloMessages
}

// GetOutPathErrorMessages retrieves the value of the leaf OutPathErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathErrorMessages is set, it can
// safely use t.GetOutPathErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutPathErrorMessages() uint64 {
	if t == nil || t.OutPathErrorMessages == nil {
		return 0
	}
	return *t.OutPathErrorMessages
}

// GetOutPathMessages retrieves the value of the leaf OutPathMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathMessages is set, it can
// safely use t.GetOutPathMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutPathMessages() uint64 {
	if t == nil || t.OutPathMessages == nil {
		return 0
	}
	return *t.OutPathMessages
}

// GetOutPathTearMessages retrieves the value of the leaf OutPathTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathTearMessages is set, it can
// safely use t.GetOutPathTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutPathTearMessages() uint64 {
	if t == nil || t.OutPathTearMessages == nil {
		return 0
	}
	return *t.OutPathTearMessages
}

// GetOutReservationErrorMessages retrieves the value of the leaf OutReservationErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationErrorMessages is set, it can
// safely use t.GetOutReservationErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutReservationErrorMessages() uint64 {
	if t == nil || t.OutReservationErrorMessages == nil {
		return 0
	}
	return *t.OutReservationErrorMessages
}

// GetOutReservationMessages retrieves the value of the leaf OutReservationMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationMessages is set, it can
// safely use t.GetOutReservationMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutReservationMessages() uint64 {
	if t == nil || t.OutReservationMessages == nil {
		return 0
	}
	return *t.OutReservationMessages
}

// GetOutReservationTearMessages retrieves the value of the leaf OutReservationTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationTearMessages is set, it can
// safely use t.GetOutReservationTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutReservationTearMessages() uint64 {
	if t == nil || t.OutReservationTearMessages == nil {
		return 0
	}
	return *t.OutReservationTearMessages
}

// GetOutSrefreshMessages retrieves the value of the leaf OutSrefreshMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutSrefreshMessages is set, it can
// safely use t.GetOutSrefreshMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutSrefreshMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetOutSrefreshMessages() uint64 {
	if t == nil || t.OutSrefreshMessages == nil {
		return 0
	}
	return *t.OutSrefreshMessages
}

// GetPathTimeouts retrieves the value of the leaf PathTimeouts from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathTimeouts is set, it can
// safely use t.GetPathTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathTimeouts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetPathTimeouts() uint64 {
	if t == nil || t.PathTimeouts == nil {
		return 0
	}
	return *t.PathTimeouts
}

// GetRateLimitedMessages retrieves the value of the leaf RateLimitedMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimitedMessages is set, it can
// safely use t.GetRateLimitedMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimitedMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetRateLimitedMessages() uint64 {
	if t == nil || t.RateLimitedMessages == nil {
		return 0
	}
	return *t.RateLimitedMessages
}

// GetReservationTimeouts retrieves the value of the leaf ReservationTimeouts from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservationTimeouts is set, it can
// safely use t.GetReservationTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservationTimeouts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) GetReservationTimeouts() uint64 {
	if t == nil || t.ReservationTimeouts == nil {
		return 0
	}
	return *t.ReservationTimeouts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Errors.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationFail  *uint64           `path:"authentication-fail" module:"openconfig-network-instance"`
	ΛAuthenticationFail []ygot.Annotation `path:"@authentication-fail" ygotAnnotation:"true"`
	BadChecksum         *uint64           `path:"bad-checksum" module:"openconfig-network-instance"`
	ΛBadChecksum        []ygot.Annotation `path:"@bad-checksum" ygotAnnotation:"true"`
	BadPacketFormat     *uint64           `path:"bad-packet-format" module:"openconfig-network-instance"`
	ΛBadPacketFormat    []ygot.Annotation `path:"@bad-packet-format" ygotAnnotation:"true"`
	BadPacketLength     *uint64           `path:"bad-packet-length" module:"openconfig-network-instance"`
	ΛBadPacketLength    []ygot.Annotation `path:"@bad-packet-length" ygotAnnotation:"true"`
	OutOfOrder          *uint64           `path:"out-of-order" module:"openconfig-network-instance"`
	ΛOutOfOrder         []ygot.Annotation `path:"@out-of-order" ygotAnnotation:"true"`
	ReceivedNack        *uint64           `path:"received-nack" module:"openconfig-network-instance"`
	ΛReceivedNack       []ygot.Annotation `path:"@received-nack" ygotAnnotation:"true"`
	TransmitFailure     *uint64           `path:"transmit-failure" module:"openconfig-network-instance"`
	ΛTransmitFailure    []ygot.Annotation `path:"@transmit-failure" ygotAnnotation:"true"`
	TransmitQueueFull   *uint64           `path:"transmit-queue-full" module:"openconfig-network-instance"`
	ΛTransmitQueueFull  []ygot.Annotation `path:"@transmit-queue-full" ygotAnnotation:"true"`
	UnknownAck          *uint64           `path:"unknown-ack" module:"openconfig-network-instance"`
	ΛUnknownAck         []ygot.Annotation `path:"@unknown-ack" ygotAnnotation:"true"`
	UnknownNack         *uint64           `path:"unknown-nack" module:"openconfig-network-instance"`
	ΛUnknownNack        []ygot.Annotation `path:"@unknown-nack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) IsYANGGoStruct() {}

// GetAuthenticationFail retrieves the value of the leaf AuthenticationFail from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationFail is set, it can
// safely use t.GetAuthenticationFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationFail == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetAuthenticationFail() uint64 {
	if t == nil || t.AuthenticationFail == nil {
		return 0
	}
	return *t.AuthenticationFail
}

// GetBadChecksum retrieves the value of the leaf BadChecksum from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadChecksum is set, it can
// safely use t.GetBadChecksum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadChecksum == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetBadChecksum() uint64 {
	if t == nil || t.BadChecksum == nil {
		return 0
	}
	return *t.BadChecksum
}

// GetBadPacketFormat retrieves the value of the leaf BadPacketFormat from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadPacketFormat is set, it can
// safely use t.GetBadPacketFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadPacketFormat == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetBadPacketFormat() uint64 {
	if t == nil || t.BadPacketFormat == nil {
		return 0
	}
	return *t.BadPacketFormat
}

// GetBadPacketLength retrieves the value of the leaf BadPacketLength from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadPacketLength is set, it can
// safely use t.GetBadPacketLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadPacketLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetBadPacketLength() uint64 {
	if t == nil || t.BadPacketLength == nil {
		return 0
	}
	return *t.BadPacketLength
}

// GetOutOfOrder retrieves the value of the leaf OutOfOrder from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOfOrder is set, it can
// safely use t.GetOutOfOrder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOfOrder == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetOutOfOrder() uint64 {
	if t == nil || t.OutOfOrder == nil {
		return 0
	}
	return *t.OutOfOrder
}

// GetReceivedNack retrieves the value of the leaf ReceivedNack from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceivedNack is set, it can
// safely use t.GetReceivedNack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceivedNack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetReceivedNack() uint64 {
	if t == nil || t.ReceivedNack == nil {
		return 0
	}
	return *t.ReceivedNack
}

// GetTransmitFailure retrieves the value of the leaf TransmitFailure from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitFailure is set, it can
// safely use t.GetTransmitFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitFailure == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetTransmitFailure() uint64 {
	if t == nil || t.TransmitFailure == nil {
		return 0
	}
	return *t.TransmitFailure
}

// GetTransmitQueueFull retrieves the value of the leaf TransmitQueueFull from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitQueueFull is set, it can
// safely use t.GetTransmitQueueFull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitQueueFull == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetTransmitQueueFull() uint64 {
	if t == nil || t.TransmitQueueFull == nil {
		return 0
	}
	return *t.TransmitQueueFull
}

// GetUnknownAck retrieves the value of the leaf UnknownAck from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownAck is set, it can
// safely use t.GetUnknownAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownAck == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetUnknownAck() uint64 {
	if t == nil || t.UnknownAck == nil {
		return 0
	}
	return *t.UnknownAck
}

// GetUnknownNack retrieves the value of the leaf UnknownNack from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNack is set, it can
// safely use t.GetUnknownNack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) GetUnknownNack() uint64 {
	if t == nil || t.UnknownNack == nil {
		return 0
	}
	return *t.UnknownNack
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnable       []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
	RecoveryTime  *uint32           `path:"config/recovery-time" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRecoveryTime []ygot.Annotation `path:"config/@recovery-time" ygotAnnotation:"true"`
	RestartTime   *uint32           `path:"config/restart-time" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRestartTime  []ygot.Annotation `path:"config/@restart-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetRecoveryTime() uint32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 0
	}
	return *t.RestartTime
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloInterval     *uint16           `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval    []ygot.Annotation `path:"config/@hello-interval" ygotAnnotation:"true"`
	RefreshReduction  *bool             `path:"config/refresh-reduction" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRefreshReduction []ygot.Annotation `path:"config/@refresh-reduction" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) IsYANGGoStruct() {}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 9000
	}
	return *t.HelloInterval
}

// GetRefreshReduction retrieves the value of the leaf RefreshReduction from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshReduction is set, it can
// safely use t.GetRefreshReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshReduction == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) GetRefreshReduction() bool {
	if t == nil || t.RefreshReduction == nil {
		return true
	}
	return *t.RefreshReduction
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint16 = 9000
		t.HelloInterval = &v
	}
	if t.RefreshReduction == nil {
		var v bool = true
		t.RefreshReduction = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable                 *bool             `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnable                []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
	SoftPreemptionTimeout  *uint16           `path:"config/soft-preemption-timeout" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSoftPreemptionTimeout []ygot.Annotation `path:"config/@soft-preemption-timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetSoftPreemptionTimeout retrieves the value of the leaf SoftPreemptionTimeout from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftPreemptionTimeout is set, it can
// safely use t.GetSoftPreemptionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftPreemptionTimeout == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) GetSoftPreemptionTimeout() uint16 {
	if t == nil || t.SoftPreemptionTimeout == nil {
		return 30
	}
	return *t.SoftPreemptionTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
	if t.SoftPreemptionTimeout == nil {
		var v uint16 = 30
		t.SoftPreemptionTimeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface struct {
	ΛMetadata             []ygot.Annotation                                                                                                                                                               `path:"@" ygotAnnotation:"true"`
	Authentication        *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication                                                                                                        `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication       []ygot.Annotation                                                                                                                                                               `path:"@authentication" ygotAnnotation:"true"`
	BandwidthReservation  map[NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation `path:"bandwidth-reservations/bandwidth-reservation" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBandwidthReservation []ygot.Annotation                                                                                                                                                               `path:"bandwidth-reservations/@bandwidth-reservation" ygotAnnotation:"true"`
	Counters              *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters                                                                                                              `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters             []ygot.Annotation                                                                                                                                                               `path:"state/@counters" ygotAnnotation:"true"`
	Hellos                *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos                                                                                                                `path:"hellos" module:"openconfig-network-instance"`
	ΛHellos               []ygot.Annotation                                                                                                                                                               `path:"@hellos" ygotAnnotation:"true"`
	InterfaceId           *string                                                                                                                                                                         `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId          []ygot.Annotation                                                                                                                                                               `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef          *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef                                                                                                          `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef         []ygot.Annotation                                                                                                                                                               `path:"@interface-ref" ygotAnnotation:"true"`
	MaxLinkBandwidth      *uint64                                                                                                                                                                         `path:"state/max-link-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaxLinkBandwidth     []ygot.Annotation                                                                                                                                                               `path:"state/@max-link-bandwidth" ygotAnnotation:"true"`
	Protection            *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection                                                                                                            `path:"protection" module:"openconfig-network-instance"`
	ΛProtection           []ygot.Annotation                                                                                                                                                               `path:"@protection" ygotAnnotation:"true"`
	Subscription          *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription                                                                                                          `path:"subscription" module:"openconfig-network-instance"`
	ΛSubscription         []ygot.Annotation                                                                                                                                                               `path:"@subscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) IsYANGGoStruct() {}

// NewBandwidthReservation creates a new entry in the BandwidthReservation list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) NewBandwidthReservation(Priority NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BandwidthReservation == nil {
		t.BandwidthReservation = make(map[NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
	}

	key := Priority

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BandwidthReservation[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BandwidthReservation", key)
	}

	t.BandwidthReservation[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation{
		Priority: Priority,
	}

	return t.BandwidthReservation[key], nil
}

// RenameBandwidthReservation renames an entry in the list BandwidthReservation within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) RenameBandwidthReservation(oldK, newK NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) error {
	if _, ok := t.BandwidthReservation[newK]; ok {
		return fmt.Errorf("key %v already exists in BandwidthReservation", newK)
	}

	e, ok := t.BandwidthReservation[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BandwidthReservation", oldK)
	}
	e.Priority = newK

	t.BandwidthReservation[newK] = e
	delete(t.BandwidthReservation, oldK)
	return nil
}

// GetOrCreateBandwidthReservation retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateBandwidthReservation(Priority NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation {

	key := Priority

	if v, ok := t.BandwidthReservation[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBandwidthReservation(Priority)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBandwidthReservation got unexpected error: %v", err))
	}
	return v
}

// GetBandwidthReservation retrieves the value with the specified key from
// the BandwidthReservation map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetBandwidthReservation(Priority NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation {

	if t == nil {
		return nil
	}

	key := Priority

	if lm, ok := t.BandwidthReservation[key]; ok {
		return lm
	}
	return nil
}

// DeleteBandwidthReservation deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) DeleteBandwidthReservation(Priority NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) {
	key := Priority

	delete(t.BandwidthReservation, key)
}

// AppendBandwidthReservation appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation struct to the
// list BandwidthReservation of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) AppendBandwidthReservation(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) error {
	key := v.Priority

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BandwidthReservation == nil {
		t.BandwidthReservation = make(map[NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
	}

	if _, ok := t.BandwidthReservation[key]; ok {
		return fmt.Errorf("duplicate key for list BandwidthReservation %v", key)
	}

	t.BandwidthReservation[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateAuthentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateCounters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters{}
	return t.Counters
}

// GetOrCreateHellos retrieves the value of the Hellos field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateHellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos {
	if t.Hellos != nil {
		return t.Hellos
	}
	t.Hellos = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos{}
	return t.Hellos
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateProtection retrieves the value of the Protection field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateProtection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection {
	if t.Protection != nil {
		return t.Protection
	}
	t.Protection = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection{}
	return t.Protection
}

// GetOrCreateSubscription retrieves the value of the Subscription field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetOrCreateSubscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription {
	if t.Subscription != nil {
		return t.Subscription
	}
	t.Subscription = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription{}
	return t.Subscription
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetAuthentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetCounters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetHellos returns the value of the Hellos struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field Hellos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetHellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos {
	if t != nil && t.Hellos != nil {
		return t.Hellos
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetProtection returns the value of the Protection struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field Protection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetProtection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection {
	if t != nil && t.Protection != nil {
		return t.Protection
	}
	return nil
}

// GetSubscription returns the value of the Subscription struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface. If the receiver or the field Subscription is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetSubscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription {
	if t != nil && t.Subscription != nil {
		return t.Subscription
	}
	return nil
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetMaxLinkBandwidth retrieves the value of the leaf MaxLinkBandwidth from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinkBandwidth is set, it can
// safely use t.GetMaxLinkBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinkBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) GetMaxLinkBandwidth() uint64 {
	if t == nil || t.MaxLinkBandwidth == nil {
		return 0
	}
	return *t.MaxLinkBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authentication.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.Hellos.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Protection.PopulateDefaults()
	t.Subscription.PopulateDefaults()
	for _, e := range t.BandwidthReservation {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication struct {
	ΛMetadata           []ygot.Annotation          `path:"@" ygotAnnotation:"true"`
	AuthenticationKey   *string                    `path:"config/authentication-key" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAuthenticationKey  []ygot.Annotation          `path:"config/@authentication-key" ygotAnnotation:"true"`
	AuthenticationType  E_MplsTypes_RSVP_AUTH_TYPE `path:"config/authentication-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAuthenticationType []ygot.Annotation          `path:"config/@authentication-type" ygotAnnotation:"true"`
	Enable              *bool                      `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnable             []ygot.Annotation          `path:"config/@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) IsYANGGoStruct() {}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) GetAuthenticationType() E_MplsTypes_RSVP_AUTH_TYPE {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation struct {
	ΛMetadata                []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	ActiveReservationsCount  *uint64                                                                                      `path:"state/active-reservations-count" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActiveReservationsCount []ygot.Annotation                                                                            `path:"state/@active-reservations-count" ygotAnnotation:"true"`
	AvailableBandwidth       *uint64                                                                                      `path:"state/available-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAvailableBandwidth      []ygot.Annotation                                                                            `path:"state/@available-bandwidth" ygotAnnotation:"true"`
	HighwaterMark            *uint64                                                                                      `path:"state/highwater-mark" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHighwaterMark           []ygot.Annotation                                                                            `path:"state/@highwater-mark" ygotAnnotation:"true"`
	Priority                 NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union `path:"state/priority|priority" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPriority                []ygot.Annotation                                                                            `path:"state/@priority|@priority" ygotAnnotation:"true"`
	ReservedBandwidth        *uint64                                                                                      `path:"state/reserved-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReservedBandwidth       []ygot.Annotation                                                                            `path:"state/@reserved-bandwidth" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) IsYANGGoStruct() {
}

// GetActiveReservationsCount retrieves the value of the leaf ActiveReservationsCount from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveReservationsCount is set, it can
// safely use t.GetActiveReservationsCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveReservationsCount == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) GetActiveReservationsCount() uint64 {
	if t == nil || t.ActiveReservationsCount == nil {
		return 0
	}
	return *t.ActiveReservationsCount
}

// GetAvailableBandwidth retrieves the value of the leaf AvailableBandwidth from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvailableBandwidth is set, it can
// safely use t.GetAvailableBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvailableBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) GetAvailableBandwidth() uint64 {
	if t == nil || t.AvailableBandwidth == nil {
		return 0
	}
	return *t.AvailableBandwidth
}

// GetHighwaterMark retrieves the value of the leaf HighwaterMark from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighwaterMark is set, it can
// safely use t.GetHighwaterMark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighwaterMark == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) GetHighwaterMark() uint64 {
	if t == nil || t.HighwaterMark == nil {
		return 0
	}
	return *t.HighwaterMark
}

// GetPriority retrieves the value of the leaf Priority from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) GetPriority() NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union {
	if t == nil || t.Priority == nil {
		return nil
	}
	return t.Priority
}

// GetReservedBandwidth retrieves the value of the leaf ReservedBandwidth from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedBandwidth is set, it can
// safely use t.GetReservedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) GetReservedBandwidth() uint64 {
	if t == nil || t.ReservedBandwidth == nil {
		return 0
	}
	return *t.ReservedBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority": t.Priority,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters struct {
	ΛMetadata                    []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	Errors                       *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors `path:"errors" module:"openconfig-network-instance"`
	ΛErrors                      []ygot.Annotation                                                         `path:"@errors" ygotAnnotation:"true"`
	InAckMessages                *uint64                                                                   `path:"in-ack-messages" module:"openconfig-network-instance"`
	ΛInAckMessages               []ygot.Annotation                                                         `path:"@in-ack-messages" ygotAnnotation:"true"`
	InHelloMessages              *uint64                                                                   `path:"in-hello-messages" module:"openconfig-network-instance"`
	ΛInHelloMessages             []ygot.Annotation                                                         `path:"@in-hello-messages" ygotAnnotation:"true"`
	InPathErrorMessages          *uint64                                                                   `path:"in-path-error-messages" module:"openconfig-network-instance"`
	ΛInPathErrorMessages         []ygot.Annotation                                                         `path:"@in-path-error-messages" ygotAnnotation:"true"`
	InPathMessages               *uint64                                                                   `path:"in-path-messages" module:"openconfig-network-instance"`
	ΛInPathMessages              []ygot.Annotation                                                         `path:"@in-path-messages" ygotAnnotation:"true"`
	InPathTearMessages           *uint64                                                                   `path:"in-path-tear-messages" module:"openconfig-network-instance"`
	ΛInPathTearMessages          []ygot.Annotation                                                         `path:"@in-path-tear-messages" ygotAnnotation:"true"`
	InReservationErrorMessages   *uint64                                                                   `path:"in-reservation-error-messages" module:"openconfig-network-instance"`
	ΛInReservationErrorMessages  []ygot.Annotation                                                         `path:"@in-reservation-error-messages" ygotAnnotation:"true"`
	InReservationMessages        *uint64                                                                   `path:"in-reservation-messages" module:"openconfig-network-instance"`
	ΛInReservationMessages       []ygot.Annotation                                                         `path:"@in-reservation-messages" ygotAnnotation:"true"`
	InReservationTearMessages    *uint64                                                                   `path:"in-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛInReservationTearMessages   []ygot.Annotation                                                         `path:"@in-reservation-tear-messages" ygotAnnotation:"true"`
	InSrefreshMessages           *uint64                                                                   `path:"in-srefresh-messages" module:"openconfig-network-instance"`
	ΛInSrefreshMessages          []ygot.Annotation                                                         `path:"@in-srefresh-messages" ygotAnnotation:"true"`
	OutAckMessages               *uint64                                                                   `path:"out-ack-messages" module:"openconfig-network-instance"`
	ΛOutAckMessages              []ygot.Annotation                                                         `path:"@out-ack-messages" ygotAnnotation:"true"`
	OutHelloMessages             *uint64                                                                   `path:"out-hello-messages" module:"openconfig-network-instance"`
	ΛOutHelloMessages            []ygot.Annotation                                                         `path:"@out-hello-messages" ygotAnnotation:"true"`
	OutPathErrorMessages         *uint64                                                                   `path:"out-path-error-messages" module:"openconfig-network-instance"`
	ΛOutPathErrorMessages        []ygot.Annotation                                                         `path:"@out-path-error-messages" ygotAnnotation:"true"`
	OutPathMessages              *uint64                                                                   `path:"out-path-messages" module:"openconfig-network-instance"`
	ΛOutPathMessages             []ygot.Annotation                                                         `path:"@out-path-messages" ygotAnnotation:"true"`
	OutPathTearMessages          *uint64                                                                   `path:"out-path-tear-messages" module:"openconfig-network-instance"`
	ΛOutPathTearMessages         []ygot.Annotation                                                         `path:"@out-path-tear-messages" ygotAnnotation:"true"`
	OutReservationErrorMessages  *uint64                                                                   `path:"out-reservation-error-messages" module:"openconfig-network-instance"`
	ΛOutReservationErrorMessages []ygot.Annotation                                                         `path:"@out-reservation-error-messages" ygotAnnotation:"true"`
	OutReservationMessages       *uint64                                                                   `path:"out-reservation-messages" module:"openconfig-network-instance"`
	ΛOutReservationMessages      []ygot.Annotation                                                         `path:"@out-reservation-messages" ygotAnnotation:"true"`
	OutReservationTearMessages   *uint64                                                                   `path:"out-reservation-tear-messages" module:"openconfig-network-instance"`
	ΛOutReservationTearMessages  []ygot.Annotation                                                         `path:"@out-reservation-tear-messages" ygotAnnotation:"true"`
	OutSrefreshMessages          *uint64                                                                   `path:"out-srefresh-messages" module:"openconfig-network-instance"`
	ΛOutSrefreshMessages         []ygot.Annotation                                                         `path:"@out-srefresh-messages" ygotAnnotation:"true"`
	RateLimitedMessages          *uint64                                                                   `path:"rate-limited-messages" module:"openconfig-network-instance"`
	ΛRateLimitedMessages         []ygot.Annotation                                                         `path:"@rate-limited-messages" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) IsYANGGoStruct() {}

// GetOrCreateErrors retrieves the value of the Errors field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOrCreateErrors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors {
	if t.Errors != nil {
		return t.Errors
	}
	t.Errors = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors{}
	return t.Errors
}

// GetErrors returns the value of the Errors struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters. If the receiver or the field Errors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetErrors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors {
	if t != nil && t.Errors != nil {
		return t.Errors
	}
	return nil
}

// GetInAckMessages retrieves the value of the leaf InAckMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InAckMessages is set, it can
// safely use t.GetInAckMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InAckMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInAckMessages() uint64 {
	if t == nil || t.InAckMessages == nil {
		return 0
	}
	return *t.InAckMessages
}

// GetInHelloMessages retrieves the value of the leaf InHelloMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InHelloMessages is set, it can
// safely use t.GetInHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InHelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInHelloMessages() uint64 {
	if t == nil || t.InHelloMessages == nil {
		return 0
	}
	return *t.InHelloMessages
}

// GetInPathErrorMessages retrieves the value of the leaf InPathErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathErrorMessages is set, it can
// safely use t.GetInPathErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInPathErrorMessages() uint64 {
	if t == nil || t.InPathErrorMessages == nil {
		return 0
	}
	return *t.InPathErrorMessages
}

// GetInPathMessages retrieves the value of the leaf InPathMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathMessages is set, it can
// safely use t.GetInPathMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInPathMessages() uint64 {
	if t == nil || t.InPathMessages == nil {
		return 0
	}
	return *t.InPathMessages
}

// GetInPathTearMessages retrieves the value of the leaf InPathTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPathTearMessages is set, it can
// safely use t.GetInPathTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPathTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInPathTearMessages() uint64 {
	if t == nil || t.InPathTearMessages == nil {
		return 0
	}
	return *t.InPathTearMessages
}

// GetInReservationErrorMessages retrieves the value of the leaf InReservationErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationErrorMessages is set, it can
// safely use t.GetInReservationErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInReservationErrorMessages() uint64 {
	if t == nil || t.InReservationErrorMessages == nil {
		return 0
	}
	return *t.InReservationErrorMessages
}

// GetInReservationMessages retrieves the value of the leaf InReservationMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationMessages is set, it can
// safely use t.GetInReservationMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInReservationMessages() uint64 {
	if t == nil || t.InReservationMessages == nil {
		return 0
	}
	return *t.InReservationMessages
}

// GetInReservationTearMessages retrieves the value of the leaf InReservationTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InReservationTearMessages is set, it can
// safely use t.GetInReservationTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InReservationTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInReservationTearMessages() uint64 {
	if t == nil || t.InReservationTearMessages == nil {
		return 0
	}
	return *t.InReservationTearMessages
}

// GetInSrefreshMessages retrieves the value of the leaf InSrefreshMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSrefreshMessages is set, it can
// safely use t.GetInSrefreshMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSrefreshMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetInSrefreshMessages() uint64 {
	if t == nil || t.InSrefreshMessages == nil {
		return 0
	}
	return *t.InSrefreshMessages
}

// GetOutAckMessages retrieves the value of the leaf OutAckMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutAckMessages is set, it can
// safely use t.GetOutAckMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutAckMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutAckMessages() uint64 {
	if t == nil || t.OutAckMessages == nil {
		return 0
	}
	return *t.OutAckMessages
}

// GetOutHelloMessages retrieves the value of the leaf OutHelloMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutHelloMessages is set, it can
// safely use t.GetOutHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutHelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutHelloMessages() uint64 {
	if t == nil || t.OutHelloMessages == nil {
		return 0
	}
	return *t.OutHelloMessages
}

// GetOutPathErrorMessages retrieves the value of the leaf OutPathErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathErrorMessages is set, it can
// safely use t.GetOutPathErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutPathErrorMessages() uint64 {
	if t == nil || t.OutPathErrorMessages == nil {
		return 0
	}
	return *t.OutPathErrorMessages
}

// GetOutPathMessages retrieves the value of the leaf OutPathMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathMessages is set, it can
// safely use t.GetOutPathMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutPathMessages() uint64 {
	if t == nil || t.OutPathMessages == nil {
		return 0
	}
	return *t.OutPathMessages
}

// GetOutPathTearMessages retrieves the value of the leaf OutPathTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPathTearMessages is set, it can
// safely use t.GetOutPathTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPathTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutPathTearMessages() uint64 {
	if t == nil || t.OutPathTearMessages == nil {
		return 0
	}
	return *t.OutPathTearMessages
}

// GetOutReservationErrorMessages retrieves the value of the leaf OutReservationErrorMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationErrorMessages is set, it can
// safely use t.GetOutReservationErrorMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationErrorMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutReservationErrorMessages() uint64 {
	if t == nil || t.OutReservationErrorMessages == nil {
		return 0
	}
	return *t.OutReservationErrorMessages
}

// GetOutReservationMessages retrieves the value of the leaf OutReservationMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationMessages is set, it can
// safely use t.GetOutReservationMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutReservationMessages() uint64 {
	if t == nil || t.OutReservationMessages == nil {
		return 0
	}
	return *t.OutReservationMessages
}

// GetOutReservationTearMessages retrieves the value of the leaf OutReservationTearMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutReservationTearMessages is set, it can
// safely use t.GetOutReservationTearMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutReservationTearMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutReservationTearMessages() uint64 {
	if t == nil || t.OutReservationTearMessages == nil {
		return 0
	}
	return *t.OutReservationTearMessages
}

// GetOutSrefreshMessages retrieves the value of the leaf OutSrefreshMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutSrefreshMessages is set, it can
// safely use t.GetOutSrefreshMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutSrefreshMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetOutSrefreshMessages() uint64 {
	if t == nil || t.OutSrefreshMessages == nil {
		return 0
	}
	return *t.OutSrefreshMessages
}

// GetRateLimitedMessages retrieves the value of the leaf RateLimitedMessages from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimitedMessages is set, it can
// safely use t.GetRateLimitedMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimitedMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) GetRateLimitedMessages() uint64 {
	if t == nil || t.RateLimitedMessages == nil {
		return 0
	}
	return *t.RateLimitedMessages
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Errors.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthenticationFail  *uint64           `path:"authentication-fail" module:"openconfig-network-instance"`
	ΛAuthenticationFail []ygot.Annotation `path:"@authentication-fail" ygotAnnotation:"true"`
	BadChecksum         *uint64           `path:"bad-checksum" module:"openconfig-network-instance"`
	ΛBadChecksum        []ygot.Annotation `path:"@bad-checksum" ygotAnnotation:"true"`
	BadPacketFormat     *uint64           `path:"bad-packet-format" module:"openconfig-network-instance"`
	ΛBadPacketFormat    []ygot.Annotation `path:"@bad-packet-format" ygotAnnotation:"true"`
	BadPacketLength     *uint64           `path:"bad-packet-length" module:"openconfig-network-instance"`
	ΛBadPacketLength    []ygot.Annotation `path:"@bad-packet-length" ygotAnnotation:"true"`
	OutOfOrder          *uint64           `path:"out-of-order" module:"openconfig-network-instance"`
	ΛOutOfOrder         []ygot.Annotation `path:"@out-of-order" ygotAnnotation:"true"`
	ReceivedNack        *uint64           `path:"received-nack" module:"openconfig-network-instance"`
	ΛReceivedNack       []ygot.Annotation `path:"@received-nack" ygotAnnotation:"true"`
	TransmitFailure     *uint64           `path:"transmit-failure" module:"openconfig-network-instance"`
	ΛTransmitFailure    []ygot.Annotation `path:"@transmit-failure" ygotAnnotation:"true"`
	TransmitQueueFull   *uint64           `path:"transmit-queue-full" module:"openconfig-network-instance"`
	ΛTransmitQueueFull  []ygot.Annotation `path:"@transmit-queue-full" ygotAnnotation:"true"`
	UnknownAck          *uint64           `path:"unknown-ack" module:"openconfig-network-instance"`
	ΛUnknownAck         []ygot.Annotation `path:"@unknown-ack" ygotAnnotation:"true"`
	UnknownNack         *uint64           `path:"unknown-nack" module:"openconfig-network-instance"`
	ΛUnknownNack        []ygot.Annotation `path:"@unknown-nack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) IsYANGGoStruct() {}

// GetAuthenticationFail retrieves the value of the leaf AuthenticationFail from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationFail is set, it can
// safely use t.GetAuthenticationFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationFail == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetAuthenticationFail() uint64 {
	if t == nil || t.AuthenticationFail == nil {
		return 0
	}
	return *t.AuthenticationFail
}

// GetBadChecksum retrieves the value of the leaf BadChecksum from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadChecksum is set, it can
// safely use t.GetBadChecksum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadChecksum == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetBadChecksum() uint64 {
	if t == nil || t.BadChecksum == nil {
		return 0
	}
	return *t.BadChecksum
}

// GetBadPacketFormat retrieves the value of the leaf BadPacketFormat from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadPacketFormat is set, it can
// safely use t.GetBadPacketFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadPacketFormat == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetBadPacketFormat() uint64 {
	if t == nil || t.BadPacketFormat == nil {
		return 0
	}
	return *t.BadPacketFormat
}

// GetBadPacketLength retrieves the value of the leaf BadPacketLength from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadPacketLength is set, it can
// safely use t.GetBadPacketLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadPacketLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetBadPacketLength() uint64 {
	if t == nil || t.BadPacketLength == nil {
		return 0
	}
	return *t.BadPacketLength
}

// GetOutOfOrder retrieves the value of the leaf OutOfOrder from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOfOrder is set, it can
// safely use t.GetOutOfOrder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOfOrder == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetOutOfOrder() uint64 {
	if t == nil || t.OutOfOrder == nil {
		return 0
	}
	return *t.OutOfOrder
}

// GetReceivedNack retrieves the value of the leaf ReceivedNack from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceivedNack is set, it can
// safely use t.GetReceivedNack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceivedNack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetReceivedNack() uint64 {
	if t == nil || t.ReceivedNack == nil {
		return 0
	}
	return *t.ReceivedNack
}

// GetTransmitFailure retrieves the value of the leaf TransmitFailure from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitFailure is set, it can
// safely use t.GetTransmitFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitFailure == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetTransmitFailure() uint64 {
	if t == nil || t.TransmitFailure == nil {
		return 0
	}
	return *t.TransmitFailure
}

// GetTransmitQueueFull retrieves the value of the leaf TransmitQueueFull from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitQueueFull is set, it can
// safely use t.GetTransmitQueueFull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitQueueFull == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetTransmitQueueFull() uint64 {
	if t == nil || t.TransmitQueueFull == nil {
		return 0
	}
	return *t.TransmitQueueFull
}

// GetUnknownAck retrieves the value of the leaf UnknownAck from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownAck is set, it can
// safely use t.GetUnknownAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownAck == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetUnknownAck() uint64 {
	if t == nil || t.UnknownAck == nil {
		return 0
	}
	return *t.UnknownAck
}

// GetUnknownNack retrieves the value of the leaf UnknownNack from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNack is set, it can
// safely use t.GetUnknownNack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) GetUnknownNack() uint64 {
	if t == nil || t.UnknownNack == nil {
		return 0
	}
	return *t.UnknownNack
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	HelloInterval     *uint16           `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval    []ygot.Annotation `path:"config/@hello-interval" ygotAnnotation:"true"`
	RefreshReduction  *bool             `path:"config/refresh-reduction" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRefreshReduction []ygot.Annotation `path:"config/@refresh-reduction" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) IsYANGGoStruct() {}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 9000
	}
	return *t.HelloInterval
}

// GetRefreshReduction retrieves the value of the leaf RefreshReduction from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshReduction is set, it can
// safely use t.GetRefreshReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshReduction == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) GetRefreshReduction() bool {
	if t == nil || t.RefreshReduction == nil {
		return true
	}
	return *t.RefreshReduction
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint16 = 9000
		t.HelloInterval = &v
	}
	if t.RefreshReduction == nil {
		var v bool = true
		t.RefreshReduction = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection struct {
	ΛMetadata                     []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	BypassOptimizeInterval        *uint16                     `path:"config/bypass-optimize-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBypassOptimizeInterval       []ygot.Annotation           `path:"config/@bypass-optimize-interval" ygotAnnotation:"true"`
	LinkProtectionStyleRequested  E_MplsTypes_PROTECTION_TYPE `path:"config/link-protection-style-requested" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLinkProtectionStyleRequested []ygot.Annotation           `path:"config/@link-protection-style-requested" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) IsYANGGoStruct() {}

// GetBypassOptimizeInterval retrieves the value of the leaf BypassOptimizeInterval from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassOptimizeInterval is set, it can
// safely use t.GetBypassOptimizeInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassOptimizeInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) GetBypassOptimizeInterval() uint16 {
	if t == nil || t.BypassOptimizeInterval == nil {
		return 0
	}
	return *t.BypassOptimizeInterval
}

// GetLinkProtectionStyleRequested retrieves the value of the leaf LinkProtectionStyleRequested from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkProtectionStyleRequested is set, it can
// safely use t.GetLinkProtectionStyleRequested() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkProtectionStyleRequested == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) GetLinkProtectionStyleRequested() E_MplsTypes_PROTECTION_TYPE {
	if t == nil || t.LinkProtectionStyleRequested == 0 {
		return MplsTypes_PROTECTION_TYPE_LINK_NODE_PROTECTION_REQUESTED
	}
	return t.LinkProtectionStyleRequested
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LinkProtectionStyleRequested == 0 {
		t.LinkProtectionStyleRequested = MplsTypes_PROTECTION_TYPE_LINK_NODE_PROTECTION_REQUESTED
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription struct {
	ΛMetadata                         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CalculatedAbsoluteSubscriptionBw  *uint64           `path:"state/calculated-absolute-subscription-bw" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCalculatedAbsoluteSubscriptionBw []ygot.Annotation `path:"state/@calculated-absolute-subscription-bw" ygotAnnotation:"true"`
	Subscription                      *uint8            `path:"config/subscription" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubscription                     []ygot.Annotation `path:"config/@subscription" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) IsYANGGoStruct() {}

// GetCalculatedAbsoluteSubscriptionBw retrieves the value of the leaf CalculatedAbsoluteSubscriptionBw from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalculatedAbsoluteSubscriptionBw is set, it can
// safely use t.GetCalculatedAbsoluteSubscriptionBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalculatedAbsoluteSubscriptionBw == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) GetCalculatedAbsoluteSubscriptionBw() uint64 {
	if t == nil || t.CalculatedAbsoluteSubscriptionBw == nil {
		return 0
	}
	return *t.CalculatedAbsoluteSubscriptionBw
}

// GetSubscription retrieves the value of the leaf Subscription from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subscription is set, it can
// safely use t.GetSubscription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subscription == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) GetSubscription() uint8 {
	if t == nil || t.Subscription == nil {
		return 0
	}
	return *t.Subscription
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor struct {
	ΛMetadata          []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	Address            *string                   `path:"state/address|address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAddress           []ygot.Annotation         `path:"state/@address|@address" ygotAnnotation:"true"`
	DetectedInterface  *string                   `path:"state/detected-interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDetectedInterface []ygot.Annotation         `path:"state/@detected-interface" ygotAnnotation:"true"`
	NeighborStatus     E_Neighbor_NeighborStatus `path:"state/neighbor-status" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighborStatus    []ygot.Annotation         `path:"state/@neighbor-status" ygotAnnotation:"true"`
	RefreshReduction   *bool                     `path:"state/refresh-reduction" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRefreshReduction  []ygot.Annotation         `path:"state/@refresh-reduction" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDetectedInterface retrieves the value of the leaf DetectedInterface from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectedInterface is set, it can
// safely use t.GetDetectedInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectedInterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) GetDetectedInterface() string {
	if t == nil || t.DetectedInterface == nil {
		return ""
	}
	return *t.DetectedInterface
}

// GetNeighborStatus retrieves the value of the leaf NeighborStatus from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborStatus is set, it can
// safely use t.GetNeighborStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborStatus == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) GetNeighborStatus() E_Neighbor_NeighborStatus {
	if t == nil || t.NeighborStatus == 0 {
		return 0
	}
	return t.NeighborStatus
}

// GetRefreshReduction retrieves the value of the leaf RefreshReduction from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshReduction is set, it can
// safely use t.GetRefreshReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshReduction == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) GetRefreshReduction() bool {
	if t == nil || t.RefreshReduction == nil {
		return false
	}
	return *t.RefreshReduction
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct {
	ΛMetadata            []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	DestinationAddress   *string                                                                                `path:"state/destination-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationAddress  []ygot.Annotation                                                                      `path:"state/@destination-address" ygotAnnotation:"true"`
	ExplicitRouteObject  map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject `path:"explicit-route-objects/explicit-route-object" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExplicitRouteObject []ygot.Annotation                                                                      `path:"explicit-route-objects/@explicit-route-object" ygotAnnotation:"true"`
	LabelIn              NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union                   `path:"state/label-in" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabelIn             []ygot.Annotation                                                                      `path:"state/@label-in" ygotAnnotation:"true"`
	LabelOut             NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union                  `path:"state/label-out" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabelOut            []ygot.Annotation                                                                      `path:"state/@label-out" ygotAnnotation:"true"`
	LocalIndex           *uint64                                                                                `path:"state/local-index|local-index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLocalIndex          []ygot.Annotation                                                                      `path:"state/@local-index|@local-index" ygotAnnotation:"true"`
	LspId                *uint16                                                                                `path:"state/lsp-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspId               []ygot.Annotation                                                                      `path:"state/@lsp-id" ygotAnnotation:"true"`
	ProtectionRequested  E_MplsTypes_PROTECTION_TYPE                                                            `path:"state/protection-requested" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛProtectionRequested []ygot.Annotation                                                                      `path:"state/@protection-requested" ygotAnnotation:"true"`
	RecordRouteObject    map[uint8]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject    `path:"record-route-objects/record-route-object" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRecordRouteObject   []ygot.Annotation                                                                      `path:"record-route-objects/@record-route-object" ygotAnnotation:"true"`
	SenderTspec          *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec                    `path:"state/sender-tspec" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSenderTspec         []ygot.Annotation                                                                      `path:"state/@sender-tspec" ygotAnnotation:"true"`
	SessionName          *string                                                                                `path:"state/session-name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSessionName         []ygot.Annotation                                                                      `path:"state/@session-name" ygotAnnotation:"true"`
	SourceAddress        *string                                                                                `path:"state/source-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceAddress       []ygot.Annotation                                                                      `path:"state/@source-address" ygotAnnotation:"true"`
	Status               E_Session_Status                                                                       `path:"state/status" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛStatus              []ygot.Annotation                                                                      `path:"state/@status" ygotAnnotation:"true"`
	TunnelId             *uint16                                                                                `path:"state/tunnel-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTunnelId            []ygot.Annotation                                                                      `path:"state/@tunnel-id" ygotAnnotation:"true"`
	Type                 E_MplsTypes_LSP_ROLE                                                                   `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType                []ygot.Annotation                                                                      `path:"state/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) IsYANGGoStruct() {}

// NewExplicitRouteObject creates a new entry in the ExplicitRouteObject list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) NewExplicitRouteObject(Index uint64) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExplicitRouteObject == nil {
		t.ExplicitRouteObject = make(map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExplicitRouteObject[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExplicitRouteObject", key)
	}

	t.ExplicitRouteObject[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject{
		Index: &Index,
	}

	return t.ExplicitRouteObject[key], nil
}

// RenameExplicitRouteObject renames an entry in the list ExplicitRouteObject within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) RenameExplicitRouteObject(oldK, newK uint64) error {
	if _, ok := t.ExplicitRouteObject[newK]; ok {
		return fmt.Errorf("key %v already exists in ExplicitRouteObject", newK)
	}

	e, ok := t.ExplicitRouteObject[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExplicitRouteObject", oldK)
	}
	e.Index = &newK

	t.ExplicitRouteObject[newK] = e
	delete(t.ExplicitRouteObject, oldK)
	return nil
}

// GetOrCreateExplicitRouteObject retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetOrCreateExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject {

	key := Index

	if v, ok := t.ExplicitRouteObject[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExplicitRouteObject(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExplicitRouteObject got unexpected error: %v", err))
	}
	return v
}

// GetExplicitRouteObject retrieves the value with the specified key from
// the ExplicitRouteObject map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.ExplicitRouteObject[key]; ok {
		return lm
	}
	return nil
}

// DeleteExplicitRouteObject deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) DeleteExplicitRouteObject(Index uint64) {
	key := Index

	delete(t.ExplicitRouteObject, key)
}

// AppendExplicitRouteObject appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject struct to the
// list ExplicitRouteObject of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) AppendExplicitRouteObject(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExplicitRouteObject == nil {
		t.ExplicitRouteObject = make(map[uint64]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
	}

	if _, ok := t.ExplicitRouteObject[key]; ok {
		return fmt.Errorf("duplicate key for list ExplicitRouteObject %v", key)
	}

	t.ExplicitRouteObject[key] = v
	return nil
}

// NewRecordRouteObject creates a new entry in the RecordRouteObject list of the
// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) NewRecordRouteObject(Index uint8) (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RecordRouteObject == nil {
		t.RecordRouteObject = make(map[uint8]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RecordRouteObject[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RecordRouteObject", key)
	}

	t.RecordRouteObject[key] = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject{
		Index: &Index,
	}

	return t.RecordRouteObject[key], nil
}

// RenameRecordRouteObject renames an entry in the list RecordRouteObject within
// the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) RenameRecordRouteObject(oldK, newK uint8) error {
	if _, ok := t.RecordRouteObject[newK]; ok {
		return fmt.Errorf("key %v already exists in RecordRouteObject", newK)
	}

	e, ok := t.RecordRouteObject[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RecordRouteObject", oldK)
	}
	e.Index = &newK

	t.RecordRouteObject[newK] = e
	delete(t.RecordRouteObject, oldK)
	return nil
}

// GetOrCreateRecordRouteObject retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetOrCreateRecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject {

	key := Index

	if v, ok := t.RecordRouteObject[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRecordRouteObject(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRecordRouteObject got unexpected error: %v", err))
	}
	return v
}

// GetRecordRouteObject retrieves the value with the specified key from
// the RecordRouteObject map field of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetRecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.RecordRouteObject[key]; ok {
		return lm
	}
	return nil
}

// DeleteRecordRouteObject deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) DeleteRecordRouteObject(Index uint8) {
	key := Index

	delete(t.RecordRouteObject, key)
}

// AppendRecordRouteObject appends the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject struct to the
// list RecordRouteObject of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) AppendRecordRouteObject(v *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RecordRouteObject == nil {
		t.RecordRouteObject = make(map[uint8]*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
	}

	if _, ok := t.RecordRouteObject[key]; ok {
		return fmt.Errorf("duplicate key for list RecordRouteObject %v", key)
	}

	t.RecordRouteObject[key] = v
	return nil
}

// GetOrCreateSenderTspec retrieves the value of the SenderTspec field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetOrCreateSenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec {
	if t.SenderTspec != nil {
		return t.SenderTspec
	}
	t.SenderTspec = &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec{}
	return t.SenderTspec
}

// GetSenderTspec returns the value of the SenderTspec struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session. If the receiver or the field SenderTspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetSenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec {
	if t != nil && t.SenderTspec != nil {
		return t.SenderTspec
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetLabelIn retrieves the value of the leaf LabelIn from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIn is set, it can
// safely use t.GetLabelIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIn == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetLabelIn() NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union {
	if t == nil || t.LabelIn == nil {
		return nil
	}
	return t.LabelIn
}

// GetLabelOut retrieves the value of the leaf LabelOut from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelOut is set, it can
// safely use t.GetLabelOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelOut == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetLabelOut() NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union {
	if t == nil || t.LabelOut == nil {
		return nil
	}
	return t.LabelOut
}

// GetLocalIndex retrieves the value of the leaf LocalIndex from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIndex is set, it can
// safely use t.GetLocalIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetLocalIndex() uint64 {
	if t == nil || t.LocalIndex == nil {
		return 0
	}
	return *t.LocalIndex
}

// GetLspId retrieves the value of the leaf LspId from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspId is set, it can
// safely use t.GetLspId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetLspId() uint16 {
	if t == nil || t.LspId == nil {
		return 0
	}
	return *t.LspId
}

// GetProtectionRequested retrieves the value of the leaf ProtectionRequested from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectionRequested is set, it can
// safely use t.GetProtectionRequested() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectionRequested == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetProtectionRequested() E_MplsTypes_PROTECTION_TYPE {
	if t == nil || t.ProtectionRequested == 0 {
		return 0
	}
	return t.ProtectionRequested
}

// GetSessionName retrieves the value of the leaf SessionName from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionName is set, it can
// safely use t.GetSessionName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetSessionName() string {
	if t == nil || t.SessionName == nil {
		return ""
	}
	return *t.SessionName
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetStatus retrieves the value of the leaf Status from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetStatus() E_Session_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// GetTunnelId retrieves the value of the leaf TunnelId from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelId is set, it can
// safely use t.GetTunnelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetTunnelId() uint16 {
	if t == nil || t.TunnelId == nil {
		return 0
	}
	return *t.TunnelId
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) GetType() E_MplsTypes_LSP_ROLE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SenderTspec.PopulateDefaults()
	for _, e := range t.ExplicitRouteObject {
		e.PopulateDefaults()
	}
	for _, e := range t.RecordRouteObject {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalIndex == nil {
		return nil, fmt.Errorf("nil value for key LocalIndex")
	}

	return map[string]interface{}{
		"local-index": *t.LocalIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject struct {
	ΛMetadata    []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	Asn          *uint32                                                                                `path:"state/asn" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAsn         []ygot.Annotation                                                                      `path:"state/@asn" ygotAnnotation:"true"`
	Index        *uint64                                                                                `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex       []ygot.Annotation                                                                      `path:"state/@index|@index" ygotAnnotation:"true"`
	InterfaceId  *uint32                                                                                `path:"state/interface-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterfaceId []ygot.Annotation                                                                      `path:"state/@interface-id" ygotAnnotation:"true"`
	IpPrefix     *string                                                                                `path:"state/ip-prefix" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIpPrefix    []ygot.Annotation                                                                      `path:"state/@ip-prefix" ygotAnnotation:"true"`
	Label        NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel       []ygot.Annotation                                                                      `path:"state/@label" ygotAnnotation:"true"`
	Loose        *bool                                                                                  `path:"state/loose" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLoose       []ygot.Annotation                                                                      `path:"state/@loose" ygotAnnotation:"true"`
	Type         E_ExplicitRouteObject_Type                                                             `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType        []ygot.Annotation                                                                      `path:"state/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) IsYANGGoStruct() {}

// GetAsn retrieves the value of the leaf Asn from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetInterfaceId() uint32 {
	if t == nil || t.InterfaceId == nil {
		return 0
	}
	return *t.InterfaceId
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetLabel() NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union {
	if t == nil || t.Label == nil {
		return nil
	}
	return t.Label
}

// GetLoose retrieves the value of the leaf Loose from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loose is set, it can
// safely use t.GetLoose() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loose == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetLoose() bool {
	if t == nil || t.Loose == nil {
		return false
	}
	return *t.Loose
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) GetType() E_ExplicitRouteObject_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject struct {
	ΛMetadata      []ygot.Annotation                                                                            `path:"@" ygotAnnotation:"true"`
	Address        *string                                                                                      `path:"state/address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAddress       []ygot.Annotation                                                                            `path:"state/@address" ygotAnnotation:"true"`
	Index          *uint8                                                                                       `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex         []ygot.Annotation                                                                            `path:"state/@index|@index" ygotAnnotation:"true"`
	ReportedFlags  *uint8                                                                                       `path:"state/reported-flags" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReportedFlags []ygot.Annotation                                                                            `path:"state/@reported-flags" ygotAnnotation:"true"`
	ReportedLabel  NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union `path:"state/reported-label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReportedLabel []ygot.Annotation                                                                            `path:"state/@reported-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetReportedFlags retrieves the value of the leaf ReportedFlags from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportedFlags is set, it can
// safely use t.GetReportedFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportedFlags == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) GetReportedFlags() uint8 {
	if t == nil || t.ReportedFlags == nil {
		return 0
	}
	return *t.ReportedFlags
}

// GetReportedLabel retrieves the value of the leaf ReportedLabel from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportedLabel is set, it can
// safely use t.GetReportedLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportedLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) GetReportedLabel() NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union {
	if t == nil || t.ReportedLabel == nil {
		return nil
	}
	return t.ReportedLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PeakDataRate  Binary            `path:"peak-data-rate" module:"openconfig-network-instance"`
	ΛPeakDataRate []ygot.Annotation `path:"@peak-data-rate" ygotAnnotation:"true"`
	Rate          Binary            `path:"rate" module:"openconfig-network-instance"`
	ΛRate         []ygot.Annotation `path:"@rate" ygotAnnotation:"true"`
	Size          Binary            `path:"size" module:"openconfig-network-instance"`
	ΛSize         []ygot.Annotation `path:"@size" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) IsYANGGoStruct() {}

// GetPeakDataRate retrieves the value of the leaf PeakDataRate from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakDataRate is set, it can
// safely use t.GetPeakDataRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakDataRate == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) GetPeakDataRate() Binary {
	if t == nil || t.PeakDataRate == nil {
		return nil
	}
	return t.PeakDataRate
}

// GetRate retrieves the value of the leaf Rate from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) GetRate() Binary {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSize retrieves the value of the leaf Size from the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) GetSize() Binary {
	if t == nil || t.Size == nil {
		return nil
	}
	return t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct {
	ΛMetadata            []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	AggregateSidCounter  map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter `path:"aggregate-sid-counters/aggregate-sid-counter" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAggregateSidCounter []ygot.Annotation                                                                                                                                                          `path:"aggregate-sid-counters/@aggregate-sid-counter" ygotAnnotation:"true"`
	Interface            map[string]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface                                                                                               `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface           []ygot.Annotation                                                                                                                                                          `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) IsYANGGoStruct() {}

// NewAggregateSidCounter creates a new entry in the AggregateSidCounter list of the
// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) NewAggregateSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AggregateSidCounter == nil {
		t.AggregateSidCounter = make(map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
	}

	key := MplsLabel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AggregateSidCounter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AggregateSidCounter", key)
	}

	t.AggregateSidCounter[key] = &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter{
		MplsLabel: MplsLabel,
	}

	return t.AggregateSidCounter[key], nil
}

// RenameAggregateSidCounter renames an entry in the list AggregateSidCounter within
// the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) RenameAggregateSidCounter(oldK, newK NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) error {
	if _, ok := t.AggregateSidCounter[newK]; ok {
		return fmt.Errorf("key %v already exists in AggregateSidCounter", newK)
	}

	e, ok := t.AggregateSidCounter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AggregateSidCounter", oldK)
	}
	e.MplsLabel = newK

	t.AggregateSidCounter[newK] = e
	delete(t.AggregateSidCounter, oldK)
	return nil
}

// GetOrCreateAggregateSidCounter retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) GetOrCreateAggregateSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter {

	key := MplsLabel

	if v, ok := t.AggregateSidCounter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregateSidCounter(MplsLabel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregateSidCounter got unexpected error: %v", err))
	}
	return v
}

// GetAggregateSidCounter retrieves the value with the specified key from
// the AggregateSidCounter map field of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) GetAggregateSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter {

	if t == nil {
		return nil
	}

	key := MplsLabel

	if lm, ok := t.AggregateSidCounter[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregateSidCounter deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) DeleteAggregateSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) {
	key := MplsLabel

	delete(t.AggregateSidCounter, key)
}

// AppendAggregateSidCounter appends the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter struct to the
// list AggregateSidCounter of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) AppendAggregateSidCounter(v *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) error {
	key := v.MplsLabel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AggregateSidCounter == nil {
		t.AggregateSidCounter = make(map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
	}

	if _, ok := t.AggregateSidCounter[key]; ok {
		return fmt.Errorf("duplicate key for list AggregateSidCounter %v", key)
	}

	t.AggregateSidCounter[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) NewInterface(InterfaceId string) (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) GetInterface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface struct to the
// list Interface of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) AppendInterface(v *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AggregateSidCounter {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter struct {
	ΛMetadata  []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	InOctets   *uint64                                                                                    `path:"state/in-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInOctets  []ygot.Annotation                                                                          `path:"state/@in-octets" ygotAnnotation:"true"`
	InPkts     *uint64                                                                                    `path:"state/in-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInPkts    []ygot.Annotation                                                                          `path:"state/@in-pkts" ygotAnnotation:"true"`
	MplsLabel  NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union `path:"state/mpls-label|mpls-label" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛMplsLabel []ygot.Annotation                                                                          `path:"state/@mpls-label|@mpls-label" ygotAnnotation:"true"`
	OutOctets  *uint64                                                                                    `path:"state/out-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutOctets []ygot.Annotation                                                                          `path:"state/@out-octets" ygotAnnotation:"true"`
	OutPkts    *uint64                                                                                    `path:"state/out-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutPkts   []ygot.Annotation                                                                          `path:"state/@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) IsYANGGoStruct() {}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) GetMplsLabel() NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union {
	if t == nil || t.MplsLabel == nil {
		return nil
	}
	return t.MplsLabel
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mpls-label": t.MplsLabel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface struct {
	ΛMetadata     []ygot.Annotation                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	InOctets      *uint64                                                                                                                                                                      `path:"state/in-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInOctets     []ygot.Annotation                                                                                                                                                            `path:"state/@in-octets" ygotAnnotation:"true"`
	InPkts        *uint64                                                                                                                                                                      `path:"state/in-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInPkts       []ygot.Annotation                                                                                                                                                            `path:"state/@in-pkts" ygotAnnotation:"true"`
	InterfaceId   *string                                                                                                                                                                      `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId  []ygot.Annotation                                                                                                                                                            `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef  *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef                                                                                               `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                                                                                                                                            `path:"@interface-ref" ygotAnnotation:"true"`
	OutOctets     *uint64                                                                                                                                                                      `path:"state/out-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutOctets    []ygot.Annotation                                                                                                                                                            `path:"state/@out-octets" ygotAnnotation:"true"`
	OutPkts       *uint64                                                                                                                                                                      `path:"state/out-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutPkts      []ygot.Annotation                                                                                                                                                            `path:"state/@out-pkts" ygotAnnotation:"true"`
	SidCounter    map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter `path:"sid-counters/sid-counter" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSidCounter   []ygot.Annotation                                                                                                                                                            `path:"sid-counters/@sid-counter" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) IsYANGGoStruct() {}

// NewSidCounter creates a new entry in the SidCounter list of the
// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) NewSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidCounter == nil {
		t.SidCounter = make(map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
	}

	key := MplsLabel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SidCounter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SidCounter", key)
	}

	t.SidCounter[key] = &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter{
		MplsLabel: MplsLabel,
	}

	return t.SidCounter[key], nil
}

// RenameSidCounter renames an entry in the list SidCounter within
// the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) RenameSidCounter(oldK, newK NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) error {
	if _, ok := t.SidCounter[newK]; ok {
		return fmt.Errorf("key %v already exists in SidCounter", newK)
	}

	e, ok := t.SidCounter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SidCounter", oldK)
	}
	e.MplsLabel = newK

	t.SidCounter[newK] = e
	delete(t.SidCounter, oldK)
	return nil
}

// GetOrCreateSidCounter retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetOrCreateSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter {

	key := MplsLabel

	if v, ok := t.SidCounter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSidCounter(MplsLabel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSidCounter got unexpected error: %v", err))
	}
	return v
}

// GetSidCounter retrieves the value with the specified key from
// the SidCounter map field of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter {

	if t == nil {
		return nil
	}

	key := MplsLabel

	if lm, ok := t.SidCounter[key]; ok {
		return lm
	}
	return nil
}

// DeleteSidCounter deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) DeleteSidCounter(MplsLabel NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) {
	key := MplsLabel

	delete(t.SidCounter, key)
}

// AppendSidCounter appends the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter struct to the
// list SidCounter of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) AppendSidCounter(v *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) error {
	key := v.MplsLabel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidCounter == nil {
		t.SidCounter = make(map[NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
	}

	if _, ok := t.SidCounter[key]; ok {
		return fmt.Errorf("duplicate key for list SidCounter %v", key)
	}

	t.SidCounter[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetInterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.SidCounter {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter struct {
	ΛMetadata        []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	ForwardingClass  map[uint8]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass `path:"forwarding-classes/forwarding-class" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛForwardingClass []ygot.Annotation                                                                                      `path:"forwarding-classes/@forwarding-class" ygotAnnotation:"true"`
	InOctets         *uint64                                                                                                `path:"state/in-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInOctets        []ygot.Annotation                                                                                      `path:"state/@in-octets" ygotAnnotation:"true"`
	InPkts           *uint64                                                                                                `path:"state/in-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInPkts          []ygot.Annotation                                                                                      `path:"state/@in-pkts" ygotAnnotation:"true"`
	MplsLabel        NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union            `path:"state/mpls-label|mpls-label" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛMplsLabel       []ygot.Annotation                                                                                      `path:"state/@mpls-label|@mpls-label" ygotAnnotation:"true"`
	OutOctets        *uint64                                                                                                `path:"state/out-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutOctets       []ygot.Annotation                                                                                      `path:"state/@out-octets" ygotAnnotation:"true"`
	OutPkts          *uint64                                                                                                `path:"state/out-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutPkts         []ygot.Annotation                                                                                      `path:"state/@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) IsYANGGoStruct() {
}

// NewForwardingClass creates a new entry in the ForwardingClass list of the
// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) NewForwardingClass(Exp uint8) (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[uint8]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
	}

	key := Exp

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingClass", key)
	}

	t.ForwardingClass[key] = &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass{
		Exp: &Exp,
	}

	return t.ForwardingClass[key], nil
}

// RenameForwardingClass renames an entry in the list ForwardingClass within
// the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) RenameForwardingClass(oldK, newK uint8) error {
	if _, ok := t.ForwardingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingClass", newK)
	}

	e, ok := t.ForwardingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingClass", oldK)
	}
	e.Exp = &newK

	t.ForwardingClass[newK] = e
	delete(t.ForwardingClass, oldK)
	return nil
}

// GetOrCreateForwardingClass retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetOrCreateForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass {

	key := Exp

	if v, ok := t.ForwardingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingClass(Exp)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingClass got unexpected error: %v", err))
	}
	return v
}

// GetForwardingClass retrieves the value with the specified key from
// the ForwardingClass map field of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass {

	if t == nil {
		return nil
	}

	key := Exp

	if lm, ok := t.ForwardingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingClass deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) DeleteForwardingClass(Exp uint8) {
	key := Exp

	delete(t.ForwardingClass, key)
}

// AppendForwardingClass appends the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass struct to the
// list ForwardingClass of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) AppendForwardingClass(v *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) error {
	if v.Exp == nil {
		return fmt.Errorf("invalid nil key received for Exp")
	}

	key := *v.Exp

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[uint8]*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
	}

	if _, ok := t.ForwardingClass[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingClass %v", key)
	}

	t.ForwardingClass[key] = v
	return nil
}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetMplsLabel() NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union {
	if t == nil || t.MplsLabel == nil {
		return nil
	}
	return t.MplsLabel
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ForwardingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mpls-label": t.MplsLabel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Exp        *uint8            `path:"state/exp|exp" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛExp       []ygot.Annotation `path:"state/@exp|@exp" ygotAnnotation:"true"`
	InOctets   *uint64           `path:"state/in-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInOctets  []ygot.Annotation `path:"state/@in-octets" ygotAnnotation:"true"`
	InPkts     *uint64           `path:"state/in-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInPkts    []ygot.Annotation `path:"state/@in-pkts" ygotAnnotation:"true"`
	OutOctets  *uint64           `path:"state/out-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutOctets []ygot.Annotation `path:"state/@out-octets" ygotAnnotation:"true"`
	OutPkts    *uint64           `path:"state/out-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOutPkts   []ygot.Annotation `path:"state/@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) IsYANGGoStruct() {
}

// GetExp retrieves the value of the leaf Exp from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exp is set, it can
// safely use t.GetExp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) GetExp() uint8 {
	if t == nil || t.Exp == nil {
		return 0
	}
	return *t.Exp
}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Exp == nil {
		return nil, fmt.Errorf("nil value for key Exp")
	}

	return map[string]interface{}{
		"exp": *t.Exp,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_TeGlobalAttributes represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes struct {
	ΛMetadata    []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	AdminGroup   map[string]*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup `path:"mpls-admin-groups/admin-group" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdminGroup  []ygot.Annotation                                              `path:"mpls-admin-groups/@admin-group" ygotAnnotation:"true"`
	Srlg         map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg       `path:"srlgs/srlg" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSrlg        []ygot.Annotation                                              `path:"srlgs/@srlg" ygotAnnotation:"true"`
	TeLspTimers  *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers           `path:"te-lsp-timers" module:"openconfig-network-instance"`
	ΛTeLspTimers []ygot.Annotation                                              `path:"@te-lsp-timers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_TeGlobalAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_TeGlobalAttributes) IsYANGGoStruct() {}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NetworkInstance_Mpls_TeGlobalAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) NewAdminGroup(AdminGroupName string) (*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup)
	}

	key := AdminGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup{
		AdminGroupName: &AdminGroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NetworkInstance_Mpls_TeGlobalAttributes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.AdminGroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetOrCreateAdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup {

	key := AdminGroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(AdminGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NetworkInstance_Mpls_TeGlobalAttributes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetAdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup {

	if t == nil {
		return nil
	}

	key := AdminGroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) DeleteAdminGroup(AdminGroupName string) {
	key := AdminGroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup struct to the
// list AdminGroup of NetworkInstance_Mpls_TeGlobalAttributes. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) AppendAdminGroup(v *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) error {
	if v.AdminGroupName == nil {
		return fmt.Errorf("invalid nil key received for AdminGroupName")
	}

	key := *v.AdminGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// NewSrlg creates a new entry in the Srlg list of the
// NetworkInstance_Mpls_TeGlobalAttributes struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) NewSrlg(Name string) (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlg == nil {
		t.Srlg = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlg", key)
	}

	t.Srlg[key] = &NetworkInstance_Mpls_TeGlobalAttributes_Srlg{
		Name: &Name,
	}

	return t.Srlg[key], nil
}

// RenameSrlg renames an entry in the list Srlg within
// the NetworkInstance_Mpls_TeGlobalAttributes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) RenameSrlg(oldK, newK string) error {
	if _, ok := t.Srlg[newK]; ok {
		return fmt.Errorf("key %v already exists in Srlg", newK)
	}

	e, ok := t.Srlg[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srlg", oldK)
	}
	e.Name = &newK

	t.Srlg[newK] = e
	delete(t.Srlg, oldK)
	return nil
}

// GetOrCreateSrlg retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetOrCreateSrlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg {

	key := Name

	if v, ok := t.Srlg[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlg(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlg got unexpected error: %v", err))
	}
	return v
}

// GetSrlg retrieves the value with the specified key from
// the Srlg map field of NetworkInstance_Mpls_TeGlobalAttributes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetSrlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Srlg[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlg deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) DeleteSrlg(Name string) {
	key := Name

	delete(t.Srlg, key)
}

// AppendSrlg appends the supplied NetworkInstance_Mpls_TeGlobalAttributes_Srlg struct to the
// list Srlg of NetworkInstance_Mpls_TeGlobalAttributes. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_TeGlobalAttributes_Srlg already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) AppendSrlg(v *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlg == nil {
		t.Srlg = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg)
	}

	if _, ok := t.Srlg[key]; ok {
		return fmt.Errorf("duplicate key for list Srlg %v", key)
	}

	t.Srlg[key] = v
	return nil
}

// GetOrCreateTeLspTimers retrieves the value of the TeLspTimers field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetOrCreateTeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers {
	if t.TeLspTimers != nil {
		return t.TeLspTimers
	}
	t.TeLspTimers = &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers{}
	return t.TeLspTimers
}

// GetTeLspTimers returns the value of the TeLspTimers struct pointer
// from NetworkInstance_Mpls_TeGlobalAttributes. If the receiver or the field TeLspTimers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) GetTeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers {
	if t != nil && t.TeLspTimers != nil {
		return t.TeLspTimers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_TeGlobalAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TeLspTimers.PopulateDefaults()
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Srlg {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_TeGlobalAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_TeGlobalAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_TeGlobalAttributes.
func (*NetworkInstance_Mpls_TeGlobalAttributes) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminGroupName  *string           `path:"config/admin-group-name|admin-group-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAdminGroupName []ygot.Annotation `path:"config/@admin-group-name|@admin-group-name" ygotAnnotation:"true"`
	BitPosition     *uint32           `path:"config/bit-position" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBitPosition    []ygot.Annotation `path:"config/@bit-position" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) IsYANGGoStruct() {}

// GetAdminGroupName retrieves the value of the leaf AdminGroupName from the NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroupName is set, it can
// safely use t.GetAdminGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroupName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) GetAdminGroupName() string {
	if t == nil || t.AdminGroupName == nil {
		return ""
	}
	return *t.AdminGroupName
}

// GetBitPosition retrieves the value of the leaf BitPosition from the NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitPosition is set, it can
// safely use t.GetBitPosition() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitPosition == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) GetBitPosition() uint32 {
	if t == nil || t.BitPosition == nil {
		return 0
	}
	return *t.BitPosition
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AdminGroupName == nil {
		return nil, fmt.Errorf("nil value for key AdminGroupName")
	}

	return map[string]interface{}{
		"admin-group-name": *t.AdminGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup.
func (*NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg struct {
	ΛMetadata     []ygot.Annotation                                                    `path:"@" ygotAnnotation:"true"`
	Cost          *uint32                                                              `path:"config/cost" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCost         []ygot.Annotation                                                    `path:"config/@cost" ygotAnnotation:"true"`
	FloodingType  E_Mpls_MplsSrlgFloodingType                                          `path:"config/flooding-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛFloodingType []ygot.Annotation                                                    `path:"config/@flooding-type" ygotAnnotation:"true"`
	MembersList   map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList `path:"static-srlg-members/members-list" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMembersList  []ygot.Annotation                                                    `path:"static-srlg-members/@members-list" ygotAnnotation:"true"`
	Name          *string                                                              `path:"config/name|name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛName         []ygot.Annotation                                                    `path:"config/@name|@name" ygotAnnotation:"true"`
	Value         *uint32                                                              `path:"config/value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValue        []ygot.Annotation                                                    `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_TeGlobalAttributes_Srlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg) IsYANGGoStruct() {}

// NewMembersList creates a new entry in the MembersList list of the
// NetworkInstance_Mpls_TeGlobalAttributes_Srlg struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) NewMembersList(FromAddress string) (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MembersList == nil {
		t.MembersList = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList)
	}

	key := FromAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MembersList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MembersList", key)
	}

	t.MembersList[key] = &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList{
		FromAddress: &FromAddress,
	}

	return t.MembersList[key], nil
}

// RenameMembersList renames an entry in the list MembersList within
// the NetworkInstance_Mpls_TeGlobalAttributes_Srlg struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) RenameMembersList(oldK, newK string) error {
	if _, ok := t.MembersList[newK]; ok {
		return fmt.Errorf("key %v already exists in MembersList", newK)
	}

	e, ok := t.MembersList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MembersList", oldK)
	}
	e.FromAddress = &newK

	t.MembersList[newK] = e
	delete(t.MembersList, oldK)
	return nil
}

// GetOrCreateMembersList retrieves the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes_Srlg. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetOrCreateMembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList {

	key := FromAddress

	if v, ok := t.MembersList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMembersList(FromAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMembersList got unexpected error: %v", err))
	}
	return v
}

// GetMembersList retrieves the value with the specified key from
// the MembersList map field of NetworkInstance_Mpls_TeGlobalAttributes_Srlg. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetMembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList {

	if t == nil {
		return nil
	}

	key := FromAddress

	if lm, ok := t.MembersList[key]; ok {
		return lm
	}
	return nil
}

// DeleteMembersList deletes the value with the specified keys from
// the receiver NetworkInstance_Mpls_TeGlobalAttributes_Srlg. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) DeleteMembersList(FromAddress string) {
	key := FromAddress

	delete(t.MembersList, key)
}

// AppendMembersList appends the supplied NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList struct to the
// list MembersList of NetworkInstance_Mpls_TeGlobalAttributes_Srlg. If the key value(s) specified in
// the supplied NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList already exist in the list, an error is
// returned.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) AppendMembersList(v *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) error {
	if v.FromAddress == nil {
		return fmt.Errorf("invalid nil key received for FromAddress")
	}

	key := *v.FromAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MembersList == nil {
		t.MembersList = make(map[string]*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList)
	}

	if _, ok := t.MembersList[key]; ok {
		return fmt.Errorf("duplicate key for list MembersList %v", key)
	}

	t.MembersList[key] = v
	return nil
}

// GetCost retrieves the value of the leaf Cost from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetFloodingType retrieves the value of the leaf FloodingType from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodingType is set, it can
// safely use t.GetFloodingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodingType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetFloodingType() E_Mpls_MplsSrlgFloodingType {
	if t == nil || t.FloodingType == 0 {
		return Mpls_MplsSrlgFloodingType_FLOODED_SRLG
	}
	return t.FloodingType
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_TeGlobalAttributes_Srlg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FloodingType == 0 {
		t.FloodingType = Mpls_MplsSrlgFloodingType_FLOODED_SRLG
	}
	for _, e := range t.MembersList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_TeGlobalAttributes_Srlg struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_TeGlobalAttributes_Srlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_TeGlobalAttributes_Srlg.
func (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FromAddress  *string           `path:"config/from-address|from-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛFromAddress []ygot.Annotation `path:"config/@from-address|@from-address" ygotAnnotation:"true"`
	ToAddress    *string           `path:"config/to-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛToAddress   []ygot.Annotation `path:"config/@to-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) IsYANGGoStruct() {}

// GetFromAddress retrieves the value of the leaf FromAddress from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FromAddress is set, it can
// safely use t.GetFromAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FromAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) GetFromAddress() string {
	if t == nil || t.FromAddress == nil {
		return ""
	}
	return *t.FromAddress
}

// GetToAddress retrieves the value of the leaf ToAddress from the NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToAddress is set, it can
// safely use t.GetToAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) GetToAddress() string {
	if t == nil || t.ToAddress == nil {
		return ""
	}
	return *t.ToAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList struct, which is a YANG list entry.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FromAddress == nil {
		return nil, fmt.Errorf("nil value for key FromAddress")
	}

	return map[string]interface{}{
		"from-address": *t.FromAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList.
func (*NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CleanupDelay     *uint16           `path:"config/cleanup-delay" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCleanupDelay    []ygot.Annotation `path:"config/@cleanup-delay" ygotAnnotation:"true"`
	InstallDelay     *uint16           `path:"config/install-delay" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInstallDelay    []ygot.Annotation `path:"config/@install-delay" ygotAnnotation:"true"`
	ReoptimizeTimer  *uint16           `path:"config/reoptimize-timer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReoptimizeTimer []ygot.Annotation `path:"config/@reoptimize-timer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) IsYANGGoStruct() {}

// GetCleanupDelay retrieves the value of the leaf CleanupDelay from the NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CleanupDelay is set, it can
// safely use t.GetCleanupDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CleanupDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) GetCleanupDelay() uint16 {
	if t == nil || t.CleanupDelay == nil {
		return 0
	}
	return *t.CleanupDelay
}

// GetInstallDelay retrieves the value of the leaf InstallDelay from the NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallDelay is set, it can
// safely use t.GetInstallDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) GetInstallDelay() uint16 {
	if t == nil || t.InstallDelay == nil {
		return 0
	}
	return *t.InstallDelay
}

// GetReoptimizeTimer retrieves the value of the leaf ReoptimizeTimer from the NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReoptimizeTimer is set, it can
// safely use t.GetReoptimizeTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReoptimizeTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) GetReoptimizeTimer() uint16 {
	if t == nil || t.ReoptimizeTimer == nil {
		return 0
	}
	return *t.ReoptimizeTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers.
func (*NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwarding struct {
	ΛMetadata           []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	Interface           map[string]*NetworkInstance_PolicyForwarding_Interface          `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface          []ygot.Annotation                                               `path:"interfaces/@interface" ygotAnnotation:"true"`
	PathSelectionGroup  map[string]*NetworkInstance_PolicyForwarding_PathSelectionGroup `path:"path-selection-groups/path-selection-group" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPathSelectionGroup []ygot.Annotation                                               `path:"path-selection-groups/@path-selection-group" ygotAnnotation:"true"`
	Policy              map[string]*NetworkInstance_PolicyForwarding_Policy             `path:"policies/policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPolicy             []ygot.Annotation                                               `path:"policies/@policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_PolicyForwarding) NewInterface(InterfaceId string) (*NetworkInstance_PolicyForwarding_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_PolicyForwarding_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_PolicyForwarding_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_PolicyForwarding) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_PolicyForwarding) GetOrCreateInterface(InterfaceId string) *NetworkInstance_PolicyForwarding_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_PolicyForwarding) GetInterface(InterfaceId string) *NetworkInstance_PolicyForwarding_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_PolicyForwarding) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_PolicyForwarding_Interface struct to the
// list Interface of NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied NetworkInstance_PolicyForwarding_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_PolicyForwarding) AppendInterface(v *NetworkInstance_PolicyForwarding_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_PolicyForwarding_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewPathSelectionGroup creates a new entry in the PathSelectionGroup list of the
// NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_PolicyForwarding) NewPathSelectionGroup(GroupId string) (*NetworkInstance_PolicyForwarding_PathSelectionGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathSelectionGroup == nil {
		t.PathSelectionGroup = make(map[string]*NetworkInstance_PolicyForwarding_PathSelectionGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathSelectionGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathSelectionGroup", key)
	}

	t.PathSelectionGroup[key] = &NetworkInstance_PolicyForwarding_PathSelectionGroup{
		GroupId: &GroupId,
	}

	return t.PathSelectionGroup[key], nil
}

// RenamePathSelectionGroup renames an entry in the list PathSelectionGroup within
// the NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_PolicyForwarding) RenamePathSelectionGroup(oldK, newK string) error {
	if _, ok := t.PathSelectionGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in PathSelectionGroup", newK)
	}

	e, ok := t.PathSelectionGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathSelectionGroup", oldK)
	}
	e.GroupId = &newK

	t.PathSelectionGroup[newK] = e
	delete(t.PathSelectionGroup, oldK)
	return nil
}

// GetOrCreatePathSelectionGroup retrieves the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_PolicyForwarding) GetOrCreatePathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroup {

	key := GroupId

	if v, ok := t.PathSelectionGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathSelectionGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathSelectionGroup got unexpected error: %v", err))
	}
	return v
}

// GetPathSelectionGroup retrieves the value with the specified key from
// the PathSelectionGroup map field of NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_PolicyForwarding) GetPathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.PathSelectionGroup[key]; ok {
		return lm
	}
	return nil
}

// DeletePathSelectionGroup deletes the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_PolicyForwarding) DeletePathSelectionGroup(GroupId string) {
	key := GroupId

	delete(t.PathSelectionGroup, key)
}

// AppendPathSelectionGroup appends the supplied NetworkInstance_PolicyForwarding_PathSelectionGroup struct to the
// list PathSelectionGroup of NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied NetworkInstance_PolicyForwarding_PathSelectionGroup already exist in the list, an error is
// returned.
func (t *NetworkInstance_PolicyForwarding) AppendPathSelectionGroup(v *NetworkInstance_PolicyForwarding_PathSelectionGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathSelectionGroup == nil {
		t.PathSelectionGroup = make(map[string]*NetworkInstance_PolicyForwarding_PathSelectionGroup)
	}

	if _, ok := t.PathSelectionGroup[key]; ok {
		return fmt.Errorf("duplicate key for list PathSelectionGroup %v", key)
	}

	t.PathSelectionGroup[key] = v
	return nil
}

// NewPolicy creates a new entry in the Policy list of the
// NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_PolicyForwarding) NewPolicy(PolicyId string) (*NetworkInstance_PolicyForwarding_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NetworkInstance_PolicyForwarding_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NetworkInstance_PolicyForwarding_Policy{
		PolicyId: &PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_PolicyForwarding) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_PolicyForwarding) GetOrCreatePolicy(PolicyId string) *NetworkInstance_PolicyForwarding_Policy {

	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_PolicyForwarding) GetPolicy(PolicyId string) *NetworkInstance_PolicyForwarding_Policy {

	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_PolicyForwarding) DeletePolicy(PolicyId string) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NetworkInstance_PolicyForwarding_Policy struct to the
// list Policy of NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied NetworkInstance_PolicyForwarding_Policy already exist in the list, an error is
// returned.
func (t *NetworkInstance_PolicyForwarding) AppendPolicy(v *NetworkInstance_PolicyForwarding_Policy) error {
	if v.PolicyId == nil {
		return fmt.Errorf("invalid nil key received for PolicyId")
	}

	key := *v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NetworkInstance_PolicyForwarding_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.PathSelectionGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding.
func (*NetworkInstance_PolicyForwarding) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Interface represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface struct {
	ΛMetadata                []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	ApplyForwardingPolicy    *string                                                  `path:"config/apply-forwarding-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛApplyForwardingPolicy   []ygot.Annotation                                        `path:"config/@apply-forwarding-policy" ygotAnnotation:"true"`
	ApplyVrfSelectionPolicy  *string                                                  `path:"config/apply-vrf-selection-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛApplyVrfSelectionPolicy []ygot.Annotation                                        `path:"config/@apply-vrf-selection-policy" ygotAnnotation:"true"`
	InterfaceId              *string                                                  `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId             []ygot.Annotation                                        `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef             *NetworkInstance_PolicyForwarding_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef            []ygot.Annotation                                        `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Interface) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Interface) GetOrCreateInterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_PolicyForwarding_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_PolicyForwarding_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Interface) GetInterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetApplyForwardingPolicy retrieves the value of the leaf ApplyForwardingPolicy from the NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyForwardingPolicy is set, it can
// safely use t.GetApplyForwardingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyForwardingPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Interface) GetApplyForwardingPolicy() string {
	if t == nil || t.ApplyForwardingPolicy == nil {
		return ""
	}
	return *t.ApplyForwardingPolicy
}

// GetApplyVrfSelectionPolicy retrieves the value of the leaf ApplyVrfSelectionPolicy from the NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyVrfSelectionPolicy is set, it can
// safely use t.GetApplyVrfSelectionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyVrfSelectionPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Interface) GetApplyVrfSelectionPolicy() string {
	if t == nil || t.ApplyVrfSelectionPolicy == nil {
		return ""
	}
	return *t.ApplyVrfSelectionPolicy
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_PolicyForwarding_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_PolicyForwarding_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Interface.
func (*NetworkInstance_PolicyForwarding_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Interface_InterfaceRef.
func (*NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	GroupId   *string           `path:"config/group-id|group-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛGroupId  []ygot.Annotation `path:"config/@group-id|@group-id" ygotAnnotation:"true"`
	MplsLsp   []string          `path:"config/mpls-lsp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsLsp  []ygot.Annotation `path:"config/@mpls-lsp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_PathSelectionGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_PathSelectionGroup) IsYANGGoStruct() {}

// GetGroupId retrieves the value of the leaf GroupId from the NetworkInstance_PolicyForwarding_PathSelectionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) GetGroupId() string {
	if t == nil || t.GroupId == nil {
		return ""
	}
	return *t.GroupId
}

// GetMplsLsp retrieves the value of the leaf MplsLsp from the NetworkInstance_PolicyForwarding_PathSelectionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLsp is set, it can
// safely use t.GetMplsLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLsp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) GetMplsLsp() []string {
	if t == nil || t.MplsLsp == nil {
		return nil
	}
	return t.MplsLsp
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_PathSelectionGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_PolicyForwarding_PathSelectionGroup struct, which is a YANG list entry.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_PathSelectionGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_PathSelectionGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_PathSelectionGroup.
func (*NetworkInstance_PolicyForwarding_PathSelectionGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_Policy struct {
	ΛMetadata []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	PolicyId  *string                                                  `path:"config/policy-id|policy-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPolicyId []ygot.Annotation                                        `path:"config/@policy-id|@policy-id" ygotAnnotation:"true"`
	Rule      map[uint32]*NetworkInstance_PolicyForwarding_Policy_Rule `path:"rules/rule" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRule     []ygot.Annotation                                        `path:"rules/@rule" ygotAnnotation:"true"`
	Type      E_Policy_Type                                            `path:"config/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType     []ygot.Annotation                                        `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy) IsYANGGoStruct() {}

// NewRule creates a new entry in the Rule list of the
// NetworkInstance_PolicyForwarding_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_PolicyForwarding_Policy) NewRule(SequenceId uint32) (*NetworkInstance_PolicyForwarding_Policy_Rule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rule", key)
	}

	t.Rule[key] = &NetworkInstance_PolicyForwarding_Policy_Rule{
		SequenceId: &SequenceId,
	}

	return t.Rule[key], nil
}

// RenameRule renames an entry in the list Rule within
// the NetworkInstance_PolicyForwarding_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_PolicyForwarding_Policy) RenameRule(oldK, newK uint32) error {
	if _, ok := t.Rule[newK]; ok {
		return fmt.Errorf("key %v already exists in Rule", newK)
	}

	e, ok := t.Rule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rule", oldK)
	}
	e.SequenceId = &newK

	t.Rule[newK] = e
	delete(t.Rule, oldK)
	return nil
}

// GetOrCreateRule retrieves the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_PolicyForwarding_Policy) GetOrCreateRule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_Rule {

	key := SequenceId

	if v, ok := t.Rule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRule(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRule got unexpected error: %v", err))
	}
	return v
}

// GetRule retrieves the value with the specified key from
// the Rule map field of NetworkInstance_PolicyForwarding_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy) GetRule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_Rule {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Rule[key]; ok {
		return lm
	}
	return nil
}

// DeleteRule deletes the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding_Policy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_PolicyForwarding_Policy) DeleteRule(SequenceId uint32) {
	key := SequenceId

	delete(t.Rule, key)
}

// AppendRule appends the supplied NetworkInstance_PolicyForwarding_Policy_Rule struct to the
// list Rule of NetworkInstance_PolicyForwarding_Policy. If the key value(s) specified in
// the supplied NetworkInstance_PolicyForwarding_Policy_Rule already exist in the list, an error is
// returned.
func (t *NetworkInstance_PolicyForwarding_Policy) AppendRule(v *NetworkInstance_PolicyForwarding_Policy_Rule) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	if _, ok := t.Rule[key]; ok {
		return fmt.Errorf("duplicate key for list Rule %v", key)
	}

	t.Rule[key] = v
	return nil
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy) GetPolicyId() string {
	if t == nil || t.PolicyId == nil {
		return ""
	}
	return *t.PolicyId
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy) GetType() E_Policy_Type {
	if t == nil || t.Type == 0 {
		return Policy_Type_PBR_POLICY
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = Policy_Type_PBR_POLICY
	}
	for _, e := range t.Rule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_PolicyForwarding_Policy struct, which is a YANG list entry.
func (t *NetworkInstance_PolicyForwarding_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyId == nil {
		return nil, fmt.Errorf("nil value for key PolicyId")
	}

	return map[string]interface{}{
		"policy-id": *t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy.
func (*NetworkInstance_PolicyForwarding_Policy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule struct {
	ΛMetadata      []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Action         *NetworkInstance_PolicyForwarding_Policy_Rule_Action    `path:"action" module:"openconfig-network-instance"`
	ΛAction        []ygot.Annotation                                       `path:"@action" ygotAnnotation:"true"`
	Ipv4           *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4      `path:"ipv4" module:"openconfig-network-instance"`
	ΛIpv4          []ygot.Annotation                                       `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6           *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6      `path:"ipv6" module:"openconfig-network-instance"`
	ΛIpv6          []ygot.Annotation                                       `path:"@ipv6" ygotAnnotation:"true"`
	L2             *NetworkInstance_PolicyForwarding_Policy_Rule_L2        `path:"l2" module:"openconfig-network-instance"`
	ΛL2            []ygot.Annotation                                       `path:"@l2" ygotAnnotation:"true"`
	MatchedOctets  *uint64                                                 `path:"state/matched-octets" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMatchedOctets []ygot.Annotation                                       `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPkts    *uint64                                                 `path:"state/matched-pkts" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMatchedPkts   []ygot.Annotation                                       `path:"state/@matched-pkts" ygotAnnotation:"true"`
	SequenceId     *uint32                                                 `path:"config/sequence-id|sequence-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSequenceId    []ygot.Annotation                                       `path:"config/@sequence-id|@sequence-id" ygotAnnotation:"true"`
	Transport      *NetworkInstance_PolicyForwarding_Policy_Rule_Transport `path:"transport" module:"openconfig-network-instance"`
	ΛTransport     []ygot.Annotation                                       `path:"@transport" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateAction() *NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NetworkInstance_PolicyForwarding_Policy_Rule_Action{}
	return t.Action
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateIpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateIpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateL2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &NetworkInstance_PolicyForwarding_Policy_Rule_L2{}
	return t.L2
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateTransport() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &NetworkInstance_PolicyForwarding_Policy_Rule_Transport{}
	return t.Transport
}

// GetAction returns the value of the Action struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetAction() *NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetIpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetIpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetL2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetTransport() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPkts retrieves the value of the leaf MatchedPkts from the NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPkts is set, it can
// safely use t.GetMatchedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetMatchedPkts() uint64 {
	if t == nil || t.MatchedPkts == nil {
		return 0
	}
	return *t.MatchedPkts
}

// GetSequenceId retrieves the value of the leaf SequenceId from the NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_PolicyForwarding_Policy_Rule struct, which is a YANG list entry.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule.
func (*NetworkInstance_PolicyForwarding_Policy_Rule) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action struct {
	ΛMetadata                     []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	DecapFallbackNetworkInstance  *string                                                             `path:"config/decap-fallback-network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapFallbackNetworkInstance []ygot.Annotation                                                   `path:"config/@decap-fallback-network-instance" ygotAnnotation:"true"`
	DecapNetworkInstance          *string                                                             `path:"config/decap-network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapNetworkInstance         []ygot.Annotation                                                   `path:"config/@decap-network-instance" ygotAnnotation:"true"`
	DecapsulateGre                *bool                                                               `path:"config/decapsulate-gre" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapsulateGre               []ygot.Annotation                                                   `path:"config/@decapsulate-gre" ygotAnnotation:"true"`
	DecapsulateGue                *bool                                                               `path:"config/decapsulate-gue" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapsulateGue               []ygot.Annotation                                                   `path:"config/@decapsulate-gue" ygotAnnotation:"true"`
	DecapsulateMplsInUdp          *bool                                                               `path:"config/decapsulate-mpls-in-udp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapsulateMplsInUdp         []ygot.Annotation                                                   `path:"config/@decapsulate-mpls-in-udp" ygotAnnotation:"true"`
	Discard                       *bool                                                               `path:"config/discard" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDiscard                      []ygot.Annotation                                                   `path:"config/@discard" ygotAnnotation:"true"`
	EncapsulateGre                *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre `path:"encapsulate-gre" module:"openconfig-network-instance"`
	ΛEncapsulateGre               []ygot.Annotation                                                   `path:"@encapsulate-gre" ygotAnnotation:"true"`
	NetworkInstance               *string                                                             `path:"config/network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNetworkInstance              []ygot.Annotation                                                   `path:"config/@network-instance" ygotAnnotation:"true"`
	NextHop                       *string                                                             `path:"config/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHop                      []ygot.Annotation                                                   `path:"config/@next-hop" ygotAnnotation:"true"`
	PathSelectionGroup            *string                                                             `path:"config/path-selection-group" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPathSelectionGroup           []ygot.Annotation                                                   `path:"config/@path-selection-group" ygotAnnotation:"true"`
	PostDecapNetworkInstance      *string                                                             `path:"config/post-decap-network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPostDecapNetworkInstance     []ygot.Annotation                                                   `path:"config/@post-decap-network-instance" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action) IsYANGGoStruct() {}

// GetOrCreateEncapsulateGre retrieves the value of the EncapsulateGre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetOrCreateEncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre {
	if t.EncapsulateGre != nil {
		return t.EncapsulateGre
	}
	t.EncapsulateGre = &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre{}
	return t.EncapsulateGre
}

// GetEncapsulateGre returns the value of the EncapsulateGre struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule_Action. If the receiver or the field EncapsulateGre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetEncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre {
	if t != nil && t.EncapsulateGre != nil {
		return t.EncapsulateGre
	}
	return nil
}

// GetDecapFallbackNetworkInstance retrieves the value of the leaf DecapFallbackNetworkInstance from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapFallbackNetworkInstance is set, it can
// safely use t.GetDecapFallbackNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapFallbackNetworkInstance == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDecapFallbackNetworkInstance() string {
	if t == nil || t.DecapFallbackNetworkInstance == nil {
		return ""
	}
	return *t.DecapFallbackNetworkInstance
}

// GetDecapNetworkInstance retrieves the value of the leaf DecapNetworkInstance from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapNetworkInstance is set, it can
// safely use t.GetDecapNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapNetworkInstance == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDecapNetworkInstance() string {
	if t == nil || t.DecapNetworkInstance == nil {
		return ""
	}
	return *t.DecapNetworkInstance
}

// GetDecapsulateGre retrieves the value of the leaf DecapsulateGre from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateGre is set, it can
// safely use t.GetDecapsulateGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateGre == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDecapsulateGre() bool {
	if t == nil || t.DecapsulateGre == nil {
		return false
	}
	return *t.DecapsulateGre
}

// GetDecapsulateGue retrieves the value of the leaf DecapsulateGue from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateGue is set, it can
// safely use t.GetDecapsulateGue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateGue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDecapsulateGue() bool {
	if t == nil || t.DecapsulateGue == nil {
		return false
	}
	return *t.DecapsulateGue
}

// GetDecapsulateMplsInUdp retrieves the value of the leaf DecapsulateMplsInUdp from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateMplsInUdp is set, it can
// safely use t.GetDecapsulateMplsInUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateMplsInUdp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDecapsulateMplsInUdp() bool {
	if t == nil || t.DecapsulateMplsInUdp == nil {
		return false
	}
	return *t.DecapsulateMplsInUdp
}

// GetDiscard retrieves the value of the leaf Discard from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discard is set, it can
// safely use t.GetDiscard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discard == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetDiscard() bool {
	if t == nil || t.Discard == nil {
		return false
	}
	return *t.Discard
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetNextHop retrieves the value of the leaf NextHop from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetPathSelectionGroup retrieves the value of the leaf PathSelectionGroup from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathSelectionGroup is set, it can
// safely use t.GetPathSelectionGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathSelectionGroup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetPathSelectionGroup() string {
	if t == nil || t.PathSelectionGroup == nil {
		return ""
	}
	return *t.PathSelectionGroup
}

// GetPostDecapNetworkInstance retrieves the value of the leaf PostDecapNetworkInstance from the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostDecapNetworkInstance is set, it can
// safely use t.GetPostDecapNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostDecapNetworkInstance == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetPostDecapNetworkInstance() string {
	if t == nil || t.PostDecapNetworkInstance == nil {
		return ""
	}
	return *t.PostDecapNetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DecapsulateGre == nil {
		var v bool = false
		t.DecapsulateGre = &v
	}
	if t.DecapsulateGue == nil {
		var v bool = false
		t.DecapsulateGue = &v
	}
	if t.DecapsulateMplsInUdp == nil {
		var v bool = false
		t.DecapsulateMplsInUdp = &v
	}
	if t.Discard == nil {
		var v bool = false
		t.Discard = &v
	}
	t.EncapsulateGre.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Action.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre struct {
	ΛMetadata          []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	IdentifyingPrefix  *string                                                                               `path:"config/identifying-prefix" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIdentifyingPrefix []ygot.Annotation                                                                     `path:"config/@identifying-prefix" ygotAnnotation:"true"`
	Target             map[string]*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target `path:"targets/target" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTarget            []ygot.Annotation                                                                     `path:"targets/@target" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) IsYANGGoStruct() {}

// NewTarget creates a new entry in the Target list of the
// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) NewTarget(Id string) (*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Target[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Target", key)
	}

	t.Target[key] = &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target{
		Id: &Id,
	}

	return t.Target[key], nil
}

// RenameTarget renames an entry in the list Target within
// the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) RenameTarget(oldK, newK string) error {
	if _, ok := t.Target[newK]; ok {
		return fmt.Errorf("key %v already exists in Target", newK)
	}

	e, ok := t.Target[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Target", oldK)
	}
	e.Id = &newK

	t.Target[newK] = e
	delete(t.Target, oldK)
	return nil
}

// GetOrCreateTarget retrieves the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) GetOrCreateTarget(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target {

	key := Id

	if v, ok := t.Target[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTarget(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTarget got unexpected error: %v", err))
	}
	return v
}

// GetTarget retrieves the value with the specified key from
// the Target map field of NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) GetTarget(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Target[key]; ok {
		return lm
	}
	return nil
}

// DeleteTarget deletes the value with the specified keys from
// the receiver NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) DeleteTarget(Id string) {
	key := Id

	delete(t.Target, key)
}

// AppendTarget appends the supplied NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target struct to the
// list Target of NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre. If the key value(s) specified in
// the supplied NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target already exist in the list, an error is
// returned.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) AppendTarget(v *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
	}

	if _, ok := t.Target[key]; ok {
		return fmt.Errorf("duplicate key for list Target %v", key)
	}

	t.Target[key] = v
	return nil
}

// GetIdentifyingPrefix retrieves the value of the leaf IdentifyingPrefix from the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdentifyingPrefix is set, it can
// safely use t.GetIdentifyingPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdentifyingPrefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) GetIdentifyingPrefix() string {
	if t == nil || t.IdentifyingPrefix == nil {
		return ""
	}
	return *t.IdentifyingPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Target {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Destination  *string           `path:"config/destination" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestination []ygot.Annotation `path:"config/@destination" ygotAnnotation:"true"`
	Id           *string           `path:"config/id|id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛId          []ygot.Annotation `path:"config/@id|@id" ygotAnnotation:"true"`
	IpTtl        *uint8            `path:"config/ip-ttl" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIpTtl       []ygot.Annotation `path:"config/@ip-ttl" ygotAnnotation:"true"`
	Source       *string           `path:"config/source" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSource      []ygot.Annotation `path:"config/@source" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) IsYANGGoStruct() {}

// GetDestination retrieves the value of the leaf Destination from the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetId retrieves the value of the leaf Id from the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetIpTtl retrieves the value of the leaf IpTtl from the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpTtl is set, it can
// safely use t.GetIpTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpTtl == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) GetIpTtl() uint8 {
	if t == nil || t.IpTtl == nil {
		return 0
	}
	return *t.IpTtl
}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target struct, which is a YANG list entry.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4 represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4 struct {
	ΛMetadata                    []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                          `path:"config/destination-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationAddress          []ygot.Annotation                                                `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                          `path:"config/destination-address-prefix-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	Dscp                         *uint8                                                           `path:"config/dscp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDscp                        []ygot.Annotation                                                `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                          `path:"config/dscp-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDscpSet                     []ygot.Annotation                                                `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                           `path:"config/hop-limit" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHopLimit                    []ygot.Annotation                                                `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv4                       *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4        `path:"icmpv4" module:"openconfig-network-instance"`
	ΛIcmpv4                      []ygot.Annotation                                                `path:"@icmpv4" ygotAnnotation:"true"`
	Length                       *uint16                                                          `path:"config/length" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLength                      []ygot.Annotation                                                `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union `path:"config/protocol" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛProtocol                    []ygot.Annotation                                                `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                          `path:"config/source-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceAddress               []ygot.Annotation                                                `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                          `path:"config/source-address-prefix-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetOrCreateIcmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetIcmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDscp retrieves the value of the leaf Dscp from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetProtocol() NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4 represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv4Types_CODE `path:"config/code" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv4Types_TYPE `path:"config/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) GetCode() E_Icmpv4Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) GetType() E_Icmpv4Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6 represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6 struct {
	ΛMetadata                    []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                                          `path:"config/destination-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationAddress          []ygot.Annotation                                                `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                                          `path:"config/destination-address-prefix-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                                `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	DestinationFlowLabel         *uint32                                                          `path:"config/destination-flow-label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationFlowLabel        []ygot.Annotation                                                `path:"config/@destination-flow-label" ygotAnnotation:"true"`
	Dscp                         *uint8                                                           `path:"config/dscp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDscp                        []ygot.Annotation                                                `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                                          `path:"config/dscp-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDscpSet                     []ygot.Annotation                                                `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                                           `path:"config/hop-limit" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHopLimit                    []ygot.Annotation                                                `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv6                       *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6        `path:"icmpv6" module:"openconfig-network-instance"`
	ΛIcmpv6                      []ygot.Annotation                                                `path:"@icmpv6" ygotAnnotation:"true"`
	Length                       *uint16                                                          `path:"config/length" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLength                      []ygot.Annotation                                                `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union `path:"config/protocol" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛProtocol                    []ygot.Annotation                                                `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                                          `path:"config/source-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceAddress               []ygot.Annotation                                                `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                                          `path:"config/source-address-prefix-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                                `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
	SourceFlowLabel              *uint32                                                          `path:"config/source-flow-label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceFlowLabel             []ygot.Annotation                                                `path:"config/@source-flow-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) IsYANGGoStruct() {}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetOrCreateIcmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetIcmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetProtocol() NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6 represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv6Types_CODE `path:"config/code" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv6Types_TYPE `path:"config/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) GetCode() E_Icmpv6Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) GetType() E_Icmpv6Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2 represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2 struct {
	ΛMetadata           []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	DestinationMac      *string                                                         `path:"config/destination-mac" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationMac     []ygot.Annotation                                               `path:"config/@destination-mac" ygotAnnotation:"true"`
	DestinationMacMask  *string                                                         `path:"config/destination-mac-mask" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationMacMask []ygot.Annotation                                               `path:"config/@destination-mac-mask" ygotAnnotation:"true"`
	Ethertype           NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union `path:"config/ethertype" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEthertype          []ygot.Annotation                                               `path:"config/@ethertype" ygotAnnotation:"true"`
	SourceMac           *string                                                         `path:"config/source-mac" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceMac          []ygot.Annotation                                               `path:"config/@source-mac" ygotAnnotation:"true"`
	SourceMacMask       *string                                                         `path:"config/source-mac-mask" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourceMacMask      []ygot.Annotation                                               `path:"config/@source-mac-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) GetEthertype() NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_L2.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_L2) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport struct {
	ΛMetadata                []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	BuiltinDetail            E_Transport_BuiltinDetail                                                    `path:"config/builtin-detail" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBuiltinDetail           []ygot.Annotation                                                            `path:"config/@builtin-detail" ygotAnnotation:"true"`
	DestinationPort          NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union `path:"config/destination-port" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationPort         []ygot.Annotation                                                            `path:"config/@destination-port" ygotAnnotation:"true"`
	DestinationPortSet       *string                                                                      `path:"config/destination-port-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDestinationPortSet      []ygot.Annotation                                                            `path:"config/@destination-port-set" ygotAnnotation:"true"`
	DetailMode               E_Transport_DetailMode                                                       `path:"config/detail-mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDetailMode              []ygot.Annotation                                                            `path:"config/@detail-mode" ygotAnnotation:"true"`
	ExplicitDetailMatchMode  E_Transport_ExplicitDetailMatchMode                                          `path:"config/explicit-detail-match-mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExplicitDetailMatchMode []ygot.Annotation                                                            `path:"config/@explicit-detail-match-mode" ygotAnnotation:"true"`
	ExplicitTcpFlags         []E_PacketMatchTypes_TCP_FLAGS                                               `path:"config/explicit-tcp-flags" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExplicitTcpFlags        []ygot.Annotation                                                            `path:"config/@explicit-tcp-flags" ygotAnnotation:"true"`
	SourcePort               NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union      `path:"config/source-port" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourcePort              []ygot.Annotation                                                            `path:"config/@source-port" ygotAnnotation:"true"`
	SourcePortSet            *string                                                                      `path:"config/source-port-set" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSourcePortSet           []ygot.Annotation                                                            `path:"config/@source-port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport) IsYANGGoStruct() {}

// GetBuiltinDetail retrieves the value of the leaf BuiltinDetail from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BuiltinDetail is set, it can
// safely use t.GetBuiltinDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BuiltinDetail == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetBuiltinDetail() E_Transport_BuiltinDetail {
	if t == nil || t.BuiltinDetail == 0 {
		return 0
	}
	return t.BuiltinDetail
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetDestinationPort() NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetDestinationPortSet retrieves the value of the leaf DestinationPortSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPortSet is set, it can
// safely use t.GetDestinationPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPortSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetDestinationPortSet() string {
	if t == nil || t.DestinationPortSet == nil {
		return ""
	}
	return *t.DestinationPortSet
}

// GetDetailMode retrieves the value of the leaf DetailMode from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailMode is set, it can
// safely use t.GetDetailMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetDetailMode() E_Transport_DetailMode {
	if t == nil || t.DetailMode == 0 {
		return 0
	}
	return t.DetailMode
}

// GetExplicitDetailMatchMode retrieves the value of the leaf ExplicitDetailMatchMode from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitDetailMatchMode is set, it can
// safely use t.GetExplicitDetailMatchMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitDetailMatchMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetExplicitDetailMatchMode() E_Transport_ExplicitDetailMatchMode {
	if t == nil || t.ExplicitDetailMatchMode == 0 {
		return 0
	}
	return t.ExplicitDetailMatchMode
}

// GetExplicitTcpFlags retrieves the value of the leaf ExplicitTcpFlags from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitTcpFlags is set, it can
// safely use t.GetExplicitTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitTcpFlags == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetExplicitTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.ExplicitTcpFlags == nil {
		return nil
	}
	return t.ExplicitTcpFlags
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetSourcePort() NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetSourcePortSet retrieves the value of the leaf SourcePortSet from the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePortSet is set, it can
// safely use t.GetSourcePortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePortSet == nil' before retrieving the leaf's value.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) GetSourcePortSet() string {
	if t == nil || t.SourcePortSet == nil {
		return ""
	}
	return *t.SourcePortSet
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_PolicyForwarding_Policy_Rule_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_PolicyForwarding_Policy_Rule_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_PolicyForwarding_Policy_Rule_Transport.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_Protocol struct {
	ΛMetadata      []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Aggregate      map[string]*NetworkInstance_Protocol_Aggregate `path:"local-aggregates/aggregate" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAggregate     []ygot.Annotation                              `path:"local-aggregates/@aggregate" ygotAnnotation:"true"`
	Bgp            *NetworkInstance_Protocol_Bgp                  `path:"bgp" module:"openconfig-network-instance"`
	ΛBgp           []ygot.Annotation                              `path:"@bgp" ygotAnnotation:"true"`
	DefaultMetric  *uint32                                        `path:"config/default-metric" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDefaultMetric []ygot.Annotation                              `path:"config/@default-metric" ygotAnnotation:"true"`
	Enabled        *bool                                          `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation                              `path:"config/@enabled" ygotAnnotation:"true"`
	Identifier     E_PolicyTypes_INSTALL_PROTOCOL_TYPE            `path:"config/identifier|identifier" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIdentifier    []ygot.Annotation                              `path:"config/@identifier|@identifier" ygotAnnotation:"true"`
	Igmp           *NetworkInstance_Protocol_Igmp                 `path:"igmp" module:"openconfig-network-instance"`
	ΛIgmp          []ygot.Annotation                              `path:"@igmp" ygotAnnotation:"true"`
	Isis           *NetworkInstance_Protocol_Isis                 `path:"isis" module:"openconfig-network-instance"`
	ΛIsis          []ygot.Annotation                              `path:"@isis" ygotAnnotation:"true"`
	Name           *string                                        `path:"config/name|name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛName          []ygot.Annotation                              `path:"config/@name|@name" ygotAnnotation:"true"`
	Ospfv2         *NetworkInstance_Protocol_Ospfv2               `path:"ospfv2" module:"openconfig-network-instance"`
	ΛOspfv2        []ygot.Annotation                              `path:"@ospfv2" ygotAnnotation:"true"`
	Pcep           *NetworkInstance_Protocol_Pcep                 `path:"pcep" module:"openconfig-network-instance"`
	ΛPcep          []ygot.Annotation                              `path:"@pcep" ygotAnnotation:"true"`
	Pim            *NetworkInstance_Protocol_Pim                  `path:"pim" module:"openconfig-network-instance"`
	ΛPim           []ygot.Annotation                              `path:"@pim" ygotAnnotation:"true"`
	Static         map[string]*NetworkInstance_Protocol_Static    `path:"static-routes/static" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛStatic        []ygot.Annotation                              `path:"static-routes/@static" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// NetworkInstance_Protocol struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol) NewAggregate(Prefix string) (*NetworkInstance_Protocol_Aggregate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NetworkInstance_Protocol_Aggregate)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &NetworkInstance_Protocol_Aggregate{
		Prefix: &Prefix,
	}

	return t.Aggregate[key], nil
}

// RenameAggregate renames an entry in the list Aggregate within
// the NetworkInstance_Protocol struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol) RenameAggregate(oldK, newK string) error {
	if _, ok := t.Aggregate[newK]; ok {
		return fmt.Errorf("key %v already exists in Aggregate", newK)
	}

	e, ok := t.Aggregate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aggregate", oldK)
	}
	e.Prefix = &newK

	t.Aggregate[newK] = e
	delete(t.Aggregate, oldK)
	return nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol) GetOrCreateAggregate(Prefix string) *NetworkInstance_Protocol_Aggregate {

	key := Prefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of NetworkInstance_Protocol. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol) GetAggregate(Prefix string) *NetworkInstance_Protocol_Aggregate {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Aggregate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregate deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol) DeleteAggregate(Prefix string) {
	key := Prefix

	delete(t.Aggregate, key)
}

// AppendAggregate appends the supplied NetworkInstance_Protocol_Aggregate struct to the
// list Aggregate of NetworkInstance_Protocol. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Aggregate already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol) AppendAggregate(v *NetworkInstance_Protocol_Aggregate) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NetworkInstance_Protocol_Aggregate)
	}

	if _, ok := t.Aggregate[key]; ok {
		return fmt.Errorf("duplicate key for list Aggregate %v", key)
	}

	t.Aggregate[key] = v
	return nil
}

// NewStatic creates a new entry in the Static list of the
// NetworkInstance_Protocol struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol) NewStatic(Prefix string) (*NetworkInstance_Protocol_Static, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*NetworkInstance_Protocol_Static)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Static[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Static", key)
	}

	t.Static[key] = &NetworkInstance_Protocol_Static{
		Prefix: &Prefix,
	}

	return t.Static[key], nil
}

// RenameStatic renames an entry in the list Static within
// the NetworkInstance_Protocol struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol) RenameStatic(oldK, newK string) error {
	if _, ok := t.Static[newK]; ok {
		return fmt.Errorf("key %v already exists in Static", newK)
	}

	e, ok := t.Static[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Static", oldK)
	}
	e.Prefix = &newK

	t.Static[newK] = e
	delete(t.Static, oldK)
	return nil
}

// GetOrCreateStatic retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol) GetOrCreateStatic(Prefix string) *NetworkInstance_Protocol_Static {

	key := Prefix

	if v, ok := t.Static[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatic(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatic got unexpected error: %v", err))
	}
	return v
}

// GetStatic retrieves the value with the specified key from
// the Static map field of NetworkInstance_Protocol. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol) GetStatic(Prefix string) *NetworkInstance_Protocol_Static {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Static[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatic deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol) DeleteStatic(Prefix string) {
	key := Prefix

	delete(t.Static, key)
}

// AppendStatic appends the supplied NetworkInstance_Protocol_Static struct to the
// list Static of NetworkInstance_Protocol. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Static already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol) AppendStatic(v *NetworkInstance_Protocol_Static) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*NetworkInstance_Protocol_Static)
	}

	if _, ok := t.Static[key]; ok {
		return fmt.Errorf("duplicate key for list Static %v", key)
	}

	t.Static[key] = v
	return nil
}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreateBgp() *NetworkInstance_Protocol_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NetworkInstance_Protocol_Bgp{}
	return t.Bgp
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreateIgmp() *NetworkInstance_Protocol_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &NetworkInstance_Protocol_Igmp{}
	return t.Igmp
}

// GetOrCreateIsis retrieves the value of the Isis field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreateIsis() *NetworkInstance_Protocol_Isis {
	if t.Isis != nil {
		return t.Isis
	}
	t.Isis = &NetworkInstance_Protocol_Isis{}
	return t.Isis
}

// GetOrCreateOspfv2 retrieves the value of the Ospfv2 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreateOspfv2() *NetworkInstance_Protocol_Ospfv2 {
	if t.Ospfv2 != nil {
		return t.Ospfv2
	}
	t.Ospfv2 = &NetworkInstance_Protocol_Ospfv2{}
	return t.Ospfv2
}

// GetOrCreatePcep retrieves the value of the Pcep field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreatePcep() *NetworkInstance_Protocol_Pcep {
	if t.Pcep != nil {
		return t.Pcep
	}
	t.Pcep = &NetworkInstance_Protocol_Pcep{}
	return t.Pcep
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol) GetOrCreatePim() *NetworkInstance_Protocol_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NetworkInstance_Protocol_Pim{}
	return t.Pim
}

// GetBgp returns the value of the Bgp struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetBgp() *NetworkInstance_Protocol_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetIgmp() *NetworkInstance_Protocol_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIsis returns the value of the Isis struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Isis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetIsis() *NetworkInstance_Protocol_Isis {
	if t != nil && t.Isis != nil {
		return t.Isis
	}
	return nil
}

// GetOspfv2 returns the value of the Ospfv2 struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Ospfv2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetOspfv2() *NetworkInstance_Protocol_Ospfv2 {
	if t != nil && t.Ospfv2 != nil {
		return t.Ospfv2
	}
	return nil
}

// GetPcep returns the value of the Pcep struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Pcep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetPcep() *NetworkInstance_Protocol_Pcep {
	if t != nil && t.Pcep != nil {
		return t.Pcep
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NetworkInstance_Protocol. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol) GetPim() *NetworkInstance_Protocol_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NetworkInstance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 0
	}
	return *t.DefaultMetric
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIdentifier retrieves the value of the leaf Identifier from the NetworkInstance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Identifier is set, it can
// safely use t.GetIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Identifier == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol) GetIdentifier() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.Identifier == 0 {
		return 0
	}
	return t.Identifier
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol) GetName() string {
	if t == nil || t.Name == nil {
		return "DEFAULT"
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "DEFAULT"
		t.Name = &v
	}
	t.Bgp.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.Isis.PopulateDefaults()
	t.Ospfv2.PopulateDefaults()
	t.Pcep.PopulateDefaults()
	t.Pim.PopulateDefaults()
	for _, e := range t.Aggregate {
		e.PopulateDefaults()
	}
	for _, e := range t.Static {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol) ΛListKeyMap() (map[string]interface{}, error) {

	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"identifier": t.Identifier,
		"name":       *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol.
func (*NetworkInstance_Protocol) ΛBelongingModule() string {
	return "openconfig-network-instance"
}
