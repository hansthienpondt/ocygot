/*
Package ocygot is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"github.com/openconfig/ygot/ygot"
)

// RoutingPolicy_DefinedSets_TagSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePathAny struct {
	*ygot.NodePath
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSetPath) Name() *RoutingPolicy_DefinedSets_TagSet_NamePath {
	return &RoutingPolicy_DefinedSets_TagSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Name() *RoutingPolicy_DefinedSets_TagSet_NamePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf-list): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPath) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePath {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagValue (leaf-list): Value of the tag set member
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-value"
// Path from root: "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny {
	return &RoutingPolicy_DefinedSets_TagSet_TagValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinitionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinitionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinitionPath) Name() *RoutingPolicy_PolicyDefinition_NamePath {
	return &RoutingPolicy_PolicyDefinition_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinitionPathAny) Name() *RoutingPolicy_PolicyDefinition_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPath) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StatementAny (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name (wildcarded): string
func (n *RoutingPolicy_PolicyDefinitionPathAny) StatementAny() *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPath) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPath {
	return &RoutingPolicy_PolicyDefinition_StatementPath{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Statement (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "statements/statement"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement"
// Name: string
func (n *RoutingPolicy_PolicyDefinitionPathAny) Statement(Name string) *RoutingPolicy_PolicyDefinition_StatementPathAny {
	return &RoutingPolicy_PolicyDefinition_StatementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"statements", "statement"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_StatementPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/config/name YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_NamePathAny struct {
	*ygot.NodePath
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Top-level container for policy action statements
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Actions() *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Condition statements for the current policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Conditions() *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/config/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPath) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePath {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name of the policy statement
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/name"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/config/name"
func (n *RoutingPolicy_PolicyDefinition_StatementPathAny) Name() *RoutingPolicy_PolicyDefinition_Statement_NamePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny struct {
	*ygot.NodePath
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpActions (container): Top-level container for BGP-specific actions
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// OspfActions (container): Actions specific to OSPF
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ospf-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// OspfActions (container): Actions specific to OSPF
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ospf-actions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/policy-result"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "policy-result"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny struct {
	*ygot.NodePath
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-as-path-prepend"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-ext-community"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-local-pref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMed (leaf): set the med metric attribute in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-med"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-med"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetNextHop (leaf): set the next-hop attribute in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-next-hop"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-route-origin"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny struct {
	*ygot.NodePath
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/asn"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/repeat-n"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "repeat-n"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny struct {
	*ygot.NodePath
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRef (leaf): References a defined community set by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRefs (leaf-list): References a list of defined community sets by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-refs"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath) CommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-refs"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySetRefs (leaf-list): References a list of defined community sets by name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set-refs"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference/config/community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny) CommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference_CommunitySetRefsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set-refs"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny struct {
	*ygot.NodePath
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): Set the extended community values for the action inline with
// a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/method"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_MethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "method"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_OptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "options"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): Provide a reference to an extended community set for the
// set-ext-community action
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny struct {
	*ygot.NodePath
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// Communities (leaf-list): Set the extended community values for the update inline
// with a list.
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/communities"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_CommunitiesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "communities"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny struct {
	*ygot.NodePath
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRef (leaf): References a defined extended community set by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-ref"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-ref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRef() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRefs (leaf-list): References a list of defined extended community sets by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-refs"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePath) ExtCommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-refs"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySetRefs (leaf-list): References a list of defined extended community sets by
// name
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set-refs"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference/config/ext-community-set-refs"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_ReferencePathAny) ExtCommunitySetRefs() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference_ExtCommunitySetRefsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set-refs"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny struct {
	*ygot.NodePath
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-area"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-area"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/set-area"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-area"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-metric"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "set-metric"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny struct {
	*ygot.NodePath
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/metric"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/metric"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/metric-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/metric-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygot.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "inline"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/mode"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "reference"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygot.NodePath
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygot.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygot.NodePath
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// BgpConditions (container): Top-level container
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "bgp-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/call-policy"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "call-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/install-protocol-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchInterface (container): Top-level container for interface match conditions
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// OspfConditions (container): Match conditions specific to OSPF
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ospf-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// OspfConditions (container): Match conditions specific to OSPF
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "ospf-conditions"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny struct {
	*ygot.NodePath
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/afi-safi-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "as-path-length"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "community-count"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// CommunitySet (leaf): References a defined community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExtCommunitySet (leaf): References a defined extended community set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/ext-community-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/local-pref-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "match-as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/med-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "med-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/next-hop-in"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/origin-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "origin-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteType (leaf): Condition to check the route type in the route update
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/route-type"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/config/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygot.NodePath
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Operator (leaf): type of comparison to be performed
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/operator"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "operator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): value to compare with the community count
// ----------------------------------------
// Defining module: "openconfig-policy-types"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/value"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// AsPathSet (leaf): References a defined AS path set
// ----------------------------------------
// Defining module: "openconfig-bgp-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/as-path-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/interface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Interface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/subinterface"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny) Subinterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborSet (leaf): References a defined neighbor set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/neighbor-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixSet (leaf): References a defined prefix set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/prefix-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygot.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/match-set-options"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "match-set-options"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// TagSet (leaf): References a defined tag set
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/tag-set"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tag-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath struct {
	*ygot.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny struct {
	*ygot.NodePath
}

// AreaEq (leaf): Match prefixes which are within a particular OSPF area
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/area-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath) AreaEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "area-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// AreaEq (leaf): Match prefixes which are within a particular OSPF area
// ----------------------------------------
// Defining module: "openconfig-ospf-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "config/area-eq"
// Path from root: "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions/config/area-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny) AreaEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny {
	return &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEqPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "area-eq"},
			map[string]interface{}{},
			n,
		),
	}
}

// SamplingPath represents the /openconfig-sampling/sampling YANG schema element.
type SamplingPath struct {
	*ygot.NodePath
}

// SamplingPathAny represents the wildcard version of the /openconfig-sampling/sampling YANG schema element.
type SamplingPathAny struct {
	*ygot.NodePath
}

// StpPath represents the /openconfig-spanning-tree/stp YANG schema element.
type StpPath struct {
	*ygot.NodePath
}

// StpPathAny represents the wildcard version of the /openconfig-spanning-tree/stp YANG schema element.
type StpPathAny struct {
	*ygot.NodePath
}

// Global (container): Global configuration and state data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "global"
// Path from root: "/stp/global"
func (n *StpPath) Global() *Stp_GlobalPath {
	return &Stp_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): Global configuration and state data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "global"
// Path from root: "/stp/global"
func (n *StpPathAny) Global() *Stp_GlobalPathAny {
	return &Stp_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/interfaces/interface"
// Name (wildcarded): string
func (n *StpPath) InterfaceAny() *Stp_InterfacePathAny {
	return &Stp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/interfaces/interface"
// Name (wildcarded): string
func (n *StpPathAny) InterfaceAny() *Stp_InterfacePathAny {
	return &Stp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/interfaces/interface"
// Name: string
func (n *StpPath) Interface(Name string) *Stp_InterfacePath {
	return &Stp_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/interfaces/interface"
// Name: string
func (n *StpPathAny) Interface(Name string) *Stp_InterfacePathAny {
	return &Stp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Mstp (container): Multi Spanning-tree protocol configuration and operation
// data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mstp"
// Path from root: "/stp/mstp"
func (n *StpPath) Mstp() *Stp_MstpPath {
	return &Stp_MstpPath{
		NodePath: ygot.NewNodePath(
			[]string{"mstp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mstp (container): Multi Spanning-tree protocol configuration and operation
// data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mstp"
// Path from root: "/stp/mstp"
func (n *StpPathAny) Mstp() *Stp_MstpPathAny {
	return &Stp_MstpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mstp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rstp (container): Rapid Spanning-tree protocol configuration and operation
// data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rstp"
// Path from root: "/stp/rstp"
func (n *StpPath) Rstp() *Stp_RstpPath {
	return &Stp_RstpPath{
		NodePath: ygot.NewNodePath(
			[]string{"rstp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rstp (container): Rapid Spanning-tree protocol configuration and operation
// data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rstp"
// Path from root: "/stp/rstp"
func (n *StpPathAny) Rstp() *Stp_RstpPathAny {
	return &Stp_RstpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rstp"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanAny (list): List of the vlans
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rapid-pvst/vlan"
// Path from root: "/stp/rapid-pvst/vlan"
// VlanId (wildcarded): uint16
func (n *StpPath) VlanAny() *Stp_VlanPathAny {
	return &Stp_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rapid-pvst", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// VlanAny (list): List of the vlans
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rapid-pvst/vlan"
// Path from root: "/stp/rapid-pvst/vlan"
// VlanId (wildcarded): uint16
func (n *StpPathAny) VlanAny() *Stp_VlanPathAny {
	return &Stp_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rapid-pvst", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// Vlan (list): List of the vlans
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rapid-pvst/vlan"
// Path from root: "/stp/rapid-pvst/vlan"
// VlanId: uint16
func (n *StpPath) Vlan(VlanId uint16) *Stp_VlanPath {
	return &Stp_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"rapid-pvst", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// Vlan (list): List of the vlans
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "rapid-pvst/vlan"
// Path from root: "/stp/rapid-pvst/vlan"
// VlanId: uint16
func (n *StpPathAny) Vlan(VlanId uint16) *Stp_VlanPathAny {
	return &Stp_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rapid-pvst", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// Stp_GlobalPath represents the /openconfig-spanning-tree/stp/global YANG schema element.
type Stp_GlobalPath struct {
	*ygot.NodePath
}

// Stp_GlobalPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global YANG schema element.
type Stp_GlobalPathAny struct {
	*ygot.NodePath
}

// Stp_Global_BpduFilterPath represents the /openconfig-spanning-tree/stp/global/config/bpdu-filter YANG schema element.
type Stp_Global_BpduFilterPath struct {
	*ygot.NodePath
}

// Stp_Global_BpduFilterPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/bpdu-filter YANG schema element.
type Stp_Global_BpduFilterPathAny struct {
	*ygot.NodePath
}

// Stp_Global_BpduGuardPath represents the /openconfig-spanning-tree/stp/global/config/bpdu-guard YANG schema element.
type Stp_Global_BpduGuardPath struct {
	*ygot.NodePath
}

// Stp_Global_BpduGuardPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/bpdu-guard YANG schema element.
type Stp_Global_BpduGuardPathAny struct {
	*ygot.NodePath
}

// Stp_Global_BpduguardTimeoutRecoveryPath represents the /openconfig-spanning-tree/stp/global/config/bpduguard-timeout-recovery YANG schema element.
type Stp_Global_BpduguardTimeoutRecoveryPath struct {
	*ygot.NodePath
}

// Stp_Global_BpduguardTimeoutRecoveryPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/bpduguard-timeout-recovery YANG schema element.
type Stp_Global_BpduguardTimeoutRecoveryPathAny struct {
	*ygot.NodePath
}

// Stp_Global_BridgeAssurancePath represents the /openconfig-spanning-tree/stp/global/config/bridge-assurance YANG schema element.
type Stp_Global_BridgeAssurancePath struct {
	*ygot.NodePath
}

// Stp_Global_BridgeAssurancePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/bridge-assurance YANG schema element.
type Stp_Global_BridgeAssurancePathAny struct {
	*ygot.NodePath
}

// Stp_Global_EnabledProtocolPath represents the /openconfig-spanning-tree/stp/global/config/enabled-protocol YANG schema element.
type Stp_Global_EnabledProtocolPath struct {
	*ygot.NodePath
}

// Stp_Global_EnabledProtocolPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/enabled-protocol YANG schema element.
type Stp_Global_EnabledProtocolPathAny struct {
	*ygot.NodePath
}

// Stp_Global_EtherchannelMisconfigGuardPath represents the /openconfig-spanning-tree/stp/global/config/etherchannel-misconfig-guard YANG schema element.
type Stp_Global_EtherchannelMisconfigGuardPath struct {
	*ygot.NodePath
}

// Stp_Global_EtherchannelMisconfigGuardPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/etherchannel-misconfig-guard YANG schema element.
type Stp_Global_EtherchannelMisconfigGuardPathAny struct {
	*ygot.NodePath
}

// Stp_Global_LoopGuardPath represents the /openconfig-spanning-tree/stp/global/config/loop-guard YANG schema element.
type Stp_Global_LoopGuardPath struct {
	*ygot.NodePath
}

// Stp_Global_LoopGuardPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/global/config/loop-guard YANG schema element.
type Stp_Global_LoopGuardPathAny struct {
	*ygot.NodePath
}

// BpduFilter (leaf): Enable edge port BPDU filter
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-filter"
// Path from root: "/stp/global/config/bpdu-filter"
func (n *Stp_GlobalPath) BpduFilter() *Stp_Global_BpduFilterPath {
	return &Stp_Global_BpduFilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduFilter (leaf): Enable edge port BPDU filter
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-filter"
// Path from root: "/stp/global/config/bpdu-filter"
func (n *Stp_GlobalPathAny) BpduFilter() *Stp_Global_BpduFilterPathAny {
	return &Stp_Global_BpduFilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduGuard (leaf): Enable edge port BPDU guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-guard"
// Path from root: "/stp/global/config/bpdu-guard"
func (n *Stp_GlobalPath) BpduGuard() *Stp_Global_BpduGuardPath {
	return &Stp_Global_BpduGuardPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduGuard (leaf): Enable edge port BPDU guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-guard"
// Path from root: "/stp/global/config/bpdu-guard"
func (n *Stp_GlobalPathAny) BpduGuard() *Stp_Global_BpduGuardPathAny {
	return &Stp_Global_BpduGuardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduguardTimeoutRecovery (leaf): Amount of time, in seconds, the interface receiving BPDUs
// is disabled. Once the timeout expires, the interface is
// brought back into service.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpduguard-timeout-recovery"
// Path from root: "/stp/global/config/bpduguard-timeout-recovery"
func (n *Stp_GlobalPath) BpduguardTimeoutRecovery() *Stp_Global_BpduguardTimeoutRecoveryPath {
	return &Stp_Global_BpduguardTimeoutRecoveryPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpduguard-timeout-recovery"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduguardTimeoutRecovery (leaf): Amount of time, in seconds, the interface receiving BPDUs
// is disabled. Once the timeout expires, the interface is
// brought back into service.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpduguard-timeout-recovery"
// Path from root: "/stp/global/config/bpduguard-timeout-recovery"
func (n *Stp_GlobalPathAny) BpduguardTimeoutRecovery() *Stp_Global_BpduguardTimeoutRecoveryPathAny {
	return &Stp_Global_BpduguardTimeoutRecoveryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpduguard-timeout-recovery"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeAssurance (leaf): Enable bridge assurance to protect against unidirectional
// link failure
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-assurance"
// Path from root: "/stp/global/config/bridge-assurance"
func (n *Stp_GlobalPath) BridgeAssurance() *Stp_Global_BridgeAssurancePath {
	return &Stp_Global_BridgeAssurancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-assurance"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeAssurance (leaf): Enable bridge assurance to protect against unidirectional
// link failure
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-assurance"
// Path from root: "/stp/global/config/bridge-assurance"
func (n *Stp_GlobalPathAny) BridgeAssurance() *Stp_Global_BridgeAssurancePathAny {
	return &Stp_Global_BridgeAssurancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-assurance"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledProtocol (leaf-list): List of the spanning tree protocols enabled on the
// device
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/enabled-protocol"
// Path from root: "/stp/global/config/enabled-protocol"
func (n *Stp_GlobalPath) EnabledProtocol() *Stp_Global_EnabledProtocolPath {
	return &Stp_Global_EnabledProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledProtocol (leaf-list): List of the spanning tree protocols enabled on the
// device
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/enabled-protocol"
// Path from root: "/stp/global/config/enabled-protocol"
func (n *Stp_GlobalPathAny) EnabledProtocol() *Stp_Global_EnabledProtocolPathAny {
	return &Stp_Global_EnabledProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// EtherchannelMisconfigGuard (leaf): EtherChannel guard detects a misconfigured EtherChannel
// when interfaces on the switch are configured as an
// EtherChannel while interfaces on the other device are not
// or when not all the interfaces on the other device are in
// the same EtherChannel.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/etherchannel-misconfig-guard"
// Path from root: "/stp/global/config/etherchannel-misconfig-guard"
func (n *Stp_GlobalPath) EtherchannelMisconfigGuard() *Stp_Global_EtherchannelMisconfigGuardPath {
	return &Stp_Global_EtherchannelMisconfigGuardPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "etherchannel-misconfig-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// EtherchannelMisconfigGuard (leaf): EtherChannel guard detects a misconfigured EtherChannel
// when interfaces on the switch are configured as an
// EtherChannel while interfaces on the other device are not
// or when not all the interfaces on the other device are in
// the same EtherChannel.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/etherchannel-misconfig-guard"
// Path from root: "/stp/global/config/etherchannel-misconfig-guard"
func (n *Stp_GlobalPathAny) EtherchannelMisconfigGuard() *Stp_Global_EtherchannelMisconfigGuardPathAny {
	return &Stp_Global_EtherchannelMisconfigGuardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "etherchannel-misconfig-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopGuard (leaf): The loop guard default setting for the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/loop-guard"
// Path from root: "/stp/global/config/loop-guard"
func (n *Stp_GlobalPath) LoopGuard() *Stp_Global_LoopGuardPath {
	return &Stp_Global_LoopGuardPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loop-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopGuard (leaf): The loop guard default setting for the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/loop-guard"
// Path from root: "/stp/global/config/loop-guard"
func (n *Stp_GlobalPathAny) LoopGuard() *Stp_Global_LoopGuardPathAny {
	return &Stp_Global_LoopGuardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loop-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_InterfacePath represents the /openconfig-spanning-tree/stp/interfaces/interface YANG schema element.
type Stp_InterfacePath struct {
	*ygot.NodePath
}

// Stp_InterfacePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface YANG schema element.
type Stp_InterfacePathAny struct {
	*ygot.NodePath
}

// Stp_Interface_BpduFilterPath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/bpdu-filter YANG schema element.
type Stp_Interface_BpduFilterPath struct {
	*ygot.NodePath
}

// Stp_Interface_BpduFilterPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/bpdu-filter YANG schema element.
type Stp_Interface_BpduFilterPathAny struct {
	*ygot.NodePath
}

// Stp_Interface_BpduGuardPath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/bpdu-guard YANG schema element.
type Stp_Interface_BpduGuardPath struct {
	*ygot.NodePath
}

// Stp_Interface_BpduGuardPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/bpdu-guard YANG schema element.
type Stp_Interface_BpduGuardPathAny struct {
	*ygot.NodePath
}

// Stp_Interface_EdgePortPath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/edge-port YANG schema element.
type Stp_Interface_EdgePortPath struct {
	*ygot.NodePath
}

// Stp_Interface_EdgePortPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/edge-port YANG schema element.
type Stp_Interface_EdgePortPathAny struct {
	*ygot.NodePath
}

// Stp_Interface_GuardPath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/guard YANG schema element.
type Stp_Interface_GuardPath struct {
	*ygot.NodePath
}

// Stp_Interface_GuardPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/guard YANG schema element.
type Stp_Interface_GuardPathAny struct {
	*ygot.NodePath
}

// Stp_Interface_LinkTypePath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/link-type YANG schema element.
type Stp_Interface_LinkTypePath struct {
	*ygot.NodePath
}

// Stp_Interface_LinkTypePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/link-type YANG schema element.
type Stp_Interface_LinkTypePathAny struct {
	*ygot.NodePath
}

// Stp_Interface_NamePath represents the /openconfig-spanning-tree/stp/interfaces/interface/config/name YANG schema element.
type Stp_Interface_NamePath struct {
	*ygot.NodePath
}

// Stp_Interface_NamePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/interfaces/interface/config/name YANG schema element.
type Stp_Interface_NamePathAny struct {
	*ygot.NodePath
}

// BpduFilter (leaf): Enable edge port BPDU filter
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-filter"
// Path from root: "/stp/interfaces/interface/config/bpdu-filter"
func (n *Stp_InterfacePath) BpduFilter() *Stp_Interface_BpduFilterPath {
	return &Stp_Interface_BpduFilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduFilter (leaf): Enable edge port BPDU filter
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-filter"
// Path from root: "/stp/interfaces/interface/config/bpdu-filter"
func (n *Stp_InterfacePathAny) BpduFilter() *Stp_Interface_BpduFilterPathAny {
	return &Stp_Interface_BpduFilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduGuard (leaf): Enable edge port BPDU guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-guard"
// Path from root: "/stp/interfaces/interface/config/bpdu-guard"
func (n *Stp_InterfacePath) BpduGuard() *Stp_Interface_BpduGuardPath {
	return &Stp_Interface_BpduGuardPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduGuard (leaf): Enable edge port BPDU guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bpdu-guard"
// Path from root: "/stp/interfaces/interface/config/bpdu-guard"
func (n *Stp_InterfacePathAny) BpduGuard() *Stp_Interface_BpduGuardPathAny {
	return &Stp_Interface_BpduGuardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bpdu-guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// EdgePort (leaf): Configure the edge port state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/edge-port"
// Path from root: "/stp/interfaces/interface/config/edge-port"
func (n *Stp_InterfacePath) EdgePort() *Stp_Interface_EdgePortPath {
	return &Stp_Interface_EdgePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "edge-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// EdgePort (leaf): Configure the edge port state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/edge-port"
// Path from root: "/stp/interfaces/interface/config/edge-port"
func (n *Stp_InterfacePathAny) EdgePort() *Stp_Interface_EdgePortPathAny {
	return &Stp_Interface_EdgePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "edge-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Guard (leaf): Enable root guard or loop guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/guard"
// Path from root: "/stp/interfaces/interface/config/guard"
func (n *Stp_InterfacePath) Guard() *Stp_Interface_GuardPath {
	return &Stp_Interface_GuardPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// Guard (leaf): Enable root guard or loop guard
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/guard"
// Path from root: "/stp/interfaces/interface/config/guard"
func (n *Stp_InterfacePathAny) Guard() *Stp_Interface_GuardPathAny {
	return &Stp_Interface_GuardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "guard"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkType (leaf): specifies the interface's link type
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/link-type"
// Path from root: "/stp/interfaces/interface/config/link-type"
func (n *Stp_InterfacePath) LinkType() *Stp_Interface_LinkTypePath {
	return &Stp_Interface_LinkTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkType (leaf): specifies the interface's link type
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/link-type"
// Path from root: "/stp/interfaces/interface/config/link-type"
func (n *Stp_InterfacePathAny) LinkType() *Stp_Interface_LinkTypePathAny {
	return &Stp_Interface_LinkTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/interfaces/interface/config/name"
func (n *Stp_InterfacePath) Name() *Stp_Interface_NamePath {
	return &Stp_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/interfaces/interface/config/name"
func (n *Stp_InterfacePathAny) Name() *Stp_Interface_NamePathAny {
	return &Stp_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_MstpPath represents the /openconfig-spanning-tree/stp/mstp YANG schema element.
type Stp_MstpPath struct {
	*ygot.NodePath
}

// Stp_MstpPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp YANG schema element.
type Stp_MstpPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_ForwardingDelayPath represents the /openconfig-spanning-tree/stp/mstp/config/forwarding-delay YANG schema element.
type Stp_Mstp_ForwardingDelayPath struct {
	*ygot.NodePath
}

// Stp_Mstp_ForwardingDelayPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/forwarding-delay YANG schema element.
type Stp_Mstp_ForwardingDelayPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_HelloTimePath represents the /openconfig-spanning-tree/stp/mstp/config/hello-time YANG schema element.
type Stp_Mstp_HelloTimePath struct {
	*ygot.NodePath
}

// Stp_Mstp_HelloTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/hello-time YANG schema element.
type Stp_Mstp_HelloTimePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_HoldCountPath represents the /openconfig-spanning-tree/stp/mstp/config/hold-count YANG schema element.
type Stp_Mstp_HoldCountPath struct {
	*ygot.NodePath
}

// Stp_Mstp_HoldCountPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/hold-count YANG schema element.
type Stp_Mstp_HoldCountPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MaxAgePath represents the /openconfig-spanning-tree/stp/mstp/config/max-age YANG schema element.
type Stp_Mstp_MaxAgePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MaxAgePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/max-age YANG schema element.
type Stp_Mstp_MaxAgePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MaxHopPath represents the /openconfig-spanning-tree/stp/mstp/config/max-hop YANG schema element.
type Stp_Mstp_MaxHopPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MaxHopPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/max-hop YANG schema element.
type Stp_Mstp_MaxHopPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_NamePath represents the /openconfig-spanning-tree/stp/mstp/config/name YANG schema element.
type Stp_Mstp_NamePath struct {
	*ygot.NodePath
}

// Stp_Mstp_NamePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/name YANG schema element.
type Stp_Mstp_NamePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_RevisionPath represents the /openconfig-spanning-tree/stp/mstp/config/revision YANG schema element.
type Stp_Mstp_RevisionPath struct {
	*ygot.NodePath
}

// Stp_Mstp_RevisionPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/config/revision YANG schema element.
type Stp_Mstp_RevisionPathAny struct {
	*ygot.NodePath
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/mstp/config/forwarding-delay"
func (n *Stp_MstpPath) ForwardingDelay() *Stp_Mstp_ForwardingDelayPath {
	return &Stp_Mstp_ForwardingDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/mstp/config/forwarding-delay"
func (n *Stp_MstpPathAny) ForwardingDelay() *Stp_Mstp_ForwardingDelayPathAny {
	return &Stp_Mstp_ForwardingDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/mstp/config/hello-time"
func (n *Stp_MstpPath) HelloTime() *Stp_Mstp_HelloTimePath {
	return &Stp_Mstp_HelloTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/mstp/config/hello-time"
func (n *Stp_MstpPathAny) HelloTime() *Stp_Mstp_HelloTimePathAny {
	return &Stp_Mstp_HelloTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/mstp/config/hold-count"
func (n *Stp_MstpPath) HoldCount() *Stp_Mstp_HoldCountPath {
	return &Stp_Mstp_HoldCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/mstp/config/hold-count"
func (n *Stp_MstpPathAny) HoldCount() *Stp_Mstp_HoldCountPathAny {
	return &Stp_Mstp_HoldCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/mstp/config/max-age"
func (n *Stp_MstpPath) MaxAge() *Stp_Mstp_MaxAgePath {
	return &Stp_Mstp_MaxAgePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/mstp/config/max-age"
func (n *Stp_MstpPathAny) MaxAge() *Stp_Mstp_MaxAgePathAny {
	return &Stp_Mstp_MaxAgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxHop (leaf): The max hop determines the number of bridges in an MST
// region that a BPDU can traverse before it is discarded
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-hop"
// Path from root: "/stp/mstp/config/max-hop"
func (n *Stp_MstpPath) MaxHop() *Stp_Mstp_MaxHopPath {
	return &Stp_Mstp_MaxHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxHop (leaf): The max hop determines the number of bridges in an MST
// region that a BPDU can traverse before it is discarded
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-hop"
// Path from root: "/stp/mstp/config/max-hop"
func (n *Stp_MstpPathAny) MaxHop() *Stp_Mstp_MaxHopPathAny {
	return &Stp_Mstp_MaxHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// MstInstanceAny (list): List of the mstp instances
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mst-instances/mst-instance"
// Path from root: "/stp/mstp/mst-instances/mst-instance"
// MstId (wildcarded): uint16
func (n *Stp_MstpPath) MstInstanceAny() *Stp_Mstp_MstInstancePathAny {
	return &Stp_Mstp_MstInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mst-instances", "mst-instance"},
			map[string]interface{}{"mst-id": "*"},
			n,
		),
	}
}

// MstInstanceAny (list): List of the mstp instances
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mst-instances/mst-instance"
// Path from root: "/stp/mstp/mst-instances/mst-instance"
// MstId (wildcarded): uint16
func (n *Stp_MstpPathAny) MstInstanceAny() *Stp_Mstp_MstInstancePathAny {
	return &Stp_Mstp_MstInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mst-instances", "mst-instance"},
			map[string]interface{}{"mst-id": "*"},
			n,
		),
	}
}

// MstInstance (list): List of the mstp instances
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mst-instances/mst-instance"
// Path from root: "/stp/mstp/mst-instances/mst-instance"
// MstId: uint16
func (n *Stp_MstpPath) MstInstance(MstId uint16) *Stp_Mstp_MstInstancePath {
	return &Stp_Mstp_MstInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"mst-instances", "mst-instance"},
			map[string]interface{}{"mst-id": MstId},
			n,
		),
	}
}

// MstInstance (list): List of the mstp instances
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "mst-instances/mst-instance"
// Path from root: "/stp/mstp/mst-instances/mst-instance"
// MstId: uint16
func (n *Stp_MstpPathAny) MstInstance(MstId uint16) *Stp_Mstp_MstInstancePathAny {
	return &Stp_Mstp_MstInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mst-instances", "mst-instance"},
			map[string]interface{}{"mst-id": MstId},
			n,
		),
	}
}

// Name (leaf): The Configuration Name in the MST Configuration Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/mstp/config/name"
func (n *Stp_MstpPath) Name() *Stp_Mstp_NamePath {
	return &Stp_Mstp_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The Configuration Name in the MST Configuration Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/mstp/config/name"
func (n *Stp_MstpPathAny) Name() *Stp_Mstp_NamePathAny {
	return &Stp_Mstp_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revision (leaf): The Revision Level in the MST Configuration Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/revision"
// Path from root: "/stp/mstp/config/revision"
func (n *Stp_MstpPath) Revision() *Stp_Mstp_RevisionPath {
	return &Stp_Mstp_RevisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "revision"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revision (leaf): The Revision Level in the MST Configuration Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/revision"
// Path from root: "/stp/mstp/config/revision"
func (n *Stp_MstpPathAny) Revision() *Stp_Mstp_RevisionPathAny {
	return &Stp_Mstp_RevisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "revision"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Mstp_MstInstancePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance YANG schema element.
type Stp_Mstp_MstInstancePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstancePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance YANG schema element.
type Stp_Mstp_MstInstancePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_BridgeAddressPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/bridge-address YANG schema element.
type Stp_Mstp_MstInstance_BridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_BridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/bridge-address YANG schema element.
type Stp_Mstp_MstInstance_BridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_BridgePriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/bridge-priority YANG schema element.
type Stp_Mstp_MstInstance_BridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_BridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/bridge-priority YANG schema element.
type Stp_Mstp_MstInstance_BridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/designated-root-address YANG schema element.
type Stp_Mstp_MstInstance_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/designated-root-address YANG schema element.
type Stp_Mstp_MstInstance_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/designated-root-priority YANG schema element.
type Stp_Mstp_MstInstance_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/designated-root-priority YANG schema element.
type Stp_Mstp_MstInstance_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_HoldTimePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/hold-time YANG schema element.
type Stp_Mstp_MstInstance_HoldTimePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_HoldTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/hold-time YANG schema element.
type Stp_Mstp_MstInstance_HoldTimePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_LastTopologyChangePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/last-topology-change YANG schema element.
type Stp_Mstp_MstInstance_LastTopologyChangePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_LastTopologyChangePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/last-topology-change YANG schema element.
type Stp_Mstp_MstInstance_LastTopologyChangePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_MstIdPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/mst-id YANG schema element.
type Stp_Mstp_MstInstance_MstIdPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_MstIdPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/mst-id YANG schema element.
type Stp_Mstp_MstInstance_MstIdPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_RootCostPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/root-cost YANG schema element.
type Stp_Mstp_MstInstance_RootCostPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_RootCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/root-cost YANG schema element.
type Stp_Mstp_MstInstance_RootCostPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_RootPortPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/root-port YANG schema element.
type Stp_Mstp_MstInstance_RootPortPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_RootPortPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/root-port YANG schema element.
type Stp_Mstp_MstInstance_RootPortPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_TopologyChangesPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/topology-changes YANG schema element.
type Stp_Mstp_MstInstance_TopologyChangesPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_TopologyChangesPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/state/topology-changes YANG schema element.
type Stp_Mstp_MstInstance_TopologyChangesPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_VlanPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan YANG schema element.
type Stp_Mstp_MstInstance_VlanPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_VlanPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan YANG schema element.
type Stp_Mstp_MstInstance_VlanPathAny struct {
	*ygot.NodePath
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/bridge-address"
func (n *Stp_Mstp_MstInstancePath) BridgeAddress() *Stp_Mstp_MstInstance_BridgeAddressPath {
	return &Stp_Mstp_MstInstance_BridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/bridge-address"
func (n *Stp_Mstp_MstInstancePathAny) BridgeAddress() *Stp_Mstp_MstInstance_BridgeAddressPathAny {
	return &Stp_Mstp_MstInstance_BridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/bridge-priority"
func (n *Stp_Mstp_MstInstancePath) BridgePriority() *Stp_Mstp_MstInstance_BridgePriorityPath {
	return &Stp_Mstp_MstInstance_BridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/bridge-priority"
func (n *Stp_Mstp_MstInstancePathAny) BridgePriority() *Stp_Mstp_MstInstance_BridgePriorityPathAny {
	return &Stp_Mstp_MstInstance_BridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/designated-root-address"
func (n *Stp_Mstp_MstInstancePath) DesignatedRootAddress() *Stp_Mstp_MstInstance_DesignatedRootAddressPath {
	return &Stp_Mstp_MstInstance_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/designated-root-address"
func (n *Stp_Mstp_MstInstancePathAny) DesignatedRootAddress() *Stp_Mstp_MstInstance_DesignatedRootAddressPathAny {
	return &Stp_Mstp_MstInstance_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/designated-root-priority"
func (n *Stp_Mstp_MstInstancePath) DesignatedRootPriority() *Stp_Mstp_MstInstance_DesignatedRootPriorityPath {
	return &Stp_Mstp_MstInstance_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/designated-root-priority"
func (n *Stp_Mstp_MstInstancePathAny) DesignatedRootPriority() *Stp_Mstp_MstInstance_DesignatedRootPriorityPathAny {
	return &Stp_Mstp_MstInstance_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/hold-time"
func (n *Stp_Mstp_MstInstancePath) HoldTime() *Stp_Mstp_MstInstance_HoldTimePath {
	return &Stp_Mstp_MstInstance_HoldTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/hold-time"
func (n *Stp_Mstp_MstInstancePathAny) HoldTime() *Stp_Mstp_MstInstance_HoldTimePathAny {
	return &Stp_Mstp_MstInstance_HoldTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_Mstp_MstInstancePath) InterfaceAny() *Stp_Mstp_MstInstance_InterfacePathAny {
	return &Stp_Mstp_MstInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_Mstp_MstInstancePathAny) InterfaceAny() *Stp_Mstp_MstInstance_InterfacePathAny {
	return &Stp_Mstp_MstInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface"
// Name: string
func (n *Stp_Mstp_MstInstancePath) Interface(Name string) *Stp_Mstp_MstInstance_InterfacePath {
	return &Stp_Mstp_MstInstance_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface"
// Name: string
func (n *Stp_Mstp_MstInstancePathAny) Interface(Name string) *Stp_Mstp_MstInstance_InterfacePathAny {
	return &Stp_Mstp_MstInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/last-topology-change"
func (n *Stp_Mstp_MstInstancePath) LastTopologyChange() *Stp_Mstp_MstInstance_LastTopologyChangePath {
	return &Stp_Mstp_MstInstance_LastTopologyChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/last-topology-change"
func (n *Stp_Mstp_MstInstancePathAny) LastTopologyChange() *Stp_Mstp_MstInstance_LastTopologyChangePathAny {
	return &Stp_Mstp_MstInstance_LastTopologyChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// MstId (leaf): In an MSTP Bridge, an MSTID, i.e., a value used to identify
// a spanning tree (or MST) instance.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/mst-id"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/mst-id"
func (n *Stp_Mstp_MstInstancePath) MstId() *Stp_Mstp_MstInstance_MstIdPath {
	return &Stp_Mstp_MstInstance_MstIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mst-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// MstId (leaf): In an MSTP Bridge, an MSTID, i.e., a value used to identify
// a spanning tree (or MST) instance.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/mst-id"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/mst-id"
func (n *Stp_Mstp_MstInstancePathAny) MstId() *Stp_Mstp_MstInstance_MstIdPathAny {
	return &Stp_Mstp_MstInstance_MstIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mst-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/root-cost"
func (n *Stp_Mstp_MstInstancePath) RootCost() *Stp_Mstp_MstInstance_RootCostPath {
	return &Stp_Mstp_MstInstance_RootCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/root-cost"
func (n *Stp_Mstp_MstInstancePathAny) RootCost() *Stp_Mstp_MstInstance_RootCostPathAny {
	return &Stp_Mstp_MstInstance_RootCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/root-port"
func (n *Stp_Mstp_MstInstancePath) RootPort() *Stp_Mstp_MstInstance_RootPortPath {
	return &Stp_Mstp_MstInstance_RootPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/root-port"
func (n *Stp_Mstp_MstInstancePathAny) RootPort() *Stp_Mstp_MstInstance_RootPortPathAny {
	return &Stp_Mstp_MstInstance_RootPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/topology-changes"
func (n *Stp_Mstp_MstInstancePath) TopologyChanges() *Stp_Mstp_MstInstance_TopologyChangesPath {
	return &Stp_Mstp_MstInstance_TopologyChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/mstp/mst-instances/mst-instance/state/topology-changes"
func (n *Stp_Mstp_MstInstancePathAny) TopologyChanges() *Stp_Mstp_MstInstance_TopologyChangesPathAny {
	return &Stp_Mstp_MstInstance_TopologyChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf-list): list of vlans mapped to the MST instance
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/vlan"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/vlan"
func (n *Stp_Mstp_MstInstancePath) Vlan() *Stp_Mstp_MstInstance_VlanPath {
	return &Stp_Mstp_MstInstance_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf-list): list of vlans mapped to the MST instance
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/vlan"
// Path from root: "/stp/mstp/mst-instances/mst-instance/config/vlan"
func (n *Stp_Mstp_MstInstancePathAny) Vlan() *Stp_Mstp_MstInstance_VlanPathAny {
	return &Stp_Mstp_MstInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Mstp_MstInstance_InterfacePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface YANG schema element.
type Stp_Mstp_MstInstance_InterfacePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_InterfacePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface YANG schema element.
type Stp_Mstp_MstInstance_InterfacePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_CostPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/cost YANG schema element.
type Stp_Mstp_MstInstance_Interface_CostPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_CostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/cost YANG schema element.
type Stp_Mstp_MstInstance_Interface_CostPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedCostPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedCostPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedCostPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedPortNumPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedPortNumPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedPortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedPortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_NamePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/name YANG schema element.
type Stp_Mstp_MstInstance_Interface_NamePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_NamePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/name YANG schema element.
type Stp_Mstp_MstInstance_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortNumPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-num YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortNumPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-num YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortPriorityPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/port-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/port-priority YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortStatePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-state YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortStatePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_PortStatePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-state YANG schema element.
type Stp_Mstp_MstInstance_Interface_PortStatePathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_RolePath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/role YANG schema element.
type Stp_Mstp_MstInstance_Interface_RolePath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_RolePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/role YANG schema element.
type Stp_Mstp_MstInstance_Interface_RolePathAny struct {
	*ygot.NodePath
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/cost"
func (n *Stp_Mstp_MstInstance_InterfacePath) Cost() *Stp_Mstp_MstInstance_Interface_CostPath {
	return &Stp_Mstp_MstInstance_Interface_CostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/cost"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) Cost() *Stp_Mstp_MstInstance_Interface_CostPathAny {
	return &Stp_Mstp_MstInstance_Interface_CostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters"
func (n *Stp_Mstp_MstInstance_InterfacePath) Counters() *Stp_Mstp_MstInstance_Interface_CountersPath {
	return &Stp_Mstp_MstInstance_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) Counters() *Stp_Mstp_MstInstance_Interface_CountersPathAny {
	return &Stp_Mstp_MstInstance_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedBridgeAddress() *Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedBridgeAddress() *Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedBridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedBridgePriority() *Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedBridgePriority() *Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedBridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-cost"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedCost() *Stp_Mstp_MstInstance_Interface_DesignatedCostPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-cost"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedCost() *Stp_Mstp_MstInstance_Interface_DesignatedCostPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-num"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedPortNum() *Stp_Mstp_MstInstance_Interface_DesignatedPortNumPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedPortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-num"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedPortNum() *Stp_Mstp_MstInstance_Interface_DesignatedPortNumPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedPortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-priority"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedPortPriority() *Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-port-priority"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedPortPriority() *Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedPortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-address"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedRootAddress() *Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-address"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedRootAddress() *Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-priority"
func (n *Stp_Mstp_MstInstance_InterfacePath) DesignatedRootPriority() *Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPath {
	return &Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/designated-root-priority"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) DesignatedRootPriority() *Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPathAny {
	return &Stp_Mstp_MstInstance_Interface_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/forward-transisitions"
func (n *Stp_Mstp_MstInstance_InterfacePath) ForwardTransisitions() *Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPath {
	return &Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/forward-transisitions"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) ForwardTransisitions() *Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPathAny {
	return &Stp_Mstp_MstInstance_Interface_ForwardTransisitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/name"
func (n *Stp_Mstp_MstInstance_InterfacePath) Name() *Stp_Mstp_MstInstance_Interface_NamePath {
	return &Stp_Mstp_MstInstance_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/name"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) Name() *Stp_Mstp_MstInstance_Interface_NamePathAny {
	return &Stp_Mstp_MstInstance_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-num"
func (n *Stp_Mstp_MstInstance_InterfacePath) PortNum() *Stp_Mstp_MstInstance_Interface_PortNumPath {
	return &Stp_Mstp_MstInstance_Interface_PortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-num"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) PortNum() *Stp_Mstp_MstInstance_Interface_PortNumPathAny {
	return &Stp_Mstp_MstInstance_Interface_PortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/port-priority"
func (n *Stp_Mstp_MstInstance_InterfacePath) PortPriority() *Stp_Mstp_MstInstance_Interface_PortPriorityPath {
	return &Stp_Mstp_MstInstance_Interface_PortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/config/port-priority"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) PortPriority() *Stp_Mstp_MstInstance_Interface_PortPriorityPathAny {
	return &Stp_Mstp_MstInstance_Interface_PortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-state"
func (n *Stp_Mstp_MstInstance_InterfacePath) PortState() *Stp_Mstp_MstInstance_Interface_PortStatePath {
	return &Stp_Mstp_MstInstance_Interface_PortStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/port-state"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) PortState() *Stp_Mstp_MstInstance_Interface_PortStatePathAny {
	return &Stp_Mstp_MstInstance_Interface_PortStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/role"
func (n *Stp_Mstp_MstInstance_InterfacePath) Role() *Stp_Mstp_MstInstance_Interface_RolePath {
	return &Stp_Mstp_MstInstance_Interface_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/role"
func (n *Stp_Mstp_MstInstance_InterfacePathAny) Role() *Stp_Mstp_MstInstance_Interface_RolePathAny {
	return &Stp_Mstp_MstInstance_Interface_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Mstp_MstInstance_Interface_CountersPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters YANG schema element.
type Stp_Mstp_MstInstance_Interface_CountersPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_CountersPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters YANG schema element.
type Stp_Mstp_MstInstance_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPathAny struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_Counters_BpduSentPath represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters_BpduSentPath struct {
	*ygot.NodePath
}

// Stp_Mstp_MstInstance_Interface_Counters_BpduSentPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters_BpduSentPathAny struct {
	*ygot.NodePath
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Mstp_MstInstance_Interface_CountersPath) BpduReceived() *Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPath {
	return &Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Mstp_MstInstance_Interface_CountersPathAny) BpduReceived() *Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPathAny {
	return &Stp_Mstp_MstInstance_Interface_Counters_BpduReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Mstp_MstInstance_Interface_CountersPath) BpduSent() *Stp_Mstp_MstInstance_Interface_Counters_BpduSentPath {
	return &Stp_Mstp_MstInstance_Interface_Counters_BpduSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Mstp_MstInstance_Interface_CountersPathAny) BpduSent() *Stp_Mstp_MstInstance_Interface_Counters_BpduSentPathAny {
	return &Stp_Mstp_MstInstance_Interface_Counters_BpduSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_RstpPath represents the /openconfig-spanning-tree/stp/rstp YANG schema element.
type Stp_RstpPath struct {
	*ygot.NodePath
}

// Stp_RstpPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp YANG schema element.
type Stp_RstpPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_BridgeAddressPath represents the /openconfig-spanning-tree/stp/rstp/state/bridge-address YANG schema element.
type Stp_Rstp_BridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Rstp_BridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/bridge-address YANG schema element.
type Stp_Rstp_BridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_BridgePriorityPath represents the /openconfig-spanning-tree/stp/rstp/config/bridge-priority YANG schema element.
type Stp_Rstp_BridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_BridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/config/bridge-priority YANG schema element.
type Stp_Rstp_BridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/rstp/state/designated-root-address YANG schema element.
type Stp_Rstp_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Rstp_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/designated-root-address YANG schema element.
type Stp_Rstp_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/rstp/state/designated-root-priority YANG schema element.
type Stp_Rstp_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/designated-root-priority YANG schema element.
type Stp_Rstp_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_ForwardingDelayPath represents the /openconfig-spanning-tree/stp/rstp/config/forwarding-delay YANG schema element.
type Stp_Rstp_ForwardingDelayPath struct {
	*ygot.NodePath
}

// Stp_Rstp_ForwardingDelayPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/config/forwarding-delay YANG schema element.
type Stp_Rstp_ForwardingDelayPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_HelloTimePath represents the /openconfig-spanning-tree/stp/rstp/config/hello-time YANG schema element.
type Stp_Rstp_HelloTimePath struct {
	*ygot.NodePath
}

// Stp_Rstp_HelloTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/config/hello-time YANG schema element.
type Stp_Rstp_HelloTimePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_HoldCountPath represents the /openconfig-spanning-tree/stp/rstp/config/hold-count YANG schema element.
type Stp_Rstp_HoldCountPath struct {
	*ygot.NodePath
}

// Stp_Rstp_HoldCountPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/config/hold-count YANG schema element.
type Stp_Rstp_HoldCountPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_HoldTimePath represents the /openconfig-spanning-tree/stp/rstp/state/hold-time YANG schema element.
type Stp_Rstp_HoldTimePath struct {
	*ygot.NodePath
}

// Stp_Rstp_HoldTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/hold-time YANG schema element.
type Stp_Rstp_HoldTimePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_LastTopologyChangePath represents the /openconfig-spanning-tree/stp/rstp/state/last-topology-change YANG schema element.
type Stp_Rstp_LastTopologyChangePath struct {
	*ygot.NodePath
}

// Stp_Rstp_LastTopologyChangePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/last-topology-change YANG schema element.
type Stp_Rstp_LastTopologyChangePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_MaxAgePath represents the /openconfig-spanning-tree/stp/rstp/config/max-age YANG schema element.
type Stp_Rstp_MaxAgePath struct {
	*ygot.NodePath
}

// Stp_Rstp_MaxAgePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/config/max-age YANG schema element.
type Stp_Rstp_MaxAgePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_RootCostPath represents the /openconfig-spanning-tree/stp/rstp/state/root-cost YANG schema element.
type Stp_Rstp_RootCostPath struct {
	*ygot.NodePath
}

// Stp_Rstp_RootCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/root-cost YANG schema element.
type Stp_Rstp_RootCostPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_RootPortPath represents the /openconfig-spanning-tree/stp/rstp/state/root-port YANG schema element.
type Stp_Rstp_RootPortPath struct {
	*ygot.NodePath
}

// Stp_Rstp_RootPortPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/root-port YANG schema element.
type Stp_Rstp_RootPortPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_TopologyChangesPath represents the /openconfig-spanning-tree/stp/rstp/state/topology-changes YANG schema element.
type Stp_Rstp_TopologyChangesPath struct {
	*ygot.NodePath
}

// Stp_Rstp_TopologyChangesPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/state/topology-changes YANG schema element.
type Stp_Rstp_TopologyChangesPathAny struct {
	*ygot.NodePath
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/rstp/state/bridge-address"
func (n *Stp_RstpPath) BridgeAddress() *Stp_Rstp_BridgeAddressPath {
	return &Stp_Rstp_BridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/rstp/state/bridge-address"
func (n *Stp_RstpPathAny) BridgeAddress() *Stp_Rstp_BridgeAddressPathAny {
	return &Stp_Rstp_BridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/rstp/config/bridge-priority"
func (n *Stp_RstpPath) BridgePriority() *Stp_Rstp_BridgePriorityPath {
	return &Stp_Rstp_BridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/rstp/config/bridge-priority"
func (n *Stp_RstpPathAny) BridgePriority() *Stp_Rstp_BridgePriorityPathAny {
	return &Stp_Rstp_BridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rstp/state/designated-root-address"
func (n *Stp_RstpPath) DesignatedRootAddress() *Stp_Rstp_DesignatedRootAddressPath {
	return &Stp_Rstp_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rstp/state/designated-root-address"
func (n *Stp_RstpPathAny) DesignatedRootAddress() *Stp_Rstp_DesignatedRootAddressPathAny {
	return &Stp_Rstp_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rstp/state/designated-root-priority"
func (n *Stp_RstpPath) DesignatedRootPriority() *Stp_Rstp_DesignatedRootPriorityPath {
	return &Stp_Rstp_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rstp/state/designated-root-priority"
func (n *Stp_RstpPathAny) DesignatedRootPriority() *Stp_Rstp_DesignatedRootPriorityPathAny {
	return &Stp_Rstp_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/rstp/config/forwarding-delay"
func (n *Stp_RstpPath) ForwardingDelay() *Stp_Rstp_ForwardingDelayPath {
	return &Stp_Rstp_ForwardingDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/rstp/config/forwarding-delay"
func (n *Stp_RstpPathAny) ForwardingDelay() *Stp_Rstp_ForwardingDelayPathAny {
	return &Stp_Rstp_ForwardingDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/rstp/config/hello-time"
func (n *Stp_RstpPath) HelloTime() *Stp_Rstp_HelloTimePath {
	return &Stp_Rstp_HelloTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/rstp/config/hello-time"
func (n *Stp_RstpPathAny) HelloTime() *Stp_Rstp_HelloTimePathAny {
	return &Stp_Rstp_HelloTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/rstp/config/hold-count"
func (n *Stp_RstpPath) HoldCount() *Stp_Rstp_HoldCountPath {
	return &Stp_Rstp_HoldCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/rstp/config/hold-count"
func (n *Stp_RstpPathAny) HoldCount() *Stp_Rstp_HoldCountPathAny {
	return &Stp_Rstp_HoldCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/rstp/state/hold-time"
func (n *Stp_RstpPath) HoldTime() *Stp_Rstp_HoldTimePath {
	return &Stp_Rstp_HoldTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/rstp/state/hold-time"
func (n *Stp_RstpPathAny) HoldTime() *Stp_Rstp_HoldTimePathAny {
	return &Stp_Rstp_HoldTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rstp/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_RstpPath) InterfaceAny() *Stp_Rstp_InterfacePathAny {
	return &Stp_Rstp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rstp/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_RstpPathAny) InterfaceAny() *Stp_Rstp_InterfacePathAny {
	return &Stp_Rstp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rstp/interfaces/interface"
// Name: string
func (n *Stp_RstpPath) Interface(Name string) *Stp_Rstp_InterfacePath {
	return &Stp_Rstp_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rstp/interfaces/interface"
// Name: string
func (n *Stp_RstpPathAny) Interface(Name string) *Stp_Rstp_InterfacePathAny {
	return &Stp_Rstp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/rstp/state/last-topology-change"
func (n *Stp_RstpPath) LastTopologyChange() *Stp_Rstp_LastTopologyChangePath {
	return &Stp_Rstp_LastTopologyChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/rstp/state/last-topology-change"
func (n *Stp_RstpPathAny) LastTopologyChange() *Stp_Rstp_LastTopologyChangePathAny {
	return &Stp_Rstp_LastTopologyChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/rstp/config/max-age"
func (n *Stp_RstpPath) MaxAge() *Stp_Rstp_MaxAgePath {
	return &Stp_Rstp_MaxAgePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/rstp/config/max-age"
func (n *Stp_RstpPathAny) MaxAge() *Stp_Rstp_MaxAgePathAny {
	return &Stp_Rstp_MaxAgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/rstp/state/root-cost"
func (n *Stp_RstpPath) RootCost() *Stp_Rstp_RootCostPath {
	return &Stp_Rstp_RootCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/rstp/state/root-cost"
func (n *Stp_RstpPathAny) RootCost() *Stp_Rstp_RootCostPathAny {
	return &Stp_Rstp_RootCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/rstp/state/root-port"
func (n *Stp_RstpPath) RootPort() *Stp_Rstp_RootPortPath {
	return &Stp_Rstp_RootPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/rstp/state/root-port"
func (n *Stp_RstpPathAny) RootPort() *Stp_Rstp_RootPortPathAny {
	return &Stp_Rstp_RootPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/rstp/state/topology-changes"
func (n *Stp_RstpPath) TopologyChanges() *Stp_Rstp_TopologyChangesPath {
	return &Stp_Rstp_TopologyChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/rstp/state/topology-changes"
func (n *Stp_RstpPathAny) TopologyChanges() *Stp_Rstp_TopologyChangesPathAny {
	return &Stp_Rstp_TopologyChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Rstp_InterfacePath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface YANG schema element.
type Stp_Rstp_InterfacePath struct {
	*ygot.NodePath
}

// Stp_Rstp_InterfacePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface YANG schema element.
type Stp_Rstp_InterfacePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_CostPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/cost YANG schema element.
type Stp_Rstp_Interface_CostPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_CostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/cost YANG schema element.
type Stp_Rstp_Interface_CostPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedBridgeAddressPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Rstp_Interface_DesignatedBridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedBridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Rstp_Interface_DesignatedBridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedBridgePriorityPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedBridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedBridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedBridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedCostPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Rstp_Interface_DesignatedCostPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Rstp_Interface_DesignatedCostPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedPortNumPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Rstp_Interface_DesignatedPortNumPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedPortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Rstp_Interface_DesignatedPortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedPortPriorityPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedPortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedPortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedPortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Rstp_Interface_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Rstp_Interface_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Rstp_Interface_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_ForwardTransisitionsPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Rstp_Interface_ForwardTransisitionsPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_ForwardTransisitionsPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Rstp_Interface_ForwardTransisitionsPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_NamePath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/name YANG schema element.
type Stp_Rstp_Interface_NamePath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_NamePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/name YANG schema element.
type Stp_Rstp_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortNumPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/port-num YANG schema element.
type Stp_Rstp_Interface_PortNumPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/port-num YANG schema element.
type Stp_Rstp_Interface_PortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortPriorityPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/port-priority YANG schema element.
type Stp_Rstp_Interface_PortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/config/port-priority YANG schema element.
type Stp_Rstp_Interface_PortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortStatePath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/port-state YANG schema element.
type Stp_Rstp_Interface_PortStatePath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_PortStatePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/port-state YANG schema element.
type Stp_Rstp_Interface_PortStatePathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_RolePath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/role YANG schema element.
type Stp_Rstp_Interface_RolePath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_RolePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/role YANG schema element.
type Stp_Rstp_Interface_RolePathAny struct {
	*ygot.NodePath
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/rstp/interfaces/interface/config/cost"
func (n *Stp_Rstp_InterfacePath) Cost() *Stp_Rstp_Interface_CostPath {
	return &Stp_Rstp_Interface_CostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/rstp/interfaces/interface/config/cost"
func (n *Stp_Rstp_InterfacePathAny) Cost() *Stp_Rstp_Interface_CostPathAny {
	return &Stp_Rstp_Interface_CostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/rstp/interfaces/interface/state/counters"
func (n *Stp_Rstp_InterfacePath) Counters() *Stp_Rstp_Interface_CountersPath {
	return &Stp_Rstp_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/rstp/interfaces/interface/state/counters"
func (n *Stp_Rstp_InterfacePathAny) Counters() *Stp_Rstp_Interface_CountersPathAny {
	return &Stp_Rstp_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Rstp_InterfacePath) DesignatedBridgeAddress() *Stp_Rstp_Interface_DesignatedBridgeAddressPath {
	return &Stp_Rstp_Interface_DesignatedBridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Rstp_InterfacePathAny) DesignatedBridgeAddress() *Stp_Rstp_Interface_DesignatedBridgeAddressPathAny {
	return &Stp_Rstp_Interface_DesignatedBridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Rstp_InterfacePath) DesignatedBridgePriority() *Stp_Rstp_Interface_DesignatedBridgePriorityPath {
	return &Stp_Rstp_Interface_DesignatedBridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Rstp_InterfacePathAny) DesignatedBridgePriority() *Stp_Rstp_Interface_DesignatedBridgePriorityPathAny {
	return &Stp_Rstp_Interface_DesignatedBridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-cost"
func (n *Stp_Rstp_InterfacePath) DesignatedCost() *Stp_Rstp_Interface_DesignatedCostPath {
	return &Stp_Rstp_Interface_DesignatedCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-cost"
func (n *Stp_Rstp_InterfacePathAny) DesignatedCost() *Stp_Rstp_Interface_DesignatedCostPathAny {
	return &Stp_Rstp_Interface_DesignatedCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-port-num"
func (n *Stp_Rstp_InterfacePath) DesignatedPortNum() *Stp_Rstp_Interface_DesignatedPortNumPath {
	return &Stp_Rstp_Interface_DesignatedPortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-port-num"
func (n *Stp_Rstp_InterfacePathAny) DesignatedPortNum() *Stp_Rstp_Interface_DesignatedPortNumPathAny {
	return &Stp_Rstp_Interface_DesignatedPortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-port-priority"
func (n *Stp_Rstp_InterfacePath) DesignatedPortPriority() *Stp_Rstp_Interface_DesignatedPortPriorityPath {
	return &Stp_Rstp_Interface_DesignatedPortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-port-priority"
func (n *Stp_Rstp_InterfacePathAny) DesignatedPortPriority() *Stp_Rstp_Interface_DesignatedPortPriorityPathAny {
	return &Stp_Rstp_Interface_DesignatedPortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-root-address"
func (n *Stp_Rstp_InterfacePath) DesignatedRootAddress() *Stp_Rstp_Interface_DesignatedRootAddressPath {
	return &Stp_Rstp_Interface_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-root-address"
func (n *Stp_Rstp_InterfacePathAny) DesignatedRootAddress() *Stp_Rstp_Interface_DesignatedRootAddressPathAny {
	return &Stp_Rstp_Interface_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-root-priority"
func (n *Stp_Rstp_InterfacePath) DesignatedRootPriority() *Stp_Rstp_Interface_DesignatedRootPriorityPath {
	return &Stp_Rstp_Interface_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rstp/interfaces/interface/state/designated-root-priority"
func (n *Stp_Rstp_InterfacePathAny) DesignatedRootPriority() *Stp_Rstp_Interface_DesignatedRootPriorityPathAny {
	return &Stp_Rstp_Interface_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/rstp/interfaces/interface/state/forward-transisitions"
func (n *Stp_Rstp_InterfacePath) ForwardTransisitions() *Stp_Rstp_Interface_ForwardTransisitionsPath {
	return &Stp_Rstp_Interface_ForwardTransisitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/rstp/interfaces/interface/state/forward-transisitions"
func (n *Stp_Rstp_InterfacePathAny) ForwardTransisitions() *Stp_Rstp_Interface_ForwardTransisitionsPathAny {
	return &Stp_Rstp_Interface_ForwardTransisitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/rstp/interfaces/interface/config/name"
func (n *Stp_Rstp_InterfacePath) Name() *Stp_Rstp_Interface_NamePath {
	return &Stp_Rstp_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/rstp/interfaces/interface/config/name"
func (n *Stp_Rstp_InterfacePathAny) Name() *Stp_Rstp_Interface_NamePathAny {
	return &Stp_Rstp_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/rstp/interfaces/interface/state/port-num"
func (n *Stp_Rstp_InterfacePath) PortNum() *Stp_Rstp_Interface_PortNumPath {
	return &Stp_Rstp_Interface_PortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/rstp/interfaces/interface/state/port-num"
func (n *Stp_Rstp_InterfacePathAny) PortNum() *Stp_Rstp_Interface_PortNumPathAny {
	return &Stp_Rstp_Interface_PortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/rstp/interfaces/interface/config/port-priority"
func (n *Stp_Rstp_InterfacePath) PortPriority() *Stp_Rstp_Interface_PortPriorityPath {
	return &Stp_Rstp_Interface_PortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/rstp/interfaces/interface/config/port-priority"
func (n *Stp_Rstp_InterfacePathAny) PortPriority() *Stp_Rstp_Interface_PortPriorityPathAny {
	return &Stp_Rstp_Interface_PortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/rstp/interfaces/interface/state/port-state"
func (n *Stp_Rstp_InterfacePath) PortState() *Stp_Rstp_Interface_PortStatePath {
	return &Stp_Rstp_Interface_PortStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/rstp/interfaces/interface/state/port-state"
func (n *Stp_Rstp_InterfacePathAny) PortState() *Stp_Rstp_Interface_PortStatePathAny {
	return &Stp_Rstp_Interface_PortStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/rstp/interfaces/interface/state/role"
func (n *Stp_Rstp_InterfacePath) Role() *Stp_Rstp_Interface_RolePath {
	return &Stp_Rstp_Interface_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/rstp/interfaces/interface/state/role"
func (n *Stp_Rstp_InterfacePathAny) Role() *Stp_Rstp_Interface_RolePathAny {
	return &Stp_Rstp_Interface_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Rstp_Interface_CountersPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters YANG schema element.
type Stp_Rstp_Interface_CountersPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_CountersPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters YANG schema element.
type Stp_Rstp_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_Counters_BpduReceivedPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Rstp_Interface_Counters_BpduReceivedPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_Counters_BpduReceivedPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Rstp_Interface_Counters_BpduReceivedPathAny struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_Counters_BpduSentPath represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Rstp_Interface_Counters_BpduSentPath struct {
	*ygot.NodePath
}

// Stp_Rstp_Interface_Counters_BpduSentPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Rstp_Interface_Counters_BpduSentPathAny struct {
	*ygot.NodePath
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/rstp/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Rstp_Interface_CountersPath) BpduReceived() *Stp_Rstp_Interface_Counters_BpduReceivedPath {
	return &Stp_Rstp_Interface_Counters_BpduReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/rstp/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Rstp_Interface_CountersPathAny) BpduReceived() *Stp_Rstp_Interface_Counters_BpduReceivedPathAny {
	return &Stp_Rstp_Interface_Counters_BpduReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/rstp/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Rstp_Interface_CountersPath) BpduSent() *Stp_Rstp_Interface_Counters_BpduSentPath {
	return &Stp_Rstp_Interface_Counters_BpduSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/rstp/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Rstp_Interface_CountersPathAny) BpduSent() *Stp_Rstp_Interface_Counters_BpduSentPathAny {
	return &Stp_Rstp_Interface_Counters_BpduSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_VlanPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan YANG schema element.
type Stp_VlanPath struct {
	*ygot.NodePath
}

// Stp_VlanPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan YANG schema element.
type Stp_VlanPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_BridgeAddressPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/bridge-address YANG schema element.
type Stp_Vlan_BridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Vlan_BridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/bridge-address YANG schema element.
type Stp_Vlan_BridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_BridgePriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/bridge-priority YANG schema element.
type Stp_Vlan_BridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_BridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/bridge-priority YANG schema element.
type Stp_Vlan_BridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/designated-root-address YANG schema element.
type Stp_Vlan_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Vlan_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/designated-root-address YANG schema element.
type Stp_Vlan_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/designated-root-priority YANG schema element.
type Stp_Vlan_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/designated-root-priority YANG schema element.
type Stp_Vlan_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_ForwardingDelayPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/forwarding-delay YANG schema element.
type Stp_Vlan_ForwardingDelayPath struct {
	*ygot.NodePath
}

// Stp_Vlan_ForwardingDelayPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/forwarding-delay YANG schema element.
type Stp_Vlan_ForwardingDelayPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_HelloTimePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/hello-time YANG schema element.
type Stp_Vlan_HelloTimePath struct {
	*ygot.NodePath
}

// Stp_Vlan_HelloTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/hello-time YANG schema element.
type Stp_Vlan_HelloTimePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_HoldCountPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/hold-count YANG schema element.
type Stp_Vlan_HoldCountPath struct {
	*ygot.NodePath
}

// Stp_Vlan_HoldCountPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/hold-count YANG schema element.
type Stp_Vlan_HoldCountPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_HoldTimePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/hold-time YANG schema element.
type Stp_Vlan_HoldTimePath struct {
	*ygot.NodePath
}

// Stp_Vlan_HoldTimePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/hold-time YANG schema element.
type Stp_Vlan_HoldTimePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_LastTopologyChangePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/last-topology-change YANG schema element.
type Stp_Vlan_LastTopologyChangePath struct {
	*ygot.NodePath
}

// Stp_Vlan_LastTopologyChangePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/last-topology-change YANG schema element.
type Stp_Vlan_LastTopologyChangePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_MaxAgePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/max-age YANG schema element.
type Stp_Vlan_MaxAgePath struct {
	*ygot.NodePath
}

// Stp_Vlan_MaxAgePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/max-age YANG schema element.
type Stp_Vlan_MaxAgePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_RootCostPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/root-cost YANG schema element.
type Stp_Vlan_RootCostPath struct {
	*ygot.NodePath
}

// Stp_Vlan_RootCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/root-cost YANG schema element.
type Stp_Vlan_RootCostPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_RootPortPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/root-port YANG schema element.
type Stp_Vlan_RootPortPath struct {
	*ygot.NodePath
}

// Stp_Vlan_RootPortPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/root-port YANG schema element.
type Stp_Vlan_RootPortPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_TopologyChangesPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/topology-changes YANG schema element.
type Stp_Vlan_TopologyChangesPath struct {
	*ygot.NodePath
}

// Stp_Vlan_TopologyChangesPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/state/topology-changes YANG schema element.
type Stp_Vlan_TopologyChangesPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_VlanIdPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/vlan-id YANG schema element.
type Stp_Vlan_VlanIdPath struct {
	*ygot.NodePath
}

// Stp_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/config/vlan-id YANG schema element.
type Stp_Vlan_VlanIdPathAny struct {
	*ygot.NodePath
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/rapid-pvst/vlan/state/bridge-address"
func (n *Stp_VlanPath) BridgeAddress() *Stp_Vlan_BridgeAddressPath {
	return &Stp_Vlan_BridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeAddress (leaf): A unique 48-bit Universally Administered MAC Address
// assigned to the bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/bridge-address"
// Path from root: "/stp/rapid-pvst/vlan/state/bridge-address"
func (n *Stp_VlanPathAny) BridgeAddress() *Stp_Vlan_BridgeAddressPathAny {
	return &Stp_Vlan_BridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/rapid-pvst/vlan/config/bridge-priority"
func (n *Stp_VlanPath) BridgePriority() *Stp_Vlan_BridgePriorityPath {
	return &Stp_Vlan_BridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgePriority (leaf): The manageable component of the Bridge Identifier
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/bridge-priority"
// Path from root: "/stp/rapid-pvst/vlan/config/bridge-priority"
func (n *Stp_VlanPathAny) BridgePriority() *Stp_Vlan_BridgePriorityPathAny {
	return &Stp_Vlan_BridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rapid-pvst/vlan/state/designated-root-address"
func (n *Stp_VlanPath) DesignatedRootAddress() *Stp_Vlan_DesignatedRootAddressPath {
	return &Stp_Vlan_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rapid-pvst/vlan/state/designated-root-address"
func (n *Stp_VlanPathAny) DesignatedRootAddress() *Stp_Vlan_DesignatedRootAddressPathAny {
	return &Stp_Vlan_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rapid-pvst/vlan/state/designated-root-priority"
func (n *Stp_VlanPath) DesignatedRootPriority() *Stp_Vlan_DesignatedRootPriorityPath {
	return &Stp_Vlan_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the root of the spanning
// tree, as determined by the Spanning Tree Protocol,
// as executed by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rapid-pvst/vlan/state/designated-root-priority"
func (n *Stp_VlanPathAny) DesignatedRootPriority() *Stp_Vlan_DesignatedRootPriorityPathAny {
	return &Stp_Vlan_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/rapid-pvst/vlan/config/forwarding-delay"
func (n *Stp_VlanPath) ForwardingDelay() *Stp_Vlan_ForwardingDelayPath {
	return &Stp_Vlan_ForwardingDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingDelay (leaf): The delay used by STP bridges to transition root and
// designated ports to forwarding
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/forwarding-delay"
// Path from root: "/stp/rapid-pvst/vlan/config/forwarding-delay"
func (n *Stp_VlanPathAny) ForwardingDelay() *Stp_Vlan_ForwardingDelayPathAny {
	return &Stp_Vlan_ForwardingDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/rapid-pvst/vlan/config/hello-time"
func (n *Stp_VlanPath) HelloTime() *Stp_Vlan_HelloTimePath {
	return &Stp_Vlan_HelloTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTime (leaf): The interval between periodic transmissions of
// configuration messages by designated ports
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hello-time"
// Path from root: "/stp/rapid-pvst/vlan/config/hello-time"
func (n *Stp_VlanPathAny) HelloTime() *Stp_Vlan_HelloTimePathAny {
	return &Stp_Vlan_HelloTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/rapid-pvst/vlan/config/hold-count"
func (n *Stp_VlanPath) HoldCount() *Stp_Vlan_HoldCountPath {
	return &Stp_Vlan_HoldCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldCount (leaf): the maximum number of BPDUs per second that the
// switch can send from an interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/hold-count"
// Path from root: "/stp/rapid-pvst/vlan/config/hold-count"
func (n *Stp_VlanPathAny) HoldCount() *Stp_Vlan_HoldCountPathAny {
	return &Stp_Vlan_HoldCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/rapid-pvst/vlan/state/hold-time"
func (n *Stp_VlanPath) HoldTime() *Stp_Vlan_HoldTimePath {
	return &Stp_Vlan_HoldTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (leaf): This time value determines the interval length
// during which no more than two Configuration bridge
// PDUs shall be transmitted by this node
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/hold-time"
// Path from root: "/stp/rapid-pvst/vlan/state/hold-time"
func (n *Stp_VlanPathAny) HoldTime() *Stp_Vlan_HoldTimePathAny {
	return &Stp_Vlan_HoldTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_VlanPath) InterfaceAny() *Stp_Vlan_InterfacePathAny {
	return &Stp_Vlan_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface"
// Name (wildcarded): string
func (n *Stp_VlanPathAny) InterfaceAny() *Stp_Vlan_InterfacePathAny {
	return &Stp_Vlan_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface"
// Name: string
func (n *Stp_VlanPath) Interface(Name string) *Stp_Vlan_InterfacePath {
	return &Stp_Vlan_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which STP is enable
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "interfaces/interface"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface"
// Name: string
func (n *Stp_VlanPathAny) Interface(Name string) *Stp_Vlan_InterfacePathAny {
	return &Stp_Vlan_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/rapid-pvst/vlan/state/last-topology-change"
func (n *Stp_VlanPath) LastTopologyChange() *Stp_Vlan_LastTopologyChangePath {
	return &Stp_Vlan_LastTopologyChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastTopologyChange (leaf): The time at which the last topology change was
// detected by the bridge entity. The value is
// expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/last-topology-change"
// Path from root: "/stp/rapid-pvst/vlan/state/last-topology-change"
func (n *Stp_VlanPathAny) LastTopologyChange() *Stp_Vlan_LastTopologyChangePathAny {
	return &Stp_Vlan_LastTopologyChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-topology-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/rapid-pvst/vlan/config/max-age"
func (n *Stp_VlanPath) MaxAge() *Stp_Vlan_MaxAgePath {
	return &Stp_Vlan_MaxAgePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxAge (leaf): The maximum age of the information transmitted by the
// bridge when it is the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/max-age"
// Path from root: "/stp/rapid-pvst/vlan/config/max-age"
func (n *Stp_VlanPathAny) MaxAge() *Stp_Vlan_MaxAgePathAny {
	return &Stp_Vlan_MaxAgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-age"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/rapid-pvst/vlan/state/root-cost"
func (n *Stp_VlanPath) RootCost() *Stp_Vlan_RootCostPath {
	return &Stp_Vlan_RootCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootCost (leaf): The cost of the path to the root as seen from this bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-cost"
// Path from root: "/stp/rapid-pvst/vlan/state/root-cost"
func (n *Stp_VlanPathAny) RootCost() *Stp_Vlan_RootCostPathAny {
	return &Stp_Vlan_RootCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/rapid-pvst/vlan/state/root-port"
func (n *Stp_VlanPath) RootPort() *Stp_Vlan_RootPortPath {
	return &Stp_Vlan_RootPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootPort (leaf): The port number of the port which offers the lowest
// cost path from this bridge to the root bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/root-port"
// Path from root: "/stp/rapid-pvst/vlan/state/root-port"
func (n *Stp_VlanPathAny) RootPort() *Stp_Vlan_RootPortPathAny {
	return &Stp_Vlan_RootPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/rapid-pvst/vlan/state/topology-changes"
func (n *Stp_VlanPath) TopologyChanges() *Stp_Vlan_TopologyChangesPath {
	return &Stp_Vlan_TopologyChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TopologyChanges (leaf): The total number of topology changes detected by
// this bridge since the management entity was last
// reset or initialized
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/topology-changes"
// Path from root: "/stp/rapid-pvst/vlan/state/topology-changes"
func (n *Stp_VlanPathAny) TopologyChanges() *Stp_Vlan_TopologyChangesPathAny {
	return &Stp_Vlan_TopologyChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "topology-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Interface VLAN ID
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/vlan-id"
// Path from root: "/stp/rapid-pvst/vlan/config/vlan-id"
func (n *Stp_VlanPath) VlanId() *Stp_Vlan_VlanIdPath {
	return &Stp_Vlan_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Interface VLAN ID
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/vlan-id"
// Path from root: "/stp/rapid-pvst/vlan/config/vlan-id"
func (n *Stp_VlanPathAny) VlanId() *Stp_Vlan_VlanIdPathAny {
	return &Stp_Vlan_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Vlan_InterfacePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface YANG schema element.
type Stp_Vlan_InterfacePath struct {
	*ygot.NodePath
}

// Stp_Vlan_InterfacePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface YANG schema element.
type Stp_Vlan_InterfacePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_CostPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/cost YANG schema element.
type Stp_Vlan_Interface_CostPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_CostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/cost YANG schema element.
type Stp_Vlan_Interface_CostPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedBridgeAddressPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Vlan_Interface_DesignatedBridgeAddressPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedBridgeAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-address YANG schema element.
type Stp_Vlan_Interface_DesignatedBridgeAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedBridgePriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedBridgePriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedBridgePriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedBridgePriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedCostPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Vlan_Interface_DesignatedCostPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedCostPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-cost YANG schema element.
type Stp_Vlan_Interface_DesignatedCostPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedPortNumPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Vlan_Interface_DesignatedPortNumPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedPortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-num YANG schema element.
type Stp_Vlan_Interface_DesignatedPortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedPortPriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedPortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedPortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedPortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedRootAddressPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Vlan_Interface_DesignatedRootAddressPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedRootAddressPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-address YANG schema element.
type Stp_Vlan_Interface_DesignatedRootAddressPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedRootPriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedRootPriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_DesignatedRootPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-priority YANG schema element.
type Stp_Vlan_Interface_DesignatedRootPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_ForwardTransisitionsPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Vlan_Interface_ForwardTransisitionsPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_ForwardTransisitionsPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/forward-transisitions YANG schema element.
type Stp_Vlan_Interface_ForwardTransisitionsPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_NamePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/name YANG schema element.
type Stp_Vlan_Interface_NamePath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_NamePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/name YANG schema element.
type Stp_Vlan_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortNumPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/port-num YANG schema element.
type Stp_Vlan_Interface_PortNumPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortNumPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/port-num YANG schema element.
type Stp_Vlan_Interface_PortNumPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortPriorityPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/port-priority YANG schema element.
type Stp_Vlan_Interface_PortPriorityPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortPriorityPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/config/port-priority YANG schema element.
type Stp_Vlan_Interface_PortPriorityPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortStatePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/port-state YANG schema element.
type Stp_Vlan_Interface_PortStatePath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_PortStatePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/port-state YANG schema element.
type Stp_Vlan_Interface_PortStatePathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_RolePath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/role YANG schema element.
type Stp_Vlan_Interface_RolePath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_RolePathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/role YANG schema element.
type Stp_Vlan_Interface_RolePathAny struct {
	*ygot.NodePath
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/cost"
func (n *Stp_Vlan_InterfacePath) Cost() *Stp_Vlan_Interface_CostPath {
	return &Stp_Vlan_Interface_CostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cost (leaf): The port's contribution, when it is the Root Port,
// to the Root Path Cost for the Bridge
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/cost"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/cost"
func (n *Stp_Vlan_InterfacePathAny) Cost() *Stp_Vlan_Interface_CostPathAny {
	return &Stp_Vlan_Interface_CostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters"
func (n *Stp_Vlan_InterfacePath) Counters() *Stp_Vlan_Interface_CountersPath {
	return &Stp_Vlan_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The BPDU packet transmition statistics
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/counters"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters"
func (n *Stp_Vlan_InterfacePathAny) Counters() *Stp_Vlan_Interface_CountersPathAny {
	return &Stp_Vlan_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Vlan_InterfacePath) DesignatedBridgeAddress() *Stp_Vlan_Interface_DesignatedBridgeAddressPath {
	return &Stp_Vlan_Interface_DesignatedBridgeAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgeAddress (leaf): The bridge address of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-address"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-address"
func (n *Stp_Vlan_InterfacePathAny) DesignatedBridgeAddress() *Stp_Vlan_Interface_DesignatedBridgeAddressPathAny {
	return &Stp_Vlan_Interface_DesignatedBridgeAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Vlan_InterfacePath) DesignatedBridgePriority() *Stp_Vlan_Interface_DesignatedBridgePriorityPath {
	return &Stp_Vlan_Interface_DesignatedBridgePriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedBridgePriority (leaf): The bridge priority of the bridge that this port considers
// to be the designated bridge for this port's segment.
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-bridge-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-bridge-priority"
func (n *Stp_Vlan_InterfacePathAny) DesignatedBridgePriority() *Stp_Vlan_Interface_DesignatedBridgePriorityPathAny {
	return &Stp_Vlan_Interface_DesignatedBridgePriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-bridge-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-cost"
func (n *Stp_Vlan_InterfacePath) DesignatedCost() *Stp_Vlan_Interface_DesignatedCostPath {
	return &Stp_Vlan_Interface_DesignatedCostPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedCost (leaf): The path cost of the Designated Port of the
// segment connected to this port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-cost"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-cost"
func (n *Stp_Vlan_InterfacePathAny) DesignatedCost() *Stp_Vlan_Interface_DesignatedCostPathAny {
	return &Stp_Vlan_Interface_DesignatedCostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-cost"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-num"
func (n *Stp_Vlan_InterfacePath) DesignatedPortNum() *Stp_Vlan_Interface_DesignatedPortNumPath {
	return &Stp_Vlan_Interface_DesignatedPortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortNum (leaf): The Port number of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-num"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-num"
func (n *Stp_Vlan_InterfacePathAny) DesignatedPortNum() *Stp_Vlan_Interface_DesignatedPortNumPathAny {
	return &Stp_Vlan_Interface_DesignatedPortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-priority"
func (n *Stp_Vlan_InterfacePath) DesignatedPortPriority() *Stp_Vlan_Interface_DesignatedPortPriorityPath {
	return &Stp_Vlan_Interface_DesignatedPortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedPortPriority (leaf): The Port priority of the port on the Designated
// Bridge for this port's segment, two octet string
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-port-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-port-priority"
func (n *Stp_Vlan_InterfacePathAny) DesignatedPortPriority() *Stp_Vlan_Interface_DesignatedPortPriorityPathAny {
	return &Stp_Vlan_Interface_DesignatedPortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-address"
func (n *Stp_Vlan_InterfacePath) DesignatedRootAddress() *Stp_Vlan_Interface_DesignatedRootAddressPath {
	return &Stp_Vlan_Interface_DesignatedRootAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootAddress (leaf): The bridge address of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-address"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-address"
func (n *Stp_Vlan_InterfacePathAny) DesignatedRootAddress() *Stp_Vlan_Interface_DesignatedRootAddressPathAny {
	return &Stp_Vlan_Interface_DesignatedRootAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-priority"
func (n *Stp_Vlan_InterfacePath) DesignatedRootPriority() *Stp_Vlan_Interface_DesignatedRootPriorityPath {
	return &Stp_Vlan_Interface_DesignatedRootPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DesignatedRootPriority (leaf): The bridge priority of the bridge recorded as the
// root in the configuration BPDUs transmitted by the designated
// bridge for the segment to which the port is attached
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/designated-root-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/designated-root-priority"
func (n *Stp_Vlan_InterfacePathAny) DesignatedRootPriority() *Stp_Vlan_Interface_DesignatedRootPriorityPathAny {
	return &Stp_Vlan_Interface_DesignatedRootPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "designated-root-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/forward-transisitions"
func (n *Stp_Vlan_InterfacePath) ForwardTransisitions() *Stp_Vlan_Interface_ForwardTransisitionsPath {
	return &Stp_Vlan_Interface_ForwardTransisitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardTransisitions (leaf): The number of times this port has transitioned
// from the Learning state to the Forwarding state
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/forward-transisitions"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/forward-transisitions"
func (n *Stp_Vlan_InterfacePathAny) ForwardTransisitions() *Stp_Vlan_Interface_ForwardTransisitionsPathAny {
	return &Stp_Vlan_Interface_ForwardTransisitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "forward-transisitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/name"
func (n *Stp_Vlan_InterfacePath) Name() *Stp_Vlan_Interface_NamePath {
	return &Stp_Vlan_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the STP ethernet interface
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/name"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/name"
func (n *Stp_Vlan_InterfacePathAny) Name() *Stp_Vlan_Interface_NamePathAny {
	return &Stp_Vlan_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/port-num"
func (n *Stp_Vlan_InterfacePath) PortNum() *Stp_Vlan_Interface_PortNumPath {
	return &Stp_Vlan_Interface_PortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): The port number of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-num"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/port-num"
func (n *Stp_Vlan_InterfacePathAny) PortNum() *Stp_Vlan_Interface_PortNumPathAny {
	return &Stp_Vlan_Interface_PortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/port-priority"
func (n *Stp_Vlan_InterfacePath) PortPriority() *Stp_Vlan_Interface_PortPriorityPath {
	return &Stp_Vlan_Interface_PortPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortPriority (leaf): The manageable component of the Port Identifier,
// also known as the Port Priority
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "config/port-priority"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/config/port-priority"
func (n *Stp_Vlan_InterfacePathAny) PortPriority() *Stp_Vlan_Interface_PortPriorityPathAny {
	return &Stp_Vlan_Interface_PortPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/port-state"
func (n *Stp_Vlan_InterfacePath) PortState() *Stp_Vlan_Interface_PortStatePath {
	return &Stp_Vlan_Interface_PortStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortState (leaf): The current state of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/port-state"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/port-state"
func (n *Stp_Vlan_InterfacePathAny) PortState() *Stp_Vlan_Interface_PortStatePathAny {
	return &Stp_Vlan_Interface_PortStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/role"
func (n *Stp_Vlan_InterfacePath) Role() *Stp_Vlan_Interface_RolePath {
	return &Stp_Vlan_Interface_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The current role of the bridge port
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "state/role"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/role"
func (n *Stp_Vlan_InterfacePathAny) Role() *Stp_Vlan_Interface_RolePathAny {
	return &Stp_Vlan_Interface_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp_Vlan_Interface_CountersPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters YANG schema element.
type Stp_Vlan_Interface_CountersPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_CountersPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters YANG schema element.
type Stp_Vlan_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_Counters_BpduReceivedPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Vlan_Interface_Counters_BpduReceivedPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_Counters_BpduReceivedPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-received YANG schema element.
type Stp_Vlan_Interface_Counters_BpduReceivedPathAny struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_Counters_BpduSentPath represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Vlan_Interface_Counters_BpduSentPath struct {
	*ygot.NodePath
}

// Stp_Vlan_Interface_Counters_BpduSentPathAny represents the wildcard version of the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-sent YANG schema element.
type Stp_Vlan_Interface_Counters_BpduSentPathAny struct {
	*ygot.NodePath
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Vlan_Interface_CountersPath) BpduReceived() *Stp_Vlan_Interface_Counters_BpduReceivedPath {
	return &Stp_Vlan_Interface_Counters_BpduReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduReceived (leaf): The number of BPDU packet received
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-received"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-received"
func (n *Stp_Vlan_Interface_CountersPathAny) BpduReceived() *Stp_Vlan_Interface_Counters_BpduReceivedPathAny {
	return &Stp_Vlan_Interface_Counters_BpduReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Vlan_Interface_CountersPath) BpduSent() *Stp_Vlan_Interface_Counters_BpduSentPath {
	return &Stp_Vlan_Interface_Counters_BpduSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// BpduSent (leaf): The number of BPDU packet sent
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "bpdu-sent"
// Path from root: "/stp/rapid-pvst/vlan/interfaces/interface/state/counters/bpdu-sent"
func (n *Stp_Vlan_Interface_CountersPathAny) BpduSent() *Stp_Vlan_Interface_Counters_BpduSentPathAny {
	return &Stp_Vlan_Interface_Counters_BpduSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bpdu-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPath represents the /openconfig-system/system YANG schema element.
type SystemPath struct {
	*ygot.NodePath
}

// SystemPathAny represents the wildcard version of the /openconfig-system/system YANG schema element.
type SystemPathAny struct {
	*ygot.NodePath
}

// System_BootTimePath represents the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePath struct {
	*ygot.NodePath
}

// System_BootTimePathAny represents the wildcard version of the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePathAny struct {
	*ygot.NodePath
}

// System_CurrentDatetimePath represents the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePath struct {
	*ygot.NodePath
}

// System_CurrentDatetimePathAny represents the wildcard version of the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePathAny struct {
	*ygot.NodePath
}

// System_DomainNamePath represents the /openconfig-system/system/config/domain-name YANG schema element.
type System_DomainNamePath struct {
	*ygot.NodePath
}

// System_DomainNamePathAny represents the wildcard version of the /openconfig-system/system/config/domain-name YANG schema element.
type System_DomainNamePathAny struct {
	*ygot.NodePath
}

// System_HostnamePath represents the /openconfig-system/system/config/hostname YANG schema element.
type System_HostnamePath struct {
	*ygot.NodePath
}

// System_HostnamePathAny represents the wildcard version of the /openconfig-system/system/config/hostname YANG schema element.
type System_HostnamePathAny struct {
	*ygot.NodePath
}

// System_LastConfigurationTimestampPath represents the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPath struct {
	*ygot.NodePath
}

// System_LastConfigurationTimestampPathAny represents the wildcard version of the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPathAny struct {
	*ygot.NodePath
}

// System_LoginBannerPath represents the /openconfig-system/system/config/login-banner YANG schema element.
type System_LoginBannerPath struct {
	*ygot.NodePath
}

// System_LoginBannerPathAny represents the wildcard version of the /openconfig-system/system/config/login-banner YANG schema element.
type System_LoginBannerPathAny struct {
	*ygot.NodePath
}

// System_MotdBannerPath represents the /openconfig-system/system/config/motd-banner YANG schema element.
type System_MotdBannerPath struct {
	*ygot.NodePath
}

// System_MotdBannerPathAny represents the wildcard version of the /openconfig-system/system/config/motd-banner YANG schema element.
type System_MotdBannerPathAny struct {
	*ygot.NodePath
}

// System_SoftwareVersionPath represents the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPath struct {
	*ygot.NodePath
}

// System_SoftwareVersionPathAny represents the wildcard version of the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPathAny struct {
	*ygot.NodePath
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPath) Aaa() *System_AaaPath {
	return &System_AaaPath{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aaa (container): Top-level container for AAA services
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "aaa"
// Path from root: "/system/aaa"
func (n *SystemPathAny) Aaa() *System_AaaPathAny {
	return &System_AaaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmAny (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id (wildcarded): string
func (n *SystemPath) AlarmAny() *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// AlarmAny (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id (wildcarded): string
func (n *SystemPathAny) AlarmAny() *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Alarm (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id: string
func (n *SystemPath) Alarm(Id string) *System_AlarmPath {
	return &System_AlarmPath{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Alarm (list): List of alarms, keyed by a unique id
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "alarms/alarm"
// Path from root: "/system/alarms/alarm"
// Id: string
func (n *SystemPathAny) Alarm(Id string) *System_AlarmPathAny {
	return &System_AlarmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/boot-time"
// Path from root: "/system/state/boot-time"
func (n *SystemPath) BootTime() *System_BootTimePath {
	return &System_BootTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/boot-time"
// Path from root: "/system/state/boot-time"
func (n *SystemPathAny) BootTime() *System_BootTimePathAny {
	return &System_BootTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPath) Clock() *System_ClockPath {
	return &System_ClockPath{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// Clock (container): Top-level container for clock configuration data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "clock"
// Path from root: "/system/clock"
func (n *SystemPathAny) Clock() *System_ClockPathAny {
	return &System_ClockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index (wildcarded): [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPath) CpuAny() *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index (wildcarded): [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPathAny) CpuAny() *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index: [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPath) Cpu(Index System_Cpu_Index_Union) *System_CpuPath {
	return &System_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "cpus/cpu"
// Path from root: "/system/cpus/cpu"
// Index: [E_Cpu_Index_Enum, UnionUint32]
func (n *SystemPathAny) Cpu(Index System_Cpu_Index_Union) *System_CpuPathAny {
	return &System_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// CurrentDatetime (leaf): The current system date and time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/current-datetime"
// Path from root: "/system/state/current-datetime"
func (n *SystemPath) CurrentDatetime() *System_CurrentDatetimePath {
	return &System_CurrentDatetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentDatetime (leaf): The current system date and time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/current-datetime"
// Path from root: "/system/state/current-datetime"
func (n *SystemPathAny) CurrentDatetime() *System_CurrentDatetimePathAny {
	return &System_CurrentDatetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPath) Dns() *System_DnsPath {
	return &System_DnsPath{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dns (container): Enclosing container for DNS resolver data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "dns"
// Path from root: "/system/dns"
func (n *SystemPathAny) Dns() *System_DnsPathAny {
	return &System_DnsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/domain-name"
// Path from root: "/system/config/domain-name"
func (n *SystemPath) DomainName() *System_DomainNamePath {
	return &System_DomainNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/domain-name"
// Path from root: "/system/config/domain-name"
func (n *SystemPathAny) DomainName() *System_DomainNamePathAny {
	return &System_DomainNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "domain-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name (wildcarded): string
func (n *SystemPath) GrpcServerAny() *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name (wildcarded): string
func (n *SystemPathAny) GrpcServerAny() *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name: string
func (n *SystemPath) GrpcServer(Name string) *System_GrpcServerPath {
	return &System_GrpcServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "grpc-servers/grpc-server"
// Path from root: "/system/grpc-servers/grpc-server"
// Name: string
func (n *SystemPathAny) GrpcServer(Name string) *System_GrpcServerPathAny {
	return &System_GrpcServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/config/hostname"
func (n *SystemPath) Hostname() *System_HostnamePath {
	return &System_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/config/hostname"
func (n *SystemPathAny) Hostname() *System_HostnamePathAny {
	return &System_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/last-configuration-timestamp"
// Path from root: "/system/state/last-configuration-timestamp"
func (n *SystemPath) LastConfigurationTimestamp() *System_LastConfigurationTimestampPath {
	return &System_LastConfigurationTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/last-configuration-timestamp"
// Path from root: "/system/state/last-configuration-timestamp"
func (n *SystemPathAny) LastConfigurationTimestamp() *System_LastConfigurationTimestampPathAny {
	return &System_LastConfigurationTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPath) License() *System_LicensePath {
	return &System_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// License (container): Container for license model
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "license"
// Path from root: "/system/license"
func (n *SystemPathAny) License() *System_LicensePathAny {
	return &System_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPath) Logging() *System_LoggingPath {
	return &System_LoggingPath{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logging (container): Top-level container for data related to logging / syslog
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "logging"
// Path from root: "/system/logging"
func (n *SystemPathAny) Logging() *System_LoggingPathAny {
	return &System_LoggingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/login-banner"
// Path from root: "/system/config/login-banner"
func (n *SystemPath) LoginBanner() *System_LoginBannerPath {
	return &System_LoginBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/login-banner"
// Path from root: "/system/config/login-banner"
func (n *SystemPathAny) LoginBanner() *System_LoginBannerPathAny {
	return &System_LoginBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "login-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mac-address"
// Path from root: "/system/mac-address"
func (n *SystemPath) MacAddress() *System_MacAddressPath {
	return &System_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mac-address"
// Path from root: "/system/mac-address"
func (n *SystemPathAny) MacAddress() *System_MacAddressPathAny {
	return &System_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPath) Memory() *System_MemoryPath {
	return &System_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): Top-level container for system memory data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "memory"
// Path from root: "/system/memory"
func (n *SystemPathAny) Memory() *System_MemoryPathAny {
	return &System_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPath) Messages() *System_MessagesPath {
	return &System_MessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// Messages (container): Top-level container for Syslog messages.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "messages"
// Path from root: "/system/messages"
func (n *SystemPathAny) Messages() *System_MessagesPathAny {
	return &System_MessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/motd-banner"
// Path from root: "/system/config/motd-banner"
func (n *SystemPath) MotdBanner() *System_MotdBannerPath {
	return &System_MotdBannerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/motd-banner"
// Path from root: "/system/config/motd-banner"
func (n *SystemPathAny) MotdBanner() *System_MotdBannerPathAny {
	return &System_MotdBannerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "motd-banner"},
			map[string]interface{}{},
			n,
		),
	}
}

// MountPointAny (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name (wildcarded): string
func (n *SystemPath) MountPointAny() *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// MountPointAny (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name (wildcarded): string
func (n *SystemPathAny) MountPointAny() *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// MountPoint (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name: string
func (n *SystemPath) MountPoint(Name string) *System_MountPointPath {
	return &System_MountPointPath{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// MountPoint (list): List of mount points in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "mount-points/mount-point"
// Path from root: "/system/mount-points/mount-point"
// Name: string
func (n *SystemPathAny) MountPoint(Name string) *System_MountPointPathAny {
	return &System_MountPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPath) Ntp() *System_NtpPath {
	return &System_NtpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ntp (container): Top-level container for NTP configuration and state
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp"
// Path from root: "/system/ntp"
func (n *SystemPathAny) Ntp() *System_NtpPathAny {
	return &System_NtpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProcessAny (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid (wildcarded): uint64
func (n *SystemPath) ProcessAny() *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
}

// ProcessAny (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid (wildcarded): uint64
func (n *SystemPathAny) ProcessAny() *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
}

// Process (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid: uint64
func (n *SystemPath) Process(Pid uint64) *System_ProcessPath {
	return &System_ProcessPath{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
}

// Process (list): List of monitored processes
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "processes/process"
// Path from root: "/system/processes/process"
// Pid: uint64
func (n *SystemPathAny) Process(Pid uint64) *System_ProcessPathAny {
	return &System_ProcessPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-version"
// Path from root: "/system/state/software-version"
func (n *SystemPath) SoftwareVersion() *System_SoftwareVersionPath {
	return &System_SoftwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-version"
// Path from root: "/system/state/software-version"
func (n *SystemPathAny) SoftwareVersion() *System_SoftwareVersionPathAny {
	return &System_SoftwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPath) SshServer() *System_SshServerPath {
	return &System_SshServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshServer (container): Top-level container for ssh server
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "ssh-server"
// Path from root: "/system/ssh-server"
func (n *SystemPathAny) SshServer() *System_SshServerPathAny {
	return &System_SshServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPath) TelnetServer() *System_TelnetServerPath {
	return &System_TelnetServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelnetServer (container): Top-level container for telnet terminal servers
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "telnet-server"
// Path from root: "/system/telnet-server"
func (n *SystemPathAny) TelnetServer() *System_TelnetServerPathAny {
	return &System_TelnetServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_AaaPath represents the /openconfig-system/system/aaa YANG schema element.
type System_AaaPath struct {
	*ygot.NodePath
}

// System_AaaPathAny represents the wildcard version of the /openconfig-system/system/aaa YANG schema element.
type System_AaaPathAny struct {
	*ygot.NodePath
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPath) Accounting() *System_Aaa_AccountingPath {
	return &System_Aaa_AccountingPath{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Accounting (container): Top-level container for AAA accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "accounting"
// Path from root: "/system/aaa/accounting"
func (n *System_AaaPathAny) Accounting() *System_Aaa_AccountingPathAny {
	return &System_Aaa_AccountingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPath) Authentication() *System_Aaa_AuthenticationPath {
	return &System_Aaa_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Top-level container for global authentication data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authentication"
// Path from root: "/system/aaa/authentication"
func (n *System_AaaPathAny) Authentication() *System_Aaa_AuthenticationPathAny {
	return &System_Aaa_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPath) Authorization() *System_Aaa_AuthorizationPath {
	return &System_Aaa_AuthorizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "authorization"
// Path from root: "/system/aaa/authorization"
func (n *System_AaaPathAny) Authorization() *System_Aaa_AuthorizationPathAny {
	return &System_Aaa_AuthorizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPath) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name (wildcarded): string
func (n *System_AaaPathAny) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPath) ServerGroup(Name string) *System_Aaa_ServerGroupPath {
	return &System_Aaa_ServerGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "server-groups/server-group"
// Path from root: "/system/aaa/server-groups/server-group"
// Name: string
func (n *System_AaaPathAny) ServerGroup(Name string) *System_Aaa_ServerGroupPathAny {
	return &System_Aaa_ServerGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// System_Aaa_AccountingPath represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPath struct {
	*ygot.NodePath
}

// System_Aaa_AccountingPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPath represents the /openconfig-system/system/aaa/accounting/config/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_AccountingMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/config/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPathAny struct {
	*ygot.NodePath
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/accounting-method"
// Path from root: "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_AccountingPath) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPath {
	return &System_Aaa_Accounting_AccountingMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/accounting-method"
// Path from root: "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_AccountingPathAny) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPathAny {
	return &System_Aaa_Accounting_AccountingMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accounting-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) EventAny() *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) Event(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPath {
	return &System_Aaa_Accounting_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to accounting
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/accounting/events/event"
// EventType: E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) Event(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPathAny {
	return &System_Aaa_Accounting_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Accounting_EventPath represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePath represents the /openconfig-system/system/aaa/accounting/events/event/config/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/config/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPath represents the /openconfig-system/system/aaa/accounting/events/event/config/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPath struct {
	*ygot.NodePath
}

// System_Aaa_Accounting_Event_RecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/config/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_EventPath) EventType() *System_Aaa_Accounting_Event_EventTypePath {
	return &System_Aaa_Accounting_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_EventPathAny) EventType() *System_Aaa_Accounting_Event_EventTypePathAny {
	return &System_Aaa_Accounting_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/record"
// Path from root: "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_EventPath) Record() *System_Aaa_Accounting_Event_RecordPath {
	return &System_Aaa_Accounting_Event_RecordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/record"
// Path from root: "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_EventPathAny) Record() *System_Aaa_Accounting_Event_RecordPathAny {
	return &System_Aaa_Accounting_Event_RecordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthenticationPath represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthenticationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPath represents the /openconfig-system/system/aaa/authentication/config/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AuthenticationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/config/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPathAny struct {
	*ygot.NodePath
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPath) AdminUser() *System_Aaa_Authentication_AdminUserPath {
	return &System_Aaa_Authentication_AdminUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "admin-user"
// Path from root: "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPathAny) AdminUser() *System_Aaa_Authentication_AdminUserPathAny {
	return &System_Aaa_Authentication_AdminUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authentication-method"
// Path from root: "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_AuthenticationPath) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPath {
	return &System_Aaa_Authentication_AuthenticationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authentication-method"
// Path from root: "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_AuthenticationPathAny) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPathAny {
	return &System_Aaa_Authentication_AuthenticationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authentication-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPath) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// UserAny (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username (wildcarded): string
func (n *System_Aaa_AuthenticationPathAny) UserAny() *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPath) User(Username string) *System_Aaa_Authentication_UserPath {
	return &System_Aaa_Authentication_UserPath{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// User (list): List of local users on the system
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "users/user"
// Path from root: "/system/aaa/authentication/users/user"
// Username: string
func (n *System_Aaa_AuthenticationPathAny) User(Username string) *System_Aaa_Authentication_UserPathAny {
	return &System_Aaa_Authentication_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
}

// System_Aaa_Authentication_AdminUserPath represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPath represents the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath represents the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/config/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePathAny struct {
	*ygot.NodePath
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/admin-password-hashed"
// Path from root: "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny {
	return &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-username"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPath) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePath {
	return &System_Aaa_Authentication_AdminUser_AdminUsernamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/admin-username"
// Path from root: "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny {
	return &System_Aaa_Authentication_AdminUser_AdminUsernamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_Authentication_UserPath represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_UserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPath represents the /openconfig-system/system/aaa/authentication/users/user/config/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPath represents the /openconfig-system/system/aaa/authentication/users/user/config/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_PasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePath represents the /openconfig-system/system/aaa/authentication/users/user/config/role YANG schema element.
type System_Aaa_Authentication_User_RolePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_RolePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/role YANG schema element.
type System_Aaa_Authentication_User_RolePathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPath represents the /openconfig-system/system/aaa/authentication/users/user/config/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_SshKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePath represents the /openconfig-system/system/aaa/authentication/users/user/config/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePath struct {
	*ygot.NodePath
}

// System_Aaa_Authentication_User_UsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/config/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePathAny struct {
	*ygot.NodePath
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password"
// Path from root: "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_UserPath) Password() *System_Aaa_Authentication_User_PasswordPath {
	return &System_Aaa_Authentication_User_PasswordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password"
// Path from root: "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_UserPathAny) Password() *System_Aaa_Authentication_User_PasswordPathAny {
	return &System_Aaa_Authentication_User_PasswordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_UserPath) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPath {
	return &System_Aaa_Authentication_User_PasswordHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/password-hashed"
// Path from root: "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_UserPathAny) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPathAny {
	return &System_Aaa_Authentication_User_PasswordHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "password-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/role"
// Path from root: "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_UserPath) Role() *System_Aaa_Authentication_User_RolePath {
	return &System_Aaa_Authentication_User_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/role"
// Path from root: "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_UserPathAny) Role() *System_Aaa_Authentication_User_RolePathAny {
	return &System_Aaa_Authentication_User_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_UserPath) SshKey() *System_Aaa_Authentication_User_SshKeyPath {
	return &System_Aaa_Authentication_User_SshKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ssh-key"
// Path from root: "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_UserPathAny) SshKey() *System_Aaa_Authentication_User_SshKeyPathAny {
	return &System_Aaa_Authentication_User_SshKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssh-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/username"
// Path from root: "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_UserPath) Username() *System_Aaa_Authentication_User_UsernamePath {
	return &System_Aaa_Authentication_User_UsernamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// Username (leaf): Assigned username for this user
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/username"
// Path from root: "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_UserPathAny) Username() *System_Aaa_Authentication_User_UsernamePathAny {
	return &System_Aaa_Authentication_User_UsernamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "username"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_AuthorizationPath represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPath struct {
	*ygot.NodePath
}

// System_Aaa_AuthorizationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPath represents the /openconfig-system/system/aaa/authorization/config/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_AuthorizationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/config/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPathAny struct {
	*ygot.NodePath
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authorization-method"
// Path from root: "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_AuthorizationPath) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPath {
	return &System_Aaa_Authorization_AuthorizationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/authorization-method"
// Path from root: "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_AuthorizationPathAny) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPathAny {
	return &System_Aaa_Authorization_AuthorizationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "authorization-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// EventAny (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType (wildcarded): E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) EventAny() *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) Event(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPath {
	return &System_Aaa_Authorization_EventPath{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// Event (list): List of events subject to AAA authorization
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "events/event"
// Path from root: "/system/aaa/authorization/events/event"
// EventType: E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) Event(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPathAny {
	return &System_Aaa_Authorization_EventPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
}

// System_Aaa_Authorization_EventPath represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathAny struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePath represents the /openconfig-system/system/aaa/authorization/events/event/config/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePath struct {
	*ygot.NodePath
}

// System_Aaa_Authorization_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event/config/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePathAny struct {
	*ygot.NodePath
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_EventPath) EventType() *System_Aaa_Authorization_Event_EventTypePath {
	return &System_Aaa_Authorization_Event_EventTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/event-type"
// Path from root: "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_EventPathAny) EventType() *System_Aaa_Authorization_Event_EventTypePathAny {
	return &System_Aaa_Authorization_Event_EventTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "event-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroupPath represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroupPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/config/name YANG schema element.
type System_Aaa_ServerGroup_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/config/name YANG schema element.
type System_Aaa_ServerGroup_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePath represents the /openconfig-system/system/aaa/server-groups/server-group/config/type YANG schema element.
type System_Aaa_ServerGroup_TypePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/config/type YANG schema element.
type System_Aaa_ServerGroup_TypePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroupPath) Name() *System_Aaa_ServerGroup_NamePath {
	return &System_Aaa_ServerGroup_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name for the server group
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroupPathAny) Name() *System_Aaa_ServerGroup_NamePathAny {
	return &System_Aaa_ServerGroup_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPath) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address (wildcarded): string
func (n *System_Aaa_ServerGroupPathAny) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPath) Server(Address string) *System_Aaa_ServerGroup_ServerPath {
	return &System_Aaa_ServerGroup_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of AAA servers
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/aaa/server-groups/server-group/servers/server"
// Address: string
func (n *System_Aaa_ServerGroupPathAny) Server(Address string) *System_Aaa_ServerGroup_ServerPathAny {
	return &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/type"
// Path from root: "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroupPath) Type() *System_Aaa_ServerGroup_TypePath {
	return &System_Aaa_ServerGroup_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/type"
// Path from root: "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroupPathAny) Type() *System_Aaa_ServerGroup_TypePathAny {
	return &System_Aaa_ServerGroup_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_ServerPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_ServerPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesSentPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_MessagesSentPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPathAny struct {
	*ygot.NodePath
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_ServerPath) Address() *System_Aaa_ServerGroup_Server_AddressPath {
	return &System_Aaa_ServerGroup_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): Address of the authentication server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_ServerPathAny) Address() *System_Aaa_ServerGroup_Server_AddressPathAny {
	return &System_Aaa_ServerGroup_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-aborts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPath {
	return &System_Aaa_ServerGroup_Server_ConnectionAbortsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-aborts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-closes"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPath {
	return &System_Aaa_ServerGroup_Server_ConnectionClosesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-closes"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionClosesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionFailures (leaf): Number of connection failures to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-failures"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPath {
	return &System_Aaa_ServerGroup_Server_ConnectionFailuresPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionFailures (leaf): Number of connection failures to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-failures"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-opens"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPath {
	return &System_Aaa_ServerGroup_Server_ConnectionOpensPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-opens"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionOpensPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-timeouts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath {
	return &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/connection-timeouts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny {
	return &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErrorsReceived (leaf): Number of error messages received from the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/errors-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPath) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPath {
	return &System_Aaa_ServerGroup_Server_ErrorsReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErrorsReceived (leaf): Number of error messages received from the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/errors-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny {
	return &System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesReceived (leaf): Number of messages received by the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPath {
	return &System_Aaa_ServerGroup_Server_MessagesReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesReceived (leaf): Number of messages received by the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-received"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny {
	return &System_Aaa_ServerGroup_Server_MessagesReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesSent (leaf): Number of messages sent to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-sent"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPath {
	return &System_Aaa_ServerGroup_Server_MessagesSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// MessagesSent (leaf): Number of messages sent to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "state/messages-sent"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPathAny {
	return &System_Aaa_ServerGroup_Server_MessagesSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_ServerPath) Name() *System_Aaa_ServerGroup_Server_NamePath {
	return &System_Aaa_ServerGroup_Server_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name assigned to the server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_ServerPathAny) Name() *System_Aaa_ServerGroup_Server_NamePathAny {
	return &System_Aaa_ServerGroup_Server_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPath) Radius() *System_Aaa_ServerGroup_Server_RadiusPath {
	return &System_Aaa_ServerGroup_Server_RadiusPath{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Radius (container): Top-level container for RADIUS server data
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "radius"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPathAny) Radius() *System_Aaa_ServerGroup_Server_RadiusPathAny {
	return &System_Aaa_ServerGroup_Server_RadiusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPath) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPath {
	return &System_Aaa_ServerGroup_Server_TacacsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tacacs (container): Top-level container for TACACS+ server data
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "tacacs"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPathAny) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPathAny {
	return &System_Aaa_ServerGroup_Server_TacacsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_ServerPath) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPath {
	return &System_Aaa_ServerGroup_Server_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
// ----------------------------------------
// Defining module: "openconfig-aaa"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_ServerPathAny) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPathAny {
	return &System_Aaa_ServerGroup_Server_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_RadiusPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_RadiusPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny struct {
	*ygot.NodePath
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcctPort (leaf): Port number for accounting requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/acct-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "acct-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPath {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthPort (leaf): Port number for authentication requests
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/auth-port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auth-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of RADIUS related state objects.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPath {
	return &System_Aaa_ServerGroup_Server_Radius_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of RADIUS related state objects.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/retransmit-attempts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_Radius_CountersPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_CountersPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny struct {
	*ygot.NodePath
}

// AccessAccepts (leaf): Received Access-Accept messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-accepts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath{
		NodePath: ygot.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessAccepts (leaf): Received Access-Accept messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-accepts"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessRejects (leaf): Received Access-Reject messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-rejects"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath{
		NodePath: ygot.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessRejects (leaf): Received Access-Reject messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "access-rejects"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "retried-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath{
		NodePath: ygot.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "retried-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "timeout-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath{
		NodePath: ygot.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
// ----------------------------------------
// Defining module: "openconfig-aaa-radius"
// Instantiating module: "openconfig-system"
// Path from parent: "timeout-access-requests"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny {
	return &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Aaa_ServerGroup_Server_TacacsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_TacacsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number on which to contact the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/secret-key-hashed"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
// ----------------------------------------
// Defining module: "openconfig-aaa-tacacs"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny {
	return &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_AlarmPath represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPath struct {
	*ygot.NodePath
}

// System_AlarmPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathAny struct {
	*ygot.NodePath
}

// System_Alarm_IdPath represents the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPath struct {
	*ygot.NodePath
}

// System_Alarm_IdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPathAny struct {
	*ygot.NodePath
}

// System_Alarm_ResourcePath represents the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePath struct {
	*ygot.NodePath
}

// System_Alarm_ResourcePathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePathAny struct {
	*ygot.NodePath
}

// System_Alarm_SeverityPath represents the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPath struct {
	*ygot.NodePath
}

// System_Alarm_SeverityPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TextPath represents the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPath struct {
	*ygot.NodePath
}

// System_Alarm_TextPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TimeCreatedPath represents the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPath struct {
	*ygot.NodePath
}

// System_Alarm_TimeCreatedPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPathAny struct {
	*ygot.NodePath
}

// System_Alarm_TypeIdPath represents the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPath struct {
	*ygot.NodePath
}

// System_Alarm_TypeIdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPathAny struct {
	*ygot.NodePath
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/id"
// Path from root: "/system/alarms/alarm/state/id"
func (n *System_AlarmPath) Id() *System_Alarm_IdPath {
	return &System_Alarm_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/id"
// Path from root: "/system/alarms/alarm/state/id"
func (n *System_AlarmPathAny) Id() *System_Alarm_IdPathAny {
	return &System_Alarm_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/resource"
// Path from root: "/system/alarms/alarm/state/resource"
func (n *System_AlarmPath) Resource() *System_Alarm_ResourcePath {
	return &System_Alarm_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/resource"
// Path from root: "/system/alarms/alarm/state/resource"
func (n *System_AlarmPathAny) Resource() *System_Alarm_ResourcePathAny {
	return &System_Alarm_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/alarms/alarm/state/severity"
func (n *System_AlarmPath) Severity() *System_Alarm_SeverityPath {
	return &System_Alarm_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/severity"
// Path from root: "/system/alarms/alarm/state/severity"
func (n *System_AlarmPathAny) Severity() *System_Alarm_SeverityPathAny {
	return &System_Alarm_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/text"
// Path from root: "/system/alarms/alarm/state/text"
func (n *System_AlarmPath) Text() *System_Alarm_TextPath {
	return &System_Alarm_TextPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
	}
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/text"
// Path from root: "/system/alarms/alarm/state/text"
func (n *System_AlarmPathAny) Text() *System_Alarm_TextPathAny {
	return &System_Alarm_TextPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/time-created"
// Path from root: "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPath) TimeCreated() *System_Alarm_TimeCreatedPath {
	return &System_Alarm_TimeCreatedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/time-created"
// Path from root: "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPathAny) TimeCreated() *System_Alarm_TimeCreatedPathAny {
	return &System_Alarm_TimeCreatedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
	}
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type-id"
// Path from root: "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPath) TypeId() *System_Alarm_TypeIdPath {
	return &System_Alarm_TypeIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-system"
// Path from parent: "state/type-id"
// Path from root: "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPathAny) TypeId() *System_Alarm_TypeIdPathAny {
	return &System_Alarm_TypeIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ClockPath represents the /openconfig-system/system/clock YANG schema element.
type System_ClockPath struct {
	*ygot.NodePath
}

// System_ClockPathAny represents the wildcard version of the /openconfig-system/system/clock YANG schema element.
type System_ClockPathAny struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePath represents the /openconfig-system/system/clock/config/timezone-name YANG schema element.
type System_Clock_TimezoneNamePath struct {
	*ygot.NodePath
}

// System_Clock_TimezoneNamePathAny represents the wildcard version of the /openconfig-system/system/clock/config/timezone-name YANG schema element.
type System_Clock_TimezoneNamePathAny struct {
	*ygot.NodePath
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timezone-name"
// Path from root: "/system/clock/config/timezone-name"
func (n *System_ClockPath) TimezoneName() *System_Clock_TimezoneNamePath {
	return &System_Clock_TimezoneNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timezone-name"
// Path from root: "/system/clock/config/timezone-name"
func (n *System_ClockPathAny) TimezoneName() *System_Clock_TimezoneNamePathAny {
	return &System_Clock_TimezoneNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timezone-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_CpuPath represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPath struct {
	*ygot.NodePath
}

// System_CpuPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPathAny struct {
	*ygot.NodePath
}

// System_Cpu_IndexPath represents the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPath struct {
	*ygot.NodePath
}

// System_Cpu_IndexPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPathAny struct {
	*ygot.NodePath
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hardware-interrupt"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPath) HardwareInterrupt() *System_Cpu_HardwareInterruptPath {
	return &System_Cpu_HardwareInterruptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/hardware-interrupt"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPathAny) HardwareInterrupt() *System_Cpu_HardwareInterruptPathAny {
	return &System_Cpu_HardwareInterruptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Idle (container): Percentage of CPU time spent idle.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/idle"
// Path from root: "/system/cpus/cpu/state/idle"
func (n *System_CpuPath) Idle() *System_Cpu_IdlePath {
	return &System_Cpu_IdlePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
}

// Idle (container): Percentage of CPU time spent idle.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/idle"
// Path from root: "/system/cpus/cpu/state/idle"
func (n *System_CpuPathAny) Idle() *System_Cpu_IdlePathAny {
	return &System_Cpu_IdlePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/index"
// Path from root: "/system/cpus/cpu/state/index"
func (n *System_CpuPath) Index() *System_Cpu_IndexPath {
	return &System_Cpu_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/index"
// Path from root: "/system/cpus/cpu/state/index"
func (n *System_CpuPathAny) Index() *System_Cpu_IndexPathAny {
	return &System_Cpu_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/kernel"
// Path from root: "/system/cpus/cpu/state/kernel"
func (n *System_CpuPath) Kernel() *System_Cpu_KernelPath {
	return &System_Cpu_KernelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/kernel"
// Path from root: "/system/cpus/cpu/state/kernel"
func (n *System_CpuPathAny) Kernel() *System_Cpu_KernelPathAny {
	return &System_Cpu_KernelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/nice"
// Path from root: "/system/cpus/cpu/state/nice"
func (n *System_CpuPath) Nice() *System_Cpu_NicePath {
	return &System_Cpu_NicePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/nice"
// Path from root: "/system/cpus/cpu/state/nice"
func (n *System_CpuPathAny) Nice() *System_Cpu_NicePathAny {
	return &System_Cpu_NicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-interrupt"
// Path from root: "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPath) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPath {
	return &System_Cpu_SoftwareInterruptPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/software-interrupt"
// Path from root: "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPathAny) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPathAny {
	return &System_Cpu_SoftwareInterruptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Total (container): Total CPU utilization.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/total"
// Path from root: "/system/cpus/cpu/state/total"
func (n *System_CpuPath) Total() *System_Cpu_TotalPath {
	return &System_Cpu_TotalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
}

// Total (container): Total CPU utilization.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/total"
// Path from root: "/system/cpus/cpu/state/total"
func (n *System_CpuPathAny) Total() *System_Cpu_TotalPathAny {
	return &System_Cpu_TotalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
}

// User (container): Percentage of CPU time spent running in user space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/user"
// Path from root: "/system/cpus/cpu/state/user"
func (n *System_CpuPath) User() *System_Cpu_UserPath {
	return &System_Cpu_UserPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
}

// User (container): Percentage of CPU time spent running in user space.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/user"
// Path from root: "/system/cpus/cpu/state/user"
func (n *System_CpuPathAny) User() *System_Cpu_UserPathAny {
	return &System_Cpu_UserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/wait"
// Path from root: "/system/cpus/cpu/state/wait"
func (n *System_CpuPath) Wait() *System_Cpu_WaitPath {
	return &System_Cpu_WaitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/wait"
// Path from root: "/system/cpus/cpu/state/wait"
func (n *System_CpuPathAny) Wait() *System_Cpu_WaitPathAny {
	return &System_Cpu_WaitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_HardwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_HardwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPath) Avg() *System_Cpu_HardwareInterrupt_AvgPath {
	return &System_Cpu_HardwareInterrupt_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPathAny) Avg() *System_Cpu_HardwareInterrupt_AvgPathAny {
	return &System_Cpu_HardwareInterrupt_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPath) Instant() *System_Cpu_HardwareInterrupt_InstantPath {
	return &System_Cpu_HardwareInterrupt_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPathAny) Instant() *System_Cpu_HardwareInterrupt_InstantPathAny {
	return &System_Cpu_HardwareInterrupt_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPath) Interval() *System_Cpu_HardwareInterrupt_IntervalPath {
	return &System_Cpu_HardwareInterrupt_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPathAny) Interval() *System_Cpu_HardwareInterrupt_IntervalPathAny {
	return &System_Cpu_HardwareInterrupt_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPath) Max() *System_Cpu_HardwareInterrupt_MaxPath {
	return &System_Cpu_HardwareInterrupt_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPathAny) Max() *System_Cpu_HardwareInterrupt_MaxPathAny {
	return &System_Cpu_HardwareInterrupt_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPath) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePath {
	return &System_Cpu_HardwareInterrupt_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPathAny) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePathAny {
	return &System_Cpu_HardwareInterrupt_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPath) Min() *System_Cpu_HardwareInterrupt_MinPath {
	return &System_Cpu_HardwareInterrupt_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPathAny) Min() *System_Cpu_HardwareInterrupt_MinPathAny {
	return &System_Cpu_HardwareInterrupt_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPath) MinTime() *System_Cpu_HardwareInterrupt_MinTimePath {
	return &System_Cpu_HardwareInterrupt_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPathAny) MinTime() *System_Cpu_HardwareInterrupt_MinTimePathAny {
	return &System_Cpu_HardwareInterrupt_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_IdlePath represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePath struct {
	*ygot.NodePath
}

// System_Cpu_IdlePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_AvgPath represents the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_InstantPath represents the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxPath represents the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinPath represents the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Idle_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePath) Avg() *System_Cpu_Idle_AvgPath {
	return &System_Cpu_Idle_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePathAny) Avg() *System_Cpu_Idle_AvgPathAny {
	return &System_Cpu_Idle_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePath) Instant() *System_Cpu_Idle_InstantPath {
	return &System_Cpu_Idle_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePathAny) Instant() *System_Cpu_Idle_InstantPathAny {
	return &System_Cpu_Idle_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePath) Interval() *System_Cpu_Idle_IntervalPath {
	return &System_Cpu_Idle_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePathAny) Interval() *System_Cpu_Idle_IntervalPathAny {
	return &System_Cpu_Idle_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePath) Max() *System_Cpu_Idle_MaxPath {
	return &System_Cpu_Idle_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePathAny) Max() *System_Cpu_Idle_MaxPathAny {
	return &System_Cpu_Idle_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePath) MaxTime() *System_Cpu_Idle_MaxTimePath {
	return &System_Cpu_Idle_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePathAny) MaxTime() *System_Cpu_Idle_MaxTimePathAny {
	return &System_Cpu_Idle_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePath) Min() *System_Cpu_Idle_MinPath {
	return &System_Cpu_Idle_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePathAny) Min() *System_Cpu_Idle_MinPathAny {
	return &System_Cpu_Idle_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePath) MinTime() *System_Cpu_Idle_MinTimePath {
	return &System_Cpu_Idle_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePathAny) MinTime() *System_Cpu_Idle_MinTimePathAny {
	return &System_Cpu_Idle_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_KernelPath represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPath struct {
	*ygot.NodePath
}

// System_Cpu_KernelPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_AvgPath represents the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_InstantPath represents the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxPath represents the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinPath represents the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Kernel_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPath) Avg() *System_Cpu_Kernel_AvgPath {
	return &System_Cpu_Kernel_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPathAny) Avg() *System_Cpu_Kernel_AvgPathAny {
	return &System_Cpu_Kernel_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPath) Instant() *System_Cpu_Kernel_InstantPath {
	return &System_Cpu_Kernel_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPathAny) Instant() *System_Cpu_Kernel_InstantPathAny {
	return &System_Cpu_Kernel_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPath) Interval() *System_Cpu_Kernel_IntervalPath {
	return &System_Cpu_Kernel_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPathAny) Interval() *System_Cpu_Kernel_IntervalPathAny {
	return &System_Cpu_Kernel_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPath) Max() *System_Cpu_Kernel_MaxPath {
	return &System_Cpu_Kernel_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPathAny) Max() *System_Cpu_Kernel_MaxPathAny {
	return &System_Cpu_Kernel_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPath) MaxTime() *System_Cpu_Kernel_MaxTimePath {
	return &System_Cpu_Kernel_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPathAny) MaxTime() *System_Cpu_Kernel_MaxTimePathAny {
	return &System_Cpu_Kernel_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPath) Min() *System_Cpu_Kernel_MinPath {
	return &System_Cpu_Kernel_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPathAny) Min() *System_Cpu_Kernel_MinPathAny {
	return &System_Cpu_Kernel_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPath) MinTime() *System_Cpu_Kernel_MinTimePath {
	return &System_Cpu_Kernel_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPathAny) MinTime() *System_Cpu_Kernel_MinTimePathAny {
	return &System_Cpu_Kernel_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_NicePath represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePath struct {
	*ygot.NodePath
}

// System_Cpu_NicePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_AvgPath represents the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_InstantPath represents the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxPath represents the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinPath represents the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Nice_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePath) Avg() *System_Cpu_Nice_AvgPath {
	return &System_Cpu_Nice_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePathAny) Avg() *System_Cpu_Nice_AvgPathAny {
	return &System_Cpu_Nice_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePath) Instant() *System_Cpu_Nice_InstantPath {
	return &System_Cpu_Nice_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePathAny) Instant() *System_Cpu_Nice_InstantPathAny {
	return &System_Cpu_Nice_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePath) Interval() *System_Cpu_Nice_IntervalPath {
	return &System_Cpu_Nice_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePathAny) Interval() *System_Cpu_Nice_IntervalPathAny {
	return &System_Cpu_Nice_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePath) Max() *System_Cpu_Nice_MaxPath {
	return &System_Cpu_Nice_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePathAny) Max() *System_Cpu_Nice_MaxPathAny {
	return &System_Cpu_Nice_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePath) MaxTime() *System_Cpu_Nice_MaxTimePath {
	return &System_Cpu_Nice_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePathAny) MaxTime() *System_Cpu_Nice_MaxTimePathAny {
	return &System_Cpu_Nice_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePath) Min() *System_Cpu_Nice_MinPath {
	return &System_Cpu_Nice_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePathAny) Min() *System_Cpu_Nice_MinPathAny {
	return &System_Cpu_Nice_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePath) MinTime() *System_Cpu_Nice_MinTimePath {
	return &System_Cpu_Nice_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePathAny) MinTime() *System_Cpu_Nice_MinTimePathAny {
	return &System_Cpu_Nice_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_SoftwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_SoftwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPath) Avg() *System_Cpu_SoftwareInterrupt_AvgPath {
	return &System_Cpu_SoftwareInterrupt_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPathAny) Avg() *System_Cpu_SoftwareInterrupt_AvgPathAny {
	return &System_Cpu_SoftwareInterrupt_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPath) Instant() *System_Cpu_SoftwareInterrupt_InstantPath {
	return &System_Cpu_SoftwareInterrupt_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPathAny) Instant() *System_Cpu_SoftwareInterrupt_InstantPathAny {
	return &System_Cpu_SoftwareInterrupt_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPath) Interval() *System_Cpu_SoftwareInterrupt_IntervalPath {
	return &System_Cpu_SoftwareInterrupt_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPathAny) Interval() *System_Cpu_SoftwareInterrupt_IntervalPathAny {
	return &System_Cpu_SoftwareInterrupt_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPath) Max() *System_Cpu_SoftwareInterrupt_MaxPath {
	return &System_Cpu_SoftwareInterrupt_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPathAny) Max() *System_Cpu_SoftwareInterrupt_MaxPathAny {
	return &System_Cpu_SoftwareInterrupt_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPath) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePath {
	return &System_Cpu_SoftwareInterrupt_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePathAny {
	return &System_Cpu_SoftwareInterrupt_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPath) Min() *System_Cpu_SoftwareInterrupt_MinPath {
	return &System_Cpu_SoftwareInterrupt_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPathAny) Min() *System_Cpu_SoftwareInterrupt_MinPathAny {
	return &System_Cpu_SoftwareInterrupt_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPath) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePath {
	return &System_Cpu_SoftwareInterrupt_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePathAny {
	return &System_Cpu_SoftwareInterrupt_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}
