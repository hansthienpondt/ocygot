/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                                `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                               `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                               `path:"state/@attr-index" ygotAnnotation:"true"`
	Color              *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                               `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                               `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                               `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                               `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                               `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                               `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                               `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                               `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                               `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct {
	ΛMetadata []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	LocRib    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	ΛLocRib   []ygot.Annotation                                                         `path:"@loc-rib" ygotAnnotation:"true"`
	Neighbor  map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                         `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocRib.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct {
	ΛMetadata []ygot.Annotation                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                            `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key struct {
	Prefix string                                                                         `path:"prefix"`
	Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                                         `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"origin":  t.Origin,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) NewRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) DeleteRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct {
	ΛMetadata          []ygot.Annotation                                                                             `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                             `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                             `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                             `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                             `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                             `path:"state/@last-modified" ygotAnnotation:"true"`
	Origin             NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOrigin            []ygot.Annotation                                                                             `path:"state/@origin|@origin" ygotAnnotation:"true"`
	PathId             *uint32                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                             `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                             `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                             `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                             `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrigin() NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct {
	ΛMetadata        []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	AdjRibInPost     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	ΛAdjRibInPost    []ygot.Annotation                                                            `path:"@adj-rib-in-post" ygotAnnotation:"true"`
	AdjRibInPre      *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	ΛAdjRibInPre     []ygot.Annotation                                                            `path:"@adj-rib-in-pre" ygotAnnotation:"true"`
	AdjRibOutPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	ΛAdjRibOutPost   []ygot.Annotation                                                            `path:"@adj-rib-out-post" ygotAnnotation:"true"`
	AdjRibOutPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	ΛAdjRibOutPre    []ygot.Annotation                                                            `path:"@adj-rib-out-pre" ygotAnnotation:"true"`
	NeighborAddress  *string                                                                      `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛNeighborAddress []ygot.Annotation                                                            `path:"state/@neighbor-address|@neighbor-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdjRibInPost.PopulateDefaults()
	t.AdjRibInPre.PopulateDefaults()
	t.AdjRibOutPost.PopulateDefaults()
	t.AdjRibOutPre.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                          `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                            `path:"state/@attr-index" ygotAnnotation:"true"`
	BestPath           *bool                                                                                                        `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestPath          []ygot.Annotation                                                                                            `path:"state/@best-path" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                            `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                            `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                            `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                            `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                            `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                            `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                            `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                            `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                        `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                           `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                           `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                           `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                           `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                           `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                           `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                     `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                           `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                     `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                           `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                           `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                           `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                            `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                             `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                             `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                             `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                             `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                             `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                             `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                             `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                             `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                             `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                          `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                            `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                            `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                            `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                            `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                            `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                            `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                            `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                            `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                            `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct {
	ΛMetadata []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	LocRib    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	ΛLocRib   []ygot.Annotation                                                            `path:"@loc-rib" ygotAnnotation:"true"`
	Neighbor  map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                            `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocRib.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct {
	ΛMetadata []ygot.Annotation                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                  `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                `path:"state/@attr-index" ygotAnnotation:"true"`
	Color              *uint32                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct {
	ΛMetadata        []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AdjRibInPost     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	ΛAdjRibInPost    []ygot.Annotation                                                               `path:"@adj-rib-in-post" ygotAnnotation:"true"`
	AdjRibInPre      *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	ΛAdjRibInPre     []ygot.Annotation                                                               `path:"@adj-rib-in-pre" ygotAnnotation:"true"`
	AdjRibOutPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	ΛAdjRibOutPost   []ygot.Annotation                                                               `path:"@adj-rib-out-post" ygotAnnotation:"true"`
	AdjRibOutPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	ΛAdjRibOutPre    []ygot.Annotation                                                               `path:"@adj-rib-out-pre" ygotAnnotation:"true"`
	NeighborAddress  *string                                                                         `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛNeighborAddress []ygot.Annotation                                                               `path:"state/@neighbor-address|@neighbor-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdjRibInPost.PopulateDefaults()
	t.AdjRibInPre.PopulateDefaults()
	t.AdjRibOutPost.PopulateDefaults()
	t.AdjRibOutPre.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                                `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                               `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                               `path:"state/@attr-index" ygotAnnotation:"true"`
	BestPath           *bool                                                                                                           `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestPath          []ygot.Annotation                                                                                               `path:"state/@best-path" ygotAnnotation:"true"`
	Color              *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                               `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                               `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                               `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                               `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                               `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                               `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                               `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                               `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                               `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                              `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                              `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                        `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                              `path:"state/@attr-index" ygotAnnotation:"true"`
	Color              *uint32                                                                                                        `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                              `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                        `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                              `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                        `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                              `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                        `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                              `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                             `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                              `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                        `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                              `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                        `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                              `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                              `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                          `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                              `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                  `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                                  `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                                `path:"state/@attr-index" ygotAnnotation:"true"`
	Color              *uint32                                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                                `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                                `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                                `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                                `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                                `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                                `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                                `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                                `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                                `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                                `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"path-id":  t.PathId,
		"endpoint": t.Endpoint,
		"color":    t.Color,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                               `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                               `path:"state/@attr-index" ygotAnnotation:"true"`
	Color              *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                               `path:"state/@color|@color" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                               `path:"state/@community-index" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                               `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                               `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                               `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                               `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                               `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                               `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                               `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct {
	ΛMetadata []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	LocRib    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	ΛLocRib   []ygot.Annotation                                                         `path:"@loc-rib" ygotAnnotation:"true"`
	Neighbor  map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                         `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocRib.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct {
	ΛMetadata []ygot.Annotation                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                            `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key struct {
	Prefix string                                                                         `path:"prefix"`
	Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                                         `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"origin":  t.Origin,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) NewRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) DeleteRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct {
	ΛMetadata          []ygot.Annotation                                                                             `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                             `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                             `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                             `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                             `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                             `path:"state/@last-modified" ygotAnnotation:"true"`
	Origin             NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOrigin            []ygot.Annotation                                                                             `path:"state/@origin|@origin" ygotAnnotation:"true"`
	PathId             *uint32                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                             `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                             `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                             `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                             `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrigin() NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathId == nil {
		var v uint32 = 0
		t.PathId = &v
	}
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct {
	ΛMetadata        []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	AdjRibInPost     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	ΛAdjRibInPost    []ygot.Annotation                                                            `path:"@adj-rib-in-post" ygotAnnotation:"true"`
	AdjRibInPre      *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	ΛAdjRibInPre     []ygot.Annotation                                                            `path:"@adj-rib-in-pre" ygotAnnotation:"true"`
	AdjRibOutPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	ΛAdjRibOutPost   []ygot.Annotation                                                            `path:"@adj-rib-out-post" ygotAnnotation:"true"`
	AdjRibOutPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	ΛAdjRibOutPre    []ygot.Annotation                                                            `path:"@adj-rib-out-pre" ygotAnnotation:"true"`
	NeighborAddress  *string                                                                      `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛNeighborAddress []ygot.Annotation                                                            `path:"state/@neighbor-address|@neighbor-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdjRibInPost.PopulateDefaults()
	t.AdjRibInPre.PopulateDefaults()
	t.AdjRibOutPost.PopulateDefaults()
	t.AdjRibOutPre.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                          `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                            `path:"state/@attr-index" ygotAnnotation:"true"`
	BestPath           *bool                                                                                                        `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestPath          []ygot.Annotation                                                                                            `path:"state/@best-path" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                            `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                            `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                            `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                            `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                            `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                            `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                            `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                            `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                        `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                           `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                           `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                           `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                           `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                           `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                           `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                     `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                           `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                     `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                           `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                           `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                           `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                            `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                            `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                             `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                             `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                             `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                             `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                             `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                             `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                             `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                             `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                             `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	Route     map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRoute    []ygot.Annotation                                                                                                                                                          `path:"routes/@route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"prefix":  t.Prefix,
		"path-id": t.PathId,
	}, nil
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct {
	ΛMetadata          []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	AttrIndex          *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex         []ygot.Annotation                                                                                            `path:"state/@attr-index" ygotAnnotation:"true"`
	CommunityIndex     *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex    []ygot.Annotation                                                                                            `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex  *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex []ygot.Annotation                                                                                            `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason      E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason     []ygot.Annotation                                                                                            `path:"state/@invalid-reason" ygotAnnotation:"true"`
	LastModified       *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified      []ygot.Annotation                                                                                            `path:"state/@last-modified" ygotAnnotation:"true"`
	PathId             *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPathId            []ygot.Annotation                                                                                            `path:"state/@path-id|@path-id" ygotAnnotation:"true"`
	Prefix             *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix            []ygot.Annotation                                                                                            `path:"state/@prefix|@prefix" ygotAnnotation:"true"`
	UnknownAttribute   map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute  []ygot.Annotation                                                                                            `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute         *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute        []ygot.Annotation                                                                                            `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	LocRib    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	ΛLocRib   []ygot.Annotation                                                       `path:"@loc-rib" ygotAnnotation:"true"`
	Neighbor  map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor []ygot.Annotation                                                       `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocRib.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib struct {
	ΛMetadata           []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	RouteDistinguisher  map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher `path:"routes/route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRouteDistinguisher []ygot.Annotation                                                                        `path:"routes/@route-distinguisher" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) IsYANGGoStruct() {}

// NewRouteDistinguisher creates a new entry in the RouteDistinguisher list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) NewRouteDistinguisher(RouteDistinguisher string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDistinguisher == nil {
		t.RouteDistinguisher = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher)
	}

	key := RouteDistinguisher

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteDistinguisher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteDistinguisher", key)
	}

	t.RouteDistinguisher[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher{
		RouteDistinguisher: &RouteDistinguisher,
	}

	return t.RouteDistinguisher[key], nil
}

// RenameRouteDistinguisher renames an entry in the list RouteDistinguisher within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) RenameRouteDistinguisher(oldK, newK string) error {
	if _, ok := t.RouteDistinguisher[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteDistinguisher", newK)
	}

	e, ok := t.RouteDistinguisher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteDistinguisher", oldK)
	}
	e.RouteDistinguisher = &newK

	t.RouteDistinguisher[newK] = e
	delete(t.RouteDistinguisher, oldK)
	return nil
}

// GetOrCreateRouteDistinguisher retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) GetOrCreateRouteDistinguisher(RouteDistinguisher string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher {

	key := RouteDistinguisher

	if v, ok := t.RouteDistinguisher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteDistinguisher(RouteDistinguisher)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteDistinguisher got unexpected error: %v", err))
	}
	return v
}

// GetRouteDistinguisher retrieves the value with the specified key from
// the RouteDistinguisher map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) GetRouteDistinguisher(RouteDistinguisher string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher {

	if t == nil {
		return nil
	}

	key := RouteDistinguisher

	if lm, ok := t.RouteDistinguisher[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteDistinguisher deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) DeleteRouteDistinguisher(RouteDistinguisher string) {
	key := RouteDistinguisher

	delete(t.RouteDistinguisher, key)
}

// AppendRouteDistinguisher appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct to the
// list RouteDistinguisher of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) AppendRouteDistinguisher(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) error {
	if v.RouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key received for RouteDistinguisher")
	}

	key := *v.RouteDistinguisher

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteDistinguisher == nil {
		t.RouteDistinguisher = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher)
	}

	if _, ok := t.RouteDistinguisher[key]; ok {
		return fmt.Errorf("duplicate key for list RouteDistinguisher %v", key)
	}

	t.RouteDistinguisher[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteDistinguisher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct {
	ΛMetadata           []ygot.Annotation                                                                                                                                                                                `path:"@" ygotAnnotation:"true"`
	RouteDistinguisher  *string                                                                                                                                                                                          `path:"state/route-distinguisher|route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛRouteDistinguisher []ygot.Annotation                                                                                                                                                                                `path:"state/@route-distinguisher|@route-distinguisher" ygotAnnotation:"true"`
	TypeFiveRoute       map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute   `path:"type-five-ip-prefix/type-five-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTypeFiveRoute      []ygot.Annotation                                                                                                                                                                                `path:"type-five-ip-prefix/@type-five-route" ygotAnnotation:"true"`
	TypeFourRoute       map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute   `path:"type-four-ethernet-segment/type-four-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTypeFourRoute      []ygot.Annotation                                                                                                                                                                                `path:"type-four-ethernet-segment/@type-four-route" ygotAnnotation:"true"`
	TypeOneRoute        map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute     `path:"type-one-ethernet-auto-discovery/type-one-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTypeOneRoute       []ygot.Annotation                                                                                                                                                                                `path:"type-one-ethernet-auto-discovery/@type-one-route" ygotAnnotation:"true"`
	TypeThreeRoute      map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute `path:"type-three-inclusive-multicast-ethernet-tag/type-three-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTypeThreeRoute     []ygot.Annotation                                                                                                                                                                                `path:"type-three-inclusive-multicast-ethernet-tag/@type-three-route" ygotAnnotation:"true"`
	TypeTwoRoute        map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute     `path:"type-two-mac-ip-advertisement/type-two-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTypeTwoRoute       []ygot.Annotation                                                                                                                                                                                `path:"type-two-mac-ip-advertisement/@type-two-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key represents the key for list TypeFiveRoute of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key struct {
	EthernetTag    uint32 `path:"ethernet-tag"`
	IpPrefixLength string `path:"ip-prefix-length"`
	IpPrefix       string `path:"ip-prefix"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ethernet-tag":     t.EthernetTag,
		"ip-prefix-length": t.IpPrefixLength,
		"ip-prefix":        t.IpPrefix,
	}, nil
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key represents the key for list TypeFourRoute of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key struct {
	Esi                 string `path:"esi"`
	OriginatingRouterIp string `path:"originating-router-ip"`
	OriginatorIpLength  uint32 `path:"originator-ip-length"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"esi":                   t.Esi,
		"originating-router-ip": t.OriginatingRouterIp,
		"originator-ip-length":  t.OriginatorIpLength,
	}, nil
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key represents the key for list TypeOneRoute of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key struct {
	Esi         string `path:"esi"`
	EthernetTag uint32 `path:"ethernet-tag"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"esi":          t.Esi,
		"ethernet-tag": t.EthernetTag,
	}, nil
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key represents the key for list TypeThreeRoute of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key struct {
	EthernetTag         uint32 `path:"ethernet-tag"`
	OriginatingRouterIp string `path:"originating-router-ip"`
	OriginatorIpLength  uint32 `path:"originator-ip-length"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ethernet-tag":          t.EthernetTag,
		"originating-router-ip": t.OriginatingRouterIp,
		"originator-ip-length":  t.OriginatorIpLength,
	}, nil
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key represents the key for list TypeTwoRoute of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key struct {
	EthernetTag uint32 `path:"ethernet-tag"`
	MacAddress  string `path:"mac-address"`
	MacLength   uint32 `path:"mac-length"`
	IpPrefix    string `path:"ip-prefix"`
	IpLength    uint32 `path:"ip-length"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ethernet-tag": t.EthernetTag,
		"mac-address":  t.MacAddress,
		"mac-length":   t.MacLength,
		"ip-prefix":    t.IpPrefix,
		"ip-length":    t.IpLength,
	}, nil
}

// NewTypeFiveRoute creates a new entry in the TypeFiveRoute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) NewTypeFiveRoute(EthernetTag uint32, IpPrefixLength string, IpPrefix string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeFiveRoute == nil {
		t.TypeFiveRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key{
		EthernetTag:    EthernetTag,
		IpPrefixLength: IpPrefixLength,
		IpPrefix:       IpPrefix,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeFiveRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeFiveRoute", key)
	}

	t.TypeFiveRoute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute{
		EthernetTag:    &EthernetTag,
		IpPrefixLength: &IpPrefixLength,
		IpPrefix:       &IpPrefix,
	}

	return t.TypeFiveRoute[key], nil
}

// RenameTypeFiveRoute renames an entry in the list TypeFiveRoute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) RenameTypeFiveRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key) error {
	if _, ok := t.TypeFiveRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeFiveRoute", newK)
	}

	e, ok := t.TypeFiveRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeFiveRoute", oldK)
	}
	e.EthernetTag = &newK.EthernetTag
	e.IpPrefixLength = &newK.IpPrefixLength
	e.IpPrefix = &newK.IpPrefix

	t.TypeFiveRoute[newK] = e
	delete(t.TypeFiveRoute, oldK)
	return nil
}

// GetOrCreateTypeFiveRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetOrCreateTypeFiveRoute(EthernetTag uint32, IpPrefixLength string, IpPrefix string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key{
		EthernetTag:    EthernetTag,
		IpPrefixLength: IpPrefixLength,
		IpPrefix:       IpPrefix,
	}

	if v, ok := t.TypeFiveRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeFiveRoute(EthernetTag, IpPrefixLength, IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeFiveRoute got unexpected error: %v", err))
	}
	return v
}

// GetTypeFiveRoute retrieves the value with the specified key from
// the TypeFiveRoute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetTypeFiveRoute(EthernetTag uint32, IpPrefixLength string, IpPrefix string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key{
		EthernetTag:    EthernetTag,
		IpPrefixLength: IpPrefixLength,
		IpPrefix:       IpPrefix,
	}

	if lm, ok := t.TypeFiveRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeFiveRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) DeleteTypeFiveRoute(EthernetTag uint32, IpPrefixLength string, IpPrefix string) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key{
		EthernetTag:    EthernetTag,
		IpPrefixLength: IpPrefixLength,
		IpPrefix:       IpPrefix,
	}

	delete(t.TypeFiveRoute, key)
}

// AppendTypeFiveRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute struct to the
// list TypeFiveRoute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) AppendTypeFiveRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) error {
	if v.EthernetTag == nil {
		return fmt.Errorf("invalid nil key for EthernetTag")
	}

	if v.IpPrefixLength == nil {
		return fmt.Errorf("invalid nil key for IpPrefixLength")
	}

	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key{
		EthernetTag:    *v.EthernetTag,
		IpPrefixLength: *v.IpPrefixLength,
		IpPrefix:       *v.IpPrefix,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeFiveRoute == nil {
		t.TypeFiveRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute)
	}

	if _, ok := t.TypeFiveRoute[key]; ok {
		return fmt.Errorf("duplicate key for list TypeFiveRoute %v", key)
	}

	t.TypeFiveRoute[key] = v
	return nil
}

// NewTypeFourRoute creates a new entry in the TypeFourRoute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) NewTypeFourRoute(Esi string, OriginatingRouterIp string, OriginatorIpLength uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeFourRoute == nil {
		t.TypeFourRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key{
		Esi:                 Esi,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeFourRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeFourRoute", key)
	}

	t.TypeFourRoute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute{
		Esi:                 &Esi,
		OriginatingRouterIp: &OriginatingRouterIp,
		OriginatorIpLength:  &OriginatorIpLength,
	}

	return t.TypeFourRoute[key], nil
}

// RenameTypeFourRoute renames an entry in the list TypeFourRoute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) RenameTypeFourRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key) error {
	if _, ok := t.TypeFourRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeFourRoute", newK)
	}

	e, ok := t.TypeFourRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeFourRoute", oldK)
	}
	e.Esi = &newK.Esi
	e.OriginatingRouterIp = &newK.OriginatingRouterIp
	e.OriginatorIpLength = &newK.OriginatorIpLength

	t.TypeFourRoute[newK] = e
	delete(t.TypeFourRoute, oldK)
	return nil
}

// GetOrCreateTypeFourRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetOrCreateTypeFourRoute(Esi string, OriginatingRouterIp string, OriginatorIpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key{
		Esi:                 Esi,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	if v, ok := t.TypeFourRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeFourRoute(Esi, OriginatingRouterIp, OriginatorIpLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeFourRoute got unexpected error: %v", err))
	}
	return v
}

// GetTypeFourRoute retrieves the value with the specified key from
// the TypeFourRoute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetTypeFourRoute(Esi string, OriginatingRouterIp string, OriginatorIpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key{
		Esi:                 Esi,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	if lm, ok := t.TypeFourRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeFourRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) DeleteTypeFourRoute(Esi string, OriginatingRouterIp string, OriginatorIpLength uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key{
		Esi:                 Esi,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	delete(t.TypeFourRoute, key)
}

// AppendTypeFourRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute struct to the
// list TypeFourRoute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) AppendTypeFourRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) error {
	if v.Esi == nil {
		return fmt.Errorf("invalid nil key for Esi")
	}

	if v.OriginatingRouterIp == nil {
		return fmt.Errorf("invalid nil key for OriginatingRouterIp")
	}

	if v.OriginatorIpLength == nil {
		return fmt.Errorf("invalid nil key for OriginatorIpLength")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key{
		Esi:                 *v.Esi,
		OriginatingRouterIp: *v.OriginatingRouterIp,
		OriginatorIpLength:  *v.OriginatorIpLength,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeFourRoute == nil {
		t.TypeFourRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute)
	}

	if _, ok := t.TypeFourRoute[key]; ok {
		return fmt.Errorf("duplicate key for list TypeFourRoute %v", key)
	}

	t.TypeFourRoute[key] = v
	return nil
}

// NewTypeOneRoute creates a new entry in the TypeOneRoute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) NewTypeOneRoute(Esi string, EthernetTag uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOneRoute == nil {
		t.TypeOneRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key{
		Esi:         Esi,
		EthernetTag: EthernetTag,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeOneRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeOneRoute", key)
	}

	t.TypeOneRoute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute{
		Esi:         &Esi,
		EthernetTag: &EthernetTag,
	}

	return t.TypeOneRoute[key], nil
}

// RenameTypeOneRoute renames an entry in the list TypeOneRoute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) RenameTypeOneRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key) error {
	if _, ok := t.TypeOneRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeOneRoute", newK)
	}

	e, ok := t.TypeOneRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeOneRoute", oldK)
	}
	e.Esi = &newK.Esi
	e.EthernetTag = &newK.EthernetTag

	t.TypeOneRoute[newK] = e
	delete(t.TypeOneRoute, oldK)
	return nil
}

// GetOrCreateTypeOneRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetOrCreateTypeOneRoute(Esi string, EthernetTag uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key{
		Esi:         Esi,
		EthernetTag: EthernetTag,
	}

	if v, ok := t.TypeOneRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeOneRoute(Esi, EthernetTag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeOneRoute got unexpected error: %v", err))
	}
	return v
}

// GetTypeOneRoute retrieves the value with the specified key from
// the TypeOneRoute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetTypeOneRoute(Esi string, EthernetTag uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key{
		Esi:         Esi,
		EthernetTag: EthernetTag,
	}

	if lm, ok := t.TypeOneRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeOneRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) DeleteTypeOneRoute(Esi string, EthernetTag uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key{
		Esi:         Esi,
		EthernetTag: EthernetTag,
	}

	delete(t.TypeOneRoute, key)
}

// AppendTypeOneRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute struct to the
// list TypeOneRoute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) AppendTypeOneRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) error {
	if v.Esi == nil {
		return fmt.Errorf("invalid nil key for Esi")
	}

	if v.EthernetTag == nil {
		return fmt.Errorf("invalid nil key for EthernetTag")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key{
		Esi:         *v.Esi,
		EthernetTag: *v.EthernetTag,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOneRoute == nil {
		t.TypeOneRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute)
	}

	if _, ok := t.TypeOneRoute[key]; ok {
		return fmt.Errorf("duplicate key for list TypeOneRoute %v", key)
	}

	t.TypeOneRoute[key] = v
	return nil
}

// NewTypeThreeRoute creates a new entry in the TypeThreeRoute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) NewTypeThreeRoute(EthernetTag uint32, OriginatingRouterIp string, OriginatorIpLength uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeThreeRoute == nil {
		t.TypeThreeRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key{
		EthernetTag:         EthernetTag,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeThreeRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeThreeRoute", key)
	}

	t.TypeThreeRoute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute{
		EthernetTag:         &EthernetTag,
		OriginatingRouterIp: &OriginatingRouterIp,
		OriginatorIpLength:  &OriginatorIpLength,
	}

	return t.TypeThreeRoute[key], nil
}

// RenameTypeThreeRoute renames an entry in the list TypeThreeRoute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) RenameTypeThreeRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key) error {
	if _, ok := t.TypeThreeRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeThreeRoute", newK)
	}

	e, ok := t.TypeThreeRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeThreeRoute", oldK)
	}
	e.EthernetTag = &newK.EthernetTag
	e.OriginatingRouterIp = &newK.OriginatingRouterIp
	e.OriginatorIpLength = &newK.OriginatorIpLength

	t.TypeThreeRoute[newK] = e
	delete(t.TypeThreeRoute, oldK)
	return nil
}

// GetOrCreateTypeThreeRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetOrCreateTypeThreeRoute(EthernetTag uint32, OriginatingRouterIp string, OriginatorIpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key{
		EthernetTag:         EthernetTag,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	if v, ok := t.TypeThreeRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeThreeRoute(EthernetTag, OriginatingRouterIp, OriginatorIpLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeThreeRoute got unexpected error: %v", err))
	}
	return v
}

// GetTypeThreeRoute retrieves the value with the specified key from
// the TypeThreeRoute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetTypeThreeRoute(EthernetTag uint32, OriginatingRouterIp string, OriginatorIpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key{
		EthernetTag:         EthernetTag,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	if lm, ok := t.TypeThreeRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeThreeRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) DeleteTypeThreeRoute(EthernetTag uint32, OriginatingRouterIp string, OriginatorIpLength uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key{
		EthernetTag:         EthernetTag,
		OriginatingRouterIp: OriginatingRouterIp,
		OriginatorIpLength:  OriginatorIpLength,
	}

	delete(t.TypeThreeRoute, key)
}

// AppendTypeThreeRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute struct to the
// list TypeThreeRoute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) AppendTypeThreeRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) error {
	if v.EthernetTag == nil {
		return fmt.Errorf("invalid nil key for EthernetTag")
	}

	if v.OriginatingRouterIp == nil {
		return fmt.Errorf("invalid nil key for OriginatingRouterIp")
	}

	if v.OriginatorIpLength == nil {
		return fmt.Errorf("invalid nil key for OriginatorIpLength")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key{
		EthernetTag:         *v.EthernetTag,
		OriginatingRouterIp: *v.OriginatingRouterIp,
		OriginatorIpLength:  *v.OriginatorIpLength,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeThreeRoute == nil {
		t.TypeThreeRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute)
	}

	if _, ok := t.TypeThreeRoute[key]; ok {
		return fmt.Errorf("duplicate key for list TypeThreeRoute %v", key)
	}

	t.TypeThreeRoute[key] = v
	return nil
}

// NewTypeTwoRoute creates a new entry in the TypeTwoRoute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) NewTypeTwoRoute(EthernetTag uint32, MacAddress string, MacLength uint32, IpPrefix string, IpLength uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeTwoRoute == nil {
		t.TypeTwoRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key{
		EthernetTag: EthernetTag,
		MacAddress:  MacAddress,
		MacLength:   MacLength,
		IpPrefix:    IpPrefix,
		IpLength:    IpLength,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeTwoRoute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeTwoRoute", key)
	}

	t.TypeTwoRoute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute{
		EthernetTag: &EthernetTag,
		MacAddress:  &MacAddress,
		MacLength:   &MacLength,
		IpPrefix:    &IpPrefix,
		IpLength:    &IpLength,
	}

	return t.TypeTwoRoute[key], nil
}

// RenameTypeTwoRoute renames an entry in the list TypeTwoRoute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) RenameTypeTwoRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key) error {
	if _, ok := t.TypeTwoRoute[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeTwoRoute", newK)
	}

	e, ok := t.TypeTwoRoute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeTwoRoute", oldK)
	}
	e.EthernetTag = &newK.EthernetTag
	e.MacAddress = &newK.MacAddress
	e.MacLength = &newK.MacLength
	e.IpPrefix = &newK.IpPrefix
	e.IpLength = &newK.IpLength

	t.TypeTwoRoute[newK] = e
	delete(t.TypeTwoRoute, oldK)
	return nil
}

// GetOrCreateTypeTwoRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetOrCreateTypeTwoRoute(EthernetTag uint32, MacAddress string, MacLength uint32, IpPrefix string, IpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key{
		EthernetTag: EthernetTag,
		MacAddress:  MacAddress,
		MacLength:   MacLength,
		IpPrefix:    IpPrefix,
		IpLength:    IpLength,
	}

	if v, ok := t.TypeTwoRoute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeTwoRoute(EthernetTag, MacAddress, MacLength, IpPrefix, IpLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeTwoRoute got unexpected error: %v", err))
	}
	return v
}

// GetTypeTwoRoute retrieves the value with the specified key from
// the TypeTwoRoute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetTypeTwoRoute(EthernetTag uint32, MacAddress string, MacLength uint32, IpPrefix string, IpLength uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key{
		EthernetTag: EthernetTag,
		MacAddress:  MacAddress,
		MacLength:   MacLength,
		IpPrefix:    IpPrefix,
		IpLength:    IpLength,
	}

	if lm, ok := t.TypeTwoRoute[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeTwoRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) DeleteTypeTwoRoute(EthernetTag uint32, MacAddress string, MacLength uint32, IpPrefix string, IpLength uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key{
		EthernetTag: EthernetTag,
		MacAddress:  MacAddress,
		MacLength:   MacLength,
		IpPrefix:    IpPrefix,
		IpLength:    IpLength,
	}

	delete(t.TypeTwoRoute, key)
}

// AppendTypeTwoRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute struct to the
// list TypeTwoRoute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) AppendTypeTwoRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) error {
	if v.EthernetTag == nil {
		return fmt.Errorf("invalid nil key for EthernetTag")
	}

	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key for MacAddress")
	}

	if v.MacLength == nil {
		return fmt.Errorf("invalid nil key for MacLength")
	}

	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.IpLength == nil {
		return fmt.Errorf("invalid nil key for IpLength")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key{
		EthernetTag: *v.EthernetTag,
		MacAddress:  *v.MacAddress,
		MacLength:   *v.MacLength,
		IpPrefix:    *v.IpPrefix,
		IpLength:    *v.IpLength,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeTwoRoute == nil {
		t.TypeTwoRoute = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute)
	}

	if _, ok := t.TypeTwoRoute[key]; ok {
		return fmt.Errorf("duplicate key for list TypeTwoRoute %v", key)
	}

	t.TypeTwoRoute[key] = v
	return nil
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) GetRouteDistinguisher() string {
	if t == nil || t.RouteDistinguisher == nil {
		return ""
	}
	return *t.RouteDistinguisher
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TypeFiveRoute {
		e.PopulateDefaults()
	}
	for _, e := range t.TypeFourRoute {
		e.PopulateDefaults()
	}
	for _, e := range t.TypeOneRoute {
		e.PopulateDefaults()
	}
	for _, e := range t.TypeThreeRoute {
		e.PopulateDefaults()
	}
	for _, e := range t.TypeTwoRoute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key RouteDistinguisher")
	}

	return map[string]interface{}{
		"route-distinguisher": *t.RouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-five-ip-prefix/type-five-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute struct {
	ΛMetadata       []ygot.Annotation                                                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	EthernetTag     *uint32                                                                                                                                                                                                  `path:"state/ethernet-tag|ethernet-tag" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEthernetTag    []ygot.Annotation                                                                                                                                                                                        `path:"state/@ethernet-tag|@ethernet-tag" ygotAnnotation:"true"`
	IpPrefix        *string                                                                                                                                                                                                  `path:"state/ip-prefix|ip-prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIpPrefix       []ygot.Annotation                                                                                                                                                                                        `path:"state/@ip-prefix|@ip-prefix" ygotAnnotation:"true"`
	IpPrefixLength  *string                                                                                                                                                                                                  `path:"state/ip-prefix-length|ip-prefix-length" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIpPrefixLength []ygot.Annotation                                                                                                                                                                                        `path:"state/@ip-prefix-length|@ip-prefix-length" ygotAnnotation:"true"`
	Path            map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path `path:"paths/path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPath           []ygot.Annotation                                                                                                                                                                                        `path:"paths/@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key represents the key for list Path of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-five-ip-prefix/type-five-route.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key struct {
	PeerIp                   string                   `path:"peer-ip"`
	PeerPathId               uint32                   `path:"peer-path-id"`
	SourceRouteDistinguisher string                   `path:"source-route-distinguisher"`
	SourceAddressFamily      E_BgpTypes_AFI_SAFI_TYPE `path:"source-address-family"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-ip":                    t.PeerIp,
		"peer-path-id":               t.PeerPathId,
		"source-route-distinguisher": t.SourceRouteDistinguisher,
		"source-address-family":      t.SourceAddressFamily,
	}, nil
}

// NewPath creates a new entry in the Path list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) NewPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path{
		PeerIp:                   &PeerIp,
		PeerPathId:               &PeerPathId,
		SourceRouteDistinguisher: &SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) RenamePath(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PeerIp = &newK.PeerIp
	e.PeerPathId = &newK.PeerPathId
	e.SourceRouteDistinguisher = &newK.SourceRouteDistinguisher
	e.SourceAddressFamily = newK.SourceAddressFamily

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) GetOrCreatePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PeerIp, PeerPathId, SourceRouteDistinguisher, SourceAddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) GetPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) DeletePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	delete(t.Path, key)
}

// AppendPath appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path struct to the
// list Path of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) AppendPath(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) error {
	if v.PeerIp == nil {
		return fmt.Errorf("invalid nil key for PeerIp")
	}

	if v.PeerPathId == nil {
		return fmt.Errorf("invalid nil key for PeerPathId")
	}

	if v.SourceRouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key for SourceRouteDistinguisher")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key{
		PeerIp:                   *v.PeerIp,
		PeerPathId:               *v.PeerPathId,
		SourceRouteDistinguisher: *v.SourceRouteDistinguisher,
		SourceAddressFamily:      v.SourceAddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpPrefixLength retrieves the value of the leaf IpPrefixLength from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixLength is set, it can
// safely use t.GetIpPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) GetIpPrefixLength() string {
	if t == nil || t.IpPrefixLength == nil {
		return ""
	}
	return *t.IpPrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetTag == nil {
		return nil, fmt.Errorf("nil value for key EthernetTag")
	}

	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.IpPrefixLength == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixLength")
	}

	return map[string]interface{}{
		"ethernet-tag":     *t.EthernetTag,
		"ip-prefix":        *t.IpPrefix,
		"ip-prefix-length": *t.IpPrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-five-ip-prefix/type-five-route/paths/path YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path struct {
	ΛMetadata                 []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	AdvertisedToPeer          []string                                                                                                                    `path:"state/advertised-to-peer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertisedToPeer         []ygot.Annotation                                                                                                           `path:"state/@advertised-to-peer" ygotAnnotation:"true"`
	AttrIndex                 *uint64                                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex                []ygot.Annotation                                                                                                           `path:"state/@attr-index" ygotAnnotation:"true"`
	Backup                    *bool                                                                                                                       `path:"state/backup" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBackup                   []ygot.Annotation                                                                                                           `path:"state/@backup" ygotAnnotation:"true"`
	Bestpath                  *bool                                                                                                                       `path:"state/bestpath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestpath                 []ygot.Annotation                                                                                                           `path:"state/@bestpath" ygotAnnotation:"true"`
	CommunityIndex            *uint64                                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex           []ygot.Annotation                                                                                                           `path:"state/@community-index" ygotAnnotation:"true"`
	Esi                       *string                                                                                                                     `path:"state/esi" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEsi                      []ygot.Annotation                                                                                                           `path:"state/@esi" ygotAnnotation:"true"`
	ExtCommunityIndex         *uint64                                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex        []ygot.Annotation                                                                                                           `path:"state/@ext-community-index" ygotAnnotation:"true"`
	GatewayIpAddress          *string                                                                                                                     `path:"state/gateway-ip-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛGatewayIpAddress         []ygot.Annotation                                                                                                           `path:"state/@gateway-ip-address" ygotAnnotation:"true"`
	InvalidReason             E_RibBgpTypes_INVALID_ROUTE_REASON                                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason            []ygot.Annotation                                                                                                           `path:"state/@invalid-reason" ygotAnnotation:"true"`
	Label                     *string                                                                                                                     `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel                    []ygot.Annotation                                                                                                           `path:"state/@label" ygotAnnotation:"true"`
	Label2                    *string                                                                                                                     `path:"state/label2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel2                   []ygot.Annotation                                                                                                           `path:"state/@label2" ygotAnnotation:"true"`
	LastModified              *uint64                                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified             []ygot.Annotation                                                                                                           `path:"state/@last-modified" ygotAnnotation:"true"`
	Multipath                 *bool                                                                                                                       `path:"state/multipath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMultipath                []ygot.Annotation                                                                                                           `path:"state/@multipath" ygotAnnotation:"true"`
	PeerIp                    *string                                                                                                                     `path:"state/peer-ip|peer-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerIp                   []ygot.Annotation                                                                                                           `path:"state/@peer-ip|@peer-ip" ygotAnnotation:"true"`
	PeerPathId                *uint32                                                                                                                     `path:"state/peer-path-id|peer-path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerPathId               []ygot.Annotation                                                                                                           `path:"state/@peer-path-id|@peer-path-id" ygotAnnotation:"true"`
	SourceAddressFamily       E_BgpTypes_AFI_SAFI_TYPE                                                                                                    `path:"state/source-address-family|source-address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceAddressFamily      []ygot.Annotation                                                                                                           `path:"state/@source-address-family|@source-address-family" ygotAnnotation:"true"`
	SourceRouteDistinguisher  *string                                                                                                                     `path:"state/source-route-distinguisher|source-route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceRouteDistinguisher []ygot.Annotation                                                                                                           `path:"state/@source-route-distinguisher|@source-route-distinguisher" ygotAnnotation:"true"`
	UnknownAttribute          map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute         []ygot.Annotation                                                                                                           `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute                *bool                                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute               []ygot.Annotation                                                                                                           `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAdvertisedToPeer retrieves the value of the leaf AdvertisedToPeer from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedToPeer is set, it can
// safely use t.GetAdvertisedToPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedToPeer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetAdvertisedToPeer() []string {
	if t == nil || t.AdvertisedToPeer == nil {
		return nil
	}
	return t.AdvertisedToPeer
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBackup retrieves the value of the leaf Backup from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetBackup() bool {
	if t == nil || t.Backup == nil {
		return false
	}
	return *t.Backup
}

// GetBestpath retrieves the value of the leaf Bestpath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bestpath is set, it can
// safely use t.GetBestpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bestpath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetBestpath() bool {
	if t == nil || t.Bestpath == nil {
		return false
	}
	return *t.Bestpath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEsi retrieves the value of the leaf Esi from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetGatewayIpAddress retrieves the value of the leaf GatewayIpAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayIpAddress is set, it can
// safely use t.GetGatewayIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayIpAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetGatewayIpAddress() string {
	if t == nil || t.GatewayIpAddress == nil {
		return ""
	}
	return *t.GatewayIpAddress
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetLabel() string {
	if t == nil || t.Label == nil {
		return ""
	}
	return *t.Label
}

// GetLabel2 retrieves the value of the leaf Label2 from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label2 is set, it can
// safely use t.GetLabel2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetLabel2() string {
	if t == nil || t.Label2 == nil {
		return ""
	}
	return *t.Label2
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetMultipath retrieves the value of the leaf Multipath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipath is set, it can
// safely use t.GetMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetMultipath() bool {
	if t == nil || t.Multipath == nil {
		return false
	}
	return *t.Multipath
}

// GetPeerIp retrieves the value of the leaf PeerIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIp is set, it can
// safely use t.GetPeerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetPeerIp() string {
	if t == nil || t.PeerIp == nil {
		return ""
	}
	return *t.PeerIp
}

// GetPeerPathId retrieves the value of the leaf PeerPathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPathId is set, it can
// safely use t.GetPeerPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetPeerPathId() uint32 {
	if t == nil || t.PeerPathId == nil {
		return 0
	}
	return *t.PeerPathId
}

// GetSourceAddressFamily retrieves the value of the leaf SourceAddressFamily from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressFamily is set, it can
// safely use t.GetSourceAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetSourceAddressFamily() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.SourceAddressFamily == 0 {
		return 0
	}
	return t.SourceAddressFamily
}

// GetSourceRouteDistinguisher retrieves the value of the leaf SourceRouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceRouteDistinguisher is set, it can
// safely use t.GetSourceRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetSourceRouteDistinguisher() string {
	if t == nil || t.SourceRouteDistinguisher == nil {
		return ""
	}
	return *t.SourceRouteDistinguisher
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIp == nil {
		return nil, fmt.Errorf("nil value for key PeerIp")
	}

	if t.PeerPathId == nil {
		return nil, fmt.Errorf("nil value for key PeerPathId")
	}

	if t.SourceRouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key SourceRouteDistinguisher")
	}

	return map[string]interface{}{
		"peer-ip":                    *t.PeerIp,
		"peer-path-id":               *t.PeerPathId,
		"source-address-family":      t.SourceAddressFamily,
		"source-route-distinguisher": *t.SourceRouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-five-ip-prefix/type-five-route/paths/path/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFiveRoute_Path_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-four-ethernet-segment/type-four-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute struct {
	ΛMetadata            []ygot.Annotation                                                                                                                                                                                        `path:"@" ygotAnnotation:"true"`
	Esi                  *string                                                                                                                                                                                                  `path:"state/esi|esi" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEsi                 []ygot.Annotation                                                                                                                                                                                        `path:"state/@esi|@esi" ygotAnnotation:"true"`
	OriginatingRouterIp  *string                                                                                                                                                                                                  `path:"state/originating-router-ip|originating-router-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatingRouterIp []ygot.Annotation                                                                                                                                                                                        `path:"state/@originating-router-ip|@originating-router-ip" ygotAnnotation:"true"`
	OriginatorIpLength   *uint32                                                                                                                                                                                                  `path:"state/originator-ip-length|originator-ip-length" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatorIpLength  []ygot.Annotation                                                                                                                                                                                        `path:"state/@originator-ip-length|@originator-ip-length" ygotAnnotation:"true"`
	Path                 map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path `path:"paths/path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPath                []ygot.Annotation                                                                                                                                                                                        `path:"paths/@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key represents the key for list Path of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-four-ethernet-segment/type-four-route.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key struct {
	PeerIp                   string                   `path:"peer-ip"`
	PeerPathId               uint32                   `path:"peer-path-id"`
	SourceRouteDistinguisher string                   `path:"source-route-distinguisher"`
	SourceAddressFamily      E_BgpTypes_AFI_SAFI_TYPE `path:"source-address-family"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-ip":                    t.PeerIp,
		"peer-path-id":               t.PeerPathId,
		"source-route-distinguisher": t.SourceRouteDistinguisher,
		"source-address-family":      t.SourceAddressFamily,
	}, nil
}

// NewPath creates a new entry in the Path list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) NewPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path{
		PeerIp:                   &PeerIp,
		PeerPathId:               &PeerPathId,
		SourceRouteDistinguisher: &SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) RenamePath(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PeerIp = &newK.PeerIp
	e.PeerPathId = &newK.PeerPathId
	e.SourceRouteDistinguisher = &newK.SourceRouteDistinguisher
	e.SourceAddressFamily = newK.SourceAddressFamily

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) GetOrCreatePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PeerIp, PeerPathId, SourceRouteDistinguisher, SourceAddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) GetPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) DeletePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	delete(t.Path, key)
}

// AppendPath appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path struct to the
// list Path of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) AppendPath(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) error {
	if v.PeerIp == nil {
		return fmt.Errorf("invalid nil key for PeerIp")
	}

	if v.PeerPathId == nil {
		return fmt.Errorf("invalid nil key for PeerPathId")
	}

	if v.SourceRouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key for SourceRouteDistinguisher")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key{
		PeerIp:                   *v.PeerIp,
		PeerPathId:               *v.PeerPathId,
		SourceRouteDistinguisher: *v.SourceRouteDistinguisher,
		SourceAddressFamily:      v.SourceAddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetEsi retrieves the value of the leaf Esi from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetOriginatingRouterIp retrieves the value of the leaf OriginatingRouterIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatingRouterIp is set, it can
// safely use t.GetOriginatingRouterIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatingRouterIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) GetOriginatingRouterIp() string {
	if t == nil || t.OriginatingRouterIp == nil {
		return ""
	}
	return *t.OriginatingRouterIp
}

// GetOriginatorIpLength retrieves the value of the leaf OriginatorIpLength from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorIpLength is set, it can
// safely use t.GetOriginatorIpLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorIpLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) GetOriginatorIpLength() uint32 {
	if t == nil || t.OriginatorIpLength == nil {
		return 0
	}
	return *t.OriginatorIpLength
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Esi == nil {
		return nil, fmt.Errorf("nil value for key Esi")
	}

	if t.OriginatingRouterIp == nil {
		return nil, fmt.Errorf("nil value for key OriginatingRouterIp")
	}

	if t.OriginatorIpLength == nil {
		return nil, fmt.Errorf("nil value for key OriginatorIpLength")
	}

	return map[string]interface{}{
		"esi":                   *t.Esi,
		"originating-router-ip": *t.OriginatingRouterIp,
		"originator-ip-length":  *t.OriginatorIpLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-four-ethernet-segment/type-four-route/paths/path YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path struct {
	ΛMetadata                 []ygot.Annotation                                                                                                           `path:"@" ygotAnnotation:"true"`
	AdvertisedToPeer          []string                                                                                                                    `path:"state/advertised-to-peer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertisedToPeer         []ygot.Annotation                                                                                                           `path:"state/@advertised-to-peer" ygotAnnotation:"true"`
	AttrIndex                 *uint64                                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex                []ygot.Annotation                                                                                                           `path:"state/@attr-index" ygotAnnotation:"true"`
	Backup                    *bool                                                                                                                       `path:"state/backup" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBackup                   []ygot.Annotation                                                                                                           `path:"state/@backup" ygotAnnotation:"true"`
	Bestpath                  *bool                                                                                                                       `path:"state/bestpath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestpath                 []ygot.Annotation                                                                                                           `path:"state/@bestpath" ygotAnnotation:"true"`
	CommunityIndex            *uint64                                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex           []ygot.Annotation                                                                                                           `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex         *uint64                                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex        []ygot.Annotation                                                                                                           `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason             E_RibBgpTypes_INVALID_ROUTE_REASON                                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason            []ygot.Annotation                                                                                                           `path:"state/@invalid-reason" ygotAnnotation:"true"`
	Label                     *string                                                                                                                     `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel                    []ygot.Annotation                                                                                                           `path:"state/@label" ygotAnnotation:"true"`
	Label2                    *string                                                                                                                     `path:"state/label2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel2                   []ygot.Annotation                                                                                                           `path:"state/@label2" ygotAnnotation:"true"`
	LastModified              *uint64                                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified             []ygot.Annotation                                                                                                           `path:"state/@last-modified" ygotAnnotation:"true"`
	Multipath                 *bool                                                                                                                       `path:"state/multipath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMultipath                []ygot.Annotation                                                                                                           `path:"state/@multipath" ygotAnnotation:"true"`
	PeerIp                    *string                                                                                                                     `path:"state/peer-ip|peer-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerIp                   []ygot.Annotation                                                                                                           `path:"state/@peer-ip|@peer-ip" ygotAnnotation:"true"`
	PeerPathId                *uint32                                                                                                                     `path:"state/peer-path-id|peer-path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerPathId               []ygot.Annotation                                                                                                           `path:"state/@peer-path-id|@peer-path-id" ygotAnnotation:"true"`
	SourceAddressFamily       E_BgpTypes_AFI_SAFI_TYPE                                                                                                    `path:"state/source-address-family|source-address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceAddressFamily      []ygot.Annotation                                                                                                           `path:"state/@source-address-family|@source-address-family" ygotAnnotation:"true"`
	SourceRouteDistinguisher  *string                                                                                                                     `path:"state/source-route-distinguisher|source-route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceRouteDistinguisher []ygot.Annotation                                                                                                           `path:"state/@source-route-distinguisher|@source-route-distinguisher" ygotAnnotation:"true"`
	UnknownAttribute          map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute         []ygot.Annotation                                                                                                           `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute                *bool                                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute               []ygot.Annotation                                                                                                           `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAdvertisedToPeer retrieves the value of the leaf AdvertisedToPeer from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedToPeer is set, it can
// safely use t.GetAdvertisedToPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedToPeer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetAdvertisedToPeer() []string {
	if t == nil || t.AdvertisedToPeer == nil {
		return nil
	}
	return t.AdvertisedToPeer
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBackup retrieves the value of the leaf Backup from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetBackup() bool {
	if t == nil || t.Backup == nil {
		return false
	}
	return *t.Backup
}

// GetBestpath retrieves the value of the leaf Bestpath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bestpath is set, it can
// safely use t.GetBestpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bestpath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetBestpath() bool {
	if t == nil || t.Bestpath == nil {
		return false
	}
	return *t.Bestpath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetLabel() string {
	if t == nil || t.Label == nil {
		return ""
	}
	return *t.Label
}

// GetLabel2 retrieves the value of the leaf Label2 from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label2 is set, it can
// safely use t.GetLabel2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetLabel2() string {
	if t == nil || t.Label2 == nil {
		return ""
	}
	return *t.Label2
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetMultipath retrieves the value of the leaf Multipath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipath is set, it can
// safely use t.GetMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetMultipath() bool {
	if t == nil || t.Multipath == nil {
		return false
	}
	return *t.Multipath
}

// GetPeerIp retrieves the value of the leaf PeerIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIp is set, it can
// safely use t.GetPeerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetPeerIp() string {
	if t == nil || t.PeerIp == nil {
		return ""
	}
	return *t.PeerIp
}

// GetPeerPathId retrieves the value of the leaf PeerPathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPathId is set, it can
// safely use t.GetPeerPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetPeerPathId() uint32 {
	if t == nil || t.PeerPathId == nil {
		return 0
	}
	return *t.PeerPathId
}

// GetSourceAddressFamily retrieves the value of the leaf SourceAddressFamily from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressFamily is set, it can
// safely use t.GetSourceAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetSourceAddressFamily() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.SourceAddressFamily == 0 {
		return 0
	}
	return t.SourceAddressFamily
}

// GetSourceRouteDistinguisher retrieves the value of the leaf SourceRouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceRouteDistinguisher is set, it can
// safely use t.GetSourceRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetSourceRouteDistinguisher() string {
	if t == nil || t.SourceRouteDistinguisher == nil {
		return ""
	}
	return *t.SourceRouteDistinguisher
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIp == nil {
		return nil, fmt.Errorf("nil value for key PeerIp")
	}

	if t.PeerPathId == nil {
		return nil, fmt.Errorf("nil value for key PeerPathId")
	}

	if t.SourceRouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key SourceRouteDistinguisher")
	}

	return map[string]interface{}{
		"peer-ip":                    *t.PeerIp,
		"peer-path-id":               *t.PeerPathId,
		"source-address-family":      t.SourceAddressFamily,
		"source-route-distinguisher": *t.SourceRouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-four-ethernet-segment/type-four-route/paths/path/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeFourRoute_Path_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}
