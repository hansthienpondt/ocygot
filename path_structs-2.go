/*
Package ocygot is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"github.com/openconfig/ygot/ygot"
)

// Interface_RoutedVlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan YANG schema element.
type Interface_RoutedVlan_VlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan YANG schema element.
type Interface_RoutedVlan_VlanPathAny struct {
	*ygot.NodePath
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPath) Ipv4() *Interface_RoutedVlan_Ipv4Path {
	return &Interface_RoutedVlan_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPathAny) Ipv4() *Interface_RoutedVlan_Ipv4PathAny {
	return &Interface_RoutedVlan_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPath) Ipv6() *Interface_RoutedVlan_Ipv6Path {
	return &Interface_RoutedVlan_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPathAny) Ipv6() *Interface_RoutedVlan_Ipv6PathAny {
	return &Interface_RoutedVlan_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan"
// Path from root: "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlanPath) Vlan() *Interface_RoutedVlan_VlanPath {
	return &Interface_RoutedVlan_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan"
// Path from root: "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlanPathAny) Vlan() *Interface_RoutedVlan_VlanPathAny {
	return &Interface_RoutedVlan_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPath {
	return &Interface_RoutedVlan_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4Path) Counters() *Interface_RoutedVlan_Ipv4_CountersPath {
	return &Interface_RoutedVlan_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4PathAny) Counters() *Interface_RoutedVlan_Ipv4_CountersPathAny {
	return &Interface_RoutedVlan_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4Path) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4PathAny) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4Path) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4PathAny) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4Path) Mtu() *Interface_RoutedVlan_Ipv4_MtuPath {
	return &Interface_RoutedVlan_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4PathAny) Mtu() *Interface_RoutedVlan_Ipv4_MtuPathAny {
	return &Interface_RoutedVlan_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPath {
	return &Interface_RoutedVlan_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4Path) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPath {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4PathAny) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4Path) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4PathAny) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_TypePathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPath {
	return &Interface_RoutedVlan_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Type() *Interface_RoutedVlan_Ipv4_Address_TypePath {
	return &Interface_RoutedVlan_Ipv4_Address_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Type() *Interface_RoutedVlan_Ipv4_Address_TypePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastOctets() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutMulticastPkts() *Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPath {
	return &Interface_RoutedVlan_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6Path) Counters() *Interface_RoutedVlan_Ipv6_CountersPath {
	return &Interface_RoutedVlan_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6PathAny) Counters() *Interface_RoutedVlan_Ipv6_CountersPathAny {
	return &Interface_RoutedVlan_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6Path) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6PathAny) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6Path) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6PathAny) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6Path) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6PathAny) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6Path) Mtu() *Interface_RoutedVlan_Ipv6_MtuPath {
	return &Interface_RoutedVlan_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6PathAny) Mtu() *Interface_RoutedVlan_Ipv6_MtuPathAny {
	return &Interface_RoutedVlan_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPath {
	return &Interface_RoutedVlan_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6Path) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6PathAny) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6Path) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6PathAny) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_TypePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_TypePathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPath {
	return &Interface_RoutedVlan_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPath {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Type() *Interface_RoutedVlan_Ipv6_Address_TypePath {
	return &Interface_RoutedVlan_Ipv6_Address_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/type"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Type() *Interface_RoutedVlan_Ipv6_Address_TypePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutMulticastOctets() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutMulticastPkts() *Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Enable() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/enable"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Enable() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/managed"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Managed() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "managed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/managed"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/managed"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Managed() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ManagedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "managed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Mode() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/mode"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Mode() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/other-config"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) OtherConfig() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "other-config"},
			map[string]interface{}{},
			n,
		),
	}
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/other-config"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/other-config"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) OtherConfig() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_OtherConfigPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "other-config"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
// Prefix (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) PrefixAny() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
// Prefix (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) PrefixAny() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
// Prefix: string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Prefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix"
// Prefix: string
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Prefix(Prefix string) *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygot.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-autoconfiguration"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-autoconfiguration"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-onlink"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-onlink"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preferred-lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preferred-lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/valid-lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/valid-lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_SonetPath represents the /openconfig-interfaces/interfaces/interface/sonet YANG schema element.
type Interface_SonetPath struct {
	*ygot.NodePath
}

// Interface_SonetPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/sonet YANG schema element.
type Interface_SonetPathAny struct {
	*ygot.NodePath
}

// Interface_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/description YANG schema element.
type Interface_Subinterface_DescriptionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/description YANG schema element.
type Interface_Subinterface_DescriptionPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/enabled YANG schema element.
type Interface_Subinterface_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/enabled YANG schema element.
type Interface_Subinterface_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/index YANG schema element.
type Interface_Subinterface_IndexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/index YANG schema element.
type Interface_Subinterface_IndexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePath) AdminStatus() *Interface_Subinterface_AdminStatusPath {
	return &Interface_Subinterface_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePathAny) AdminStatus() *Interface_Subinterface_AdminStatusPathAny {
	return &Interface_Subinterface_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePath) Counters() *Interface_Subinterface_CountersPath {
	return &Interface_Subinterface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface specific statistics entitites which are
// not common to subinterfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePathAny) Counters() *Interface_Subinterface_CountersPathAny {
	return &Interface_Subinterface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePath) Cpu() *Interface_Subinterface_CpuPath {
	return &Interface_Subinterface_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePathAny) Cpu() *Interface_Subinterface_CpuPathAny {
	return &Interface_Subinterface_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_SubinterfacePath) Description() *Interface_Subinterface_DescriptionPath {
	return &Interface_Subinterface_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_SubinterfacePathAny) Description() *Interface_Subinterface_DescriptionPathAny {
	return &Interface_Subinterface_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_SubinterfacePath) Enabled() *Interface_Subinterface_EnabledPath {
	return &Interface_Subinterface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_SubinterfacePathAny) Enabled() *Interface_Subinterface_EnabledPathAny {
	return &Interface_Subinterface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePath) Ifindex() *Interface_Subinterface_IfindexPath {
	return &Interface_Subinterface_IfindexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePathAny) Ifindex() *Interface_Subinterface_IfindexPathAny {
	return &Interface_Subinterface_IfindexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_SubinterfacePath) Index() *Interface_Subinterface_IndexPath {
	return &Interface_Subinterface_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_SubinterfacePathAny) Index() *Interface_Subinterface_IndexPathAny {
	return &Interface_Subinterface_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePath) Ipv4() *Interface_Subinterface_Ipv4Path {
	return &Interface_Subinterface_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePathAny) Ipv4() *Interface_Subinterface_Ipv4PathAny {
	return &Interface_Subinterface_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePath) Ipv6() *Interface_Subinterface_Ipv6Path {
	return &Interface_Subinterface_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePathAny) Ipv6() *Interface_Subinterface_Ipv6PathAny {
	return &Interface_Subinterface_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePath) LastChange() *Interface_Subinterface_LastChangePath {
	return &Interface_Subinterface_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePathAny) LastChange() *Interface_Subinterface_LastChangePathAny {
	return &Interface_Subinterface_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePath) Logical() *Interface_Subinterface_LogicalPath {
	return &Interface_Subinterface_LogicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePathAny) Logical() *Interface_Subinterface_LogicalPathAny {
	return &Interface_Subinterface_LogicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePath) Management() *Interface_Subinterface_ManagementPath {
	return &Interface_Subinterface_ManagementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePathAny) Management() *Interface_Subinterface_ManagementPathAny {
	return &Interface_Subinterface_ManagementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePath) Name() *Interface_Subinterface_NamePath {
	return &Interface_Subinterface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePathAny) Name() *Interface_Subinterface_NamePathAny {
	return &Interface_Subinterface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePath) OperStatus() *Interface_Subinterface_OperStatusPath {
	return &Interface_Subinterface_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePathAny) OperStatus() *Interface_Subinterface_OperStatusPathAny {
	return &Interface_Subinterface_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePath) Vlan() *Interface_Subinterface_VlanPath {
	return &Interface_Subinterface_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePathAny) Vlan() *Interface_Subinterface_VlanPathAny {
	return &Interface_Subinterface_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPathAny struct {
	*ygot.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPath) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPath {
	return &Interface_Subinterface_Counters_CarrierTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPathAny) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPathAny {
	return &Interface_Subinterface_Counters_CarrierTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPath {
	return &Interface_Subinterface_Counters_InBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_InBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPath) InDiscards() *Interface_Subinterface_Counters_InDiscardsPath {
	return &Interface_Subinterface_Counters_InDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPathAny) InDiscards() *Interface_Subinterface_Counters_InDiscardsPathAny {
	return &Interface_Subinterface_Counters_InDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPath) InErrors() *Interface_Subinterface_Counters_InErrorsPath {
	return &Interface_Subinterface_Counters_InErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPathAny) InErrors() *Interface_Subinterface_Counters_InErrorsPathAny {
	return &Interface_Subinterface_Counters_InErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPath) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPath {
	return &Interface_Subinterface_Counters_InFcsErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPathAny) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPathAny {
	return &Interface_Subinterface_Counters_InFcsErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPath {
	return &Interface_Subinterface_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPath) InOctets() *Interface_Subinterface_Counters_InOctetsPath {
	return &Interface_Subinterface_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPathAny) InOctets() *Interface_Subinterface_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPath) InPkts() *Interface_Subinterface_Counters_InPktsPath {
	return &Interface_Subinterface_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPathAny) InPkts() *Interface_Subinterface_Counters_InPktsPathAny {
	return &Interface_Subinterface_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPath {
	return &Interface_Subinterface_Counters_InUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_InUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPath) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPath {
	return &Interface_Subinterface_Counters_InUnknownProtosPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPathAny) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPathAny {
	return &Interface_Subinterface_Counters_InUnknownProtosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPath) LastClear() *Interface_Subinterface_Counters_LastClearPath {
	return &Interface_Subinterface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPathAny) LastClear() *Interface_Subinterface_Counters_LastClearPathAny {
	return &Interface_Subinterface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPath {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPath) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPath {
	return &Interface_Subinterface_Counters_OutDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPathAny) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPathAny {
	return &Interface_Subinterface_Counters_OutDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPath) OutErrors() *Interface_Subinterface_Counters_OutErrorsPath {
	return &Interface_Subinterface_Counters_OutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPathAny) OutErrors() *Interface_Subinterface_Counters_OutErrorsPathAny {
	return &Interface_Subinterface_Counters_OutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPath {
	return &Interface_Subinterface_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPath) OutOctets() *Interface_Subinterface_Counters_OutOctetsPath {
	return &Interface_Subinterface_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPathAny) OutOctets() *Interface_Subinterface_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPath) OutPkts() *Interface_Subinterface_Counters_OutPktsPath {
	return &Interface_Subinterface_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutPkts() *Interface_Subinterface_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPath {
	return &Interface_Subinterface_Counters_OutUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_OutUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPath {
	return &Interface_Subinterface_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4Path) Counters() *Interface_Subinterface_Ipv4_CountersPath {
	return &Interface_Subinterface_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4PathAny) Counters() *Interface_Subinterface_Ipv4_CountersPathAny {
	return &Interface_Subinterface_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4Path) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPath {
	return &Interface_Subinterface_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4PathAny) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4Path) Enabled() *Interface_Subinterface_Ipv4_EnabledPath {
	return &Interface_Subinterface_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4PathAny) Enabled() *Interface_Subinterface_Ipv4_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4Path) Mtu() *Interface_Subinterface_Ipv4_MtuPath {
	return &Interface_Subinterface_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4PathAny) Mtu() *Interface_Subinterface_Ipv4_MtuPathAny {
	return &Interface_Subinterface_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPath {
	return &Interface_Subinterface_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4Path) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPath {
	return &Interface_Subinterface_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4PathAny) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPathAny {
	return &Interface_Subinterface_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4Path) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPath {
	return &Interface_Subinterface_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4PathAny) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type YANG schema element.
type Interface_Subinterface_Ipv4_Address_TypePathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_AddressPath) Ip() *Interface_Subinterface_Ipv4_Address_IpPath {
	return &Interface_Subinterface_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Ip() *Interface_Subinterface_Ipv4_Address_IpPathAny {
	return &Interface_Subinterface_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPath) Origin() *Interface_Subinterface_Ipv4_Address_OriginPath {
	return &Interface_Subinterface_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Origin() *Interface_Subinterface_Ipv4_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPath) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_AddressPath) Type() *Interface_Subinterface_Ipv4_Address_TypePath {
	return &Interface_Subinterface_Ipv4_Address_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv4 address being assigned
// to the interface. By default, addresses are assumed to be a primary address.
// Where secondary addresses is to be configured, this leaf should be set
// to SECONDARY.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Type() *Interface_Subinterface_Ipv4_Address_TypePathAny {
	return &Interface_Subinterface_Ipv4_Address_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InMulticastOctets() *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InMulticastOctets() *Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InMulticastPkts() *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutMulticastOctets() *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutMulticastOctets() *Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutMulticastPkts() *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePath {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPath {
	return &Interface_Subinterface_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6Path) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPath {
	return &Interface_Subinterface_Ipv6_AutoconfPath{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6PathAny) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPathAny {
	return &Interface_Subinterface_Ipv6_AutoconfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6Path) Counters() *Interface_Subinterface_Ipv6_CountersPath {
	return &Interface_Subinterface_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6PathAny) Counters() *Interface_Subinterface_Ipv6_CountersPathAny {
	return &Interface_Subinterface_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6Path) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPath {
	return &Interface_Subinterface_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6PathAny) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6Path) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6PathAny) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6Path) Enabled() *Interface_Subinterface_Ipv6_EnabledPath {
	return &Interface_Subinterface_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6PathAny) Enabled() *Interface_Subinterface_Ipv6_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6Path) Mtu() *Interface_Subinterface_Ipv6_MtuPath {
	return &Interface_Subinterface_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6PathAny) Mtu() *Interface_Subinterface_Ipv6_MtuPathAny {
	return &Interface_Subinterface_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPath {
	return &Interface_Subinterface_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6Path) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6PathAny) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6Path) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPath {
	return &Interface_Subinterface_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6PathAny) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_TypePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type YANG schema element.
type Interface_Subinterface_Ipv6_Address_TypePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type YANG schema element.
type Interface_Subinterface_Ipv6_Address_TypePathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_AddressPath) Ip() *Interface_Subinterface_Ipv6_Address_IpPath {
	return &Interface_Subinterface_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Ip() *Interface_Subinterface_Ipv6_Address_IpPathAny {
	return &Interface_Subinterface_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPath) Origin() *Interface_Subinterface_Ipv6_Address_OriginPath {
	return &Interface_Subinterface_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Origin() *Interface_Subinterface_Ipv6_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPath) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPath) Status() *Interface_Subinterface_Ipv6_Address_StatusPath {
	return &Interface_Subinterface_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Status() *Interface_Subinterface_Ipv6_Address_StatusPathAny {
	return &Interface_Subinterface_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv6_AddressPath) Type() *Interface_Subinterface_Ipv6_Address_TypePath {
	return &Interface_Subinterface_Ipv6_Address_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Specifies the explicit type of the IPv6 address being assigned
// to the interface. By default, addresses are assumed to be
// global unicast.  Where a link-local address is to be explicitly
// configured, this leaf should be set to LINK_LOCAL.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/type"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Type() *Interface_Subinterface_Ipv6_Address_TypePathAny {
	return &Interface_Subinterface_Ipv6_Address_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AutoconfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AutoconfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny struct {
	*ygot.NodePath
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastOctets (leaf): The total number of octets received in input IP
// multicast packets for the specified address
// family, including those received in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastOctets() *Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of IP packets received for the specified
// address family that are multicast packets.
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastOctets (leaf): The total number of IP multicast octets transmitted.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastOctets() *Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutMulticastOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of IP multicast packets transmitted.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPath) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPath) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): If set to false, all IPv6 router advertisement functions are
// disabled.  The local system will not transmit router advertisement
// messages and will not respond to router solicitation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/enable"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Enable() *Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/managed"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "managed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Managed (leaf): When set to true, the managed address configuration (M) flag is set in
// the advertised router advertisement. The M flag indicates that there are
// addresses available via DHCPv6.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/managed"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/managed"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Managed() *Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_ManagedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "managed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): Mode controls which set of behaviors the local system should perform
// to support IPv6 router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/mode"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Mode() *Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/other-config"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "other-config"},
			map[string]interface{}{},
			n,
		),
	}
}

// OtherConfig (leaf): When set to true, the other configuration (O) flag is set in the
// advertised router advertisement. The O flag indicates that there is
// other configuration available via DHCPv6 (e.g., DNS servers).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/other-config"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/other-config"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) OtherConfig() *Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_OtherConfigPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "other-config"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
// Prefix (wildcarded): string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// PrefixAny (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
// Prefix (wildcarded): string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) PrefixAny() *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
// Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Prefix (list): List of prefixes that are to be included in the IPv6
// router-advertisement messages for the interface. The list
// is keyed by the IPv6 prefix in CIDR representation.
//
// Prefixes that are listed are those that are to be
// advertised in router advertisement messages. Where there
// are IPv6 global addresses configured on an interface and
// the prefix is not listed in the prefix list, it MUST NOT
// be advertised in the router advertisement message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "prefixes/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix"
// Prefix: string
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Prefix(Prefix string) *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny struct {
	*ygot.NodePath
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAdvertisement (leaf): When set to true, the prefix is not advertised within
// router advertisement messages that are sent as a result of
// router soliciation messages.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-advertisement"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-autoconfiguration"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableAutoconfiguration (leaf): When set to true, the prefix is marked as not to be used for stateless
// address configuration. This is achieved by setting the autonomous address
// configuration bit for the prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/disable-autoconfiguration"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/disable-autoconfiguration"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) DisableAutoconfiguration() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_DisableAutoconfigurationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-autoconfiguration"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-onlink"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableOnlink (leaf): When set to true, the prefix is marked as being on link by setting the
// L-bit for the prefix within a router advertisement.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-onlink"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/enable-onlink"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) EnableOnlink() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_EnableOnlinkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-onlink"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreferredLifetime (leaf): The length of time that the address within the prefix remains
// in the preferred state, i.e., unrestricted use is allowed by
// upper-layer protocols. See RFC4862 for a complete definition
// of preferred behaviours.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) PreferredLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PreferredLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): IPv6 prefix to be advertised within the router advertisement
// message.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/prefix"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) Prefix() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPath) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ValidLifetime (leaf): The length of time that the prefix is valid relative to the time
// the packet was sent.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/prefixes/prefix/config/valid-lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisement_PrefixPathAny) ValidLifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_Prefix_ValidLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_VlanPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPathAny struct {
	*ygot.NodePath
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPath) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPath {
	return &Interface_Subinterface_Vlan_EgressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPathAny) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPathAny {
	return &Interface_Subinterface_Vlan_EgressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPath) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPath {
	return &Interface_Subinterface_Vlan_IngressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPathAny) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPathAny {
	return &Interface_Subinterface_Vlan_IngressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPath) Match() *Interface_Subinterface_Vlan_MatchPath {
	return &Interface_Subinterface_Vlan_MatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPathAny) Match() *Interface_Subinterface_Vlan_MatchPathAny {
	return &Interface_Subinterface_Vlan_MatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_VlanPath) VlanId() *Interface_Subinterface_Vlan_VlanIdPath {
	return &Interface_Subinterface_Vlan_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_VlanPathAny) VlanId() *Interface_Subinterface_Vlan_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_EgressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_IngressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_MatchPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_MatchPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPathAny struct {
	*ygot.NodePath
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny struct {
	*ygot.NodePath
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny struct {
	*ygot.NodePath
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny struct {
	*ygot.NodePath
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeychainPath represents the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPath struct {
	*ygot.NodePath
}

// KeychainPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPathAny struct {
	*ygot.NodePath
}

// Keychain_NamePath represents the /openconfig-keychain/keychains/keychain/config/name YANG schema element.
type Keychain_NamePath struct {
	*ygot.NodePath
}

// Keychain_NamePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/config/name YANG schema element.
type Keychain_NamePathAny struct {
	*ygot.NodePath
}

// Keychain_TolerancePath represents the /openconfig-keychain/keychains/keychain/config/tolerance YANG schema element.
type Keychain_TolerancePath struct {
	*ygot.NodePath
}

// Keychain_TolerancePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/config/tolerance YANG schema element.
type Keychain_TolerancePathAny struct {
	*ygot.NodePath
}

// KeyAny (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId (wildcarded): [UnionString, UnionUint64]
func (n *KeychainPath) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// KeyAny (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId (wildcarded): [UnionString, UnionUint64]
func (n *KeychainPathAny) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId: [UnionString, UnionUint64]
func (n *KeychainPath) Key(KeyId Keychain_Key_KeyId_Union) *Keychain_KeyPath {
	return &Keychain_KeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId: [UnionString, UnionUint64]
func (n *KeychainPathAny) Key(KeyId Keychain_Key_KeyId_Union) *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Name (leaf): Keychain name.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/name"
// Path from root: "/keychains/keychain/config/name"
func (n *KeychainPath) Name() *Keychain_NamePath {
	return &Keychain_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Keychain name.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/name"
// Path from root: "/keychains/keychain/config/name"
func (n *KeychainPathAny) Name() *Keychain_NamePathAny {
	return &Keychain_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/tolerance"
// Path from root: "/keychains/keychain/config/tolerance"
func (n *KeychainPath) Tolerance() *Keychain_TolerancePath {
	return &Keychain_TolerancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tolerance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/tolerance"
// Path from root: "/keychains/keychain/config/tolerance"
func (n *KeychainPathAny) Tolerance() *Keychain_TolerancePathAny {
	return &Keychain_TolerancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tolerance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_KeyPath represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPath struct {
	*ygot.NodePath
}

// Keychain_KeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_CryptoAlgorithmPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPath struct {
	*ygot.NodePath
}

// Keychain_Key_CryptoAlgorithmPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_KeyIdPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/key-id YANG schema element.
type Keychain_Key_KeyIdPath struct {
	*ygot.NodePath
}

// Keychain_Key_KeyIdPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/key-id YANG schema element.
type Keychain_Key_KeyIdPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SecretKeyPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/secret-key YANG schema element.
type Keychain_Key_SecretKeyPath struct {
	*ygot.NodePath
}

// Keychain_Key_SecretKeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/secret-key YANG schema element.
type Keychain_Key_SecretKeyPathAny struct {
	*ygot.NodePath
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/crypto-algorithm"
// Path from root: "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_KeyPath) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPath {
	return &Keychain_Key_CryptoAlgorithmPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
	}
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/crypto-algorithm"
// Path from root: "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_KeyPathAny) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPathAny {
	return &Keychain_Key_CryptoAlgorithmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/key-id"
// Path from root: "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_KeyPath) KeyId() *Keychain_Key_KeyIdPath {
	return &Keychain_Key_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/key-id"
// Path from root: "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_KeyPathAny) KeyId() *Keychain_Key_KeyIdPathAny {
	return &Keychain_Key_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "receive-lifetime"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPath) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePath {
	return &Keychain_Key_ReceiveLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "receive-lifetime"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPathAny) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePathAny {
	return &Keychain_Key_ReceiveLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/secret-key"
// Path from root: "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_KeyPath) SecretKey() *Keychain_Key_SecretKeyPath {
	return &Keychain_Key_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/secret-key"
// Path from root: "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_KeyPathAny) SecretKey() *Keychain_Key_SecretKeyPathAny {
	return &Keychain_Key_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "send-lifetime"
// Path from root: "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPath) SendLifetime() *Keychain_Key_SendLifetimePath {
	return &Keychain_Key_SendLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "send-lifetime"
// Path from root: "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPathAny) SendLifetime() *Keychain_Key_SendLifetimePathAny {
	return &Keychain_Key_SendLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_Key_ReceiveLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePathAny struct {
	*ygot.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetimePath) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePath {
	return &Keychain_Key_ReceiveLifetime_EndTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePathAny {
	return &Keychain_Key_ReceiveLifetime_EndTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetimePath) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePath {
	return &Keychain_Key_ReceiveLifetime_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePathAny {
	return &Keychain_Key_ReceiveLifetime_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_Key_SendLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_SendAndReceivePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_SendAndReceivePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePathAny struct {
	*ygot.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetimePath) EndTime() *Keychain_Key_SendLifetime_EndTimePath {
	return &Keychain_Key_SendLifetime_EndTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetimePathAny) EndTime() *Keychain_Key_SendLifetime_EndTimePathAny {
	return &Keychain_Key_SendLifetime_EndTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/send-and-receive"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetimePath) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePath {
	return &Keychain_Key_SendLifetime_SendAndReceivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/send-and-receive"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetimePathAny) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePathAny {
	return &Keychain_Key_SendLifetime_SendAndReceivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetimePath) StartTime() *Keychain_Key_SendLifetime_StartTimePath {
	return &Keychain_Key_SendLifetime_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetimePathAny) StartTime() *Keychain_Key_SendLifetime_StartTimePathAny {
	return &Keychain_Key_SendLifetime_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpPath represents the /openconfig-lacp/lacp YANG schema element.
type LacpPath struct {
	*ygot.NodePath
}

// LacpPathAny represents the wildcard version of the /openconfig-lacp/lacp YANG schema element.
type LacpPathAny struct {
	*ygot.NodePath
}

// Lacp_SystemPriorityPath represents the /openconfig-lacp/lacp/config/system-priority YANG schema element.
type Lacp_SystemPriorityPath struct {
	*ygot.NodePath
}

// Lacp_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/config/system-priority YANG schema element.
type Lacp_SystemPriorityPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name (wildcarded): string
func (n *LacpPath) InterfaceAny() *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name (wildcarded): string
func (n *LacpPathAny) InterfaceAny() *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name: string
func (n *LacpPath) Interface(Name string) *Lacp_InterfacePath {
	return &Lacp_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name: string
func (n *LacpPathAny) Interface(Name string) *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/config/system-priority"
func (n *LacpPath) SystemPriority() *Lacp_SystemPriorityPath {
	return &Lacp_SystemPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/config/system-priority"
func (n *LacpPathAny) SystemPriority() *Lacp_SystemPriorityPathAny {
	return &Lacp_SystemPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lacp_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePath struct {
	*ygot.NodePath
}

// Lacp_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_IntervalPath represents the /openconfig-lacp/lacp/interfaces/interface/config/interval YANG schema element.
type Lacp_Interface_IntervalPath struct {
	*ygot.NodePath
}

// Lacp_Interface_IntervalPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/interval YANG schema element.
type Lacp_Interface_IntervalPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_LacpModePath represents the /openconfig-lacp/lacp/interfaces/interface/config/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePath struct {
	*ygot.NodePath
}

// Lacp_Interface_LacpModePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_NamePath represents the /openconfig-lacp/lacp/interfaces/interface/config/name YANG schema element.
type Lacp_Interface_NamePath struct {
	*ygot.NodePath
}

// Lacp_Interface_NamePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/name YANG schema element.
type Lacp_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemIdMacPath represents the /openconfig-lacp/lacp/interfaces/interface/config/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPath struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemIdMacPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemPriorityPath represents the /openconfig-lacp/lacp/interfaces/interface/config/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPath struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/interval"
// Path from root: "/lacp/interfaces/interface/config/interval"
func (n *Lacp_InterfacePath) Interval() *Lacp_Interface_IntervalPath {
	return &Lacp_Interface_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/interval"
// Path from root: "/lacp/interfaces/interface/config/interval"
func (n *Lacp_InterfacePathAny) Interval() *Lacp_Interface_IntervalPathAny {
	return &Lacp_Interface_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/lacp-mode"
// Path from root: "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_InterfacePath) LacpMode() *Lacp_Interface_LacpModePath {
	return &Lacp_Interface_LacpModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/lacp-mode"
// Path from root: "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_InterfacePathAny) LacpMode() *Lacp_Interface_LacpModePathAny {
	return &Lacp_Interface_LacpModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface (wildcarded): string
func (n *Lacp_InterfacePath) MemberAny() *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface (wildcarded): string
func (n *Lacp_InterfacePathAny) MemberAny() *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface: string
func (n *Lacp_InterfacePath) Member(Interface string) *Lacp_Interface_MemberPath {
	return &Lacp_Interface_MemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface: string
func (n *Lacp_InterfacePathAny) Member(Interface string) *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/name"
// Path from root: "/lacp/interfaces/interface/config/name"
func (n *Lacp_InterfacePath) Name() *Lacp_Interface_NamePath {
	return &Lacp_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/name"
// Path from root: "/lacp/interfaces/interface/config/name"
func (n *Lacp_InterfacePathAny) Name() *Lacp_Interface_NamePathAny {
	return &Lacp_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-id-mac"
// Path from root: "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_InterfacePath) SystemIdMac() *Lacp_Interface_SystemIdMacPath {
	return &Lacp_Interface_SystemIdMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-id-mac"
// Path from root: "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_InterfacePathAny) SystemIdMac() *Lacp_Interface_SystemIdMacPathAny {
	return &Lacp_Interface_SystemIdMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_InterfacePath) SystemPriority() *Lacp_Interface_SystemPriorityPath {
	return &Lacp_Interface_SystemPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_InterfacePathAny) SystemPriority() *Lacp_Interface_SystemPriorityPathAny {
	return &Lacp_Interface_SystemPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lacp_Interface_MemberPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPath struct {
	*ygot.NodePath
}

// Lacp_Interface_MemberPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_ActivityPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_ActivityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_AggregatablePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_AggregatablePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_CollectingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_CollectingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_DistributingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_DistributingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_LastChangePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_LastChangePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_OperKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_OperKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerPortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerPortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SynchronizationPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SynchronizationPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SystemIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SystemIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_TimeoutPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_TimeoutPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPathAny struct {
	*ygot.NodePath
}

// Activity (leaf): Indicates participant is active or passive
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/activity"
// Path from root: "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPath) Activity() *Lacp_Interface_Member_ActivityPath {
	return &Lacp_Interface_Member_ActivityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Activity (leaf): Indicates participant is active or passive
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/activity"
// Path from root: "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPathAny) Activity() *Lacp_Interface_Member_ActivityPathAny {
	return &Lacp_Interface_Member_ActivityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/aggregatable"
// Path from root: "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPath) Aggregatable() *Lacp_Interface_Member_AggregatablePath {
	return &Lacp_Interface_Member_AggregatablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/aggregatable"
// Path from root: "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPathAny) Aggregatable() *Lacp_Interface_Member_AggregatablePathAny {
	return &Lacp_Interface_Member_AggregatablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/collecting"
// Path from root: "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPath) Collecting() *Lacp_Interface_Member_CollectingPath {
	return &Lacp_Interface_Member_CollectingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/collecting"
// Path from root: "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPathAny) Collecting() *Lacp_Interface_Member_CollectingPathAny {
	return &Lacp_Interface_Member_CollectingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LACP protocol counters
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/counters"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPath) Counters() *Lacp_Interface_Member_CountersPath {
	return &Lacp_Interface_Member_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LACP protocol counters
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/counters"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPathAny) Counters() *Lacp_Interface_Member_CountersPathAny {
	return &Lacp_Interface_Member_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/distributing"
// Path from root: "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPath) Distributing() *Lacp_Interface_Member_DistributingPath {
	return &Lacp_Interface_Member_DistributingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
	}
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/distributing"
// Path from root: "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPathAny) Distributing() *Lacp_Interface_Member_DistributingPathAny {
	return &Lacp_Interface_Member_DistributingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to interface member of the LACP aggregate
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/interface"
// Path from root: "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_MemberPath) Interface() *Lacp_Interface_Member_InterfacePath {
	return &Lacp_Interface_Member_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to interface member of the LACP aggregate
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/interface"
// Path from root: "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_MemberPathAny) Interface() *Lacp_Interface_Member_InterfacePathAny {
	return &Lacp_Interface_Member_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/last-change"
// Path from root: "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPath) LastChange() *Lacp_Interface_Member_LastChangePath {
	return &Lacp_Interface_Member_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/last-change"
// Path from root: "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPathAny) LastChange() *Lacp_Interface_Member_LastChangePathAny {
	return &Lacp_Interface_Member_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/oper-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPath) OperKey() *Lacp_Interface_Member_OperKeyPath {
	return &Lacp_Interface_Member_OperKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/oper-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPathAny) OperKey() *Lacp_Interface_Member_OperKeyPathAny {
	return &Lacp_Interface_Member_OperKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPath) PartnerId() *Lacp_Interface_Member_PartnerIdPath {
	return &Lacp_Interface_Member_PartnerIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPathAny) PartnerId() *Lacp_Interface_Member_PartnerIdPathAny {
	return &Lacp_Interface_Member_PartnerIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerKey (leaf): Operational value of the protocol partner's key
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPath) PartnerKey() *Lacp_Interface_Member_PartnerKeyPath {
	return &Lacp_Interface_Member_PartnerKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerKey (leaf): Operational value of the protocol partner's key
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPathAny) PartnerKey() *Lacp_Interface_Member_PartnerKeyPathAny {
	return &Lacp_Interface_Member_PartnerKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPath) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPath {
	return &Lacp_Interface_Member_PartnerPortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPathAny) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPathAny {
	return &Lacp_Interface_Member_PartnerPortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): Port number of the local (actor) aggregation member
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPath) PortNum() *Lacp_Interface_Member_PortNumPath {
	return &Lacp_Interface_Member_PortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): Port number of the local (actor) aggregation member
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPathAny) PortNum() *Lacp_Interface_Member_PortNumPathAny {
	return &Lacp_Interface_Member_PortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/synchronization"
// Path from root: "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPath) Synchronization() *Lacp_Interface_Member_SynchronizationPath {
	return &Lacp_Interface_Member_SynchronizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/synchronization"
// Path from root: "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPathAny) Synchronization() *Lacp_Interface_Member_SynchronizationPathAny {
	return &Lacp_Interface_Member_SynchronizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/system-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPath) SystemId() *Lacp_Interface_Member_SystemIdPath {
	return &Lacp_Interface_Member_SystemIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/system-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPathAny) SystemId() *Lacp_Interface_Member_SystemIdPathAny {
	return &Lacp_Interface_Member_SystemIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/timeout"
// Path from root: "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPath) Timeout() *Lacp_Interface_Member_TimeoutPath {
	return &Lacp_Interface_Member_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/timeout"
// Path from root: "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPathAny) Timeout() *Lacp_Interface_Member_TimeoutPathAny {
	return &Lacp_Interface_Member_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}
