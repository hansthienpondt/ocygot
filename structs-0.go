/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"encoding/json"
	"fmt"
	"reflect"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// ΓModelData contains the catalogue information corresponding to the modules for
// which Go code was generated.
var ΓModelData = []*gpb.ModelData{
	{
		Name:         "iana-if-type",
		Organization: "IANA",
	},
	{
		Name:         "ietf-inet-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
	{
		Name:         "ietf-interfaces",
		Organization: "IETF NETMOD (Network Modeling) Working Group",
	},
	{
		Name:         "ietf-yang-types",
		Organization: "IETF NETMOD (NETCONF Data Modeling Language) Working Group",
	},
	{
		Name:         "openconfig-aaa",
		Organization: "OpenConfig working group",
		Version:      "1.0.0",
	},
	{
		Name:         "openconfig-aaa-types",
		Organization: "OpenConfig working group",
		Version:      "0.4.1",
	},
	{
		Name:         "openconfig-acl",
		Organization: "OpenConfig working group",
		Version:      "1.3.3",
	},
	{
		Name:         "openconfig-aft",
		Organization: "OpenConfig working group",
		Version:      "2.4.0",
	},
	{
		Name:         "openconfig-aft-network-instance",
		Organization: "OpenConfig working group",
		Version:      "0.3.1",
	},
	{
		Name:         "openconfig-aft-types",
		Organization: "OpenConfig Working Group",
		Version:      "1.1.0",
	},
	{
		Name:         "openconfig-alarm-types",
		Organization: "OpenConfig working group",
		Version:      "0.2.1",
	},
	{
		Name:         "openconfig-alarms",
		Organization: "OpenConfig working group",
		Version:      "0.3.2",
	},
	{
		Name:         "openconfig-bfd",
		Organization: "OpenConfig working group",
		Version:      "0.2.6",
	},
	{
		Name:         "openconfig-bgp",
		Organization: "OpenConfig working group",
		Version:      "9.5.0",
	},
	{
		Name:         "openconfig-bgp-policy",
		Organization: "OpenConfig working group",
		Version:      "6.2.0",
	},
	{
		Name:         "openconfig-bgp-types",
		Organization: "OpenConfig working group",
		Version:      "5.5.0",
	},
	{
		Name:         "openconfig-defined-sets",
		Organization: "OpenConfig working group",
		Version:      "1.0.0",
	},
	{
		Name:         "openconfig-ethernet-segments",
		Organization: "OpenConfig working group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-evpn",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-evpn-types",
		Organization: "OpenConfig working group",
		Version:      "0.2.0",
	},
	{
		Name:         "openconfig-extensions",
		Organization: "OpenConfig working group",
		Version:      "0.5.1",
	},
	{
		Name:         "openconfig-flexalgo",
		Organization: "OpenConfig working group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-gribi",
		Organization: "OpenConfig Working Group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-icmpv4-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-icmpv6-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-if-aggregate",
		Organization: "OpenConfig working group",
		Version:      "2.4.4",
	},
	{
		Name:         "openconfig-if-ethernet",
		Organization: "OpenConfig working group",
		Version:      "2.13.0",
	},
	{
		Name:         "openconfig-if-ethernet-ext",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-if-ip",
		Organization: "OpenConfig working group",
		Version:      "3.5.0",
	},
	{
		Name:         "openconfig-if-ip-ext",
		Organization: "OpenConfig working group",
		Version:      "2.3.1",
	},
	{
		Name:         "openconfig-igmp",
		Organization: "OpenConfig working group",
		Version:      "0.3.1",
	},
	{
		Name:         "openconfig-igmp-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-inet-types",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-interfaces",
		Organization: "OpenConfig working group",
		Version:      "3.6.0",
	},
	{
		Name:         "openconfig-isis",
		Organization: "OpenConfig working group",
		Version:      "1.6.1",
	},
	{
		Name:         "openconfig-isis-lsdb-types",
		Organization: "OpenConfig working group",
		Version:      "0.4.2",
	},
	{
		Name:         "openconfig-isis-types",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-keychain",
		Organization: "OpenConfig working group",
		Version:      "0.4.0",
	},
	{
		Name:         "openconfig-keychain-types",
		Organization: "OpenConfig working group",
		Version:      "0.2.0",
	},
	{
		Name:         "openconfig-lacp",
		Organization: "OpenConfig working group",
		Version:      "1.2.0",
	},
	{
		Name:         "openconfig-license",
		Organization: "OpenConfig working group",
		Version:      "0.2.0",
	},
	{
		Name:         "openconfig-lldp",
		Organization: "OpenConfig working group",
		Version:      "0.2.1",
	},
	{
		Name:         "openconfig-lldp-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-local-routing",
		Organization: "OpenConfig working group",
		Version:      "2.0.1",
	},
	{
		Name:         "openconfig-macsec",
		Organization: "OpenConfig working group",
		Version:      "1.1.1",
	},
	{
		Name:         "openconfig-macsec-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-messages",
		Organization: "OpenConfig working group",
		Version:      "0.0.1",
	},
	{
		Name:         "openconfig-mpls",
		Organization: "OpenConfig working group",
		Version:      "3.4.0",
	},
	{
		Name:         "openconfig-mpls-ldp",
		Organization: "OpenConfig working group",
		Version:      "3.2.1",
	},
	{
		Name:         "openconfig-mpls-rsvp",
		Organization: "OpenConfig working group",
		Version:      "4.0.1",
	},
	{
		Name:         "openconfig-mpls-sr",
		Organization: "OpenConfig working group",
		Version:      "3.0.1",
	},
	{
		Name:         "openconfig-mpls-types",
		Organization: "OpenConfig working group",
		Version:      "3.4.0",
	},
	{
		Name:         "openconfig-network-instance",
		Organization: "OpenConfig working group",
		Version:      "4.2.1",
	},
	{
		Name:         "openconfig-network-instance-l3",
		Organization: "OpenConfig working group",
		Version:      "2.0.0",
	},
	{
		Name:         "openconfig-network-instance-types",
		Organization: "OpenConfig working group",
		Version:      "0.9.3",
	},
	{
		Name:         "openconfig-optical-amplifier",
		Organization: "OpenConfig working group",
		Version:      "0.5.0",
	},
	{
		Name:         "openconfig-ospf-policy",
		Organization: "OpenConfig working group",
		Version:      "0.1.3",
	},
	{
		Name:         "openconfig-ospf-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.3",
	},
	{
		Name:         "openconfig-ospfv2",
		Organization: "OpenConfig working group",
		Version:      "0.5.1",
	},
	{
		Name:         "openconfig-packet-match",
		Organization: "OpenConfig working group",
		Version:      "2.1.0",
	},
	{
		Name:         "openconfig-packet-match-types",
		Organization: "OpenConfig working group",
		Version:      "1.3.3",
	},
	{
		Name:         "openconfig-pcep",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-pim",
		Organization: "OpenConfig working group",
		Version:      "0.4.3",
	},
	{
		Name:         "openconfig-pim-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-platform",
		Organization: "OpenConfig working group",
		Version:      "0.23.0",
	},
	{
		Name:         "openconfig-platform-port",
		Organization: "OpenConfig working group",
		Version:      "1.0.1",
	},
	{
		Name:         "openconfig-platform-transceiver",
		Organization: "OpenConfig working group",
		Version:      "0.13.0",
	},
	{
		Name:         "openconfig-platform-types",
		Organization: "OpenConfig working group",
		Version:      "1.6.0",
	},
	{
		Name:         "openconfig-policy-forwarding",
		Organization: "OpenConfig working group",
		Version:      "0.6.1",
	},
	{
		Name:         "openconfig-policy-types",
		Organization: "OpenConfig working group",
		Version:      "3.2.3",
	},
	{
		Name:         "openconfig-probes",
		Organization: "OpenConfig working group",
		Version:      "0.0.2",
	},
	{
		Name:         "openconfig-probes-types",
		Organization: "OpenConfig working group",
		Version:      "0.1.1",
	},
	{
		Name:         "openconfig-procmon",
		Organization: "OpenConfig working group",
		Version:      "0.4.0",
	},
	{
		Name:         "openconfig-qos",
		Organization: "OpenConfig working group",
		Version:      "0.11.2",
	},
	{
		Name:         "openconfig-qos-types",
		Organization: "OpenConfig working group",
		Version:      "0.2.1",
	},
	{
		Name:         "openconfig-relay-agent",
		Organization: "OpenConfig working group",
		Version:      "0.1.2",
	},
	{
		Name:         "openconfig-rib-bgp",
		Organization: "OpenConfig working group",
		Version:      "0.9.0",
	},
	{
		Name:         "openconfig-rib-bgp-types",
		Organization: "OpenConfig working group",
		Version:      "0.5.0",
	},
	{
		Name:         "openconfig-routing-policy",
		Organization: "OpenConfig working group",
		Version:      "3.4.2",
	},
	{
		Name:         "openconfig-sampling",
		Organization: "OpenConfig working group",
		Version:      "0.1.0",
	},
	{
		Name:         "openconfig-segment-routing",
		Organization: "OpenConfig working group",
		Version:      "0.4.1",
	},
	{
		Name:         "openconfig-segment-routing-types",
		Organization: "OpenConfig working group",
		Version:      "0.2.0",
	},
	{
		Name:         "openconfig-spanning-tree",
		Organization: "OpenConfig working group",
		Version:      "0.3.1",
	},
	{
		Name:         "openconfig-spanning-tree-types",
		Organization: "OpenConfig working group",
		Version:      "0.4.1",
	},
	{
		Name:         "openconfig-srte-policy",
		Organization: "OpenConfig working group",
		Version:      "0.2.3",
	},
	{
		Name:         "openconfig-system",
		Organization: "OpenConfig working group",
		Version:      "0.17.1",
	},
	{
		Name:         "openconfig-system-grpc",
		Organization: "OpenConfig working group",
		Version:      "1.0.0",
	},
	{
		Name:         "openconfig-system-logging",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-system-terminal",
		Organization: "OpenConfig working group",
		Version:      "0.3.1",
	},
	{
		Name:         "openconfig-telemetry",
		Organization: "OpenConfig working group",
		Version:      "0.5.1",
	},
	{
		Name:         "openconfig-telemetry-types",
		Organization: "OpenConfig working group",
		Version:      "0.4.2",
	},
	{
		Name:         "openconfig-terminal-device",
		Organization: "OpenConfig working group",
		Version:      "1.9.0",
	},
	{
		Name:         "openconfig-transport-line-common",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-transport-line-protection",
		Organization: "OpenConfig working group",
		Version:      "0.4.1",
	},
	{
		Name:         "openconfig-transport-types",
		Organization: "OpenConfig working group",
		Version:      "0.20.0",
	},
	{
		Name:         "openconfig-types",
		Organization: "OpenConfig working group",
		Version:      "0.6.0",
	},
	{
		Name:         "openconfig-vlan",
		Organization: "OpenConfig working group",
		Version:      "3.2.2",
	},
	{
		Name:         "openconfig-vlan-types",
		Organization: "OpenConfig working group",
		Version:      "3.2.0",
	},
	{
		Name:         "openconfig-yang-types",
		Organization: "OpenConfig working group",
		Version:      "0.3.1",
	},
}

// Acl represents the /openconfig-acl/acl YANG schema element.
type Acl struct {
	ΛMetadata          []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	AclSet             map[Acl_AclSet_Key]*Acl_AclSet `path:"acl-sets/acl-set" module:"openconfig-acl/openconfig-acl"`
	ΛAclSet            []ygot.Annotation              `path:"acl-sets/@acl-set" ygotAnnotation:"true"`
	CounterCapability  E_Acl_ACL_COUNTER_CAPABILITY   `path:"state/counter-capability" module:"openconfig-acl/openconfig-acl"`
	ΛCounterCapability []ygot.Annotation              `path:"state/@counter-capability" ygotAnnotation:"true"`
	Interface          map[string]*Acl_Interface      `path:"interfaces/interface" module:"openconfig-acl/openconfig-acl"`
	ΛInterface         []ygot.Annotation              `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl) IsYANGGoStruct() {}

// Acl_AclSet_Key represents the key for list AclSet of element /openconfig-acl/acl.
type Acl_AclSet_Key struct {
	Name string         `path:"name"`
	Type E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_AclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_AclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_AclSet_Key key struct.
func (t Acl_AclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
		"type": t.Type,
	}, nil
}

// NewAclSet creates a new entry in the AclSet list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewAclSet(Name string, Type E_Acl_ACL_TYPE) (*Acl_AclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclSet", key)
	}

	t.AclSet[key] = &Acl_AclSet{
		Name: &Name,
		Type: Type,
	}

	return t.AclSet[key], nil
}

// RenameAclSet renames an entry in the list AclSet within
// the Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl) RenameAclSet(oldK, newK Acl_AclSet_Key) error {
	if _, ok := t.AclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AclSet", newK)
	}

	e, ok := t.AclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclSet", oldK)
	}
	e.Name = &newK.Name
	e.Type = newK.Type

	t.AclSet[newK] = e
	delete(t.AclSet, oldK)
	return nil
}

// GetOrCreateAclSet retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateAclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSet {

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if v, ok := t.AclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclSet(Name, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclSet got unexpected error: %v", err))
	}
	return v
}

// GetAclSet retrieves the value with the specified key from
// the AclSet map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetAclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSet {

	if t == nil {
		return nil
	}

	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	if lm, ok := t.AclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclSet deletes the value with the specified keys from
// the receiver Acl. If there is no such element, the function
// is a no-op.
func (t *Acl) DeleteAclSet(Name string, Type E_Acl_ACL_TYPE) {
	key := Acl_AclSet_Key{
		Name: Name,
		Type: Type,
	}

	delete(t.AclSet, key)
}

// AppendAclSet appends the supplied Acl_AclSet struct to the
// list AclSet of Acl. If the key value(s) specified in
// the supplied Acl_AclSet already exist in the list, an error is
// returned.
func (t *Acl) AppendAclSet(v *Acl_AclSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := Acl_AclSet_Key{
		Name: *v.Name,
		Type: v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclSet == nil {
		t.AclSet = make(map[Acl_AclSet_Key]*Acl_AclSet)
	}

	if _, ok := t.AclSet[key]; ok {
		return fmt.Errorf("duplicate key for list AclSet %v", key)
	}

	t.AclSet[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Acl struct. The keys of the list are populated from the input
// arguments.
func (t *Acl) NewInterface(Id string) (*Acl_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Acl_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl) GetOrCreateInterface(Id string) *Acl_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl) GetInterface(Id string) *Acl_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Acl. If there is no such element, the function
// is a no-op.
func (t *Acl) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Acl_Interface struct to the
// list Interface of Acl. If the key value(s) specified in
// the supplied Acl_Interface already exist in the list, an error is
// returned.
func (t *Acl) AppendInterface(v *Acl_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Acl_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetCounterCapability retrieves the value of the leaf CounterCapability from the Acl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CounterCapability is set, it can
// safely use t.GetCounterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CounterCapability == nil' before retrieving the leaf's value.
func (t *Acl) GetCounterCapability() E_Acl_ACL_COUNTER_CAPABILITY {
	if t == nil || t.CounterCapability == 0 {
		return 0
	}
	return t.CounterCapability
}

// PopulateDefaults recursively populates unset leaf fields in the Acl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclSet {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl.
func (*Acl) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSet struct {
	ΛMetadata    []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	AclEntry     map[uint32]*Acl_AclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	ΛAclEntry    []ygot.Annotation               `path:"acl-entries/@acl-entry" ygotAnnotation:"true"`
	Description  *string                         `path:"config/description" module:"openconfig-acl/openconfig-acl"`
	ΛDescription []ygot.Annotation               `path:"config/@description" ygotAnnotation:"true"`
	Name         *string                         `path:"config/name|name" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛName        []ygot.Annotation               `path:"config/@name|@name" ygotAnnotation:"true"`
	Type         E_Acl_ACL_TYPE                  `path:"config/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛType        []ygot.Annotation               `path:"config/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_AclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_AclSet) NewAclEntry(SequenceId uint32) (*Acl_AclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_AclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_AclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_AclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_AclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_AclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_AclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_AclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_AclSet) GetAclEntry(SequenceId uint32) *Acl_AclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_AclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_AclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_AclSet_AclEntry struct to the
// list AclEntry of Acl_AclSet. If the key value(s) specified in
// the supplied Acl_AclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_AclSet) AppendAclEntry(v *Acl_AclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_AclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_AclSet struct, which is a YANG list entry.
func (t *Acl_AclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet.
func (*Acl_AclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntry struct {
	ΛMetadata       []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	Actions         *Acl_AclSet_AclEntry_Actions        `path:"actions" module:"openconfig-acl"`
	ΛActions        []ygot.Annotation                   `path:"@actions" ygotAnnotation:"true"`
	Description     *string                             `path:"config/description" module:"openconfig-acl/openconfig-acl"`
	ΛDescription    []ygot.Annotation                   `path:"config/@description" ygotAnnotation:"true"`
	InputInterface  *Acl_AclSet_AclEntry_InputInterface `path:"input-interface" module:"openconfig-acl"`
	ΛInputInterface []ygot.Annotation                   `path:"@input-interface" ygotAnnotation:"true"`
	Ipv4            *Acl_AclSet_AclEntry_Ipv4           `path:"ipv4" module:"openconfig-acl"`
	ΛIpv4           []ygot.Annotation                   `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6            *Acl_AclSet_AclEntry_Ipv6           `path:"ipv6" module:"openconfig-acl"`
	ΛIpv6           []ygot.Annotation                   `path:"@ipv6" ygotAnnotation:"true"`
	L2              *Acl_AclSet_AclEntry_L2             `path:"l2" module:"openconfig-acl"`
	ΛL2             []ygot.Annotation                   `path:"@l2" ygotAnnotation:"true"`
	MatchedOctets   *uint64                             `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation                   `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64                             `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation                   `path:"state/@matched-packets" ygotAnnotation:"true"`
	Mpls            *Acl_AclSet_AclEntry_Mpls           `path:"mpls" module:"openconfig-acl"`
	ΛMpls           []ygot.Annotation                   `path:"@mpls" ygotAnnotation:"true"`
	SequenceId      *uint32                             `path:"config/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛSequenceId     []ygot.Annotation                   `path:"config/@sequence-id|@sequence-id" ygotAnnotation:"true"`
	Transport       *Acl_AclSet_AclEntry_Transport      `path:"transport" module:"openconfig-acl"`
	ΛTransport      []ygot.Annotation                   `path:"@transport" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateActions() *Acl_AclSet_AclEntry_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Acl_AclSet_AclEntry_Actions{}
	return t.Actions
}

// GetOrCreateInputInterface retrieves the value of the InputInterface field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t.InputInterface != nil {
		return t.InputInterface
	}
	t.InputInterface = &Acl_AclSet_AclEntry_InputInterface{}
	return t.InputInterface
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Acl_AclSet_AclEntry_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Acl_AclSet_AclEntry_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateL2() *Acl_AclSet_AclEntry_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Acl_AclSet_AclEntry_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateMpls() *Acl_AclSet_AclEntry_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Acl_AclSet_AclEntry_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry) GetOrCreateTransport() *Acl_AclSet_AclEntry_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Acl_AclSet_AclEntry_Transport{}
	return t.Transport
}

// GetActions returns the value of the Actions struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetActions() *Acl_AclSet_AclEntry_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetInputInterface returns the value of the InputInterface struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field InputInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetInputInterface() *Acl_AclSet_AclEntry_InputInterface {
	if t != nil && t.InputInterface != nil {
		return t.InputInterface
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv4() *Acl_AclSet_AclEntry_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetIpv6() *Acl_AclSet_AclEntry_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetL2() *Acl_AclSet_AclEntry_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetMpls() *Acl_AclSet_AclEntry_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Acl_AclSet_AclEntry. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry) GetTransport() *Acl_AclSet_AclEntry_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_AclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.InputInterface.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Acl_AclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_AclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry.
func (*Acl_AclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Actions represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_Actions struct {
	ΛMetadata         []ygot.Annotation       `path:"@" ygotAnnotation:"true"`
	ForwardingAction  E_Acl_FORWARDING_ACTION `path:"config/forwarding-action" module:"openconfig-acl/openconfig-acl"`
	ΛForwardingAction []ygot.Annotation       `path:"config/@forwarding-action" ygotAnnotation:"true"`
	LogAction         E_Acl_LOG_ACTION        `path:"config/log-action" module:"openconfig-acl/openconfig-acl"`
	ΛLogAction        []ygot.Annotation       `path:"config/@log-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Actions) IsYANGGoStruct() {}

// GetForwardingAction retrieves the value of the leaf ForwardingAction from the Acl_AclSet_AclEntry_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingAction is set, it can
// safely use t.GetForwardingAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingAction == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Actions) GetForwardingAction() E_Acl_FORWARDING_ACTION {
	if t == nil || t.ForwardingAction == 0 {
		return 0
	}
	return t.ForwardingAction
}

// GetLogAction retrieves the value of the leaf LogAction from the Acl_AclSet_AclEntry_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAction is set, it can
// safely use t.GetLogAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAction == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Actions) GetLogAction() E_Acl_LOG_ACTION {
	if t == nil || t.LogAction == 0 {
		return Acl_LOG_ACTION_LOG_NONE
	}
	return t.LogAction
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogAction == 0 {
		t.LogAction = Acl_LOG_ACTION_LOG_NONE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Actions.
func (*Acl_AclSet_AclEntry_Actions) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_InputInterface represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface struct {
	ΛMetadata     []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	InterfaceRef  *Acl_AclSet_AclEntry_InputInterface_InterfaceRef `path:"interface-ref" module:"openconfig-acl"`
	ΛInterfaceRef []ygot.Annotation                                `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_InputInterface) GetOrCreateInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_AclSet_AclEntry_InputInterface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_AclSet_AclEntry_InputInterface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_InputInterface) GetInterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_InputInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_InputInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_InputInterface.
func (*Acl_AclSet_AclEntry_InputInterface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-acl/openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-acl/openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_InputInterface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_InputInterface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_InputInterface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_InputInterface_InterfaceRef.
func (*Acl_AclSet_AclEntry_InputInterface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4 struct {
	ΛMetadata                    []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                 `path:"config/destination-address" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                       `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                 `path:"config/destination-address-prefix-set" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                       `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	Dscp                         *uint8                                  `path:"config/dscp" module:"openconfig-acl/openconfig-acl"`
	ΛDscp                        []ygot.Annotation                       `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                 `path:"config/dscp-set" module:"openconfig-acl/openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                       `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                  `path:"config/hop-limit" module:"openconfig-acl/openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                       `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv4                       *Acl_AclSet_AclEntry_Ipv4_Icmpv4        `path:"icmpv4" module:"openconfig-acl"`
	ΛIcmpv4                      []ygot.Annotation                       `path:"@icmpv4" ygotAnnotation:"true"`
	Length                       *uint16                                 `path:"config/length" module:"openconfig-acl/openconfig-acl"`
	ΛLength                      []ygot.Annotation                       `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     Acl_AclSet_AclEntry_Ipv4_Protocol_Union `path:"config/protocol" module:"openconfig-acl/openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                       `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                 `path:"config/source-address" module:"openconfig-acl/openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                       `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                 `path:"config/source-address-prefix-set" module:"openconfig-acl/openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                       `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_Ipv4) GetOrCreateIcmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &Acl_AclSet_AclEntry_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from Acl_AclSet_AclEntry_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_Ipv4) GetIcmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDscp retrieves the value of the leaf Dscp from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetProtocol() Acl_AclSet_AclEntry_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv4.
func (*Acl_AclSet_AclEntry_Ipv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv4Types_CODE `path:"config/code" module:"openconfig-acl/openconfig-acl"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv4Types_TYPE `path:"config/type" module:"openconfig-acl/openconfig-acl"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) GetCode() E_Icmpv4Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) GetType() E_Icmpv4Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv4_Icmpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv4_Icmpv4.
func (*Acl_AclSet_AclEntry_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6 struct {
	ΛMetadata                    []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                 `path:"config/destination-address" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationAddress          []ygot.Annotation                       `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                 `path:"config/destination-address-prefix-set" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                       `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	DestinationFlowLabel         *uint32                                 `path:"config/destination-flow-label" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationFlowLabel        []ygot.Annotation                       `path:"config/@destination-flow-label" ygotAnnotation:"true"`
	Dscp                         *uint8                                  `path:"config/dscp" module:"openconfig-acl/openconfig-acl"`
	ΛDscp                        []ygot.Annotation                       `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                 `path:"config/dscp-set" module:"openconfig-acl/openconfig-acl"`
	ΛDscpSet                     []ygot.Annotation                       `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                  `path:"config/hop-limit" module:"openconfig-acl/openconfig-acl"`
	ΛHopLimit                    []ygot.Annotation                       `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv6                       *Acl_AclSet_AclEntry_Ipv6_Icmpv6        `path:"icmpv6" module:"openconfig-acl"`
	ΛIcmpv6                      []ygot.Annotation                       `path:"@icmpv6" ygotAnnotation:"true"`
	Length                       *uint16                                 `path:"config/length" module:"openconfig-acl/openconfig-acl"`
	ΛLength                      []ygot.Annotation                       `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     Acl_AclSet_AclEntry_Ipv6_Protocol_Union `path:"config/protocol" module:"openconfig-acl/openconfig-acl"`
	ΛProtocol                    []ygot.Annotation                       `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                 `path:"config/source-address" module:"openconfig-acl/openconfig-acl"`
	ΛSourceAddress               []ygot.Annotation                       `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                 `path:"config/source-address-prefix-set" module:"openconfig-acl/openconfig-acl"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                       `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
	SourceFlowLabel              *uint32                                 `path:"config/source-flow-label" module:"openconfig-acl/openconfig-acl"`
	ΛSourceFlowLabel             []ygot.Annotation                       `path:"config/@source-flow-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6) IsYANGGoStruct() {}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *Acl_AclSet_AclEntry_Ipv6) GetOrCreateIcmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &Acl_AclSet_AclEntry_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from Acl_AclSet_AclEntry_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_AclSet_AclEntry_Ipv6) GetIcmpv6() *Acl_AclSet_AclEntry_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetProtocol() Acl_AclSet_AclEntry_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the Acl_AclSet_AclEntry_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv6.
func (*Acl_AclSet_AclEntry_Ipv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv6Types_CODE `path:"config/code" module:"openconfig-acl/openconfig-acl"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv6Types_TYPE `path:"config/type" module:"openconfig-acl/openconfig-acl"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) GetCode() E_Icmpv6Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) GetType() E_Icmpv6Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Ipv6_Icmpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Ipv6_Icmpv6.
func (*Acl_AclSet_AclEntry_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_L2 represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2 struct {
	ΛMetadata           []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	DestinationMac      *string                                `path:"config/destination-mac" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationMac     []ygot.Annotation                      `path:"config/@destination-mac" ygotAnnotation:"true"`
	DestinationMacMask  *string                                `path:"config/destination-mac-mask" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationMacMask []ygot.Annotation                      `path:"config/@destination-mac-mask" ygotAnnotation:"true"`
	Ethertype           Acl_AclSet_AclEntry_L2_Ethertype_Union `path:"config/ethertype" module:"openconfig-acl/openconfig-acl"`
	ΛEthertype          []ygot.Annotation                      `path:"config/@ethertype" ygotAnnotation:"true"`
	SourceMac           *string                                `path:"config/source-mac" module:"openconfig-acl/openconfig-acl"`
	ΛSourceMac          []ygot.Annotation                      `path:"config/@source-mac" ygotAnnotation:"true"`
	SourceMacMask       *string                                `path:"config/source-mac-mask" module:"openconfig-acl/openconfig-acl"`
	ΛSourceMacMask      []ygot.Annotation                      `path:"config/@source-mac-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetEthertype() Acl_AclSet_AclEntry_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the Acl_AclSet_AclEntry_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_L2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_L2.
func (*Acl_AclSet_AclEntry_L2) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Mpls represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_Mpls struct {
	ΛMetadata        []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	EndLabelValue    Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union   `path:"config/end-label-value" module:"openconfig-acl/openconfig-acl"`
	ΛEndLabelValue   []ygot.Annotation                              `path:"config/@end-label-value" ygotAnnotation:"true"`
	StartLabelValue  Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union `path:"config/start-label-value" module:"openconfig-acl/openconfig-acl"`
	ΛStartLabelValue []ygot.Annotation                              `path:"config/@start-label-value" ygotAnnotation:"true"`
	TrafficClass     *uint8                                         `path:"config/traffic-class" module:"openconfig-acl/openconfig-acl"`
	ΛTrafficClass    []ygot.Annotation                              `path:"config/@traffic-class" ygotAnnotation:"true"`
	TtlValue         *uint8                                         `path:"config/ttl-value" module:"openconfig-acl/openconfig-acl"`
	ΛTtlValue        []ygot.Annotation                              `path:"config/@ttl-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Mpls) IsYANGGoStruct() {}

// GetEndLabelValue retrieves the value of the leaf EndLabelValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabelValue is set, it can
// safely use t.GetEndLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabelValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetEndLabelValue() Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union {
	if t == nil || t.EndLabelValue == nil {
		return nil
	}
	return t.EndLabelValue
}

// GetStartLabelValue retrieves the value of the leaf StartLabelValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabelValue is set, it can
// safely use t.GetStartLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabelValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetStartLabelValue() Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union {
	if t == nil || t.StartLabelValue == nil {
		return nil
	}
	return t.StartLabelValue
}

// GetTrafficClass retrieves the value of the leaf TrafficClass from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficClass is set, it can
// safely use t.GetTrafficClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficClass == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetTrafficClass() uint8 {
	if t == nil || t.TrafficClass == nil {
		return 0
	}
	return *t.TrafficClass
}

// GetTtlValue retrieves the value of the leaf TtlValue from the Acl_AclSet_AclEntry_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlValue is set, it can
// safely use t.GetTtlValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlValue == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Mpls) GetTtlValue() uint8 {
	if t == nil || t.TtlValue == nil {
		return 0
	}
	return *t.TtlValue
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Mpls.
func (*Acl_AclSet_AclEntry_Mpls) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_AclSet_AclEntry_Transport represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_Transport struct {
	ΛMetadata                []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	BuiltinDetail            E_Transport_BuiltinDetail                           `path:"config/builtin-detail" module:"openconfig-acl/openconfig-acl"`
	ΛBuiltinDetail           []ygot.Annotation                                   `path:"config/@builtin-detail" ygotAnnotation:"true"`
	DestinationPort          Acl_AclSet_AclEntry_Transport_DestinationPort_Union `path:"config/destination-port" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationPort         []ygot.Annotation                                   `path:"config/@destination-port" ygotAnnotation:"true"`
	DestinationPortSet       *string                                             `path:"config/destination-port-set" module:"openconfig-acl/openconfig-acl"`
	ΛDestinationPortSet      []ygot.Annotation                                   `path:"config/@destination-port-set" ygotAnnotation:"true"`
	DetailMode               E_Transport_DetailMode                              `path:"config/detail-mode" module:"openconfig-acl/openconfig-acl"`
	ΛDetailMode              []ygot.Annotation                                   `path:"config/@detail-mode" ygotAnnotation:"true"`
	ExplicitDetailMatchMode  E_Transport_ExplicitDetailMatchMode                 `path:"config/explicit-detail-match-mode" module:"openconfig-acl/openconfig-acl"`
	ΛExplicitDetailMatchMode []ygot.Annotation                                   `path:"config/@explicit-detail-match-mode" ygotAnnotation:"true"`
	ExplicitTcpFlags         []E_PacketMatchTypes_TCP_FLAGS                      `path:"config/explicit-tcp-flags" module:"openconfig-acl/openconfig-acl"`
	ΛExplicitTcpFlags        []ygot.Annotation                                   `path:"config/@explicit-tcp-flags" ygotAnnotation:"true"`
	SourcePort               Acl_AclSet_AclEntry_Transport_SourcePort_Union      `path:"config/source-port" module:"openconfig-acl/openconfig-acl"`
	ΛSourcePort              []ygot.Annotation                                   `path:"config/@source-port" ygotAnnotation:"true"`
	SourcePortSet            *string                                             `path:"config/source-port-set" module:"openconfig-acl/openconfig-acl"`
	ΛSourcePortSet           []ygot.Annotation                                   `path:"config/@source-port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_AclSet_AclEntry_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_AclSet_AclEntry_Transport) IsYANGGoStruct() {}

// GetBuiltinDetail retrieves the value of the leaf BuiltinDetail from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BuiltinDetail is set, it can
// safely use t.GetBuiltinDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BuiltinDetail == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetBuiltinDetail() E_Transport_BuiltinDetail {
	if t == nil || t.BuiltinDetail == 0 {
		return 0
	}
	return t.BuiltinDetail
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDestinationPort() Acl_AclSet_AclEntry_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetDestinationPortSet retrieves the value of the leaf DestinationPortSet from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPortSet is set, it can
// safely use t.GetDestinationPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPortSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDestinationPortSet() string {
	if t == nil || t.DestinationPortSet == nil {
		return ""
	}
	return *t.DestinationPortSet
}

// GetDetailMode retrieves the value of the leaf DetailMode from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailMode is set, it can
// safely use t.GetDetailMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailMode == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetDetailMode() E_Transport_DetailMode {
	if t == nil || t.DetailMode == 0 {
		return 0
	}
	return t.DetailMode
}

// GetExplicitDetailMatchMode retrieves the value of the leaf ExplicitDetailMatchMode from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitDetailMatchMode is set, it can
// safely use t.GetExplicitDetailMatchMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitDetailMatchMode == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetExplicitDetailMatchMode() E_Transport_ExplicitDetailMatchMode {
	if t == nil || t.ExplicitDetailMatchMode == 0 {
		return 0
	}
	return t.ExplicitDetailMatchMode
}

// GetExplicitTcpFlags retrieves the value of the leaf ExplicitTcpFlags from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitTcpFlags is set, it can
// safely use t.GetExplicitTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitTcpFlags == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetExplicitTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.ExplicitTcpFlags == nil {
		return nil
	}
	return t.ExplicitTcpFlags
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetSourcePort() Acl_AclSet_AclEntry_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetSourcePortSet retrieves the value of the leaf SourcePortSet from the Acl_AclSet_AclEntry_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePortSet is set, it can
// safely use t.GetSourcePortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePortSet == nil' before retrieving the leaf's value.
func (t *Acl_AclSet_AclEntry_Transport) GetSourcePortSet() string {
	if t == nil || t.SourcePortSet == nil {
		return ""
	}
	return *t.SourcePortSet
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_AclSet_AclEntry_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_AclSet_AclEntry_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_AclSet_AclEntry_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_AclSet_AclEntry_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_AclSet_AclEntry_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_AclSet_AclEntry_Transport.
func (*Acl_AclSet_AclEntry_Transport) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_Interface struct {
	ΛMetadata      []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	EgressAclSet   map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet   `path:"egress-acl-sets/egress-acl-set" module:"openconfig-acl/openconfig-acl"`
	ΛEgressAclSet  []ygot.Annotation                                                `path:"egress-acl-sets/@egress-acl-set" ygotAnnotation:"true"`
	Id             *string                                                          `path:"config/id|id" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛId            []ygot.Annotation                                                `path:"config/@id|@id" ygotAnnotation:"true"`
	IngressAclSet  map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet `path:"ingress-acl-sets/ingress-acl-set" module:"openconfig-acl/openconfig-acl"`
	ΛIngressAclSet []ygot.Annotation                                                `path:"ingress-acl-sets/@ingress-acl-set" ygotAnnotation:"true"`
	InterfaceRef   *Acl_Interface_InterfaceRef                                      `path:"interface-ref" module:"openconfig-acl"`
	ΛInterfaceRef  []ygot.Annotation                                                `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface) IsYANGGoStruct() {}

// Acl_Interface_EgressAclSet_Key represents the key for list EgressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_EgressAclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_Interface_EgressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_Interface_EgressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_Interface_EgressAclSet_Key key struct.
func (t Acl_Interface_EgressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// Acl_Interface_IngressAclSet_Key represents the key for list IngressAclSet of element /openconfig-acl/acl/interfaces/interface.
type Acl_Interface_IngressAclSet_Key struct {
	SetName string         `path:"set-name"`
	Type    E_Acl_ACL_TYPE `path:"type"`
}

// IsYANGGoKeyStruct ensures that Acl_Interface_IngressAclSet_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Acl_Interface_IngressAclSet_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Acl_Interface_IngressAclSet_Key key struct.
func (t Acl_Interface_IngressAclSet_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"set-name": t.SetName,
		"type":     t.Type,
	}, nil
}

// NewEgressAclSet creates a new entry in the EgressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) (*Acl_Interface_EgressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressAclSet", key)
	}

	t.EgressAclSet[key] = &Acl_Interface_EgressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.EgressAclSet[key], nil
}

// RenameEgressAclSet renames an entry in the list EgressAclSet within
// the Acl_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface) RenameEgressAclSet(oldK, newK Acl_Interface_EgressAclSet_Key) error {
	if _, ok := t.EgressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressAclSet", newK)
	}

	e, ok := t.EgressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.EgressAclSet[newK] = e
	delete(t.EgressAclSet, oldK)
	return nil
}

// GetOrCreateEgressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSet {

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.EgressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetEgressAclSet retrieves the value with the specified key from
// the EgressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSet {

	if t == nil {
		return nil
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.EgressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressAclSet deletes the value with the specified keys from
// the receiver Acl_Interface. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface) DeleteEgressAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := Acl_Interface_EgressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.EgressAclSet, key)
}

// AppendEgressAclSet appends the supplied Acl_Interface_EgressAclSet struct to the
// list EgressAclSet of Acl_Interface. If the key value(s) specified in
// the supplied Acl_Interface_EgressAclSet already exist in the list, an error is
// returned.
func (t *Acl_Interface) AppendEgressAclSet(v *Acl_Interface_EgressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := Acl_Interface_EgressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressAclSet == nil {
		t.EgressAclSet = make(map[Acl_Interface_EgressAclSet_Key]*Acl_Interface_EgressAclSet)
	}

	if _, ok := t.EgressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list EgressAclSet %v", key)
	}

	t.EgressAclSet[key] = v
	return nil
}

// NewIngressAclSet creates a new entry in the IngressAclSet list of the
// Acl_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface) NewIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) (*Acl_Interface_IngressAclSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IngressAclSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IngressAclSet", key)
	}

	t.IngressAclSet[key] = &Acl_Interface_IngressAclSet{
		SetName: &SetName,
		Type:    Type,
	}

	return t.IngressAclSet[key], nil
}

// RenameIngressAclSet renames an entry in the list IngressAclSet within
// the Acl_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface) RenameIngressAclSet(oldK, newK Acl_Interface_IngressAclSet_Key) error {
	if _, ok := t.IngressAclSet[newK]; ok {
		return fmt.Errorf("key %v already exists in IngressAclSet", newK)
	}

	e, ok := t.IngressAclSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IngressAclSet", oldK)
	}
	e.SetName = &newK.SetName
	e.Type = newK.Type

	t.IngressAclSet[newK] = e
	delete(t.IngressAclSet, oldK)
	return nil
}

// GetOrCreateIngressAclSet retrieves the value with the specified keys from
// the receiver Acl_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface) GetOrCreateIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSet {

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if v, ok := t.IngressAclSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIngressAclSet(SetName, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIngressAclSet got unexpected error: %v", err))
	}
	return v
}

// GetIngressAclSet retrieves the value with the specified key from
// the IngressAclSet map field of Acl_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface) GetIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSet {

	if t == nil {
		return nil
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	if lm, ok := t.IngressAclSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIngressAclSet deletes the value with the specified keys from
// the receiver Acl_Interface. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface) DeleteIngressAclSet(SetName string, Type E_Acl_ACL_TYPE) {
	key := Acl_Interface_IngressAclSet_Key{
		SetName: SetName,
		Type:    Type,
	}

	delete(t.IngressAclSet, key)
}

// AppendIngressAclSet appends the supplied Acl_Interface_IngressAclSet struct to the
// list IngressAclSet of Acl_Interface. If the key value(s) specified in
// the supplied Acl_Interface_IngressAclSet already exist in the list, an error is
// returned.
func (t *Acl_Interface) AppendIngressAclSet(v *Acl_Interface_IngressAclSet) error {
	if v.SetName == nil {
		return fmt.Errorf("invalid nil key for SetName")
	}

	key := Acl_Interface_IngressAclSet_Key{
		SetName: *v.SetName,
		Type:    v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IngressAclSet == nil {
		t.IngressAclSet = make(map[Acl_Interface_IngressAclSet_Key]*Acl_Interface_IngressAclSet)
	}

	if _, ok := t.IngressAclSet[key]; ok {
		return fmt.Errorf("duplicate key for list IngressAclSet %v", key)
	}

	t.IngressAclSet[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Acl_Interface) GetOrCreateInterfaceRef() *Acl_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Acl_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Acl_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Acl_Interface) GetInterfaceRef() *Acl_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the Acl_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Acl_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.EgressAclSet {
		e.PopulateDefaults()
	}
	for _, e := range t.IngressAclSet {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface struct, which is a YANG list entry.
func (t *Acl_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface.
func (*Acl_Interface) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_EgressAclSet represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSet struct {
	ΛMetadata []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	AclEntry  map[uint32]*Acl_Interface_EgressAclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	ΛAclEntry []ygot.Annotation                               `path:"acl-entries/@acl-entry" ygotAnnotation:"true"`
	SetName   *string                                         `path:"config/set-name|set-name" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛSetName  []ygot.Annotation                               `path:"config/@set-name|@set-name" ygotAnnotation:"true"`
	Type      E_Acl_ACL_TYPE                                  `path:"config/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛType     []ygot.Annotation                               `path:"config/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_EgressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_EgressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_EgressAclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_EgressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_Interface_EgressAclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface_EgressAclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_EgressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_EgressAclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_EgressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_EgressAclSet) GetAclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_Interface_EgressAclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface_EgressAclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_Interface_EgressAclSet_AclEntry struct to the
// list AclEntry of Acl_Interface_EgressAclSet. If the key value(s) specified in
// the supplied Acl_Interface_EgressAclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_Interface_EgressAclSet) AppendAclEntry(v *Acl_Interface_EgressAclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_EgressAclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the Acl_Interface_EgressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the Acl_Interface_EgressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_EgressAclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_EgressAclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_EgressAclSet.
func (*Acl_Interface_EgressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_EgressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation `path:"state/@matched-packets" ygotAnnotation:"true"`
	SequenceId      *uint32           `path:"state/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛSequenceId     []ygot.Annotation `path:"state/@sequence-id|@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface_EgressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_EgressAclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_Interface_EgressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_Interface_EgressAclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_EgressAclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_EgressAclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Acl_Interface_EgressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_EgressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_EgressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_EgressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_EgressAclSet_AclEntry.
func (*Acl_Interface_EgressAclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_IngressAclSet represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSet struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AclEntry  map[uint32]*Acl_Interface_IngressAclSet_AclEntry `path:"acl-entries/acl-entry" module:"openconfig-acl/openconfig-acl"`
	ΛAclEntry []ygot.Annotation                                `path:"acl-entries/@acl-entry" ygotAnnotation:"true"`
	SetName   *string                                          `path:"config/set-name|set-name" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛSetName  []ygot.Annotation                                `path:"config/@set-name|@set-name" ygotAnnotation:"true"`
	Type      E_Acl_ACL_TYPE                                   `path:"config/type|type" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛType     []ygot.Annotation                                `path:"config/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet) IsYANGGoStruct() {}

// NewAclEntry creates a new entry in the AclEntry list of the
// Acl_Interface_IngressAclSet struct. The keys of the list are populated from the input
// arguments.
func (t *Acl_Interface_IngressAclSet) NewAclEntry(SequenceId uint32) (*Acl_Interface_IngressAclSet_AclEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AclEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AclEntry", key)
	}

	t.AclEntry[key] = &Acl_Interface_IngressAclSet_AclEntry{
		SequenceId: &SequenceId,
	}

	return t.AclEntry[key], nil
}

// RenameAclEntry renames an entry in the list AclEntry within
// the Acl_Interface_IngressAclSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Acl_Interface_IngressAclSet) RenameAclEntry(oldK, newK uint32) error {
	if _, ok := t.AclEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in AclEntry", newK)
	}

	e, ok := t.AclEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AclEntry", oldK)
	}
	e.SequenceId = &newK

	t.AclEntry[newK] = e
	delete(t.AclEntry, oldK)
	return nil
}

// GetOrCreateAclEntry retrieves the value with the specified keys from
// the receiver Acl_Interface_IngressAclSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Acl_Interface_IngressAclSet) GetOrCreateAclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntry {

	key := SequenceId

	if v, ok := t.AclEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAclEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAclEntry got unexpected error: %v", err))
	}
	return v
}

// GetAclEntry retrieves the value with the specified key from
// the AclEntry map field of Acl_Interface_IngressAclSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Acl_Interface_IngressAclSet) GetAclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntry {

	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.AclEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteAclEntry deletes the value with the specified keys from
// the receiver Acl_Interface_IngressAclSet. If there is no such element, the function
// is a no-op.
func (t *Acl_Interface_IngressAclSet) DeleteAclEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.AclEntry, key)
}

// AppendAclEntry appends the supplied Acl_Interface_IngressAclSet_AclEntry struct to the
// list AclEntry of Acl_Interface_IngressAclSet. If the key value(s) specified in
// the supplied Acl_Interface_IngressAclSet_AclEntry already exist in the list, an error is
// returned.
func (t *Acl_Interface_IngressAclSet) AppendAclEntry(v *Acl_Interface_IngressAclSet_AclEntry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AclEntry == nil {
		t.AclEntry = make(map[uint32]*Acl_Interface_IngressAclSet_AclEntry)
	}

	if _, ok := t.AclEntry[key]; ok {
		return fmt.Errorf("duplicate key for list AclEntry %v", key)
	}

	t.AclEntry[key] = v
	return nil
}

// GetSetName retrieves the value of the leaf SetName from the Acl_Interface_IngressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetName is set, it can
// safely use t.GetSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetName == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet) GetSetName() string {
	if t == nil || t.SetName == nil {
		return ""
	}
	return *t.SetName
}

// GetType retrieves the value of the leaf Type from the Acl_Interface_IngressAclSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet) GetType() E_Acl_ACL_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_IngressAclSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_IngressAclSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AclEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SetName == nil {
		return nil, fmt.Errorf("nil value for key SetName")
	}

	return map[string]interface{}{
		"set-name": *t.SetName,
		"type":     t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_IngressAclSet.
func (*Acl_Interface_IngressAclSet) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_IngressAclSet_AclEntry represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"state/matched-octets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedOctets  []ygot.Annotation `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"state/matched-packets" module:"openconfig-acl/openconfig-acl"`
	ΛMatchedPackets []ygot.Annotation `path:"state/@matched-packets" ygotAnnotation:"true"`
	SequenceId      *uint32           `path:"state/sequence-id|sequence-id" module:"openconfig-acl/openconfig-acl|openconfig-acl"`
	ΛSequenceId     []ygot.Annotation `path:"state/@sequence-id|@sequence-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface_IngressAclSet_AclEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_IngressAclSet_AclEntry) IsYANGGoStruct() {}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// GetSequenceId retrieves the value of the leaf SequenceId from the Acl_Interface_IngressAclSet_AclEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *Acl_Interface_IngressAclSet_AclEntry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_IngressAclSet_AclEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_IngressAclSet_AclEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Acl_Interface_IngressAclSet_AclEntry struct, which is a YANG list entry.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_IngressAclSet_AclEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_IngressAclSet_AclEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_IngressAclSet_AclEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_IngressAclSet_AclEntry.
func (*Acl_Interface_IngressAclSet_AclEntry) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Acl_Interface_InterfaceRef represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-acl/openconfig-acl"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-acl/openconfig-acl"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Acl_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Acl_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Acl_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Acl_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Acl_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Acl_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the Acl_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Acl_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Acl_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Acl_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Acl_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Acl_Interface_InterfaceRef.
func (*Acl_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-acl"
}

// Aps represents the /openconfig-transport-line-protection/aps YANG schema element.
type Aps struct {
	ΛMetadata  []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	ApsModule  map[string]*Aps_ApsModule `path:"aps-modules/aps-module" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛApsModule []ygot.Annotation         `path:"aps-modules/@aps-module" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps) IsYANGGoStruct() {}

// NewApsModule creates a new entry in the ApsModule list of the
// Aps struct. The keys of the list are populated from the input
// arguments.
func (t *Aps) NewApsModule(Name string) (*Aps_ApsModule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApsModule == nil {
		t.ApsModule = make(map[string]*Aps_ApsModule)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApsModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApsModule", key)
	}

	t.ApsModule[key] = &Aps_ApsModule{
		Name: &Name,
	}

	return t.ApsModule[key], nil
}

// RenameApsModule renames an entry in the list ApsModule within
// the Aps struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Aps) RenameApsModule(oldK, newK string) error {
	if _, ok := t.ApsModule[newK]; ok {
		return fmt.Errorf("key %v already exists in ApsModule", newK)
	}

	e, ok := t.ApsModule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ApsModule", oldK)
	}
	e.Name = &newK

	t.ApsModule[newK] = e
	delete(t.ApsModule, oldK)
	return nil
}

// GetOrCreateApsModule retrieves the value with the specified keys from
// the receiver Aps. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Aps) GetOrCreateApsModule(Name string) *Aps_ApsModule {

	key := Name

	if v, ok := t.ApsModule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApsModule(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApsModule got unexpected error: %v", err))
	}
	return v
}

// GetApsModule retrieves the value with the specified key from
// the ApsModule map field of Aps. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Aps) GetApsModule(Name string) *Aps_ApsModule {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ApsModule[key]; ok {
		return lm
	}
	return nil
}

// DeleteApsModule deletes the value with the specified keys from
// the receiver Aps. If there is no such element, the function
// is a no-op.
func (t *Aps) DeleteApsModule(Name string) {
	key := Name

	delete(t.ApsModule, key)
}

// AppendApsModule appends the supplied Aps_ApsModule struct to the
// list ApsModule of Aps. If the key value(s) specified in
// the supplied Aps_ApsModule already exist in the list, an error is
// returned.
func (t *Aps) AppendApsModule(v *Aps_ApsModule) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApsModule == nil {
		t.ApsModule = make(map[string]*Aps_ApsModule)
	}

	if _, ok := t.ApsModule[key]; ok {
		return fmt.Errorf("duplicate key for list ApsModule %v", key)
	}

	t.ApsModule[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Aps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ApsModule {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps.
func (*Aps) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module YANG schema element.
type Aps_ApsModule struct {
	ΛMetadata                      []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	ActivePath                     E_TransportLineProtection_APS_PATHS `path:"state/active-path" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛActivePath                    []ygot.Annotation                   `path:"state/@active-path" ygotAnnotation:"true"`
	ForceToPort                    E_ApsModule_ForceToPort             `path:"config/force-to-port" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛForceToPort                   []ygot.Annotation                   `path:"config/@force-to-port" ygotAnnotation:"true"`
	HoldOffTime                    *uint32                             `path:"config/hold-off-time" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛHoldOffTime                   []ygot.Annotation                   `path:"config/@hold-off-time" ygotAnnotation:"true"`
	Name                           *string                             `path:"config/name|name" module:"openconfig-transport-line-protection/openconfig-transport-line-protection|openconfig-transport-line-protection"`
	ΛName                          []ygot.Annotation                   `path:"config/@name|@name" ygotAnnotation:"true"`
	Ports                          *Aps_ApsModule_Ports                `path:"ports" module:"openconfig-transport-line-protection"`
	ΛPorts                         []ygot.Annotation                   `path:"@ports" ygotAnnotation:"true"`
	PrimarySwitchHysteresis        *float64                            `path:"config/primary-switch-hysteresis" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛPrimarySwitchHysteresis       []ygot.Annotation                   `path:"config/@primary-switch-hysteresis" ygotAnnotation:"true"`
	PrimarySwitchThreshold         *float64                            `path:"config/primary-switch-threshold" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛPrimarySwitchThreshold        []ygot.Annotation                   `path:"config/@primary-switch-threshold" ygotAnnotation:"true"`
	RelativeSwitchThreshold        *float64                            `path:"config/relative-switch-threshold" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛRelativeSwitchThreshold       []ygot.Annotation                   `path:"config/@relative-switch-threshold" ygotAnnotation:"true"`
	RelativeSwitchThresholdOffset  *float64                            `path:"config/relative-switch-threshold-offset" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛRelativeSwitchThresholdOffset []ygot.Annotation                   `path:"config/@relative-switch-threshold-offset" ygotAnnotation:"true"`
	Revertive                      *bool                               `path:"config/revertive" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛRevertive                     []ygot.Annotation                   `path:"config/@revertive" ygotAnnotation:"true"`
	SecondarySwitchThreshold       *float64                            `path:"config/secondary-switch-threshold" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛSecondarySwitchThreshold      []ygot.Annotation                   `path:"config/@secondary-switch-threshold" ygotAnnotation:"true"`
	WaitToRestoreTime              *uint32                             `path:"config/wait-to-restore-time" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛWaitToRestoreTime             []ygot.Annotation                   `path:"config/@wait-to-restore-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule) IsYANGGoStruct() {}

// GetOrCreatePorts retrieves the value of the Ports field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule) GetOrCreatePorts() *Aps_ApsModule_Ports {
	if t.Ports != nil {
		return t.Ports
	}
	t.Ports = &Aps_ApsModule_Ports{}
	return t.Ports
}

// GetPorts returns the value of the Ports struct pointer
// from Aps_ApsModule. If the receiver or the field Ports is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule) GetPorts() *Aps_ApsModule_Ports {
	if t != nil && t.Ports != nil {
		return t.Ports
	}
	return nil
}

// GetActivePath retrieves the value of the leaf ActivePath from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivePath is set, it can
// safely use t.GetActivePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivePath == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetActivePath() E_TransportLineProtection_APS_PATHS {
	if t == nil || t.ActivePath == 0 {
		return 0
	}
	return t.ActivePath
}

// GetForceToPort retrieves the value of the leaf ForceToPort from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceToPort is set, it can
// safely use t.GetForceToPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceToPort == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetForceToPort() E_ApsModule_ForceToPort {
	if t == nil || t.ForceToPort == 0 {
		return ApsModule_ForceToPort_NONE
	}
	return t.ForceToPort
}

// GetHoldOffTime retrieves the value of the leaf HoldOffTime from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldOffTime is set, it can
// safely use t.GetHoldOffTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldOffTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetHoldOffTime() uint32 {
	if t == nil || t.HoldOffTime == nil {
		return 0
	}
	return *t.HoldOffTime
}

// GetName retrieves the value of the leaf Name from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrimarySwitchHysteresis retrieves the value of the leaf PrimarySwitchHysteresis from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimarySwitchHysteresis is set, it can
// safely use t.GetPrimarySwitchHysteresis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimarySwitchHysteresis == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetPrimarySwitchHysteresis() float64 {
	if t == nil || t.PrimarySwitchHysteresis == nil {
		return 0
	}
	return *t.PrimarySwitchHysteresis
}

// GetPrimarySwitchThreshold retrieves the value of the leaf PrimarySwitchThreshold from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimarySwitchThreshold is set, it can
// safely use t.GetPrimarySwitchThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimarySwitchThreshold == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetPrimarySwitchThreshold() float64 {
	if t == nil || t.PrimarySwitchThreshold == nil {
		return 0.0
	}
	return *t.PrimarySwitchThreshold
}

// GetRelativeSwitchThreshold retrieves the value of the leaf RelativeSwitchThreshold from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelativeSwitchThreshold is set, it can
// safely use t.GetRelativeSwitchThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelativeSwitchThreshold == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetRelativeSwitchThreshold() float64 {
	if t == nil || t.RelativeSwitchThreshold == nil {
		return 0
	}
	return *t.RelativeSwitchThreshold
}

// GetRelativeSwitchThresholdOffset retrieves the value of the leaf RelativeSwitchThresholdOffset from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelativeSwitchThresholdOffset is set, it can
// safely use t.GetRelativeSwitchThresholdOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelativeSwitchThresholdOffset == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetRelativeSwitchThresholdOffset() float64 {
	if t == nil || t.RelativeSwitchThresholdOffset == nil {
		return 0
	}
	return *t.RelativeSwitchThresholdOffset
}

// GetRevertive retrieves the value of the leaf Revertive from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revertive is set, it can
// safely use t.GetRevertive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revertive == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetRevertive() bool {
	if t == nil || t.Revertive == nil {
		return false
	}
	return *t.Revertive
}

// GetSecondarySwitchThreshold retrieves the value of the leaf SecondarySwitchThreshold from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondarySwitchThreshold is set, it can
// safely use t.GetSecondarySwitchThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondarySwitchThreshold == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetSecondarySwitchThreshold() float64 {
	if t == nil || t.SecondarySwitchThreshold == nil {
		return 0.0
	}
	return *t.SecondarySwitchThreshold
}

// GetWaitToRestoreTime retrieves the value of the leaf WaitToRestoreTime from the Aps_ApsModule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitToRestoreTime is set, it can
// safely use t.GetWaitToRestoreTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitToRestoreTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule) GetWaitToRestoreTime() uint32 {
	if t == nil || t.WaitToRestoreTime == nil {
		return 0
	}
	return *t.WaitToRestoreTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceToPort == 0 {
		t.ForceToPort = ApsModule_ForceToPort_NONE
	}
	if t.PrimarySwitchHysteresis == nil {
		var v float64 = 0
		t.PrimarySwitchHysteresis = &v
	}
	if t.RelativeSwitchThreshold == nil {
		var v float64 = 0
		t.RelativeSwitchThreshold = &v
	}
	if t.RelativeSwitchThresholdOffset == nil {
		var v float64 = 0
		t.RelativeSwitchThresholdOffset = &v
	}
	t.Ports.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Aps_ApsModule struct, which is a YANG list entry.
func (t *Aps_ApsModule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule.
func (*Aps_ApsModule) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports YANG schema element.
type Aps_ApsModule_Ports struct {
	ΛMetadata         []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	CommonIn          *Aps_ApsModule_Ports_CommonIn         `path:"common-in" module:"openconfig-transport-line-protection"`
	ΛCommonIn         []ygot.Annotation                     `path:"@common-in" ygotAnnotation:"true"`
	CommonOutput      *Aps_ApsModule_Ports_CommonOutput     `path:"common-output" module:"openconfig-transport-line-protection"`
	ΛCommonOutput     []ygot.Annotation                     `path:"@common-output" ygotAnnotation:"true"`
	LinePrimaryIn     *Aps_ApsModule_Ports_LinePrimaryIn    `path:"line-primary-in" module:"openconfig-transport-line-protection"`
	ΛLinePrimaryIn    []ygot.Annotation                     `path:"@line-primary-in" ygotAnnotation:"true"`
	LinePrimaryOut    *Aps_ApsModule_Ports_LinePrimaryOut   `path:"line-primary-out" module:"openconfig-transport-line-protection"`
	ΛLinePrimaryOut   []ygot.Annotation                     `path:"@line-primary-out" ygotAnnotation:"true"`
	LineSecondaryIn   *Aps_ApsModule_Ports_LineSecondaryIn  `path:"line-secondary-in" module:"openconfig-transport-line-protection"`
	ΛLineSecondaryIn  []ygot.Annotation                     `path:"@line-secondary-in" ygotAnnotation:"true"`
	LineSecondaryOut  *Aps_ApsModule_Ports_LineSecondaryOut `path:"line-secondary-out" module:"openconfig-transport-line-protection"`
	ΛLineSecondaryOut []ygot.Annotation                     `path:"@line-secondary-out" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports) IsYANGGoStruct() {}

// GetOrCreateCommonIn retrieves the value of the CommonIn field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateCommonIn() *Aps_ApsModule_Ports_CommonIn {
	if t.CommonIn != nil {
		return t.CommonIn
	}
	t.CommonIn = &Aps_ApsModule_Ports_CommonIn{}
	return t.CommonIn
}

// GetOrCreateCommonOutput retrieves the value of the CommonOutput field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateCommonOutput() *Aps_ApsModule_Ports_CommonOutput {
	if t.CommonOutput != nil {
		return t.CommonOutput
	}
	t.CommonOutput = &Aps_ApsModule_Ports_CommonOutput{}
	return t.CommonOutput
}

// GetOrCreateLinePrimaryIn retrieves the value of the LinePrimaryIn field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateLinePrimaryIn() *Aps_ApsModule_Ports_LinePrimaryIn {
	if t.LinePrimaryIn != nil {
		return t.LinePrimaryIn
	}
	t.LinePrimaryIn = &Aps_ApsModule_Ports_LinePrimaryIn{}
	return t.LinePrimaryIn
}

// GetOrCreateLinePrimaryOut retrieves the value of the LinePrimaryOut field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateLinePrimaryOut() *Aps_ApsModule_Ports_LinePrimaryOut {
	if t.LinePrimaryOut != nil {
		return t.LinePrimaryOut
	}
	t.LinePrimaryOut = &Aps_ApsModule_Ports_LinePrimaryOut{}
	return t.LinePrimaryOut
}

// GetOrCreateLineSecondaryIn retrieves the value of the LineSecondaryIn field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateLineSecondaryIn() *Aps_ApsModule_Ports_LineSecondaryIn {
	if t.LineSecondaryIn != nil {
		return t.LineSecondaryIn
	}
	t.LineSecondaryIn = &Aps_ApsModule_Ports_LineSecondaryIn{}
	return t.LineSecondaryIn
}

// GetOrCreateLineSecondaryOut retrieves the value of the LineSecondaryOut field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports) GetOrCreateLineSecondaryOut() *Aps_ApsModule_Ports_LineSecondaryOut {
	if t.LineSecondaryOut != nil {
		return t.LineSecondaryOut
	}
	t.LineSecondaryOut = &Aps_ApsModule_Ports_LineSecondaryOut{}
	return t.LineSecondaryOut
}

// GetCommonIn returns the value of the CommonIn struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field CommonIn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetCommonIn() *Aps_ApsModule_Ports_CommonIn {
	if t != nil && t.CommonIn != nil {
		return t.CommonIn
	}
	return nil
}

// GetCommonOutput returns the value of the CommonOutput struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field CommonOutput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetCommonOutput() *Aps_ApsModule_Ports_CommonOutput {
	if t != nil && t.CommonOutput != nil {
		return t.CommonOutput
	}
	return nil
}

// GetLinePrimaryIn returns the value of the LinePrimaryIn struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field LinePrimaryIn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetLinePrimaryIn() *Aps_ApsModule_Ports_LinePrimaryIn {
	if t != nil && t.LinePrimaryIn != nil {
		return t.LinePrimaryIn
	}
	return nil
}

// GetLinePrimaryOut returns the value of the LinePrimaryOut struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field LinePrimaryOut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetLinePrimaryOut() *Aps_ApsModule_Ports_LinePrimaryOut {
	if t != nil && t.LinePrimaryOut != nil {
		return t.LinePrimaryOut
	}
	return nil
}

// GetLineSecondaryIn returns the value of the LineSecondaryIn struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field LineSecondaryIn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetLineSecondaryIn() *Aps_ApsModule_Ports_LineSecondaryIn {
	if t != nil && t.LineSecondaryIn != nil {
		return t.LineSecondaryIn
	}
	return nil
}

// GetLineSecondaryOut returns the value of the LineSecondaryOut struct pointer
// from Aps_ApsModule_Ports. If the receiver or the field LineSecondaryOut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports) GetLineSecondaryOut() *Aps_ApsModule_Ports_LineSecondaryOut {
	if t != nil && t.LineSecondaryOut != nil {
		return t.LineSecondaryOut
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CommonIn.PopulateDefaults()
	t.CommonOutput.PopulateDefaults()
	t.LinePrimaryIn.PopulateDefaults()
	t.LinePrimaryOut.PopulateDefaults()
	t.LineSecondaryIn.PopulateDefaults()
	t.LineSecondaryOut.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports.
func (*Aps_ApsModule_Ports) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_CommonIn represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/common-in YANG schema element.
type Aps_ApsModule_Ports_CommonIn struct {
	ΛMetadata          []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                   `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                          `path:"state/@attenuation" ygotAnnotation:"true"`
	Enabled            *bool                                      `path:"config/enabled" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛEnabled           []ygot.Annotation                          `path:"config/@enabled" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_CommonIn_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                          `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                   `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                          `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_CommonIn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_CommonIn) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_CommonIn) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_CommonIn_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_CommonIn_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_CommonIn. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_CommonIn) GetOpticalPower() *Aps_ApsModule_Ports_CommonIn_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_CommonIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetEnabled retrieves the value of the leaf Enabled from the Aps_ApsModule_Ports_CommonIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_CommonIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_CommonIn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_CommonIn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonIn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_CommonIn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonIn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_CommonIn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_CommonIn.
func (*Aps_ApsModule_Ports_CommonIn) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_CommonIn_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/common-in/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_CommonIn_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_CommonIn_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_CommonIn_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_CommonIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_CommonIn_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_CommonIn_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_CommonIn_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_CommonIn_OpticalPower.
func (*Aps_ApsModule_Ports_CommonIn_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_CommonOutput represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/common-output YANG schema element.
type Aps_ApsModule_Ports_CommonOutput struct {
	ΛMetadata          []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                       `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                              `path:"state/@attenuation" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_CommonOutput_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                              `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                       `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                              `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_CommonOutput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_CommonOutput) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_CommonOutput) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_CommonOutput_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_CommonOutput_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_CommonOutput. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_CommonOutput) GetOpticalPower() *Aps_ApsModule_Ports_CommonOutput_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_CommonOutput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_CommonOutput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_CommonOutput
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_CommonOutput) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonOutput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_CommonOutput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonOutput) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_CommonOutput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_CommonOutput.
func (*Aps_ApsModule_Ports_CommonOutput) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_CommonOutput_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/common-output/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_CommonOutput_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_CommonOutput_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_CommonOutput_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_CommonOutput_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_CommonOutput_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_CommonOutput_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_CommonOutput_OpticalPower.
func (*Aps_ApsModule_Ports_CommonOutput_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LinePrimaryIn represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-primary-in YANG schema element.
type Aps_ApsModule_Ports_LinePrimaryIn struct {
	ΛMetadata          []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                        `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                               `path:"state/@attenuation" ygotAnnotation:"true"`
	Enabled            *bool                                           `path:"config/enabled" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛEnabled           []ygot.Annotation                               `path:"config/@enabled" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                               `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                        `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                               `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LinePrimaryIn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LinePrimaryIn) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_LinePrimaryIn. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) GetOpticalPower() *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_LinePrimaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetEnabled retrieves the value of the leaf Enabled from the Aps_ApsModule_Ports_LinePrimaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_LinePrimaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LinePrimaryIn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LinePrimaryIn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LinePrimaryIn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LinePrimaryIn.
func (*Aps_ApsModule_Ports_LinePrimaryIn) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-primary-in/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower.
func (*Aps_ApsModule_Ports_LinePrimaryIn_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LinePrimaryOut represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-primary-out YANG schema element.
type Aps_ApsModule_Ports_LinePrimaryOut struct {
	ΛMetadata          []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                         `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                                `path:"state/@attenuation" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                                `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                         `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                                `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LinePrimaryOut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LinePrimaryOut) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_LinePrimaryOut. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) GetOpticalPower() *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_LinePrimaryOut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_LinePrimaryOut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LinePrimaryOut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LinePrimaryOut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LinePrimaryOut) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LinePrimaryOut.
func (*Aps_ApsModule_Ports_LinePrimaryOut) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-primary-out/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower.
func (*Aps_ApsModule_Ports_LinePrimaryOut_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LineSecondaryIn represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-secondary-in YANG schema element.
type Aps_ApsModule_Ports_LineSecondaryIn struct {
	ΛMetadata          []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                          `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                                 `path:"state/@attenuation" ygotAnnotation:"true"`
	Enabled            *bool                                             `path:"config/enabled" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛEnabled           []ygot.Annotation                                 `path:"config/@enabled" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                                 `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                          `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                                 `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LineSecondaryIn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LineSecondaryIn) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_LineSecondaryIn. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) GetOpticalPower() *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_LineSecondaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetEnabled retrieves the value of the leaf Enabled from the Aps_ApsModule_Ports_LineSecondaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_LineSecondaryIn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LineSecondaryIn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LineSecondaryIn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LineSecondaryIn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LineSecondaryIn.
func (*Aps_ApsModule_Ports_LineSecondaryIn) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-secondary-in/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower.
func (*Aps_ApsModule_Ports_LineSecondaryIn_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LineSecondaryOut represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-secondary-out YANG schema element.
type Aps_ApsModule_Ports_LineSecondaryOut struct {
	ΛMetadata          []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Attenuation        *float64                                           `path:"state/attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛAttenuation       []ygot.Annotation                                  `path:"state/@attenuation" ygotAnnotation:"true"`
	OpticalPower       *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower `path:"state/optical-power" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛOpticalPower      []ygot.Annotation                                  `path:"state/@optical-power" ygotAnnotation:"true"`
	TargetAttenuation  *float64                                           `path:"config/target-attenuation" module:"openconfig-transport-line-protection/openconfig-transport-line-protection"`
	ΛTargetAttenuation []ygot.Annotation                                  `path:"config/@target-attenuation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LineSecondaryOut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LineSecondaryOut) IsYANGGoStruct() {}

// GetOrCreateOpticalPower retrieves the value of the OpticalPower field
// or returns the existing field if it already exists.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) GetOrCreateOpticalPower() *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower {
	if t.OpticalPower != nil {
		return t.OpticalPower
	}
	t.OpticalPower = &Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower{}
	return t.OpticalPower
}

// GetOpticalPower returns the value of the OpticalPower struct pointer
// from Aps_ApsModule_Ports_LineSecondaryOut. If the receiver or the field OpticalPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) GetOpticalPower() *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower {
	if t != nil && t.OpticalPower != nil {
		return t.OpticalPower
	}
	return nil
}

// GetAttenuation retrieves the value of the leaf Attenuation from the Aps_ApsModule_Ports_LineSecondaryOut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attenuation is set, it can
// safely use t.GetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) GetAttenuation() float64 {
	if t == nil || t.Attenuation == nil {
		return 0.0
	}
	return *t.Attenuation
}

// GetTargetAttenuation retrieves the value of the leaf TargetAttenuation from the Aps_ApsModule_Ports_LineSecondaryOut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetAttenuation is set, it can
// safely use t.GetTargetAttenuation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetAttenuation == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) GetTargetAttenuation() float64 {
	if t == nil || t.TargetAttenuation == nil {
		return 0.0
	}
	return *t.TargetAttenuation
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LineSecondaryOut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OpticalPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LineSecondaryOut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LineSecondaryOut) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LineSecondaryOut.
func (*Aps_ApsModule_Ports_LineSecondaryOut) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower represents the /openconfig-transport-line-protection/aps/aps-modules/aps-module/ports/line-secondary-out/state/optical-power YANG schema element.
type Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-protection"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-protection"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-protection"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-protection"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-protection"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-protection"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-protection"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower.
func (*Aps_ApsModule_Ports_LineSecondaryOut_OpticalPower) ΛBelongingModule() string {
	return "openconfig-transport-line-protection"
}

// Bfd represents the /openconfig-bfd/bfd YANG schema element.
type Bfd struct {
	ΛMetadata  []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*Bfd_Interface `path:"interfaces/interface" module:"openconfig-bfd/openconfig-bfd"`
	ΛInterface []ygot.Annotation         `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Bfd struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd) NewInterface(Id string) (*Bfd_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Bfd_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Bfd_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Bfd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Bfd) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Bfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd) GetOrCreateInterface(Id string) *Bfd_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Bfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd) GetInterface(Id string) *Bfd_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Bfd. If there is no such element, the function
// is a no-op.
func (t *Bfd) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Bfd_Interface struct to the
// list Interface of Bfd. If the key value(s) specified in
// the supplied Bfd_Interface already exist in the list, an error is
// returned.
func (t *Bfd) AppendInterface(v *Bfd_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Bfd_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd.
func (*Bfd) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface represents the /openconfig-bfd/bfd/interfaces/interface YANG schema element.
type Bfd_Interface struct {
	ΛMetadata                 []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	DesiredMinimumTxInterval  *uint32                                   `path:"config/desired-minimum-tx-interval" module:"openconfig-bfd/openconfig-bfd"`
	ΛDesiredMinimumTxInterval []ygot.Annotation                         `path:"config/@desired-minimum-tx-interval" ygotAnnotation:"true"`
	DetectionMultiplier       *uint8                                    `path:"config/detection-multiplier" module:"openconfig-bfd/openconfig-bfd"`
	ΛDetectionMultiplier      []ygot.Annotation                         `path:"config/@detection-multiplier" ygotAnnotation:"true"`
	EnablePerMemberLink       *bool                                     `path:"config/enable-per-member-link" module:"openconfig-bfd/openconfig-bfd"`
	ΛEnablePerMemberLink      []ygot.Annotation                         `path:"config/@enable-per-member-link" ygotAnnotation:"true"`
	Enabled                   *bool                                     `path:"config/enabled" module:"openconfig-bfd/openconfig-bfd"`
	ΛEnabled                  []ygot.Annotation                         `path:"config/@enabled" ygotAnnotation:"true"`
	Id                        *string                                   `path:"config/id|id" module:"openconfig-bfd/openconfig-bfd|openconfig-bfd"`
	ΛId                       []ygot.Annotation                         `path:"config/@id|@id" ygotAnnotation:"true"`
	InterfaceRef              *Bfd_Interface_InterfaceRef               `path:"interface-ref" module:"openconfig-bfd"`
	ΛInterfaceRef             []ygot.Annotation                         `path:"@interface-ref" ygotAnnotation:"true"`
	LocalAddress              *string                                   `path:"config/local-address" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalAddress             []ygot.Annotation                         `path:"config/@local-address" ygotAnnotation:"true"`
	MicroBfdSession           map[string]*Bfd_Interface_MicroBfdSession `path:"micro-bfd-sessions/micro-bfd-session" module:"openconfig-bfd/openconfig-bfd"`
	ΛMicroBfdSession          []ygot.Annotation                         `path:"micro-bfd-sessions/@micro-bfd-session" ygotAnnotation:"true"`
	Peer                      map[string]*Bfd_Interface_Peer            `path:"peers/peer" module:"openconfig-bfd/openconfig-bfd"`
	ΛPeer                     []ygot.Annotation                         `path:"peers/@peer" ygotAnnotation:"true"`
	RequiredMinimumReceive    *uint32                                   `path:"config/required-minimum-receive" module:"openconfig-bfd/openconfig-bfd"`
	ΛRequiredMinimumReceive   []ygot.Annotation                         `path:"config/@required-minimum-receive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface) IsYANGGoStruct() {}

// NewMicroBfdSession creates a new entry in the MicroBfdSession list of the
// Bfd_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd_Interface) NewMicroBfdSession(MemberInterface string) (*Bfd_Interface_MicroBfdSession, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*Bfd_Interface_MicroBfdSession)
	}

	key := MemberInterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MicroBfdSession[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MicroBfdSession", key)
	}

	t.MicroBfdSession[key] = &Bfd_Interface_MicroBfdSession{
		MemberInterface: &MemberInterface,
	}

	return t.MicroBfdSession[key], nil
}

// RenameMicroBfdSession renames an entry in the list MicroBfdSession within
// the Bfd_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Bfd_Interface) RenameMicroBfdSession(oldK, newK string) error {
	if _, ok := t.MicroBfdSession[newK]; ok {
		return fmt.Errorf("key %v already exists in MicroBfdSession", newK)
	}

	e, ok := t.MicroBfdSession[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MicroBfdSession", oldK)
	}
	e.MemberInterface = &newK

	t.MicroBfdSession[newK] = e
	delete(t.MicroBfdSession, oldK)
	return nil
}

// GetOrCreateMicroBfdSession retrieves the value with the specified keys from
// the receiver Bfd_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd_Interface) GetOrCreateMicroBfdSession(MemberInterface string) *Bfd_Interface_MicroBfdSession {

	key := MemberInterface

	if v, ok := t.MicroBfdSession[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMicroBfdSession(MemberInterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMicroBfdSession got unexpected error: %v", err))
	}
	return v
}

// GetMicroBfdSession retrieves the value with the specified key from
// the MicroBfdSession map field of Bfd_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd_Interface) GetMicroBfdSession(MemberInterface string) *Bfd_Interface_MicroBfdSession {

	if t == nil {
		return nil
	}

	key := MemberInterface

	if lm, ok := t.MicroBfdSession[key]; ok {
		return lm
	}
	return nil
}

// DeleteMicroBfdSession deletes the value with the specified keys from
// the receiver Bfd_Interface. If there is no such element, the function
// is a no-op.
func (t *Bfd_Interface) DeleteMicroBfdSession(MemberInterface string) {
	key := MemberInterface

	delete(t.MicroBfdSession, key)
}

// AppendMicroBfdSession appends the supplied Bfd_Interface_MicroBfdSession struct to the
// list MicroBfdSession of Bfd_Interface. If the key value(s) specified in
// the supplied Bfd_Interface_MicroBfdSession already exist in the list, an error is
// returned.
func (t *Bfd_Interface) AppendMicroBfdSession(v *Bfd_Interface_MicroBfdSession) error {
	if v.MemberInterface == nil {
		return fmt.Errorf("invalid nil key received for MemberInterface")
	}

	key := *v.MemberInterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*Bfd_Interface_MicroBfdSession)
	}

	if _, ok := t.MicroBfdSession[key]; ok {
		return fmt.Errorf("duplicate key for list MicroBfdSession %v", key)
	}

	t.MicroBfdSession[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// Bfd_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd_Interface) NewPeer(LocalDiscriminator string) (*Bfd_Interface_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*Bfd_Interface_Peer)
	}

	key := LocalDiscriminator

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &Bfd_Interface_Peer{
		LocalDiscriminator: &LocalDiscriminator,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the Bfd_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Bfd_Interface) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.LocalDiscriminator = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver Bfd_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd_Interface) GetOrCreatePeer(LocalDiscriminator string) *Bfd_Interface_Peer {

	key := LocalDiscriminator

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(LocalDiscriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of Bfd_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd_Interface) GetPeer(LocalDiscriminator string) *Bfd_Interface_Peer {

	if t == nil {
		return nil
	}

	key := LocalDiscriminator

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver Bfd_Interface. If there is no such element, the function
// is a no-op.
func (t *Bfd_Interface) DeletePeer(LocalDiscriminator string) {
	key := LocalDiscriminator

	delete(t.Peer, key)
}

// AppendPeer appends the supplied Bfd_Interface_Peer struct to the
// list Peer of Bfd_Interface. If the key value(s) specified in
// the supplied Bfd_Interface_Peer already exist in the list, an error is
// returned.
func (t *Bfd_Interface) AppendPeer(v *Bfd_Interface_Peer) error {
	if v.LocalDiscriminator == nil {
		return fmt.Errorf("invalid nil key received for LocalDiscriminator")
	}

	key := *v.LocalDiscriminator

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*Bfd_Interface_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Bfd_Interface) GetOrCreateInterfaceRef() *Bfd_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Bfd_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Bfd_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface) GetInterfaceRef() *Bfd_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetDesiredMinimumTxInterval retrieves the value of the leaf DesiredMinimumTxInterval from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesiredMinimumTxInterval is set, it can
// safely use t.GetDesiredMinimumTxInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesiredMinimumTxInterval == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetDesiredMinimumTxInterval() uint32 {
	if t == nil || t.DesiredMinimumTxInterval == nil {
		return 0
	}
	return *t.DesiredMinimumTxInterval
}

// GetDetectionMultiplier retrieves the value of the leaf DetectionMultiplier from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionMultiplier is set, it can
// safely use t.GetDetectionMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionMultiplier == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetDetectionMultiplier() uint8 {
	if t == nil || t.DetectionMultiplier == nil {
		return 0
	}
	return *t.DetectionMultiplier
}

// GetEnablePerMemberLink retrieves the value of the leaf EnablePerMemberLink from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnablePerMemberLink is set, it can
// safely use t.GetEnablePerMemberLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnablePerMemberLink == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetEnablePerMemberLink() bool {
	if t == nil || t.EnablePerMemberLink == nil {
		return false
	}
	return *t.EnablePerMemberLink
}

// GetEnabled retrieves the value of the leaf Enabled from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetId retrieves the value of the leaf Id from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRequiredMinimumReceive retrieves the value of the leaf RequiredMinimumReceive from the Bfd_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequiredMinimumReceive is set, it can
// safely use t.GetRequiredMinimumReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequiredMinimumReceive == nil' before retrieving the leaf's value.
func (t *Bfd_Interface) GetRequiredMinimumReceive() uint32 {
	if t == nil || t.RequiredMinimumReceive == nil {
		return 0
	}
	return *t.RequiredMinimumReceive
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnablePerMemberLink == nil {
		var v bool = false
		t.EnablePerMemberLink = &v
	}
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.MicroBfdSession {
		e.PopulateDefaults()
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Bfd_Interface struct, which is a YANG list entry.
func (t *Bfd_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface.
func (*Bfd_Interface) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_InterfaceRef represents the /openconfig-bfd/bfd/interfaces/interface/interface-ref YANG schema element.
type Bfd_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-bfd/openconfig-bfd"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-bfd/openconfig-bfd"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Bfd_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Bfd_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_InterfaceRef.
func (*Bfd_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_MicroBfdSession represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session YANG schema element.
type Bfd_Interface_MicroBfdSession struct {
	ΛMetadata                      []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Async                          *Bfd_Interface_MicroBfdSession_Async `path:"state/async" module:"openconfig-bfd/openconfig-bfd"`
	ΛAsync                         []ygot.Annotation                    `path:"state/@async" ygotAnnotation:"true"`
	DemandModeRequested            *bool                                `path:"state/demand-mode-requested" module:"openconfig-bfd/openconfig-bfd"`
	ΛDemandModeRequested           []ygot.Annotation                    `path:"state/@demand-mode-requested" ygotAnnotation:"true"`
	FailureTransitions             *uint64                              `path:"state/failure-transitions" module:"openconfig-bfd/openconfig-bfd"`
	ΛFailureTransitions            []ygot.Annotation                    `path:"state/@failure-transitions" ygotAnnotation:"true"`
	LastFailureTime                *uint64                              `path:"state/last-failure-time" module:"openconfig-bfd/openconfig-bfd"`
	ΛLastFailureTime               []ygot.Annotation                    `path:"state/@last-failure-time" ygotAnnotation:"true"`
	LocalAddress                   *string                              `path:"config/local-address" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalAddress                  []ygot.Annotation                    `path:"config/@local-address" ygotAnnotation:"true"`
	LocalDiagnosticCode            E_Bfd_BfdDiagnosticCode              `path:"state/local-diagnostic-code" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalDiagnosticCode           []ygot.Annotation                    `path:"state/@local-diagnostic-code" ygotAnnotation:"true"`
	LocalDiscriminator             *string                              `path:"state/local-discriminator" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalDiscriminator            []ygot.Annotation                    `path:"state/@local-discriminator" ygotAnnotation:"true"`
	MemberInterface                *string                              `path:"config/member-interface|member-interface" module:"openconfig-bfd/openconfig-bfd|openconfig-bfd"`
	ΛMemberInterface               []ygot.Annotation                    `path:"config/@member-interface|@member-interface" ygotAnnotation:"true"`
	RemoteAddress                  *string                              `path:"config/remote-address" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteAddress                 []ygot.Annotation                    `path:"config/@remote-address" ygotAnnotation:"true"`
	RemoteAuthenticationEnabled    *bool                                `path:"state/remote-authentication-enabled" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteAuthenticationEnabled   []ygot.Annotation                    `path:"state/@remote-authentication-enabled" ygotAnnotation:"true"`
	RemoteControlPlaneIndependent  *bool                                `path:"state/remote-control-plane-independent" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteControlPlaneIndependent []ygot.Annotation                    `path:"state/@remote-control-plane-independent" ygotAnnotation:"true"`
	RemoteDiagnosticCode           E_Bfd_BfdDiagnosticCode              `path:"state/remote-diagnostic-code" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteDiagnosticCode          []ygot.Annotation                    `path:"state/@remote-diagnostic-code" ygotAnnotation:"true"`
	RemoteDiscriminator            *string                              `path:"state/remote-discriminator" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteDiscriminator           []ygot.Annotation                    `path:"state/@remote-discriminator" ygotAnnotation:"true"`
	RemoteMinimumReceiveInterval   *uint32                              `path:"state/remote-minimum-receive-interval" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteMinimumReceiveInterval  []ygot.Annotation                    `path:"state/@remote-minimum-receive-interval" ygotAnnotation:"true"`
	RemoteSessionState             E_Bfd_BfdSessionState                `path:"state/remote-session-state" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteSessionState            []ygot.Annotation                    `path:"state/@remote-session-state" ygotAnnotation:"true"`
	SessionState                   E_Bfd_BfdSessionState                `path:"state/session-state" module:"openconfig-bfd/openconfig-bfd"`
	ΛSessionState                  []ygot.Annotation                    `path:"state/@session-state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_MicroBfdSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_MicroBfdSession) IsYANGGoStruct() {}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_MicroBfdSession) GetOrCreateAsync() *Bfd_Interface_MicroBfdSession_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &Bfd_Interface_MicroBfdSession_Async{}
	return t.Async
}

// GetAsync returns the value of the Async struct pointer
// from Bfd_Interface_MicroBfdSession. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_MicroBfdSession) GetAsync() *Bfd_Interface_MicroBfdSession_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// GetDemandModeRequested retrieves the value of the leaf DemandModeRequested from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DemandModeRequested is set, it can
// safely use t.GetDemandModeRequested() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DemandModeRequested == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetDemandModeRequested() bool {
	if t == nil || t.DemandModeRequested == nil {
		return false
	}
	return *t.DemandModeRequested
}

// GetFailureTransitions retrieves the value of the leaf FailureTransitions from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureTransitions is set, it can
// safely use t.GetFailureTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureTransitions == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetFailureTransitions() uint64 {
	if t == nil || t.FailureTransitions == nil {
		return 0
	}
	return *t.FailureTransitions
}

// GetLastFailureTime retrieves the value of the leaf LastFailureTime from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastFailureTime is set, it can
// safely use t.GetLastFailureTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastFailureTime == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLastFailureTime() uint64 {
	if t == nil || t.LastFailureTime == nil {
		return 0
	}
	return *t.LastFailureTime
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiagnosticCode retrieves the value of the leaf LocalDiagnosticCode from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiagnosticCode is set, it can
// safely use t.GetLocalDiagnosticCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiagnosticCode == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.LocalDiagnosticCode == 0 {
		return 0
	}
	return t.LocalDiagnosticCode
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiscriminator is set, it can
// safely use t.GetLocalDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiscriminator == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalDiscriminator() string {
	if t == nil || t.LocalDiscriminator == nil {
		return ""
	}
	return *t.LocalDiscriminator
}

// GetMemberInterface retrieves the value of the leaf MemberInterface from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemberInterface is set, it can
// safely use t.GetMemberInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemberInterface == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetMemberInterface() string {
	if t == nil || t.MemberInterface == nil {
		return ""
	}
	return *t.MemberInterface
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRemoteAuthenticationEnabled retrieves the value of the leaf RemoteAuthenticationEnabled from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAuthenticationEnabled is set, it can
// safely use t.GetRemoteAuthenticationEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAuthenticationEnabled == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteAuthenticationEnabled() bool {
	if t == nil || t.RemoteAuthenticationEnabled == nil {
		return false
	}
	return *t.RemoteAuthenticationEnabled
}

// GetRemoteControlPlaneIndependent retrieves the value of the leaf RemoteControlPlaneIndependent from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteControlPlaneIndependent is set, it can
// safely use t.GetRemoteControlPlaneIndependent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteControlPlaneIndependent == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteControlPlaneIndependent() bool {
	if t == nil || t.RemoteControlPlaneIndependent == nil {
		return false
	}
	return *t.RemoteControlPlaneIndependent
}

// GetRemoteDiagnosticCode retrieves the value of the leaf RemoteDiagnosticCode from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiagnosticCode is set, it can
// safely use t.GetRemoteDiagnosticCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiagnosticCode == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.RemoteDiagnosticCode == 0 {
		return 0
	}
	return t.RemoteDiagnosticCode
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiscriminator is set, it can
// safely use t.GetRemoteDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiscriminator == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteDiscriminator() string {
	if t == nil || t.RemoteDiscriminator == nil {
		return ""
	}
	return *t.RemoteDiscriminator
}

// GetRemoteMinimumReceiveInterval retrieves the value of the leaf RemoteMinimumReceiveInterval from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteMinimumReceiveInterval is set, it can
// safely use t.GetRemoteMinimumReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteMinimumReceiveInterval == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteMinimumReceiveInterval() uint32 {
	if t == nil || t.RemoteMinimumReceiveInterval == nil {
		return 0
	}
	return *t.RemoteMinimumReceiveInterval
}

// GetRemoteSessionState retrieves the value of the leaf RemoteSessionState from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteSessionState is set, it can
// safely use t.GetRemoteSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteSessionState == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.RemoteSessionState == 0 {
		return 0
	}
	return t.RemoteSessionState
}

// GetSessionState retrieves the value of the leaf SessionState from the Bfd_Interface_MicroBfdSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionState is set, it can
// safely use t.GetSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionState == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_MicroBfdSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_MicroBfdSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Async.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Bfd_Interface_MicroBfdSession struct, which is a YANG list entry.
func (t *Bfd_Interface_MicroBfdSession) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MemberInterface == nil {
		return nil, fmt.Errorf("nil value for key MemberInterface")
	}

	return map[string]interface{}{
		"member-interface": *t.MemberInterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_MicroBfdSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_MicroBfdSession) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_MicroBfdSession.
func (*Bfd_Interface_MicroBfdSession) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_MicroBfdSession_Async represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/async YANG schema element.
type Bfd_Interface_MicroBfdSession_Async struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_MicroBfdSession_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_MicroBfdSession_Async) IsYANGGoStruct() {}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_MicroBfdSession_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketReceived is set, it can
// safely use t.GetLastPacketReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketReceived == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_MicroBfdSession_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketTransmitted is set, it can
// safely use t.GetLastPacketTransmitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketTransmitted == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_MicroBfdSession_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceivedPackets is set, it can
// safely use t.GetReceivedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceivedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_MicroBfdSession_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmittedPackets is set, it can
// safely use t.GetTransmittedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmittedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_MicroBfdSession_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTransitions is set, it can
// safely use t.GetUpTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTransitions == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_MicroBfdSession_Async
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_MicroBfdSession_Async) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession_Async) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_MicroBfdSession_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession_Async) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_MicroBfdSession_Async) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_MicroBfdSession_Async.
func (*Bfd_Interface_MicroBfdSession_Async) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_Peer represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer YANG schema element.
type Bfd_Interface_Peer struct {
	ΛMetadata                      []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Async                          *Bfd_Interface_Peer_Async             `path:"state/async" module:"openconfig-bfd/openconfig-bfd"`
	ΛAsync                         []ygot.Annotation                     `path:"state/@async" ygotAnnotation:"true"`
	DemandModeRequested            *bool                                 `path:"state/demand-mode-requested" module:"openconfig-bfd/openconfig-bfd"`
	ΛDemandModeRequested           []ygot.Annotation                     `path:"state/@demand-mode-requested" ygotAnnotation:"true"`
	Echo                           *Bfd_Interface_Peer_Echo              `path:"state/echo" module:"openconfig-bfd/openconfig-bfd"`
	ΛEcho                          []ygot.Annotation                     `path:"state/@echo" ygotAnnotation:"true"`
	FailureTransitions             *uint64                               `path:"state/failure-transitions" module:"openconfig-bfd/openconfig-bfd"`
	ΛFailureTransitions            []ygot.Annotation                     `path:"state/@failure-transitions" ygotAnnotation:"true"`
	LastFailureTime                *uint64                               `path:"state/last-failure-time" module:"openconfig-bfd/openconfig-bfd"`
	ΛLastFailureTime               []ygot.Annotation                     `path:"state/@last-failure-time" ygotAnnotation:"true"`
	LocalAddress                   *string                               `path:"state/local-address" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalAddress                  []ygot.Annotation                     `path:"state/@local-address" ygotAnnotation:"true"`
	LocalDiagnosticCode            E_Bfd_BfdDiagnosticCode               `path:"state/local-diagnostic-code" module:"openconfig-bfd/openconfig-bfd"`
	ΛLocalDiagnosticCode           []ygot.Annotation                     `path:"state/@local-diagnostic-code" ygotAnnotation:"true"`
	LocalDiscriminator             *string                               `path:"state/local-discriminator|local-discriminator" module:"openconfig-bfd/openconfig-bfd|openconfig-bfd"`
	ΛLocalDiscriminator            []ygot.Annotation                     `path:"state/@local-discriminator|@local-discriminator" ygotAnnotation:"true"`
	RemoteAddress                  *string                               `path:"state/remote-address" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteAddress                 []ygot.Annotation                     `path:"state/@remote-address" ygotAnnotation:"true"`
	RemoteAuthenticationEnabled    *bool                                 `path:"state/remote-authentication-enabled" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteAuthenticationEnabled   []ygot.Annotation                     `path:"state/@remote-authentication-enabled" ygotAnnotation:"true"`
	RemoteControlPlaneIndependent  *bool                                 `path:"state/remote-control-plane-independent" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteControlPlaneIndependent []ygot.Annotation                     `path:"state/@remote-control-plane-independent" ygotAnnotation:"true"`
	RemoteDiagnosticCode           E_Bfd_BfdDiagnosticCode               `path:"state/remote-diagnostic-code" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteDiagnosticCode          []ygot.Annotation                     `path:"state/@remote-diagnostic-code" ygotAnnotation:"true"`
	RemoteDiscriminator            *string                               `path:"state/remote-discriminator" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteDiscriminator           []ygot.Annotation                     `path:"state/@remote-discriminator" ygotAnnotation:"true"`
	RemoteMinimumReceiveInterval   *uint32                               `path:"state/remote-minimum-receive-interval" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteMinimumReceiveInterval  []ygot.Annotation                     `path:"state/@remote-minimum-receive-interval" ygotAnnotation:"true"`
	RemoteSessionState             E_Bfd_BfdSessionState                 `path:"state/remote-session-state" module:"openconfig-bfd/openconfig-bfd"`
	ΛRemoteSessionState            []ygot.Annotation                     `path:"state/@remote-session-state" ygotAnnotation:"true"`
	SessionState                   E_Bfd_BfdSessionState                 `path:"state/session-state" module:"openconfig-bfd/openconfig-bfd"`
	ΛSessionState                  []ygot.Annotation                     `path:"state/@session-state" ygotAnnotation:"true"`
	SubscribedProtocols            []E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"state/subscribed-protocols" module:"openconfig-bfd/openconfig-bfd"`
	ΛSubscribedProtocols           []ygot.Annotation                     `path:"state/@subscribed-protocols" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer) IsYANGGoStruct() {}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_Peer) GetOrCreateAsync() *Bfd_Interface_Peer_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &Bfd_Interface_Peer_Async{}
	return t.Async
}

// GetOrCreateEcho retrieves the value of the Echo field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_Peer) GetOrCreateEcho() *Bfd_Interface_Peer_Echo {
	if t.Echo != nil {
		return t.Echo
	}
	t.Echo = &Bfd_Interface_Peer_Echo{}
	return t.Echo
}

// GetAsync returns the value of the Async struct pointer
// from Bfd_Interface_Peer. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_Peer) GetAsync() *Bfd_Interface_Peer_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// GetEcho returns the value of the Echo struct pointer
// from Bfd_Interface_Peer. If the receiver or the field Echo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_Peer) GetEcho() *Bfd_Interface_Peer_Echo {
	if t != nil && t.Echo != nil {
		return t.Echo
	}
	return nil
}

// GetDemandModeRequested retrieves the value of the leaf DemandModeRequested from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DemandModeRequested is set, it can
// safely use t.GetDemandModeRequested() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DemandModeRequested == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetDemandModeRequested() bool {
	if t == nil || t.DemandModeRequested == nil {
		return false
	}
	return *t.DemandModeRequested
}

// GetFailureTransitions retrieves the value of the leaf FailureTransitions from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureTransitions is set, it can
// safely use t.GetFailureTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureTransitions == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetFailureTransitions() uint64 {
	if t == nil || t.FailureTransitions == nil {
		return 0
	}
	return *t.FailureTransitions
}

// GetLastFailureTime retrieves the value of the leaf LastFailureTime from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastFailureTime is set, it can
// safely use t.GetLastFailureTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastFailureTime == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLastFailureTime() uint64 {
	if t == nil || t.LastFailureTime == nil {
		return 0
	}
	return *t.LastFailureTime
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiagnosticCode retrieves the value of the leaf LocalDiagnosticCode from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiagnosticCode is set, it can
// safely use t.GetLocalDiagnosticCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiagnosticCode == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.LocalDiagnosticCode == 0 {
		return 0
	}
	return t.LocalDiagnosticCode
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiscriminator is set, it can
// safely use t.GetLocalDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiscriminator == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalDiscriminator() string {
	if t == nil || t.LocalDiscriminator == nil {
		return ""
	}
	return *t.LocalDiscriminator
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRemoteAuthenticationEnabled retrieves the value of the leaf RemoteAuthenticationEnabled from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAuthenticationEnabled is set, it can
// safely use t.GetRemoteAuthenticationEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAuthenticationEnabled == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteAuthenticationEnabled() bool {
	if t == nil || t.RemoteAuthenticationEnabled == nil {
		return false
	}
	return *t.RemoteAuthenticationEnabled
}

// GetRemoteControlPlaneIndependent retrieves the value of the leaf RemoteControlPlaneIndependent from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteControlPlaneIndependent is set, it can
// safely use t.GetRemoteControlPlaneIndependent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteControlPlaneIndependent == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteControlPlaneIndependent() bool {
	if t == nil || t.RemoteControlPlaneIndependent == nil {
		return false
	}
	return *t.RemoteControlPlaneIndependent
}

// GetRemoteDiagnosticCode retrieves the value of the leaf RemoteDiagnosticCode from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiagnosticCode is set, it can
// safely use t.GetRemoteDiagnosticCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiagnosticCode == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.RemoteDiagnosticCode == 0 {
		return 0
	}
	return t.RemoteDiagnosticCode
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiscriminator is set, it can
// safely use t.GetRemoteDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiscriminator == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteDiscriminator() string {
	if t == nil || t.RemoteDiscriminator == nil {
		return ""
	}
	return *t.RemoteDiscriminator
}

// GetRemoteMinimumReceiveInterval retrieves the value of the leaf RemoteMinimumReceiveInterval from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteMinimumReceiveInterval is set, it can
// safely use t.GetRemoteMinimumReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteMinimumReceiveInterval == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteMinimumReceiveInterval() uint32 {
	if t == nil || t.RemoteMinimumReceiveInterval == nil {
		return 0
	}
	return *t.RemoteMinimumReceiveInterval
}

// GetRemoteSessionState retrieves the value of the leaf RemoteSessionState from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteSessionState is set, it can
// safely use t.GetRemoteSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteSessionState == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.RemoteSessionState == 0 {
		return 0
	}
	return t.RemoteSessionState
}

// GetSessionState retrieves the value of the leaf SessionState from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionState is set, it can
// safely use t.GetSessionState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionState == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// GetSubscribedProtocols retrieves the value of the leaf SubscribedProtocols from the Bfd_Interface_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscribedProtocols is set, it can
// safely use t.GetSubscribedProtocols() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscribedProtocols == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetSubscribedProtocols() []E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.SubscribedProtocols == nil {
		return nil
	}
	return t.SubscribedProtocols
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Async.PopulateDefaults()
	t.Echo.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Bfd_Interface_Peer struct, which is a YANG list entry.
func (t *Bfd_Interface_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalDiscriminator == nil {
		return nil, fmt.Errorf("nil value for key LocalDiscriminator")
	}

	return map[string]interface{}{
		"local-discriminator": *t.LocalDiscriminator,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_Peer.
func (*Bfd_Interface_Peer) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_Peer_Async represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/async YANG schema element.
type Bfd_Interface_Peer_Async struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer_Async) IsYANGGoStruct() {}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_Peer_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketReceived is set, it can
// safely use t.GetLastPacketReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketReceived == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_Peer_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketTransmitted is set, it can
// safely use t.GetLastPacketTransmitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketTransmitted == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_Peer_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceivedPackets is set, it can
// safely use t.GetReceivedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceivedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_Peer_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmittedPackets is set, it can
// safely use t.GetTransmittedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmittedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_Peer_Async
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTransitions is set, it can
// safely use t.GetUpTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTransitions == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_Peer_Async
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_Peer_Async) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Async) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Async) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer_Async) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_Peer_Async.
func (*Bfd_Interface_Peer_Async) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Bfd_Interface_Peer_Echo represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/echo YANG schema element.
type Bfd_Interface_Peer_Echo struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Active                 *bool             `path:"active" module:"openconfig-bfd"`
	ΛActive                []ygot.Annotation `path:"@active" ygotAnnotation:"true"`
	LastPacketReceived     *uint64           `path:"last-packet-received" module:"openconfig-bfd"`
	ΛLastPacketReceived    []ygot.Annotation `path:"@last-packet-received" ygotAnnotation:"true"`
	LastPacketTransmitted  *uint64           `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ΛLastPacketTransmitted []ygot.Annotation `path:"@last-packet-transmitted" ygotAnnotation:"true"`
	ReceivedPackets        *uint64           `path:"received-packets" module:"openconfig-bfd"`
	ΛReceivedPackets       []ygot.Annotation `path:"@received-packets" ygotAnnotation:"true"`
	TransmittedPackets     *uint64           `path:"transmitted-packets" module:"openconfig-bfd"`
	ΛTransmittedPackets    []ygot.Annotation `path:"@transmitted-packets" ygotAnnotation:"true"`
	UpTransitions          *uint64           `path:"up-transitions" module:"openconfig-bfd"`
	ΛUpTransitions         []ygot.Annotation `path:"@up-transitions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer_Echo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer_Echo) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketReceived is set, it can
// safely use t.GetLastPacketReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketReceived == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastPacketTransmitted is set, it can
// safely use t.GetLastPacketTransmitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastPacketTransmitted == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceivedPackets is set, it can
// safely use t.GetReceivedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceivedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmittedPackets is set, it can
// safely use t.GetTransmittedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmittedPackets == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_Peer_Echo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpTransitions is set, it can
// safely use t.GetUpTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpTransitions == nil' before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// PopulateDefaults recursively populates unset leaf fields in the Bfd_Interface_Peer_Echo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Bfd_Interface_Peer_Echo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Echo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer_Echo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Echo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer_Echo) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Bfd_Interface_Peer_Echo.
func (*Bfd_Interface_Peer_Echo) ΛBelongingModule() string {
	return "openconfig-bfd"
}

// Component represents the /openconfig-platform/components/component YANG schema element.
type Component struct {
	ΛMetadata             []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	AllocatedPower        *uint32                                 `path:"state/allocated-power" module:"openconfig-platform/openconfig-platform"`
	ΛAllocatedPower       []ygot.Annotation                       `path:"state/@allocated-power" ygotAnnotation:"true"`
	Backplane             *Component_Backplane                    `path:"backplane" module:"openconfig-platform"`
	ΛBackplane            []ygot.Annotation                       `path:"@backplane" ygotAnnotation:"true"`
	BaseMacAddress        *string                                 `path:"state/base-mac-address" module:"openconfig-platform/openconfig-platform"`
	ΛBaseMacAddress       []ygot.Annotation                       `path:"state/@base-mac-address" ygotAnnotation:"true"`
	Chassis               *Component_Chassis                      `path:"chassis" module:"openconfig-platform"`
	ΛChassis              []ygot.Annotation                       `path:"@chassis" ygotAnnotation:"true"`
	CleiCode              *string                                 `path:"state/clei-code" module:"openconfig-platform/openconfig-platform"`
	ΛCleiCode             []ygot.Annotation                       `path:"state/@clei-code" ygotAnnotation:"true"`
	ControllerCard        *Component_ControllerCard               `path:"controller-card" module:"openconfig-platform"`
	ΛControllerCard       []ygot.Annotation                       `path:"@controller-card" ygotAnnotation:"true"`
	Cpu                   *Component_Cpu                          `path:"cpu" module:"openconfig-platform"`
	ΛCpu                  []ygot.Annotation                       `path:"@cpu" ygotAnnotation:"true"`
	Description           *string                                 `path:"state/description" module:"openconfig-platform/openconfig-platform"`
	ΛDescription          []ygot.Annotation                       `path:"state/@description" ygotAnnotation:"true"`
	Empty                 *bool                                   `path:"state/empty" module:"openconfig-platform/openconfig-platform"`
	ΛEmpty                []ygot.Annotation                       `path:"state/@empty" ygotAnnotation:"true"`
	EquipmentFailure      *bool                                   `path:"state/equipment-failure" module:"openconfig-platform/openconfig-alarms"`
	ΛEquipmentFailure     []ygot.Annotation                       `path:"state/@equipment-failure" ygotAnnotation:"true"`
	EquipmentMismatch     *bool                                   `path:"state/equipment-mismatch" module:"openconfig-platform/openconfig-alarms"`
	ΛEquipmentMismatch    []ygot.Annotation                       `path:"state/@equipment-mismatch" ygotAnnotation:"true"`
	Fabric                *Component_Fabric                       `path:"fabric" module:"openconfig-platform"`
	ΛFabric               []ygot.Annotation                       `path:"@fabric" ygotAnnotation:"true"`
	Fan                   *Component_Fan                          `path:"fan" module:"openconfig-platform"`
	ΛFan                  []ygot.Annotation                       `path:"@fan" ygotAnnotation:"true"`
	FirmwareVersion       *string                                 `path:"state/firmware-version" module:"openconfig-platform/openconfig-platform"`
	ΛFirmwareVersion      []ygot.Annotation                       `path:"state/@firmware-version" ygotAnnotation:"true"`
	HardwareVersion       *string                                 `path:"state/hardware-version" module:"openconfig-platform/openconfig-platform"`
	ΛHardwareVersion      []ygot.Annotation                       `path:"state/@hardware-version" ygotAnnotation:"true"`
	Id                    *string                                 `path:"state/id" module:"openconfig-platform/openconfig-platform"`
	ΛId                   []ygot.Annotation                       `path:"state/@id" ygotAnnotation:"true"`
	IntegratedCircuit     *Component_IntegratedCircuit            `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit    []ygot.Annotation                       `path:"@integrated-circuit" ygotAnnotation:"true"`
	LastRebootReason      E_PlatformTypes_COMPONENT_REBOOT_REASON `path:"state/last-reboot-reason" module:"openconfig-platform/openconfig-platform"`
	ΛLastRebootReason     []ygot.Annotation                       `path:"state/@last-reboot-reason" ygotAnnotation:"true"`
	LastRebootTime        *uint64                                 `path:"state/last-reboot-time" module:"openconfig-platform/openconfig-platform"`
	ΛLastRebootTime       []ygot.Annotation                       `path:"state/@last-reboot-time" ygotAnnotation:"true"`
	LastSwitchoverReason  *Component_LastSwitchoverReason         `path:"state/last-switchover-reason" module:"openconfig-platform/openconfig-platform"`
	ΛLastSwitchoverReason []ygot.Annotation                       `path:"state/@last-switchover-reason" ygotAnnotation:"true"`
	LastSwitchoverTime    *uint64                                 `path:"state/last-switchover-time" module:"openconfig-platform/openconfig-platform"`
	ΛLastSwitchoverTime   []ygot.Annotation                       `path:"state/@last-switchover-time" ygotAnnotation:"true"`
	Location              *string                                 `path:"state/location" module:"openconfig-platform/openconfig-platform"`
	ΛLocation             []ygot.Annotation                       `path:"state/@location" ygotAnnotation:"true"`
	Memory                *Component_Memory                       `path:"state/memory" module:"openconfig-platform/openconfig-platform"`
	ΛMemory               []ygot.Annotation                       `path:"state/@memory" ygotAnnotation:"true"`
	MfgDate               *string                                 `path:"state/mfg-date" module:"openconfig-platform/openconfig-platform"`
	ΛMfgDate              []ygot.Annotation                       `path:"state/@mfg-date" ygotAnnotation:"true"`
	MfgName               *string                                 `path:"state/mfg-name" module:"openconfig-platform/openconfig-platform"`
	ΛMfgName              []ygot.Annotation                       `path:"state/@mfg-name" ygotAnnotation:"true"`
	Name                  *string                                 `path:"config/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	ΛName                 []ygot.Annotation                       `path:"config/@name|@name" ygotAnnotation:"true"`
	OperStatus            E_PlatformTypes_COMPONENT_OPER_STATUS   `path:"state/oper-status" module:"openconfig-platform/openconfig-platform"`
	ΛOperStatus           []ygot.Annotation                       `path:"state/@oper-status" ygotAnnotation:"true"`
	OpticalChannel        *Component_OpticalChannel               `path:"optical-channel" module:"openconfig-terminal-device"`
	ΛOpticalChannel       []ygot.Annotation                       `path:"@optical-channel" ygotAnnotation:"true"`
	Parent                *string                                 `path:"state/parent" module:"openconfig-platform/openconfig-platform"`
	ΛParent               []ygot.Annotation                       `path:"state/@parent" ygotAnnotation:"true"`
	PartNo                *string                                 `path:"state/part-no" module:"openconfig-platform/openconfig-platform"`
	ΛPartNo               []ygot.Annotation                       `path:"state/@part-no" ygotAnnotation:"true"`
	Pcie                  *Component_Pcie                         `path:"state/pcie" module:"openconfig-platform/openconfig-platform"`
	ΛPcie                 []ygot.Annotation                       `path:"state/@pcie" ygotAnnotation:"true"`
	Port                  *Component_Port                         `path:"port" module:"openconfig-platform"`
	ΛPort                 []ygot.Annotation                       `path:"@port" ygotAnnotation:"true"`
	PowerSupply           *Component_PowerSupply                  `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply          []ygot.Annotation                       `path:"@power-supply" ygotAnnotation:"true"`
	Property              map[string]*Component_Property          `path:"properties/property" module:"openconfig-platform/openconfig-platform"`
	ΛProperty             []ygot.Annotation                       `path:"properties/@property" ygotAnnotation:"true"`
	RedundantRole         E_PlatformTypes_ComponentRedundantRole  `path:"state/redundant-role" module:"openconfig-platform/openconfig-platform"`
	ΛRedundantRole        []ygot.Annotation                       `path:"state/@redundant-role" ygotAnnotation:"true"`
	Removable             *bool                                   `path:"state/removable" module:"openconfig-platform/openconfig-platform"`
	ΛRemovable            []ygot.Annotation                       `path:"state/@removable" ygotAnnotation:"true"`
	SerialNo              *string                                 `path:"state/serial-no" module:"openconfig-platform/openconfig-platform"`
	ΛSerialNo             []ygot.Annotation                       `path:"state/@serial-no" ygotAnnotation:"true"`
	SoftwareModule        *Component_SoftwareModule               `path:"software-module" module:"openconfig-platform"`
	ΛSoftwareModule       []ygot.Annotation                       `path:"@software-module" ygotAnnotation:"true"`
	SoftwareVersion       *string                                 `path:"state/software-version" module:"openconfig-platform/openconfig-platform"`
	ΛSoftwareVersion      []ygot.Annotation                       `path:"state/@software-version" ygotAnnotation:"true"`
	Storage               *Component_Storage                      `path:"storage" module:"openconfig-platform"`
	ΛStorage              []ygot.Annotation                       `path:"@storage" ygotAnnotation:"true"`
	Subcomponent          map[string]*Component_Subcomponent      `path:"subcomponents/subcomponent" module:"openconfig-platform/openconfig-platform"`
	ΛSubcomponent         []ygot.Annotation                       `path:"subcomponents/@subcomponent" ygotAnnotation:"true"`
	SwitchoverReady       *bool                                   `path:"state/switchover-ready" module:"openconfig-platform/openconfig-platform"`
	ΛSwitchoverReady      []ygot.Annotation                       `path:"state/@switchover-ready" ygotAnnotation:"true"`
	Temperature           *Component_Temperature                  `path:"state/temperature" module:"openconfig-platform/openconfig-platform"`
	ΛTemperature          []ygot.Annotation                       `path:"state/@temperature" ygotAnnotation:"true"`
	Transceiver           *Component_Transceiver                  `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver          []ygot.Annotation                       `path:"@transceiver" ygotAnnotation:"true"`
	Type                  Component_Type_Union                    `path:"state/type" module:"openconfig-platform/openconfig-platform"`
	ΛType                 []ygot.Annotation                       `path:"state/@type" ygotAnnotation:"true"`
	UsedPower             *uint32                                 `path:"state/used-power" module:"openconfig-platform/openconfig-platform"`
	ΛUsedPower            []ygot.Annotation                       `path:"state/@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewProperty(Name string) (*Component_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &Component_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateProperty(Name string) *Component_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetProperty(Name string) *Component_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// DeleteProperty deletes the value with the specified keys from
// the receiver Component. If there is no such element, the function
// is a no-op.
func (t *Component) DeleteProperty(Name string) {
	key := Name

	delete(t.Property, key)
}

// AppendProperty appends the supplied Component_Property struct to the
// list Property of Component. If the key value(s) specified in
// the supplied Component_Property already exist in the list, an error is
// returned.
func (t *Component) AppendProperty(v *Component_Property) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*Component_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// Component struct. The keys of the list are populated from the input
// arguments.
func (t *Component) NewSubcomponent(Name string) (*Component_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &Component_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the Component struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver Component. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component) GetOrCreateSubcomponent(Name string) *Component_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of Component. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component) GetSubcomponent(Name string) *Component_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubcomponent deletes the value with the specified keys from
// the receiver Component. If there is no such element, the function
// is a no-op.
func (t *Component) DeleteSubcomponent(Name string) {
	key := Name

	delete(t.Subcomponent, key)
}

// AppendSubcomponent appends the supplied Component_Subcomponent struct to the
// list Subcomponent of Component. If the key value(s) specified in
// the supplied Component_Subcomponent already exist in the list, an error is
// returned.
func (t *Component) AppendSubcomponent(v *Component_Subcomponent) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*Component_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateBackplane() *Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateChassis() *Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &Component_Chassis{}
	return t.Chassis
}

// GetOrCreateControllerCard retrieves the value of the ControllerCard field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateControllerCard() *Component_ControllerCard {
	if t.ControllerCard != nil {
		return t.ControllerCard
	}
	t.ControllerCard = &Component_ControllerCard{}
	return t.ControllerCard
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateCpu() *Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFabric() *Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateFan() *Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateIntegratedCircuit() *Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreateLastSwitchoverReason retrieves the value of the LastSwitchoverReason field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateLastSwitchoverReason() *Component_LastSwitchoverReason {
	if t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	t.LastSwitchoverReason = &Component_LastSwitchoverReason{}
	return t.LastSwitchoverReason
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateMemory() *Component_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &Component_Memory{}
	return t.Memory
}

// GetOrCreateOpticalChannel retrieves the value of the OpticalChannel field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateOpticalChannel() *Component_OpticalChannel {
	if t.OpticalChannel != nil {
		return t.OpticalChannel
	}
	t.OpticalChannel = &Component_OpticalChannel{}
	return t.OpticalChannel
}

// GetOrCreatePcie retrieves the value of the Pcie field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePcie() *Component_Pcie {
	if t.Pcie != nil {
		return t.Pcie
	}
	t.Pcie = &Component_Pcie{}
	return t.Pcie
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePort() *Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreatePowerSupply() *Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateSoftwareModule retrieves the value of the SoftwareModule field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateSoftwareModule() *Component_SoftwareModule {
	if t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	t.SoftwareModule = &Component_SoftwareModule{}
	return t.SoftwareModule
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateStorage() *Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &Component_Storage{}
	return t.Storage
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTemperature() *Component_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &Component_Temperature{}
	return t.Temperature
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *Component) GetOrCreateTransceiver() *Component_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &Component_Transceiver{}
	return t.Transceiver
}

// GetBackplane returns the value of the Backplane struct pointer
// from Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetBackplane() *Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetChassis() *Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetControllerCard returns the value of the ControllerCard struct pointer
// from Component. If the receiver or the field ControllerCard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetControllerCard() *Component_ControllerCard {
	if t != nil && t.ControllerCard != nil {
		return t.ControllerCard
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetCpu() *Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFabric() *Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetFan() *Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetIntegratedCircuit() *Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetLastSwitchoverReason returns the value of the LastSwitchoverReason struct pointer
// from Component. If the receiver or the field LastSwitchoverReason is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetLastSwitchoverReason() *Component_LastSwitchoverReason {
	if t != nil && t.LastSwitchoverReason != nil {
		return t.LastSwitchoverReason
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from Component. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetMemory() *Component_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetOpticalChannel returns the value of the OpticalChannel struct pointer
// from Component. If the receiver or the field OpticalChannel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetOpticalChannel() *Component_OpticalChannel {
	if t != nil && t.OpticalChannel != nil {
		return t.OpticalChannel
	}
	return nil
}

// GetPcie returns the value of the Pcie struct pointer
// from Component. If the receiver or the field Pcie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPcie() *Component_Pcie {
	if t != nil && t.Pcie != nil {
		return t.Pcie
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPort() *Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetPowerSupply() *Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetSoftwareModule returns the value of the SoftwareModule struct pointer
// from Component. If the receiver or the field SoftwareModule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetSoftwareModule() *Component_SoftwareModule {
	if t != nil && t.SoftwareModule != nil {
		return t.SoftwareModule
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetStorage() *Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from Component. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTemperature() *Component_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from Component. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component) GetTransceiver() *Component_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetAllocatedPower retrieves the value of the leaf AllocatedPower from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocatedPower is set, it can
// safely use t.GetAllocatedPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocatedPower == nil' before retrieving the leaf's value.
func (t *Component) GetAllocatedPower() uint32 {
	if t == nil || t.AllocatedPower == nil {
		return 0
	}
	return *t.AllocatedPower
}

// GetBaseMacAddress retrieves the value of the leaf BaseMacAddress from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseMacAddress is set, it can
// safely use t.GetBaseMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseMacAddress == nil' before retrieving the leaf's value.
func (t *Component) GetBaseMacAddress() string {
	if t == nil || t.BaseMacAddress == nil {
		return ""
	}
	return *t.BaseMacAddress
}

// GetCleiCode retrieves the value of the leaf CleiCode from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CleiCode is set, it can
// safely use t.GetCleiCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CleiCode == nil' before retrieving the leaf's value.
func (t *Component) GetCleiCode() string {
	if t == nil || t.CleiCode == nil {
		return ""
	}
	return *t.CleiCode
}

// GetDescription retrieves the value of the leaf Description from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Component) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEmpty retrieves the value of the leaf Empty from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *Component) GetEmpty() bool {
	if t == nil || t.Empty == nil {
		return false
	}
	return *t.Empty
}

// GetEquipmentFailure retrieves the value of the leaf EquipmentFailure from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentFailure is set, it can
// safely use t.GetEquipmentFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentFailure == nil' before retrieving the leaf's value.
func (t *Component) GetEquipmentFailure() bool {
	if t == nil || t.EquipmentFailure == nil {
		return false
	}
	return *t.EquipmentFailure
}

// GetEquipmentMismatch retrieves the value of the leaf EquipmentMismatch from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EquipmentMismatch is set, it can
// safely use t.GetEquipmentMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EquipmentMismatch == nil' before retrieving the leaf's value.
func (t *Component) GetEquipmentMismatch() bool {
	if t == nil || t.EquipmentMismatch == nil {
		return false
	}
	return *t.EquipmentMismatch
}

// GetFirmwareVersion retrieves the value of the leaf FirmwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirmwareVersion is set, it can
// safely use t.GetFirmwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirmwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetFirmwareVersion() string {
	if t == nil || t.FirmwareVersion == nil {
		return ""
	}
	return *t.FirmwareVersion
}

// GetHardwareVersion retrieves the value of the leaf HardwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwareVersion is set, it can
// safely use t.GetHardwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetHardwareVersion() string {
	if t == nil || t.HardwareVersion == nil {
		return ""
	}
	return *t.HardwareVersion
}

// GetId retrieves the value of the leaf Id from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Component) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLastRebootReason retrieves the value of the leaf LastRebootReason from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastRebootReason is set, it can
// safely use t.GetLastRebootReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastRebootReason == nil' before retrieving the leaf's value.
func (t *Component) GetLastRebootReason() E_PlatformTypes_COMPONENT_REBOOT_REASON {
	if t == nil || t.LastRebootReason == 0 {
		return 0
	}
	return t.LastRebootReason
}

// GetLastRebootTime retrieves the value of the leaf LastRebootTime from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastRebootTime is set, it can
// safely use t.GetLastRebootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastRebootTime == nil' before retrieving the leaf's value.
func (t *Component) GetLastRebootTime() uint64 {
	if t == nil || t.LastRebootTime == nil {
		return 0
	}
	return *t.LastRebootTime
}

// GetLastSwitchoverTime retrieves the value of the leaf LastSwitchoverTime from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastSwitchoverTime is set, it can
// safely use t.GetLastSwitchoverTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastSwitchoverTime == nil' before retrieving the leaf's value.
func (t *Component) GetLastSwitchoverTime() uint64 {
	if t == nil || t.LastSwitchoverTime == nil {
		return 0
	}
	return *t.LastSwitchoverTime
}

// GetLocation retrieves the value of the leaf Location from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *Component) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetMfgDate retrieves the value of the leaf MfgDate from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MfgDate is set, it can
// safely use t.GetMfgDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MfgDate == nil' before retrieving the leaf's value.
func (t *Component) GetMfgDate() string {
	if t == nil || t.MfgDate == nil {
		return ""
	}
	return *t.MfgDate
}

// GetMfgName retrieves the value of the leaf MfgName from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MfgName is set, it can
// safely use t.GetMfgName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MfgName == nil' before retrieving the leaf's value.
func (t *Component) GetMfgName() string {
	if t == nil || t.MfgName == nil {
		return ""
	}
	return *t.MfgName
}

// GetName retrieves the value of the leaf Name from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Component) GetOperStatus() E_PlatformTypes_COMPONENT_OPER_STATUS {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetParent retrieves the value of the leaf Parent from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Parent is set, it can
// safely use t.GetParent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Parent == nil' before retrieving the leaf's value.
func (t *Component) GetParent() string {
	if t == nil || t.Parent == nil {
		return ""
	}
	return *t.Parent
}

// GetPartNo retrieves the value of the leaf PartNo from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartNo is set, it can
// safely use t.GetPartNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartNo == nil' before retrieving the leaf's value.
func (t *Component) GetPartNo() string {
	if t == nil || t.PartNo == nil {
		return ""
	}
	return *t.PartNo
}

// GetRedundantRole retrieves the value of the leaf RedundantRole from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantRole is set, it can
// safely use t.GetRedundantRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantRole == nil' before retrieving the leaf's value.
func (t *Component) GetRedundantRole() E_PlatformTypes_ComponentRedundantRole {
	if t == nil || t.RedundantRole == 0 {
		return 0
	}
	return t.RedundantRole
}

// GetRemovable retrieves the value of the leaf Removable from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Removable is set, it can
// safely use t.GetRemovable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Removable == nil' before retrieving the leaf's value.
func (t *Component) GetRemovable() bool {
	if t == nil || t.Removable == nil {
		return false
	}
	return *t.Removable
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SerialNo is set, it can
// safely use t.GetSerialNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SerialNo == nil' before retrieving the leaf's value.
func (t *Component) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *Component) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetSwitchoverReady retrieves the value of the leaf SwitchoverReady from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchoverReady is set, it can
// safely use t.GetSwitchoverReady() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchoverReady == nil' before retrieving the leaf's value.
func (t *Component) GetSwitchoverReady() bool {
	if t == nil || t.SwitchoverReady == nil {
		return false
	}
	return *t.SwitchoverReady
}

// GetType retrieves the value of the leaf Type from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Component) GetType() Component_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUsedPower retrieves the value of the leaf UsedPower from the Component
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedPower is set, it can
// safely use t.GetUsedPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedPower == nil' before retrieving the leaf's value.
func (t *Component) GetUsedPower() uint32 {
	if t == nil || t.UsedPower == nil {
		return 0
	}
	return *t.UsedPower
}

// PopulateDefaults recursively populates unset leaf fields in the Component
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Empty == nil {
		var v bool = false
		t.Empty = &v
	}
	if t.EquipmentFailure == nil {
		var v bool = false
		t.EquipmentFailure = &v
	}
	if t.EquipmentMismatch == nil {
		var v bool = false
		t.EquipmentMismatch = &v
	}
	t.Backplane.PopulateDefaults()
	t.Chassis.PopulateDefaults()
	t.ControllerCard.PopulateDefaults()
	t.Cpu.PopulateDefaults()
	t.Fabric.PopulateDefaults()
	t.Fan.PopulateDefaults()
	t.IntegratedCircuit.PopulateDefaults()
	t.LastSwitchoverReason.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.OpticalChannel.PopulateDefaults()
	t.Pcie.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.PowerSupply.PopulateDefaults()
	t.SoftwareModule.PopulateDefaults()
	t.Storage.PopulateDefaults()
	t.Temperature.PopulateDefaults()
	t.Transceiver.PopulateDefaults()
	for _, e := range t.Property {
		e.PopulateDefaults()
	}
	for _, e := range t.Subcomponent {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Component struct, which is a YANG list entry.
func (t *Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component.
func (*Component) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_Backplane struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Backplane) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Backplane
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Backplane) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Backplane.
func (*Component_Backplane) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_Chassis struct {
	ΛMetadata    []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Utilization  *Component_Chassis_Utilization `path:"utilization" module:"openconfig-platform"`
	ΛUtilization []ygot.Annotation              `path:"@utilization" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis) IsYANGGoStruct() {}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *Component_Chassis) GetOrCreateUtilization() *Component_Chassis_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &Component_Chassis_Utilization{}
	return t.Utilization
}

// GetUtilization returns the value of the Utilization struct pointer
// from Component_Chassis. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Chassis) GetUtilization() *Component_Chassis_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Utilization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis.
func (*Component_Chassis) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis_Utilization represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_Utilization struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Resource  map[string]*Component_Chassis_Utilization_Resource `path:"resources/resource" module:"openconfig-platform/openconfig-platform"`
	ΛResource []ygot.Annotation                                  `path:"resources/@resource" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Chassis_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis_Utilization) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// Component_Chassis_Utilization struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Chassis_Utilization) NewResource(Name string) (*Component_Chassis_Utilization_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_Chassis_Utilization_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &Component_Chassis_Utilization_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the Component_Chassis_Utilization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Chassis_Utilization) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver Component_Chassis_Utilization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Chassis_Utilization) GetOrCreateResource(Name string) *Component_Chassis_Utilization_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of Component_Chassis_Utilization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Chassis_Utilization) GetResource(Name string) *Component_Chassis_Utilization_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver Component_Chassis_Utilization. If there is no such element, the function
// is a no-op.
func (t *Component_Chassis_Utilization) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied Component_Chassis_Utilization_Resource struct to the
// list Resource of Component_Chassis_Utilization. If the key value(s) specified in
// the supplied Component_Chassis_Utilization_Resource already exist in the list, an error is
// returned.
func (t *Component_Chassis_Utilization) AppendResource(v *Component_Chassis_Utilization_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_Chassis_Utilization_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis_Utilization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis_Utilization.
func (*Component_Chassis_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Chassis_Utilization_Resource represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_Resource struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"state/committed" module:"openconfig-platform/openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"state/@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"state/free" module:"openconfig-platform/openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"state/@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"state/high-watermark" module:"openconfig-platform/openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"state/@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"state/last-high-watermark" module:"openconfig-platform/openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"state/@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"state/max-limit" module:"openconfig-platform/openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"state/@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"config/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"state/used" module:"openconfig-platform/openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"state/@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"config/used-threshold-upper" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"config/@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"config/used-threshold-upper-clear" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"config/@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"state/used-threshold-upper-exceeded" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"state/@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Chassis_Utilization_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Chassis_Utilization_Resource) IsYANGGoStruct() {}

// GetCommitted retrieves the value of the leaf Committed from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Committed is set, it can
// safely use t.GetCommitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Committed == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetCommitted() uint64 {
	if t == nil || t.Committed == nil {
		return 0
	}
	return *t.Committed
}

// GetFree retrieves the value of the leaf Free from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetHighWatermark() uint64 {
	if t == nil || t.HighWatermark == nil {
		return 0
	}
	return *t.HighWatermark
}

// GetLastHighWatermark retrieves the value of the leaf LastHighWatermark from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastHighWatermark is set, it can
// safely use t.GetLastHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastHighWatermark == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetLastHighWatermark() uint64 {
	if t == nil || t.LastHighWatermark == nil {
		return 0
	}
	return *t.LastHighWatermark
}

// GetMaxLimit retrieves the value of the leaf MaxLimit from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLimit is set, it can
// safely use t.GetMaxLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLimit == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetMaxLimit() uint64 {
	if t == nil || t.MaxLimit == nil {
		return 0
	}
	return *t.MaxLimit
}

// GetName retrieves the value of the leaf Name from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUsed retrieves the value of the leaf Used from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// GetUsedThresholdUpper retrieves the value of the leaf UsedThresholdUpper from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpper is set, it can
// safely use t.GetUsedThresholdUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpper == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpper() uint8 {
	if t == nil || t.UsedThresholdUpper == nil {
		return 0
	}
	return *t.UsedThresholdUpper
}

// GetUsedThresholdUpperClear retrieves the value of the leaf UsedThresholdUpperClear from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperClear is set, it can
// safely use t.GetUsedThresholdUpperClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperClear == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpperClear() uint8 {
	if t == nil || t.UsedThresholdUpperClear == nil {
		return 0
	}
	return *t.UsedThresholdUpperClear
}

// GetUsedThresholdUpperExceeded retrieves the value of the leaf UsedThresholdUpperExceeded from the Component_Chassis_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperExceeded is set, it can
// safely use t.GetUsedThresholdUpperExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperExceeded == nil' before retrieving the leaf's value.
func (t *Component_Chassis_Utilization_Resource) GetUsedThresholdUpperExceeded() bool {
	if t == nil || t.UsedThresholdUpperExceeded == nil {
		return false
	}
	return *t.UsedThresholdUpperExceeded
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Chassis_Utilization_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Chassis_Utilization_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Chassis_Utilization_Resource struct, which is a YANG list entry.
func (t *Component_Chassis_Utilization_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Chassis_Utilization_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Chassis_Utilization_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Chassis_Utilization_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Chassis_Utilization_Resource.
func (*Component_Chassis_Utilization_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_ControllerCard represents the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCard struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_ControllerCard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_ControllerCard) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_ControllerCard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_ControllerCard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_ControllerCard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_ControllerCard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_ControllerCard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_ControllerCard) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_ControllerCard.
func (*Component_ControllerCard) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_Cpu struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Cpu) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Cpu.
func (*Component_Cpu) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_Fabric struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fabric) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Fabric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Fabric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Fabric.
func (*Component_Fabric) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_Fan struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Fan) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Fan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Fan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Fan.
func (*Component_Fan) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuit struct {
	ΛMetadata    []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Utilization  *Component_IntegratedCircuit_Utilization `path:"utilization" module:"openconfig-platform"`
	ΛUtilization []ygot.Annotation                        `path:"@utilization" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateUtilization retrieves the value of the Utilization field
// or returns the existing field if it already exists.
func (t *Component_IntegratedCircuit) GetOrCreateUtilization() *Component_IntegratedCircuit_Utilization {
	if t.Utilization != nil {
		return t.Utilization
	}
	t.Utilization = &Component_IntegratedCircuit_Utilization{}
	return t.Utilization
}

// GetUtilization returns the value of the Utilization struct pointer
// from Component_IntegratedCircuit. If the receiver or the field Utilization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_IntegratedCircuit) GetUtilization() *Component_IntegratedCircuit_Utilization {
	if t != nil && t.Utilization != nil {
		return t.Utilization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Utilization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit.
func (*Component_IntegratedCircuit) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit_Utilization represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_Utilization struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Resource  map[string]*Component_IntegratedCircuit_Utilization_Resource `path:"resources/resource" module:"openconfig-platform/openconfig-platform"`
	ΛResource []ygot.Annotation                                            `path:"resources/@resource" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_Utilization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_Utilization) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// Component_IntegratedCircuit_Utilization struct. The keys of the list are populated from the input
// arguments.
func (t *Component_IntegratedCircuit_Utilization) NewResource(Name string) (*Component_IntegratedCircuit_Utilization_Resource, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_IntegratedCircuit_Utilization_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &Component_IntegratedCircuit_Utilization_Resource{
		Name: &Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the Component_IntegratedCircuit_Utilization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_IntegratedCircuit_Utilization) RenameResource(oldK, newK string) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = &newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver Component_IntegratedCircuit_Utilization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_IntegratedCircuit_Utilization) GetOrCreateResource(Name string) *Component_IntegratedCircuit_Utilization_Resource {

	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of Component_IntegratedCircuit_Utilization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_IntegratedCircuit_Utilization) GetResource(Name string) *Component_IntegratedCircuit_Utilization_Resource {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver Component_IntegratedCircuit_Utilization. If there is no such element, the function
// is a no-op.
func (t *Component_IntegratedCircuit_Utilization) DeleteResource(Name string) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied Component_IntegratedCircuit_Utilization_Resource struct to the
// list Resource of Component_IntegratedCircuit_Utilization. If the key value(s) specified in
// the supplied Component_IntegratedCircuit_Utilization_Resource already exist in the list, an error is
// returned.
func (t *Component_IntegratedCircuit_Utilization) AppendResource(v *Component_IntegratedCircuit_Utilization_Resource) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[string]*Component_IntegratedCircuit_Utilization_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_Utilization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_Utilization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_Utilization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_Utilization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_Utilization.
func (*Component_IntegratedCircuit_Utilization) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_IntegratedCircuit_Utilization_Resource represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Committed                   *uint64           `path:"state/committed" module:"openconfig-platform/openconfig-platform"`
	ΛCommitted                  []ygot.Annotation `path:"state/@committed" ygotAnnotation:"true"`
	Free                        *uint64           `path:"state/free" module:"openconfig-platform/openconfig-platform"`
	ΛFree                       []ygot.Annotation `path:"state/@free" ygotAnnotation:"true"`
	HighWatermark               *uint64           `path:"state/high-watermark" module:"openconfig-platform/openconfig-platform"`
	ΛHighWatermark              []ygot.Annotation `path:"state/@high-watermark" ygotAnnotation:"true"`
	LastHighWatermark           *uint64           `path:"state/last-high-watermark" module:"openconfig-platform/openconfig-platform"`
	ΛLastHighWatermark          []ygot.Annotation `path:"state/@last-high-watermark" ygotAnnotation:"true"`
	MaxLimit                    *uint64           `path:"state/max-limit" module:"openconfig-platform/openconfig-platform"`
	ΛMaxLimit                   []ygot.Annotation `path:"state/@max-limit" ygotAnnotation:"true"`
	Name                        *string           `path:"config/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	ΛName                       []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	Used                        *uint64           `path:"state/used" module:"openconfig-platform/openconfig-platform"`
	ΛUsed                       []ygot.Annotation `path:"state/@used" ygotAnnotation:"true"`
	UsedThresholdUpper          *uint8            `path:"config/used-threshold-upper" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpper         []ygot.Annotation `path:"config/@used-threshold-upper" ygotAnnotation:"true"`
	UsedThresholdUpperClear     *uint8            `path:"config/used-threshold-upper-clear" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpperClear    []ygot.Annotation `path:"config/@used-threshold-upper-clear" ygotAnnotation:"true"`
	UsedThresholdUpperExceeded  *bool             `path:"state/used-threshold-upper-exceeded" module:"openconfig-platform/openconfig-platform"`
	ΛUsedThresholdUpperExceeded []ygot.Annotation `path:"state/@used-threshold-upper-exceeded" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_IntegratedCircuit_Utilization_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_IntegratedCircuit_Utilization_Resource) IsYANGGoStruct() {}

// GetCommitted retrieves the value of the leaf Committed from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Committed is set, it can
// safely use t.GetCommitted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Committed == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetCommitted() uint64 {
	if t == nil || t.Committed == nil {
		return 0
	}
	return *t.Committed
}

// GetFree retrieves the value of the leaf Free from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetHighWatermark retrieves the value of the leaf HighWatermark from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWatermark is set, it can
// safely use t.GetHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWatermark == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetHighWatermark() uint64 {
	if t == nil || t.HighWatermark == nil {
		return 0
	}
	return *t.HighWatermark
}

// GetLastHighWatermark retrieves the value of the leaf LastHighWatermark from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastHighWatermark is set, it can
// safely use t.GetLastHighWatermark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastHighWatermark == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetLastHighWatermark() uint64 {
	if t == nil || t.LastHighWatermark == nil {
		return 0
	}
	return *t.LastHighWatermark
}

// GetMaxLimit retrieves the value of the leaf MaxLimit from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLimit is set, it can
// safely use t.GetMaxLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLimit == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetMaxLimit() uint64 {
	if t == nil || t.MaxLimit == nil {
		return 0
	}
	return *t.MaxLimit
}

// GetName retrieves the value of the leaf Name from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUsed retrieves the value of the leaf Used from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// GetUsedThresholdUpper retrieves the value of the leaf UsedThresholdUpper from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpper is set, it can
// safely use t.GetUsedThresholdUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpper == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpper() uint8 {
	if t == nil || t.UsedThresholdUpper == nil {
		return 0
	}
	return *t.UsedThresholdUpper
}

// GetUsedThresholdUpperClear retrieves the value of the leaf UsedThresholdUpperClear from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperClear is set, it can
// safely use t.GetUsedThresholdUpperClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperClear == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpperClear() uint8 {
	if t == nil || t.UsedThresholdUpperClear == nil {
		return 0
	}
	return *t.UsedThresholdUpperClear
}

// GetUsedThresholdUpperExceeded retrieves the value of the leaf UsedThresholdUpperExceeded from the Component_IntegratedCircuit_Utilization_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsedThresholdUpperExceeded is set, it can
// safely use t.GetUsedThresholdUpperExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsedThresholdUpperExceeded == nil' before retrieving the leaf's value.
func (t *Component_IntegratedCircuit_Utilization_Resource) GetUsedThresholdUpperExceeded() bool {
	if t == nil || t.UsedThresholdUpperExceeded == nil {
		return false
	}
	return *t.UsedThresholdUpperExceeded
}

// PopulateDefaults recursively populates unset leaf fields in the Component_IntegratedCircuit_Utilization_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_IntegratedCircuit_Utilization_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_IntegratedCircuit_Utilization_Resource struct, which is a YANG list entry.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_IntegratedCircuit_Utilization_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_IntegratedCircuit_Utilization_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_IntegratedCircuit_Utilization_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_IntegratedCircuit_Utilization_Resource.
func (*Component_IntegratedCircuit_Utilization_Resource) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_LastSwitchoverReason represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReason struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Details   *string                                                       `path:"details" module:"openconfig-platform"`
	ΛDetails  []ygot.Annotation                                             `path:"@details" ygotAnnotation:"true"`
	Trigger   E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger `path:"trigger" module:"openconfig-platform"`
	ΛTrigger  []ygot.Annotation                                             `path:"@trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_LastSwitchoverReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_LastSwitchoverReason) IsYANGGoStruct() {}

// GetDetails retrieves the value of the leaf Details from the Component_LastSwitchoverReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Details is set, it can
// safely use t.GetDetails() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Details == nil' before retrieving the leaf's value.
func (t *Component_LastSwitchoverReason) GetDetails() string {
	if t == nil || t.Details == nil {
		return ""
	}
	return *t.Details
}

// GetTrigger retrieves the value of the leaf Trigger from the Component_LastSwitchoverReason
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trigger is set, it can
// safely use t.GetTrigger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trigger == nil' before retrieving the leaf's value.
func (t *Component_LastSwitchoverReason) GetTrigger() E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger {
	if t == nil || t.Trigger == 0 {
		return 0
	}
	return t.Trigger
}

// PopulateDefaults recursively populates unset leaf fields in the Component_LastSwitchoverReason
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_LastSwitchoverReason) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastSwitchoverReason) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_LastSwitchoverReason"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_LastSwitchoverReason) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_LastSwitchoverReason) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_LastSwitchoverReason.
func (*Component_LastSwitchoverReason) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Memory) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the Component_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *Component_Memory) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetUtilized retrieves the value of the leaf Utilized from the Component_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *Component_Memory) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Memory
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Memory) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Memory.
func (*Component_Memory) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_OpticalChannel represents the /openconfig-platform/components/component/optical-channel YANG schema element.
type Component_OpticalChannel struct {
	ΛMetadata                              []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	CarrierFrequencyOffset                 *Component_OpticalChannel_CarrierFrequencyOffset                `path:"state/carrier-frequency-offset" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛCarrierFrequencyOffset                []ygot.Annotation                                               `path:"state/@carrier-frequency-offset" ygotAnnotation:"true"`
	ChromaticDispersion                    *Component_OpticalChannel_ChromaticDispersion                   `path:"state/chromatic-dispersion" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛChromaticDispersion                   []ygot.Annotation                                               `path:"state/@chromatic-dispersion" ygotAnnotation:"true"`
	Esnr                                   *Component_OpticalChannel_Esnr                                  `path:"state/esnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛEsnr                                  []ygot.Annotation                                               `path:"state/@esnr" ygotAnnotation:"true"`
	FecUncorrectableBlocks                 *uint64                                                         `path:"state/fec-uncorrectable-blocks" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFecUncorrectableBlocks                []ygot.Annotation                                               `path:"state/@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	Frequency                              *uint64                                                         `path:"config/frequency" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛFrequency                             []ygot.Annotation                                               `path:"config/@frequency" ygotAnnotation:"true"`
	GroupId                                *uint32                                                         `path:"state/group-id" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛGroupId                               []ygot.Annotation                                               `path:"state/@group-id" ygotAnnotation:"true"`
	InputPower                             *Component_OpticalChannel_InputPower                            `path:"state/input-power" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛInputPower                            []ygot.Annotation                                               `path:"state/@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent                       *Component_OpticalChannel_LaserBiasCurrent                      `path:"state/laser-bias-current" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLaserBiasCurrent                      []ygot.Annotation                                               `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	LinePort                               *string                                                         `path:"config/line-port" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛLinePort                              []ygot.Annotation                                               `path:"config/@line-port" ygotAnnotation:"true"`
	ModulationErrorRatio                   *Component_OpticalChannel_ModulationErrorRatio                  `path:"state/modulation-error-ratio" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulationErrorRatio                  []ygot.Annotation                                               `path:"state/@modulation-error-ratio" ygotAnnotation:"true"`
	ModulatorBiasXPhase                    *Component_OpticalChannel_ModulatorBiasXPhase                   `path:"state/modulator-bias-x-phase" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasXPhase                   []ygot.Annotation                                               `path:"state/@modulator-bias-x-phase" ygotAnnotation:"true"`
	ModulatorBiasXi                        *Component_OpticalChannel_ModulatorBiasXi                       `path:"state/modulator-bias-xi" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasXi                       []ygot.Annotation                                               `path:"state/@modulator-bias-xi" ygotAnnotation:"true"`
	ModulatorBiasXq                        *Component_OpticalChannel_ModulatorBiasXq                       `path:"state/modulator-bias-xq" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasXq                       []ygot.Annotation                                               `path:"state/@modulator-bias-xq" ygotAnnotation:"true"`
	ModulatorBiasYPhase                    *Component_OpticalChannel_ModulatorBiasYPhase                   `path:"state/modulator-bias-y-phase" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasYPhase                   []ygot.Annotation                                               `path:"state/@modulator-bias-y-phase" ygotAnnotation:"true"`
	ModulatorBiasYi                        *Component_OpticalChannel_ModulatorBiasYi                       `path:"state/modulator-bias-yi" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasYi                       []ygot.Annotation                                               `path:"state/@modulator-bias-yi" ygotAnnotation:"true"`
	ModulatorBiasYq                        *Component_OpticalChannel_ModulatorBiasYq                       `path:"state/modulator-bias-yq" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛModulatorBiasYq                       []ygot.Annotation                                               `path:"state/@modulator-bias-yq" ygotAnnotation:"true"`
	OperationalMode                        *uint16                                                         `path:"config/operational-mode" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOperationalMode                       []ygot.Annotation                                               `path:"config/@operational-mode" ygotAnnotation:"true"`
	Osnr                                   *Component_OpticalChannel_Osnr                                  `path:"state/osnr" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOsnr                                  []ygot.Annotation                                               `path:"state/@osnr" ygotAnnotation:"true"`
	OutputPower                            *Component_OpticalChannel_OutputPower                           `path:"state/output-power" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛOutputPower                           []ygot.Annotation                                               `path:"state/@output-power" ygotAnnotation:"true"`
	PolarizationDependentLoss              *Component_OpticalChannel_PolarizationDependentLoss             `path:"state/polarization-dependent-loss" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPolarizationDependentLoss             []ygot.Annotation                                               `path:"state/@polarization-dependent-loss" ygotAnnotation:"true"`
	PolarizationModeDispersion             *Component_OpticalChannel_PolarizationModeDispersion            `path:"state/polarization-mode-dispersion" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPolarizationModeDispersion            []ygot.Annotation                                               `path:"state/@polarization-mode-dispersion" ygotAnnotation:"true"`
	PostFecBer                             *Component_OpticalChannel_PostFecBer                            `path:"state/post-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPostFecBer                            []ygot.Annotation                                               `path:"state/@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer                              *Component_OpticalChannel_PreFecBer                             `path:"state/pre-fec-ber" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛPreFecBer                             []ygot.Annotation                                               `path:"state/@pre-fec-ber" ygotAnnotation:"true"`
	QValue                                 *Component_OpticalChannel_QValue                                `path:"state/q-value" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛQValue                                []ygot.Annotation                                               `path:"state/@q-value" ygotAnnotation:"true"`
	SecondOrderPolarizationModeDispersion  *Component_OpticalChannel_SecondOrderPolarizationModeDispersion `path:"state/second-order-polarization-mode-dispersion" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSecondOrderPolarizationModeDispersion []ygot.Annotation                                               `path:"state/@second-order-polarization-mode-dispersion" ygotAnnotation:"true"`
	SopRoc                                 *Component_OpticalChannel_SopRoc                                `path:"state/sop-roc" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛSopRoc                                []ygot.Annotation                                               `path:"state/@sop-roc" ygotAnnotation:"true"`
	TargetOutputPower                      *float64                                                        `path:"config/target-output-power" module:"openconfig-terminal-device/openconfig-terminal-device"`
	ΛTargetOutputPower                     []ygot.Annotation                                               `path:"config/@target-output-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel) IsYANGGoStruct() {}

// GetOrCreateCarrierFrequencyOffset retrieves the value of the CarrierFrequencyOffset field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateCarrierFrequencyOffset() *Component_OpticalChannel_CarrierFrequencyOffset {
	if t.CarrierFrequencyOffset != nil {
		return t.CarrierFrequencyOffset
	}
	t.CarrierFrequencyOffset = &Component_OpticalChannel_CarrierFrequencyOffset{}
	return t.CarrierFrequencyOffset
}

// GetOrCreateChromaticDispersion retrieves the value of the ChromaticDispersion field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateChromaticDispersion() *Component_OpticalChannel_ChromaticDispersion {
	if t.ChromaticDispersion != nil {
		return t.ChromaticDispersion
	}
	t.ChromaticDispersion = &Component_OpticalChannel_ChromaticDispersion{}
	return t.ChromaticDispersion
}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateEsnr() *Component_OpticalChannel_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &Component_OpticalChannel_Esnr{}
	return t.Esnr
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateInputPower() *Component_OpticalChannel_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_OpticalChannel_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateLaserBiasCurrent() *Component_OpticalChannel_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_OpticalChannel_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateModulationErrorRatio retrieves the value of the ModulationErrorRatio field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulationErrorRatio() *Component_OpticalChannel_ModulationErrorRatio {
	if t.ModulationErrorRatio != nil {
		return t.ModulationErrorRatio
	}
	t.ModulationErrorRatio = &Component_OpticalChannel_ModulationErrorRatio{}
	return t.ModulationErrorRatio
}

// GetOrCreateModulatorBiasXPhase retrieves the value of the ModulatorBiasXPhase field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasXPhase() *Component_OpticalChannel_ModulatorBiasXPhase {
	if t.ModulatorBiasXPhase != nil {
		return t.ModulatorBiasXPhase
	}
	t.ModulatorBiasXPhase = &Component_OpticalChannel_ModulatorBiasXPhase{}
	return t.ModulatorBiasXPhase
}

// GetOrCreateModulatorBiasXi retrieves the value of the ModulatorBiasXi field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasXi() *Component_OpticalChannel_ModulatorBiasXi {
	if t.ModulatorBiasXi != nil {
		return t.ModulatorBiasXi
	}
	t.ModulatorBiasXi = &Component_OpticalChannel_ModulatorBiasXi{}
	return t.ModulatorBiasXi
}

// GetOrCreateModulatorBiasXq retrieves the value of the ModulatorBiasXq field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasXq() *Component_OpticalChannel_ModulatorBiasXq {
	if t.ModulatorBiasXq != nil {
		return t.ModulatorBiasXq
	}
	t.ModulatorBiasXq = &Component_OpticalChannel_ModulatorBiasXq{}
	return t.ModulatorBiasXq
}

// GetOrCreateModulatorBiasYPhase retrieves the value of the ModulatorBiasYPhase field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasYPhase() *Component_OpticalChannel_ModulatorBiasYPhase {
	if t.ModulatorBiasYPhase != nil {
		return t.ModulatorBiasYPhase
	}
	t.ModulatorBiasYPhase = &Component_OpticalChannel_ModulatorBiasYPhase{}
	return t.ModulatorBiasYPhase
}

// GetOrCreateModulatorBiasYi retrieves the value of the ModulatorBiasYi field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasYi() *Component_OpticalChannel_ModulatorBiasYi {
	if t.ModulatorBiasYi != nil {
		return t.ModulatorBiasYi
	}
	t.ModulatorBiasYi = &Component_OpticalChannel_ModulatorBiasYi{}
	return t.ModulatorBiasYi
}

// GetOrCreateModulatorBiasYq retrieves the value of the ModulatorBiasYq field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateModulatorBiasYq() *Component_OpticalChannel_ModulatorBiasYq {
	if t.ModulatorBiasYq != nil {
		return t.ModulatorBiasYq
	}
	t.ModulatorBiasYq = &Component_OpticalChannel_ModulatorBiasYq{}
	return t.ModulatorBiasYq
}

// GetOrCreateOsnr retrieves the value of the Osnr field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateOsnr() *Component_OpticalChannel_Osnr {
	if t.Osnr != nil {
		return t.Osnr
	}
	t.Osnr = &Component_OpticalChannel_Osnr{}
	return t.Osnr
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateOutputPower() *Component_OpticalChannel_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_OpticalChannel_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePolarizationDependentLoss retrieves the value of the PolarizationDependentLoss field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreatePolarizationDependentLoss() *Component_OpticalChannel_PolarizationDependentLoss {
	if t.PolarizationDependentLoss != nil {
		return t.PolarizationDependentLoss
	}
	t.PolarizationDependentLoss = &Component_OpticalChannel_PolarizationDependentLoss{}
	return t.PolarizationDependentLoss
}

// GetOrCreatePolarizationModeDispersion retrieves the value of the PolarizationModeDispersion field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreatePolarizationModeDispersion() *Component_OpticalChannel_PolarizationModeDispersion {
	if t.PolarizationModeDispersion != nil {
		return t.PolarizationModeDispersion
	}
	t.PolarizationModeDispersion = &Component_OpticalChannel_PolarizationModeDispersion{}
	return t.PolarizationModeDispersion
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreatePostFecBer() *Component_OpticalChannel_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &Component_OpticalChannel_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreatePreFecBer() *Component_OpticalChannel_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &Component_OpticalChannel_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateQValue() *Component_OpticalChannel_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &Component_OpticalChannel_QValue{}
	return t.QValue
}

// GetOrCreateSecondOrderPolarizationModeDispersion retrieves the value of the SecondOrderPolarizationModeDispersion field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateSecondOrderPolarizationModeDispersion() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion {
	if t.SecondOrderPolarizationModeDispersion != nil {
		return t.SecondOrderPolarizationModeDispersion
	}
	t.SecondOrderPolarizationModeDispersion = &Component_OpticalChannel_SecondOrderPolarizationModeDispersion{}
	return t.SecondOrderPolarizationModeDispersion
}

// GetOrCreateSopRoc retrieves the value of the SopRoc field
// or returns the existing field if it already exists.
func (t *Component_OpticalChannel) GetOrCreateSopRoc() *Component_OpticalChannel_SopRoc {
	if t.SopRoc != nil {
		return t.SopRoc
	}
	t.SopRoc = &Component_OpticalChannel_SopRoc{}
	return t.SopRoc
}

// GetCarrierFrequencyOffset returns the value of the CarrierFrequencyOffset struct pointer
// from Component_OpticalChannel. If the receiver or the field CarrierFrequencyOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetCarrierFrequencyOffset() *Component_OpticalChannel_CarrierFrequencyOffset {
	if t != nil && t.CarrierFrequencyOffset != nil {
		return t.CarrierFrequencyOffset
	}
	return nil
}

// GetChromaticDispersion returns the value of the ChromaticDispersion struct pointer
// from Component_OpticalChannel. If the receiver or the field ChromaticDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetChromaticDispersion() *Component_OpticalChannel_ChromaticDispersion {
	if t != nil && t.ChromaticDispersion != nil {
		return t.ChromaticDispersion
	}
	return nil
}

// GetEsnr returns the value of the Esnr struct pointer
// from Component_OpticalChannel. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetEsnr() *Component_OpticalChannel_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_OpticalChannel. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetInputPower() *Component_OpticalChannel_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_OpticalChannel. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetLaserBiasCurrent() *Component_OpticalChannel_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetModulationErrorRatio returns the value of the ModulationErrorRatio struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulationErrorRatio is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulationErrorRatio() *Component_OpticalChannel_ModulationErrorRatio {
	if t != nil && t.ModulationErrorRatio != nil {
		return t.ModulationErrorRatio
	}
	return nil
}

// GetModulatorBiasXPhase returns the value of the ModulatorBiasXPhase struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasXPhase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasXPhase() *Component_OpticalChannel_ModulatorBiasXPhase {
	if t != nil && t.ModulatorBiasXPhase != nil {
		return t.ModulatorBiasXPhase
	}
	return nil
}

// GetModulatorBiasXi returns the value of the ModulatorBiasXi struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasXi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasXi() *Component_OpticalChannel_ModulatorBiasXi {
	if t != nil && t.ModulatorBiasXi != nil {
		return t.ModulatorBiasXi
	}
	return nil
}

// GetModulatorBiasXq returns the value of the ModulatorBiasXq struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasXq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasXq() *Component_OpticalChannel_ModulatorBiasXq {
	if t != nil && t.ModulatorBiasXq != nil {
		return t.ModulatorBiasXq
	}
	return nil
}

// GetModulatorBiasYPhase returns the value of the ModulatorBiasYPhase struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasYPhase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasYPhase() *Component_OpticalChannel_ModulatorBiasYPhase {
	if t != nil && t.ModulatorBiasYPhase != nil {
		return t.ModulatorBiasYPhase
	}
	return nil
}

// GetModulatorBiasYi returns the value of the ModulatorBiasYi struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasYi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasYi() *Component_OpticalChannel_ModulatorBiasYi {
	if t != nil && t.ModulatorBiasYi != nil {
		return t.ModulatorBiasYi
	}
	return nil
}

// GetModulatorBiasYq returns the value of the ModulatorBiasYq struct pointer
// from Component_OpticalChannel. If the receiver or the field ModulatorBiasYq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetModulatorBiasYq() *Component_OpticalChannel_ModulatorBiasYq {
	if t != nil && t.ModulatorBiasYq != nil {
		return t.ModulatorBiasYq
	}
	return nil
}

// GetOsnr returns the value of the Osnr struct pointer
// from Component_OpticalChannel. If the receiver or the field Osnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetOsnr() *Component_OpticalChannel_Osnr {
	if t != nil && t.Osnr != nil {
		return t.Osnr
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_OpticalChannel. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetOutputPower() *Component_OpticalChannel_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPolarizationDependentLoss returns the value of the PolarizationDependentLoss struct pointer
// from Component_OpticalChannel. If the receiver or the field PolarizationDependentLoss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetPolarizationDependentLoss() *Component_OpticalChannel_PolarizationDependentLoss {
	if t != nil && t.PolarizationDependentLoss != nil {
		return t.PolarizationDependentLoss
	}
	return nil
}

// GetPolarizationModeDispersion returns the value of the PolarizationModeDispersion struct pointer
// from Component_OpticalChannel. If the receiver or the field PolarizationModeDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetPolarizationModeDispersion() *Component_OpticalChannel_PolarizationModeDispersion {
	if t != nil && t.PolarizationModeDispersion != nil {
		return t.PolarizationModeDispersion
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from Component_OpticalChannel. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetPostFecBer() *Component_OpticalChannel_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from Component_OpticalChannel. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetPreFecBer() *Component_OpticalChannel_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from Component_OpticalChannel. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetQValue() *Component_OpticalChannel_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetSecondOrderPolarizationModeDispersion returns the value of the SecondOrderPolarizationModeDispersion struct pointer
// from Component_OpticalChannel. If the receiver or the field SecondOrderPolarizationModeDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetSecondOrderPolarizationModeDispersion() *Component_OpticalChannel_SecondOrderPolarizationModeDispersion {
	if t != nil && t.SecondOrderPolarizationModeDispersion != nil {
		return t.SecondOrderPolarizationModeDispersion
	}
	return nil
}

// GetSopRoc returns the value of the SopRoc struct pointer
// from Component_OpticalChannel. If the receiver or the field SopRoc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_OpticalChannel) GetSopRoc() *Component_OpticalChannel_SopRoc {
	if t != nil && t.SopRoc != nil {
		return t.SopRoc
	}
	return nil
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFrequency retrieves the value of the leaf Frequency from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Frequency is set, it can
// safely use t.GetFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Frequency == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetFrequency() uint64 {
	if t == nil || t.Frequency == nil {
		return 0
	}
	return *t.Frequency
}

// GetGroupId retrieves the value of the leaf GroupId from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetLinePort retrieves the value of the leaf LinePort from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinePort is set, it can
// safely use t.GetLinePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinePort == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetLinePort() string {
	if t == nil || t.LinePort == nil {
		return ""
	}
	return *t.LinePort
}

// GetOperationalMode retrieves the value of the leaf OperationalMode from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperationalMode is set, it can
// safely use t.GetOperationalMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperationalMode == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetOperationalMode() uint16 {
	if t == nil || t.OperationalMode == nil {
		return 0
	}
	return *t.OperationalMode
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the Component_OpticalChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetOutputPower is set, it can
// safely use t.GetTargetOutputPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetOutputPower == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CarrierFrequencyOffset.PopulateDefaults()
	t.ChromaticDispersion.PopulateDefaults()
	t.Esnr.PopulateDefaults()
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.ModulationErrorRatio.PopulateDefaults()
	t.ModulatorBiasXPhase.PopulateDefaults()
	t.ModulatorBiasXi.PopulateDefaults()
	t.ModulatorBiasXq.PopulateDefaults()
	t.ModulatorBiasYPhase.PopulateDefaults()
	t.ModulatorBiasYi.PopulateDefaults()
	t.ModulatorBiasYq.PopulateDefaults()
	t.Osnr.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
	t.PolarizationDependentLoss.PopulateDefaults()
	t.PolarizationModeDispersion.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.QValue.PopulateDefaults()
	t.SecondOrderPolarizationModeDispersion.PopulateDefaults()
	t.SopRoc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel.
func (*Component_OpticalChannel) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_CarrierFrequencyOffset represents the /openconfig-platform/components/component/optical-channel/state/carrier-frequency-offset YANG schema element.
type Component_OpticalChannel_CarrierFrequencyOffset struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_CarrierFrequencyOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_CarrierFrequencyOffset) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_CarrierFrequencyOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_CarrierFrequencyOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_CarrierFrequencyOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_CarrierFrequencyOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_CarrierFrequencyOffset.
func (*Component_OpticalChannel_CarrierFrequencyOffset) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ChromaticDispersion represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion YANG schema element.
type Component_OpticalChannel_ChromaticDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ChromaticDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ChromaticDispersion) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ChromaticDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ChromaticDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ChromaticDispersion
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ChromaticDispersion) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ChromaticDispersion) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ChromaticDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ChromaticDispersion) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ChromaticDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ChromaticDispersion.
func (*Component_OpticalChannel_ChromaticDispersion) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_Esnr represents the /openconfig-platform/components/component/optical-channel/state/esnr YANG schema element.
type Component_OpticalChannel_Esnr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_Esnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_Esnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_Esnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_Esnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_Esnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_Esnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_Esnr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_Esnr.
func (*Component_OpticalChannel_Esnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_InputPower represents the /openconfig-platform/components/component/optical-channel/state/input-power YANG schema element.
type Component_OpticalChannel_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_InputPower.
func (*Component_OpticalChannel_InputPower) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_LaserBiasCurrent represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current YANG schema element.
type Component_OpticalChannel_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_LaserBiasCurrent.
func (*Component_OpticalChannel_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulationErrorRatio represents the /openconfig-platform/components/component/optical-channel/state/modulation-error-ratio YANG schema element.
type Component_OpticalChannel_ModulationErrorRatio struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulationErrorRatio implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulationErrorRatio) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulationErrorRatio
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulationErrorRatio) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulationErrorRatio
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulationErrorRatio) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulationErrorRatio) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulationErrorRatio"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulationErrorRatio) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulationErrorRatio) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulationErrorRatio.
func (*Component_OpticalChannel_ModulationErrorRatio) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}
