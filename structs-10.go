/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-one-ethernet-auto-discovery/type-one-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute struct {
	ΛMetadata    []ygot.Annotation                                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	Esi          *string                                                                                                                                                                                                `path:"state/esi|esi" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEsi         []ygot.Annotation                                                                                                                                                                                      `path:"state/@esi|@esi" ygotAnnotation:"true"`
	EthernetTag  *uint32                                                                                                                                                                                                `path:"state/ethernet-tag|ethernet-tag" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEthernetTag []ygot.Annotation                                                                                                                                                                                      `path:"state/@ethernet-tag|@ethernet-tag" ygotAnnotation:"true"`
	Path         map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path `path:"paths/path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPath        []ygot.Annotation                                                                                                                                                                                      `path:"paths/@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key represents the key for list Path of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-one-ethernet-auto-discovery/type-one-route.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key struct {
	PeerIp                   string                   `path:"peer-ip"`
	PeerPathId               uint32                   `path:"peer-path-id"`
	SourceRouteDistinguisher string                   `path:"source-route-distinguisher"`
	SourceAddressFamily      E_BgpTypes_AFI_SAFI_TYPE `path:"source-address-family"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-ip":                    t.PeerIp,
		"peer-path-id":               t.PeerPathId,
		"source-route-distinguisher": t.SourceRouteDistinguisher,
		"source-address-family":      t.SourceAddressFamily,
	}, nil
}

// NewPath creates a new entry in the Path list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) NewPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path{
		PeerIp:                   &PeerIp,
		PeerPathId:               &PeerPathId,
		SourceRouteDistinguisher: &SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) RenamePath(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PeerIp = &newK.PeerIp
	e.PeerPathId = &newK.PeerPathId
	e.SourceRouteDistinguisher = &newK.SourceRouteDistinguisher
	e.SourceAddressFamily = newK.SourceAddressFamily

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) GetOrCreatePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PeerIp, PeerPathId, SourceRouteDistinguisher, SourceAddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) GetPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) DeletePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	delete(t.Path, key)
}

// AppendPath appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path struct to the
// list Path of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) AppendPath(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) error {
	if v.PeerIp == nil {
		return fmt.Errorf("invalid nil key for PeerIp")
	}

	if v.PeerPathId == nil {
		return fmt.Errorf("invalid nil key for PeerPathId")
	}

	if v.SourceRouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key for SourceRouteDistinguisher")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key{
		PeerIp:                   *v.PeerIp,
		PeerPathId:               *v.PeerPathId,
		SourceRouteDistinguisher: *v.SourceRouteDistinguisher,
		SourceAddressFamily:      v.SourceAddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetEsi retrieves the value of the leaf Esi from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Esi == nil {
		return nil, fmt.Errorf("nil value for key Esi")
	}

	if t.EthernetTag == nil {
		return nil, fmt.Errorf("nil value for key EthernetTag")
	}

	return map[string]interface{}{
		"esi":          *t.Esi,
		"ethernet-tag": *t.EthernetTag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-one-ethernet-auto-discovery/type-one-route/paths/path YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path struct {
	ΛMetadata                 []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	AdvertisedToPeer          []string                                                                                                                   `path:"state/advertised-to-peer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertisedToPeer         []ygot.Annotation                                                                                                          `path:"state/@advertised-to-peer" ygotAnnotation:"true"`
	AttrIndex                 *uint64                                                                                                                    `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex                []ygot.Annotation                                                                                                          `path:"state/@attr-index" ygotAnnotation:"true"`
	Backup                    *bool                                                                                                                      `path:"state/backup" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBackup                   []ygot.Annotation                                                                                                          `path:"state/@backup" ygotAnnotation:"true"`
	Bestpath                  *bool                                                                                                                      `path:"state/bestpath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestpath                 []ygot.Annotation                                                                                                          `path:"state/@bestpath" ygotAnnotation:"true"`
	CommunityIndex            *uint64                                                                                                                    `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex           []ygot.Annotation                                                                                                          `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex         *uint64                                                                                                                    `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex        []ygot.Annotation                                                                                                          `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason             E_RibBgpTypes_INVALID_ROUTE_REASON                                                                                         `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason            []ygot.Annotation                                                                                                          `path:"state/@invalid-reason" ygotAnnotation:"true"`
	Label                     *string                                                                                                                    `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel                    []ygot.Annotation                                                                                                          `path:"state/@label" ygotAnnotation:"true"`
	Label2                    *string                                                                                                                    `path:"state/label2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel2                   []ygot.Annotation                                                                                                          `path:"state/@label2" ygotAnnotation:"true"`
	LastModified              *uint64                                                                                                                    `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified             []ygot.Annotation                                                                                                          `path:"state/@last-modified" ygotAnnotation:"true"`
	Multipath                 *bool                                                                                                                      `path:"state/multipath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMultipath                []ygot.Annotation                                                                                                          `path:"state/@multipath" ygotAnnotation:"true"`
	PeerIp                    *string                                                                                                                    `path:"state/peer-ip|peer-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerIp                   []ygot.Annotation                                                                                                          `path:"state/@peer-ip|@peer-ip" ygotAnnotation:"true"`
	PeerPathId                *uint32                                                                                                                    `path:"state/peer-path-id|peer-path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerPathId               []ygot.Annotation                                                                                                          `path:"state/@peer-path-id|@peer-path-id" ygotAnnotation:"true"`
	SourceAddressFamily       E_BgpTypes_AFI_SAFI_TYPE                                                                                                   `path:"state/source-address-family|source-address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceAddressFamily      []ygot.Annotation                                                                                                          `path:"state/@source-address-family|@source-address-family" ygotAnnotation:"true"`
	SourceRouteDistinguisher  *string                                                                                                                    `path:"state/source-route-distinguisher|source-route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceRouteDistinguisher []ygot.Annotation                                                                                                          `path:"state/@source-route-distinguisher|@source-route-distinguisher" ygotAnnotation:"true"`
	UnknownAttribute          map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute         []ygot.Annotation                                                                                                          `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute                *bool                                                                                                                      `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute               []ygot.Annotation                                                                                                          `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAdvertisedToPeer retrieves the value of the leaf AdvertisedToPeer from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedToPeer is set, it can
// safely use t.GetAdvertisedToPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedToPeer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetAdvertisedToPeer() []string {
	if t == nil || t.AdvertisedToPeer == nil {
		return nil
	}
	return t.AdvertisedToPeer
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBackup retrieves the value of the leaf Backup from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetBackup() bool {
	if t == nil || t.Backup == nil {
		return false
	}
	return *t.Backup
}

// GetBestpath retrieves the value of the leaf Bestpath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bestpath is set, it can
// safely use t.GetBestpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bestpath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetBestpath() bool {
	if t == nil || t.Bestpath == nil {
		return false
	}
	return *t.Bestpath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetLabel() string {
	if t == nil || t.Label == nil {
		return ""
	}
	return *t.Label
}

// GetLabel2 retrieves the value of the leaf Label2 from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label2 is set, it can
// safely use t.GetLabel2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetLabel2() string {
	if t == nil || t.Label2 == nil {
		return ""
	}
	return *t.Label2
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetMultipath retrieves the value of the leaf Multipath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipath is set, it can
// safely use t.GetMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetMultipath() bool {
	if t == nil || t.Multipath == nil {
		return false
	}
	return *t.Multipath
}

// GetPeerIp retrieves the value of the leaf PeerIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIp is set, it can
// safely use t.GetPeerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetPeerIp() string {
	if t == nil || t.PeerIp == nil {
		return ""
	}
	return *t.PeerIp
}

// GetPeerPathId retrieves the value of the leaf PeerPathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPathId is set, it can
// safely use t.GetPeerPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetPeerPathId() uint32 {
	if t == nil || t.PeerPathId == nil {
		return 0
	}
	return *t.PeerPathId
}

// GetSourceAddressFamily retrieves the value of the leaf SourceAddressFamily from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressFamily is set, it can
// safely use t.GetSourceAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetSourceAddressFamily() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.SourceAddressFamily == 0 {
		return 0
	}
	return t.SourceAddressFamily
}

// GetSourceRouteDistinguisher retrieves the value of the leaf SourceRouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceRouteDistinguisher is set, it can
// safely use t.GetSourceRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetSourceRouteDistinguisher() string {
	if t == nil || t.SourceRouteDistinguisher == nil {
		return ""
	}
	return *t.SourceRouteDistinguisher
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIp == nil {
		return nil, fmt.Errorf("nil value for key PeerIp")
	}

	if t.PeerPathId == nil {
		return nil, fmt.Errorf("nil value for key PeerPathId")
	}

	if t.SourceRouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key SourceRouteDistinguisher")
	}

	return map[string]interface{}{
		"peer-ip":                    *t.PeerIp,
		"peer-path-id":               *t.PeerPathId,
		"source-address-family":      t.SourceAddressFamily,
		"source-route-distinguisher": *t.SourceRouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-one-ethernet-auto-discovery/type-one-route/paths/path/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeOneRoute_Path_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute struct {
	ΛMetadata            []ygot.Annotation                                                                                                                                                                                          `path:"@" ygotAnnotation:"true"`
	EthernetTag          *uint32                                                                                                                                                                                                    `path:"state/ethernet-tag|ethernet-tag" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEthernetTag         []ygot.Annotation                                                                                                                                                                                          `path:"state/@ethernet-tag|@ethernet-tag" ygotAnnotation:"true"`
	OriginatingRouterIp  *string                                                                                                                                                                                                    `path:"state/originating-router-ip|originating-router-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatingRouterIp []ygot.Annotation                                                                                                                                                                                          `path:"state/@originating-router-ip|@originating-router-ip" ygotAnnotation:"true"`
	OriginatorIpLength   *uint32                                                                                                                                                                                                    `path:"state/originator-ip-length|originator-ip-length" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatorIpLength  []ygot.Annotation                                                                                                                                                                                          `path:"state/@originator-ip-length|@originator-ip-length" ygotAnnotation:"true"`
	Path                 map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path `path:"paths/path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPath                []ygot.Annotation                                                                                                                                                                                          `path:"paths/@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key represents the key for list Path of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key struct {
	PeerIp                   string                   `path:"peer-ip"`
	PeerPathId               uint32                   `path:"peer-path-id"`
	SourceRouteDistinguisher string                   `path:"source-route-distinguisher"`
	SourceAddressFamily      E_BgpTypes_AFI_SAFI_TYPE `path:"source-address-family"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-ip":                    t.PeerIp,
		"peer-path-id":               t.PeerPathId,
		"source-route-distinguisher": t.SourceRouteDistinguisher,
		"source-address-family":      t.SourceAddressFamily,
	}, nil
}

// NewPath creates a new entry in the Path list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) NewPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path{
		PeerIp:                   &PeerIp,
		PeerPathId:               &PeerPathId,
		SourceRouteDistinguisher: &SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) RenamePath(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PeerIp = &newK.PeerIp
	e.PeerPathId = &newK.PeerPathId
	e.SourceRouteDistinguisher = &newK.SourceRouteDistinguisher
	e.SourceAddressFamily = newK.SourceAddressFamily

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) GetOrCreatePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PeerIp, PeerPathId, SourceRouteDistinguisher, SourceAddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) GetPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) DeletePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	delete(t.Path, key)
}

// AppendPath appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path struct to the
// list Path of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) AppendPath(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) error {
	if v.PeerIp == nil {
		return fmt.Errorf("invalid nil key for PeerIp")
	}

	if v.PeerPathId == nil {
		return fmt.Errorf("invalid nil key for PeerPathId")
	}

	if v.SourceRouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key for SourceRouteDistinguisher")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key{
		PeerIp:                   *v.PeerIp,
		PeerPathId:               *v.PeerPathId,
		SourceRouteDistinguisher: *v.SourceRouteDistinguisher,
		SourceAddressFamily:      v.SourceAddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// GetOriginatingRouterIp retrieves the value of the leaf OriginatingRouterIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatingRouterIp is set, it can
// safely use t.GetOriginatingRouterIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatingRouterIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) GetOriginatingRouterIp() string {
	if t == nil || t.OriginatingRouterIp == nil {
		return ""
	}
	return *t.OriginatingRouterIp
}

// GetOriginatorIpLength retrieves the value of the leaf OriginatorIpLength from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorIpLength is set, it can
// safely use t.GetOriginatorIpLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorIpLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) GetOriginatorIpLength() uint32 {
	if t == nil || t.OriginatorIpLength == nil {
		return 0
	}
	return *t.OriginatorIpLength
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetTag == nil {
		return nil, fmt.Errorf("nil value for key EthernetTag")
	}

	if t.OriginatingRouterIp == nil {
		return nil, fmt.Errorf("nil value for key OriginatingRouterIp")
	}

	if t.OriginatorIpLength == nil {
		return nil, fmt.Errorf("nil value for key OriginatorIpLength")
	}

	return map[string]interface{}{
		"ethernet-tag":          *t.EthernetTag,
		"originating-router-ip": *t.OriginatingRouterIp,
		"originator-ip-length":  *t.OriginatorIpLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path struct {
	ΛMetadata                 []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	AdvertisedToPeer          []string                                                                                                                     `path:"state/advertised-to-peer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertisedToPeer         []ygot.Annotation                                                                                                            `path:"state/@advertised-to-peer" ygotAnnotation:"true"`
	AttrIndex                 *uint64                                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex                []ygot.Annotation                                                                                                            `path:"state/@attr-index" ygotAnnotation:"true"`
	Backup                    *bool                                                                                                                        `path:"state/backup" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBackup                   []ygot.Annotation                                                                                                            `path:"state/@backup" ygotAnnotation:"true"`
	Bestpath                  *bool                                                                                                                        `path:"state/bestpath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestpath                 []ygot.Annotation                                                                                                            `path:"state/@bestpath" ygotAnnotation:"true"`
	CommunityIndex            *uint64                                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex           []ygot.Annotation                                                                                                            `path:"state/@community-index" ygotAnnotation:"true"`
	ExtCommunityIndex         *uint64                                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex        []ygot.Annotation                                                                                                            `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason             E_RibBgpTypes_INVALID_ROUTE_REASON                                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason            []ygot.Annotation                                                                                                            `path:"state/@invalid-reason" ygotAnnotation:"true"`
	Label                     *string                                                                                                                      `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel                    []ygot.Annotation                                                                                                            `path:"state/@label" ygotAnnotation:"true"`
	Label2                    *string                                                                                                                      `path:"state/label2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel2                   []ygot.Annotation                                                                                                            `path:"state/@label2" ygotAnnotation:"true"`
	LastModified              *uint64                                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified             []ygot.Annotation                                                                                                            `path:"state/@last-modified" ygotAnnotation:"true"`
	Multipath                 *bool                                                                                                                        `path:"state/multipath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMultipath                []ygot.Annotation                                                                                                            `path:"state/@multipath" ygotAnnotation:"true"`
	PeerIp                    *string                                                                                                                      `path:"state/peer-ip|peer-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerIp                   []ygot.Annotation                                                                                                            `path:"state/@peer-ip|@peer-ip" ygotAnnotation:"true"`
	PeerPathId                *uint32                                                                                                                      `path:"state/peer-path-id|peer-path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerPathId               []ygot.Annotation                                                                                                            `path:"state/@peer-path-id|@peer-path-id" ygotAnnotation:"true"`
	SourceAddressFamily       E_BgpTypes_AFI_SAFI_TYPE                                                                                                     `path:"state/source-address-family|source-address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceAddressFamily      []ygot.Annotation                                                                                                            `path:"state/@source-address-family|@source-address-family" ygotAnnotation:"true"`
	SourceRouteDistinguisher  *string                                                                                                                      `path:"state/source-route-distinguisher|source-route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceRouteDistinguisher []ygot.Annotation                                                                                                            `path:"state/@source-route-distinguisher|@source-route-distinguisher" ygotAnnotation:"true"`
	UnknownAttribute          map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute         []ygot.Annotation                                                                                                            `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute                *bool                                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute               []ygot.Annotation                                                                                                            `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAdvertisedToPeer retrieves the value of the leaf AdvertisedToPeer from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedToPeer is set, it can
// safely use t.GetAdvertisedToPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedToPeer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetAdvertisedToPeer() []string {
	if t == nil || t.AdvertisedToPeer == nil {
		return nil
	}
	return t.AdvertisedToPeer
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBackup retrieves the value of the leaf Backup from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetBackup() bool {
	if t == nil || t.Backup == nil {
		return false
	}
	return *t.Backup
}

// GetBestpath retrieves the value of the leaf Bestpath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bestpath is set, it can
// safely use t.GetBestpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bestpath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetBestpath() bool {
	if t == nil || t.Bestpath == nil {
		return false
	}
	return *t.Bestpath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetLabel() string {
	if t == nil || t.Label == nil {
		return ""
	}
	return *t.Label
}

// GetLabel2 retrieves the value of the leaf Label2 from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label2 is set, it can
// safely use t.GetLabel2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetLabel2() string {
	if t == nil || t.Label2 == nil {
		return ""
	}
	return *t.Label2
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetMultipath retrieves the value of the leaf Multipath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipath is set, it can
// safely use t.GetMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetMultipath() bool {
	if t == nil || t.Multipath == nil {
		return false
	}
	return *t.Multipath
}

// GetPeerIp retrieves the value of the leaf PeerIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIp is set, it can
// safely use t.GetPeerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetPeerIp() string {
	if t == nil || t.PeerIp == nil {
		return ""
	}
	return *t.PeerIp
}

// GetPeerPathId retrieves the value of the leaf PeerPathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPathId is set, it can
// safely use t.GetPeerPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetPeerPathId() uint32 {
	if t == nil || t.PeerPathId == nil {
		return 0
	}
	return *t.PeerPathId
}

// GetSourceAddressFamily retrieves the value of the leaf SourceAddressFamily from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressFamily is set, it can
// safely use t.GetSourceAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetSourceAddressFamily() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.SourceAddressFamily == 0 {
		return 0
	}
	return t.SourceAddressFamily
}

// GetSourceRouteDistinguisher retrieves the value of the leaf SourceRouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceRouteDistinguisher is set, it can
// safely use t.GetSourceRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetSourceRouteDistinguisher() string {
	if t == nil || t.SourceRouteDistinguisher == nil {
		return ""
	}
	return *t.SourceRouteDistinguisher
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIp == nil {
		return nil, fmt.Errorf("nil value for key PeerIp")
	}

	if t.PeerPathId == nil {
		return nil, fmt.Errorf("nil value for key PeerPathId")
	}

	if t.SourceRouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key SourceRouteDistinguisher")
	}

	return map[string]interface{}{
		"peer-ip":                    *t.PeerIp,
		"peer-path-id":               *t.PeerPathId,
		"source-address-family":      t.SourceAddressFamily,
		"source-route-distinguisher": *t.SourceRouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-three-inclusive-multicast-ethernet-tag/type-three-route/paths/path/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeThreeRoute_Path_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement/type-two-route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute struct {
	ΛMetadata    []ygot.Annotation                                                                                                                                                                                      `path:"@" ygotAnnotation:"true"`
	EthernetTag  *uint32                                                                                                                                                                                                `path:"state/ethernet-tag|ethernet-tag" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEthernetTag []ygot.Annotation                                                                                                                                                                                      `path:"state/@ethernet-tag|@ethernet-tag" ygotAnnotation:"true"`
	IpLength     *uint32                                                                                                                                                                                                `path:"state/ip-length|ip-length" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIpLength    []ygot.Annotation                                                                                                                                                                                      `path:"state/@ip-length|@ip-length" ygotAnnotation:"true"`
	IpPrefix     *string                                                                                                                                                                                                `path:"state/ip-prefix|ip-prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIpPrefix    []ygot.Annotation                                                                                                                                                                                      `path:"state/@ip-prefix|@ip-prefix" ygotAnnotation:"true"`
	MacAddress   *string                                                                                                                                                                                                `path:"state/mac-address|mac-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛMacAddress  []ygot.Annotation                                                                                                                                                                                      `path:"state/@mac-address|@mac-address" ygotAnnotation:"true"`
	MacLength    *uint32                                                                                                                                                                                                `path:"state/mac-length|mac-length" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛMacLength   []ygot.Annotation                                                                                                                                                                                      `path:"state/@mac-length|@mac-length" ygotAnnotation:"true"`
	Path         map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path `path:"paths/path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPath        []ygot.Annotation                                                                                                                                                                                      `path:"paths/@path" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key represents the key for list Path of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement/type-two-route.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key struct {
	PeerIp                   string                   `path:"peer-ip"`
	PeerPathId               uint32                   `path:"peer-path-id"`
	SourceRouteDistinguisher string                   `path:"source-route-distinguisher"`
	SourceAddressFamily      E_BgpTypes_AFI_SAFI_TYPE `path:"source-address-family"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key key struct.
func (t NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"peer-ip":                    t.PeerIp,
		"peer-path-id":               t.PeerPathId,
		"source-route-distinguisher": t.SourceRouteDistinguisher,
		"source-address-family":      t.SourceAddressFamily,
	}, nil
}

// NewPath creates a new entry in the Path list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) NewPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path{
		PeerIp:                   &PeerIp,
		PeerPathId:               &PeerPathId,
		SourceRouteDistinguisher: &SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) RenamePath(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PeerIp = &newK.PeerIp
	e.PeerPathId = &newK.PeerPathId
	e.SourceRouteDistinguisher = &newK.SourceRouteDistinguisher
	e.SourceAddressFamily = newK.SourceAddressFamily

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetOrCreatePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PeerIp, PeerPathId, SourceRouteDistinguisher, SourceAddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetPath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) DeletePath(PeerIp string, PeerPathId uint32, SourceRouteDistinguisher string, SourceAddressFamily E_BgpTypes_AFI_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key{
		PeerIp:                   PeerIp,
		PeerPathId:               PeerPathId,
		SourceRouteDistinguisher: SourceRouteDistinguisher,
		SourceAddressFamily:      SourceAddressFamily,
	}

	delete(t.Path, key)
}

// AppendPath appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path struct to the
// list Path of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) AppendPath(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) error {
	if v.PeerIp == nil {
		return fmt.Errorf("invalid nil key for PeerIp")
	}

	if v.PeerPathId == nil {
		return fmt.Errorf("invalid nil key for PeerPathId")
	}

	if v.SourceRouteDistinguisher == nil {
		return fmt.Errorf("invalid nil key for SourceRouteDistinguisher")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key{
		PeerIp:                   *v.PeerIp,
		PeerPathId:               *v.PeerPathId,
		SourceRouteDistinguisher: *v.SourceRouteDistinguisher,
		SourceAddressFamily:      v.SourceAddressFamily,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// GetIpLength retrieves the value of the leaf IpLength from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLength is set, it can
// safely use t.GetIpLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetIpLength() uint32 {
	if t == nil || t.IpLength == nil {
		return 0
	}
	return *t.IpLength
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMacLength retrieves the value of the leaf MacLength from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacLength is set, it can
// safely use t.GetMacLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) GetMacLength() uint32 {
	if t == nil || t.MacLength == nil {
		return 0
	}
	return *t.MacLength
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetTag == nil {
		return nil, fmt.Errorf("nil value for key EthernetTag")
	}

	if t.IpLength == nil {
		return nil, fmt.Errorf("nil value for key IpLength")
	}

	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	if t.MacLength == nil {
		return nil, fmt.Errorf("nil value for key MacLength")
	}

	return map[string]interface{}{
		"ethernet-tag": *t.EthernetTag,
		"ip-length":    *t.IpLength,
		"ip-prefix":    *t.IpPrefix,
		"mac-address":  *t.MacAddress,
		"mac-length":   *t.MacLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement/type-two-route/paths/path YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path struct {
	ΛMetadata                 []ygot.Annotation                                                                                                          `path:"@" ygotAnnotation:"true"`
	AdvertisedToPeer          []string                                                                                                                   `path:"state/advertised-to-peer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertisedToPeer         []ygot.Annotation                                                                                                          `path:"state/@advertised-to-peer" ygotAnnotation:"true"`
	AttrIndex                 *uint64                                                                                                                    `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrIndex                []ygot.Annotation                                                                                                          `path:"state/@attr-index" ygotAnnotation:"true"`
	Backup                    *bool                                                                                                                      `path:"state/backup" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBackup                   []ygot.Annotation                                                                                                          `path:"state/@backup" ygotAnnotation:"true"`
	Bestpath                  *bool                                                                                                                      `path:"state/bestpath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBestpath                 []ygot.Annotation                                                                                                          `path:"state/@bestpath" ygotAnnotation:"true"`
	CommunityIndex            *uint64                                                                                                                    `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunityIndex           []ygot.Annotation                                                                                                          `path:"state/@community-index" ygotAnnotation:"true"`
	Esi                       *string                                                                                                                    `path:"state/esi" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEsi                      []ygot.Annotation                                                                                                          `path:"state/@esi" ygotAnnotation:"true"`
	ExtCommunityIndex         *uint64                                                                                                                    `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunityIndex        []ygot.Annotation                                                                                                          `path:"state/@ext-community-index" ygotAnnotation:"true"`
	InvalidReason             E_RibBgpTypes_INVALID_ROUTE_REASON                                                                                         `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason            []ygot.Annotation                                                                                                          `path:"state/@invalid-reason" ygotAnnotation:"true"`
	Label                     *string                                                                                                                    `path:"state/label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel                    []ygot.Annotation                                                                                                          `path:"state/@label" ygotAnnotation:"true"`
	Label2                    *string                                                                                                                    `path:"state/label2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLabel2                   []ygot.Annotation                                                                                                          `path:"state/@label2" ygotAnnotation:"true"`
	LastModified              *uint64                                                                                                                    `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLastModified             []ygot.Annotation                                                                                                          `path:"state/@last-modified" ygotAnnotation:"true"`
	Multipath                 *bool                                                                                                                      `path:"state/multipath" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMultipath                []ygot.Annotation                                                                                                          `path:"state/@multipath" ygotAnnotation:"true"`
	PeerIp                    *string                                                                                                                    `path:"state/peer-ip|peer-ip" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerIp                   []ygot.Annotation                                                                                                          `path:"state/@peer-ip|@peer-ip" ygotAnnotation:"true"`
	PeerPathId                *uint32                                                                                                                    `path:"state/peer-path-id|peer-path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPeerPathId               []ygot.Annotation                                                                                                          `path:"state/@peer-path-id|@peer-path-id" ygotAnnotation:"true"`
	SourceAddressFamily       E_BgpTypes_AFI_SAFI_TYPE                                                                                                   `path:"state/source-address-family|source-address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceAddressFamily      []ygot.Annotation                                                                                                          `path:"state/@source-address-family|@source-address-family" ygotAnnotation:"true"`
	SourceRouteDistinguisher  *string                                                                                                                    `path:"state/source-route-distinguisher|source-route-distinguisher" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSourceRouteDistinguisher []ygot.Annotation                                                                                                          `path:"state/@source-route-distinguisher|@source-route-distinguisher" ygotAnnotation:"true"`
	UnknownAttribute          map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUnknownAttribute         []ygot.Annotation                                                                                                          `path:"unknown-attributes/@unknown-attribute" ygotAnnotation:"true"`
	ValidRoute                *bool                                                                                                                      `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValidRoute               []ygot.Annotation                                                                                                          `path:"state/@valid-route" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAdvertisedToPeer retrieves the value of the leaf AdvertisedToPeer from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedToPeer is set, it can
// safely use t.GetAdvertisedToPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedToPeer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetAdvertisedToPeer() []string {
	if t == nil || t.AdvertisedToPeer == nil {
		return nil
	}
	return t.AdvertisedToPeer
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBackup retrieves the value of the leaf Backup from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetBackup() bool {
	if t == nil || t.Backup == nil {
		return false
	}
	return *t.Backup
}

// GetBestpath retrieves the value of the leaf Bestpath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bestpath is set, it can
// safely use t.GetBestpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bestpath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetBestpath() bool {
	if t == nil || t.Bestpath == nil {
		return false
	}
	return *t.Bestpath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEsi retrieves the value of the leaf Esi from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLabel retrieves the value of the leaf Label from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetLabel() string {
	if t == nil || t.Label == nil {
		return ""
	}
	return *t.Label
}

// GetLabel2 retrieves the value of the leaf Label2 from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label2 is set, it can
// safely use t.GetLabel2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetLabel2() string {
	if t == nil || t.Label2 == nil {
		return ""
	}
	return *t.Label2
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetMultipath retrieves the value of the leaf Multipath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multipath is set, it can
// safely use t.GetMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multipath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetMultipath() bool {
	if t == nil || t.Multipath == nil {
		return false
	}
	return *t.Multipath
}

// GetPeerIp retrieves the value of the leaf PeerIp from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIp is set, it can
// safely use t.GetPeerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetPeerIp() string {
	if t == nil || t.PeerIp == nil {
		return ""
	}
	return *t.PeerIp
}

// GetPeerPathId retrieves the value of the leaf PeerPathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPathId is set, it can
// safely use t.GetPeerPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetPeerPathId() uint32 {
	if t == nil || t.PeerPathId == nil {
		return 0
	}
	return *t.PeerPathId
}

// GetSourceAddressFamily retrieves the value of the leaf SourceAddressFamily from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressFamily is set, it can
// safely use t.GetSourceAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetSourceAddressFamily() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.SourceAddressFamily == 0 {
		return 0
	}
	return t.SourceAddressFamily
}

// GetSourceRouteDistinguisher retrieves the value of the leaf SourceRouteDistinguisher from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceRouteDistinguisher is set, it can
// safely use t.GetSourceRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetSourceRouteDistinguisher() string {
	if t == nil || t.SourceRouteDistinguisher == nil {
		return ""
	}
	return *t.SourceRouteDistinguisher
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UnknownAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIp == nil {
		return nil, fmt.Errorf("nil value for key PeerIp")
	}

	if t.PeerPathId == nil {
		return nil, fmt.Errorf("nil value for key PeerPathId")
	}

	if t.SourceRouteDistinguisher == nil {
		return nil, fmt.Errorf("nil value for key SourceRouteDistinguisher")
	}

	return map[string]interface{}{
		"peer-ip":                    *t.PeerIp,
		"peer-path-id":               *t.PeerPathId,
		"source-address-family":      t.SourceAddressFamily,
		"source-route-distinguisher": *t.SourceRouteDistinguisher,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/loc-rib/routes/route-distinguisher/type-two-mac-ip-advertisement/type-two-route/paths/path/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AttrLen     *uint16           `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrLen    []ygot.Annotation `path:"state/@attr-len" ygotAnnotation:"true"`
	AttrType    *uint8            `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAttrType   []ygot.Annotation `path:"state/@attr-type|@attr-type" ygotAnnotation:"true"`
	AttrValue   Binary            `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAttrValue  []ygot.Annotation `path:"state/@attr-value" ygotAnnotation:"true"`
	Extended    *bool             `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtended   []ygot.Annotation `path:"state/@extended" ygotAnnotation:"true"`
	Optional    *bool             `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOptional   []ygot.Annotation `path:"state/@optional" ygotAnnotation:"true"`
	Partial     *bool             `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPartial    []ygot.Annotation `path:"state/@partial" ygotAnnotation:"true"`
	Transitive  *bool             `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTransitive []ygot.Annotation `path:"state/@transitive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_LocRib_RouteDistinguisher_TypeTwoRoute_Path_UnknownAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor struct {
	ΛMetadata        []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	AdjRibInPost     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	ΛAdjRibInPost    []ygot.Annotation                                                          `path:"@adj-rib-in-post" ygotAnnotation:"true"`
	AdjRibInPre      *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	ΛAdjRibInPre     []ygot.Annotation                                                          `path:"@adj-rib-in-pre" ygotAnnotation:"true"`
	AdjRibOutPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	ΛAdjRibOutPost   []ygot.Annotation                                                          `path:"@adj-rib-out-post" ygotAnnotation:"true"`
	AdjRibOutPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	ΛAdjRibOutPre    []ygot.Annotation                                                          `path:"@adj-rib-out-pre" ygotAnnotation:"true"`
	NeighborAddress  *string                                                                    `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛNeighborAddress []ygot.Annotation                                                          `path:"state/@neighbor-address|@neighbor-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdjRibInPost.PopulateDefaults()
	t.AdjRibInPre.PopulateDefaults()
	t.AdjRibOutPost.PopulateDefaults()
	t.AdjRibOutPre.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibInPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPost) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/l2vpn-evpn/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_L2VpnEvpn_Neighbor_AdjRibOutPre) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet struct {
	ΛMetadata            []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	Aggregator           *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator            `path:"aggregator" module:"openconfig-network-instance"`
	ΛAggregator          []ygot.Annotation                                               `path:"@aggregator" ygotAnnotation:"true"`
	Aigp                 *uint64                                                         `path:"state/aigp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAigp                []ygot.Annotation                                               `path:"state/@aigp" ygotAnnotation:"true"`
	AsSegment            map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment  `path:"as-path/as-segment" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAsSegment           []ygot.Annotation                                               `path:"as-path/@as-segment" ygotAnnotation:"true"`
	As4Segment           map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment `path:"as4-path/as4-segment" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAs4Segment          []ygot.Annotation                                               `path:"as4-path/@as4-segment" ygotAnnotation:"true"`
	AtomicAggregate      *bool                                                           `path:"state/atomic-aggregate" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAtomicAggregate     []ygot.Annotation                                               `path:"state/@atomic-aggregate" ygotAnnotation:"true"`
	ClusterList          []string                                                        `path:"state/cluster-list" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛClusterList         []ygot.Annotation                                               `path:"state/@cluster-list" ygotAnnotation:"true"`
	Index                *uint64                                                         `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex               []ygot.Annotation                                               `path:"state/@index|@index" ygotAnnotation:"true"`
	LocalPref            *uint32                                                         `path:"state/local-pref" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLocalPref           []ygot.Annotation                                               `path:"state/@local-pref" ygotAnnotation:"true"`
	Med                  *uint32                                                         `path:"state/med" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMed                 []ygot.Annotation                                               `path:"state/@med" ygotAnnotation:"true"`
	NextHop              *string                                                         `path:"state/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHop             []ygot.Annotation                                               `path:"state/@next-hop" ygotAnnotation:"true"`
	Origin               E_BgpTypes_BgpOriginAttrType                                    `path:"state/origin" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOrigin              []ygot.Annotation                                               `path:"state/@origin" ygotAnnotation:"true"`
	OriginatorId         *string                                                         `path:"state/originator-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOriginatorId        []ygot.Annotation                                               `path:"state/@originator-id" ygotAnnotation:"true"`
	TunnelEncapsulation  *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation   `path:"tunnel-encapsulation" module:"openconfig-network-instance"`
	ΛTunnelEncapsulation []ygot.Annotation                                               `path:"@tunnel-encapsulation" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet) IsYANGGoStruct() {}

// NewAsSegment creates a new entry in the AsSegment list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) NewAsSegment(Index uint32) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsSegment == nil {
		t.AsSegment = make(map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsSegment", key)
	}

	t.AsSegment[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment{
		Index: &Index,
	}

	return t.AsSegment[key], nil
}

// RenameAsSegment renames an entry in the list AsSegment within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) RenameAsSegment(oldK, newK uint32) error {
	if _, ok := t.AsSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in AsSegment", newK)
	}

	e, ok := t.AsSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsSegment", oldK)
	}
	e.Index = &newK

	t.AsSegment[newK] = e
	delete(t.AsSegment, oldK)
	return nil
}

// GetOrCreateAsSegment retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateAsSegment(Index uint32) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment {

	key := Index

	if v, ok := t.AsSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsSegment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsSegment got unexpected error: %v", err))
	}
	return v
}

// GetAsSegment retrieves the value with the specified key from
// the AsSegment map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAsSegment(Index uint32) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.AsSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsSegment deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) DeleteAsSegment(Index uint32) {
	key := Index

	delete(t.AsSegment, key)
}

// AppendAsSegment appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment struct to the
// list AsSegment of NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) AppendAsSegment(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsSegment == nil {
		t.AsSegment = make(map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment)
	}

	if _, ok := t.AsSegment[key]; ok {
		return fmt.Errorf("duplicate key for list AsSegment %v", key)
	}

	t.AsSegment[key] = v
	return nil
}

// NewAs4Segment creates a new entry in the As4Segment list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) NewAs4Segment(Index uint32) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.As4Segment == nil {
		t.As4Segment = make(map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.As4Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list As4Segment", key)
	}

	t.As4Segment[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment{
		Index: &Index,
	}

	return t.As4Segment[key], nil
}

// RenameAs4Segment renames an entry in the list As4Segment within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) RenameAs4Segment(oldK, newK uint32) error {
	if _, ok := t.As4Segment[newK]; ok {
		return fmt.Errorf("key %v already exists in As4Segment", newK)
	}

	e, ok := t.As4Segment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in As4Segment", oldK)
	}
	e.Index = &newK

	t.As4Segment[newK] = e
	delete(t.As4Segment, oldK)
	return nil
}

// GetOrCreateAs4Segment retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateAs4Segment(Index uint32) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment {

	key := Index

	if v, ok := t.As4Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAs4Segment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAs4Segment got unexpected error: %v", err))
	}
	return v
}

// GetAs4Segment retrieves the value with the specified key from
// the As4Segment map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAs4Segment(Index uint32) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.As4Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteAs4Segment deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) DeleteAs4Segment(Index uint32) {
	key := Index

	delete(t.As4Segment, key)
}

// AppendAs4Segment appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment struct to the
// list As4Segment of NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) AppendAs4Segment(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.As4Segment == nil {
		t.As4Segment = make(map[uint32]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment)
	}

	if _, ok := t.As4Segment[key]; ok {
		return fmt.Errorf("duplicate key for list As4Segment %v", key)
	}

	t.As4Segment[key] = v
	return nil
}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateAggregator() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator{}
	return t.Aggregator
}

// GetOrCreateTunnelEncapsulation retrieves the value of the TunnelEncapsulation field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateTunnelEncapsulation() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	t.TunnelEncapsulation = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation{}
	return t.TunnelEncapsulation
}

// GetAggregator returns the value of the Aggregator struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAggregator() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetTunnelEncapsulation returns the value of the TunnelEncapsulation struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver or the field TunnelEncapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetTunnelEncapsulation() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t != nil && t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	return nil
}

// GetAigp retrieves the value of the leaf Aigp from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAigp() uint64 {
	if t == nil || t.Aigp == nil {
		return 0
	}
	return *t.Aigp
}

// GetAtomicAggregate retrieves the value of the leaf AtomicAggregate from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicAggregate is set, it can
// safely use t.GetAtomicAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicAggregate == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAtomicAggregate() bool {
	if t == nil || t.AtomicAggregate == nil {
		return false
	}
	return *t.AtomicAggregate
}

// GetClusterList retrieves the value of the leaf ClusterList from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterList is set, it can
// safely use t.GetClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterList == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetClusterList() []string {
	if t == nil || t.ClusterList == nil {
		return nil
	}
	return t.ClusterList
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalPref retrieves the value of the leaf LocalPref from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPref is set, it can
// safely use t.GetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPref == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetLocalPref() uint32 {
	if t == nil || t.LocalPref == nil {
		return 0
	}
	return *t.LocalPref
}

// GetMed retrieves the value of the leaf Med from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Med is set, it can
// safely use t.GetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Med == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetMed() uint32 {
	if t == nil || t.Med == nil {
		return 0
	}
	return *t.Med
}

// GetNextHop retrieves the value of the leaf NextHop from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginatorId retrieves the value of the leaf OriginatorId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorId is set, it can
// safely use t.GetOriginatorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOriginatorId() string {
	if t == nil || t.OriginatorId == nil {
		return ""
	}
	return *t.OriginatorId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aggregator.PopulateDefaults()
	t.TunnelEncapsulation.PopulateDefaults()
	for _, e := range t.AsSegment {
		e.PopulateDefaults()
	}
	for _, e := range t.As4Segment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/aggregator YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"state/address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAddress  []ygot.Annotation `path:"state/@address" ygotAnnotation:"true"`
	As        *uint32           `path:"state/as" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAs       []ygot.Annotation `path:"state/@as" ygotAnnotation:"true"`
	As4       *uint32           `path:"state/as4" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAs4      []ygot.Annotation `path:"state/@as4" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAs retrieves the value of the leaf As from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetAs4 retrieves the value of the leaf As4 from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As4 is set, it can
// safely use t.GetAs4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As4 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAs4() uint32 {
	if t == nil || t.As4 == nil {
		return 0
	}
	return *t.As4
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as4-path/as4-segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Index     *uint32                      `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex    []ygot.Annotation            `path:"state/@index|@index" ygotAnnotation:"true"`
	Member    []uint32                     `path:"state/member" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMember   []ygot.Annotation            `path:"state/@member" ygotAnnotation:"true"`
	Type      E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType     []ygot.Annotation            `path:"state/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetMember retrieves the value of the leaf Member from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as-path/as-segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment struct {
	ΛMetadata []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	Index     *uint32                      `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex    []ygot.Annotation            `path:"state/@index|@index" ygotAnnotation:"true"`
	Member    []uint32                     `path:"state/member" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMember   []ygot.Annotation            `path:"state/@member" ygotAnnotation:"true"`
	Type      E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType     []ygot.Annotation            `path:"state/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetMember retrieves the value of the leaf Member from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct {
	ΛMetadata []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	Tunnel    map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel `path:"tunnels/tunnel" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTunnel   []ygot.Annotation                                                                                                `path:"tunnels/@tunnel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) NewTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel{
		Type: Type,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) RenameTunnel(oldK, newK E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.Type = newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) GetOrCreateTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	key := Type

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) GetTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) DeleteTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) {
	key := Type

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct to the
// list Tunnel of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) AppendTunnel(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Subtlv    map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv `path:"subtlvs/subtlv" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubtlv   []ygot.Annotation                                                                                                              `path:"subtlvs/@subtlv" ygotAnnotation:"true"`
	Type      E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE                                                                                        `path:"state/type|type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛType     []ygot.Annotation                                                                                                              `path:"state/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) IsYANGGoStruct() {}

// NewSubtlv creates a new entry in the Subtlv list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) NewSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subtlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subtlv", key)
	}

	t.Subtlv[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv{
		Type: Type,
	}

	return t.Subtlv[key], nil
}

// RenameSubtlv renames an entry in the list Subtlv within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) RenameSubtlv(oldK, newK E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) error {
	if _, ok := t.Subtlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Subtlv", newK)
	}

	e, ok := t.Subtlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subtlv", oldK)
	}
	e.Type = newK

	t.Subtlv[newK] = e
	delete(t.Subtlv, oldK)
	return nil
}

// GetOrCreateSubtlv retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetOrCreateSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	key := Type

	if v, ok := t.Subtlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubtlv(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubtlv got unexpected error: %v", err))
	}
	return v
}

// GetSubtlv retrieves the value with the specified key from
// the Subtlv map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Subtlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubtlv deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) DeleteSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) {
	key := Type

	delete(t.Subtlv, key)
}

// AppendSubtlv appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct to the
// list Subtlv of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) AppendSubtlv(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	if _, ok := t.Subtlv[key]; ok {
		return fmt.Errorf("duplicate key for list Subtlv %v", key)
	}

	t.Subtlv[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Subtlv {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct {
	ΛMetadata       []ygot.Annotation                                                                                     `path:"@" ygotAnnotation:"true"`
	BindingSid      NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union           `path:"state/binding-sid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBindingSid     []ygot.Annotation                                                                                     `path:"state/@binding-sid" ygotAnnotation:"true"`
	Colors          []uint32                                                                                              `path:"state/colors" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛColors         []ygot.Annotation                                                                                     `path:"state/@colors" ygotAnnotation:"true"`
	Preference      *uint32                                                                                               `path:"state/preference" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPreference     []ygot.Annotation                                                                                     `path:"state/@preference" ygotAnnotation:"true"`
	RemoteEndpoint  map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint `path:"remote-endpoints/remote-endpoint" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRemoteEndpoint []ygot.Annotation                                                                                     `path:"remote-endpoints/@remote-endpoint" ygotAnnotation:"true"`
	SegmentList     map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList    `path:"segment-lists/segment-list" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSegmentList    []ygot.Annotation                                                                                     `path:"segment-lists/@segment-list" ygotAnnotation:"true"`
	Type            E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE                                                        `path:"state/type|type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛType           []ygot.Annotation                                                                                     `path:"state/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) IsYANGGoStruct() {}

// NewRemoteEndpoint creates a new entry in the RemoteEndpoint list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewRemoteEndpoint(Endpoint string) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	key := Endpoint

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteEndpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteEndpoint", key)
	}

	t.RemoteEndpoint[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint{
		Endpoint: &Endpoint,
	}

	return t.RemoteEndpoint[key], nil
}

// RenameRemoteEndpoint renames an entry in the list RemoteEndpoint within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) RenameRemoteEndpoint(oldK, newK string) error {
	if _, ok := t.RemoteEndpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteEndpoint", newK)
	}

	e, ok := t.RemoteEndpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteEndpoint", oldK)
	}
	e.Endpoint = &newK

	t.RemoteEndpoint[newK] = e
	delete(t.RemoteEndpoint, oldK)
	return nil
}

// GetOrCreateRemoteEndpoint retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateRemoteEndpoint(Endpoint string) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	key := Endpoint

	if v, ok := t.RemoteEndpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteEndpoint(Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetRemoteEndpoint retrieves the value with the specified key from
// the RemoteEndpoint map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetRemoteEndpoint(Endpoint string) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	if t == nil {
		return nil
	}

	key := Endpoint

	if lm, ok := t.RemoteEndpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteEndpoint deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteRemoteEndpoint(Endpoint string) {
	key := Endpoint

	delete(t.RemoteEndpoint, key)
}

// AppendRemoteEndpoint appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct to the
// list RemoteEndpoint of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendRemoteEndpoint(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) error {
	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key received for Endpoint")
	}

	key := *v.Endpoint

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	if _, ok := t.RemoteEndpoint[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteEndpoint %v", key)
	}

	t.RemoteEndpoint[key] = v
	return nil
}

// NewSegmentList creates a new entry in the SegmentList list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewSegmentList(InstanceId uint64) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	key := InstanceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList{
		InstanceId: &InstanceId,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) RenameSegmentList(oldK, newK uint64) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.InstanceId = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateSegmentList(InstanceId uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	key := InstanceId

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetSegmentList(InstanceId uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	if t == nil {
		return nil
	}

	key := InstanceId

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteSegmentList(InstanceId uint64) {
	key := InstanceId

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct to the
// list SegmentList of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendSegmentList(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) error {
	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key received for InstanceId")
	}

	key := *v.InstanceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetBindingSid retrieves the value of the leaf BindingSid from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingSid is set, it can
// safely use t.GetBindingSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingSid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetBindingSid() NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union {
	if t == nil || t.BindingSid == nil {
		return nil
	}
	return t.BindingSid
}

// GetColors retrieves the value of the leaf Colors from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Colors is set, it can
// safely use t.GetColors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Colors == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetColors() []uint32 {
	if t == nil || t.Colors == nil {
		return nil
	}
	return t.Colors
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	for _, e := range t.RemoteEndpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/remote-endpoints/remote-endpoint YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	As        *uint32           `path:"state/as" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAs       []ygot.Annotation `path:"state/@as" ygotAnnotation:"true"`
	Endpoint  *string           `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint []ygot.Annotation `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) IsYANGGoStruct() {
}

// GetAs retrieves the value of the leaf As from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct {
	ΛMetadata   []ygot.Annotation                                                                                          `path:"@" ygotAnnotation:"true"`
	InstanceId  *uint64                                                                                                    `path:"state/instance-id|instance-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInstanceId []ygot.Annotation                                                                                          `path:"state/@instance-id|@instance-id" ygotAnnotation:"true"`
	Segment     map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment `path:"segments/segment" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSegment    []ygot.Annotation                                                                                          `path:"segments/@segment" ygotAnnotation:"true"`
	Weight      *uint32                                                                                                    `path:"state/weight" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛWeight     []ygot.Annotation                                                                                          `path:"state/@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) IsYANGGoStruct() {
}

// NewSegment creates a new entry in the Segment list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) NewSegment(Index uint64) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Segment", key)
	}

	t.Segment[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment{
		Index: &Index,
	}

	return t.Segment[key], nil
}

// RenameSegment renames an entry in the list Segment within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) RenameSegment(oldK, newK uint64) error {
	if _, ok := t.Segment[newK]; ok {
		return fmt.Errorf("key %v already exists in Segment", newK)
	}

	e, ok := t.Segment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Segment", oldK)
	}
	e.Index = &newK

	t.Segment[newK] = e
	delete(t.Segment, oldK)
	return nil
}

// GetOrCreateSegment retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetOrCreateSegment(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	key := Index

	if v, ok := t.Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegment got unexpected error: %v", err))
	}
	return v
}

// GetSegment retrieves the value with the specified key from
// the Segment map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetSegment(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegment deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) DeleteSegment(Index uint64) {
	key := Index

	delete(t.Segment, key)
}

// AppendSegment appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct to the
// list Segment of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) AppendSegment(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	if _, ok := t.Segment[key]; ok {
		return fmt.Errorf("duplicate key for list Segment %v", key)
	}

	t.Segment[key] = v
	return nil
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetInstanceId() uint64 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetWeight retrieves the value of the leaf Weight from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Segment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	return map[string]interface{}{
		"instance-id": *t.InstanceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct {
	ΛMetadata          []ygot.Annotation                                                                                        `path:"@" ygotAnnotation:"true"`
	Index              *uint64                                                                                                  `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex             []ygot.Annotation                                                                                        `path:"state/@index|@index" ygotAnnotation:"true"`
	LocalInterfaceId   *uint32                                                                                                  `path:"state/local-interface-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLocalInterfaceId  []ygot.Annotation                                                                                        `path:"state/@local-interface-id" ygotAnnotation:"true"`
	LocalIpv4Address   *string                                                                                                  `path:"state/local-ipv4-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLocalIpv4Address  []ygot.Annotation                                                                                        `path:"state/@local-ipv4-address" ygotAnnotation:"true"`
	LocalIpv6Address   *string                                                                                                  `path:"state/local-ipv6-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLocalIpv6Address  []ygot.Annotation                                                                                        `path:"state/@local-ipv6-address" ygotAnnotation:"true"`
	MplsBos            *bool                                                                                                    `path:"state/mpls-bos" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsBos           []ygot.Annotation                                                                                        `path:"state/@mpls-bos" ygotAnnotation:"true"`
	MplsTc             *uint8                                                                                                   `path:"state/mpls-tc" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsTc            []ygot.Annotation                                                                                        `path:"state/@mpls-tc" ygotAnnotation:"true"`
	MplsTtl            *uint8                                                                                                   `path:"state/mpls-ttl" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsTtl           []ygot.Annotation                                                                                        `path:"state/@mpls-ttl" ygotAnnotation:"true"`
	RemoteIpv4Address  *string                                                                                                  `path:"state/remote-ipv4-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRemoteIpv4Address []ygot.Annotation                                                                                        `path:"state/@remote-ipv4-address" ygotAnnotation:"true"`
	RemoteIpv6Address  *string                                                                                                  `path:"state/remote-ipv6-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRemoteIpv6Address []ygot.Annotation                                                                                        `path:"state/@remote-ipv6-address" ygotAnnotation:"true"`
	Sid                NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union `path:"state/sid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSid               []ygot.Annotation                                                                                        `path:"state/@sid" ygotAnnotation:"true"`
	Type               E_Segment_Type                                                                                           `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛType              []ygot.Annotation                                                                                        `path:"state/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalInterfaceId retrieves the value of the leaf LocalInterfaceId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalInterfaceId is set, it can
// safely use t.GetLocalInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalInterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalInterfaceId() uint32 {
	if t == nil || t.LocalInterfaceId == nil {
		return 0
	}
	return *t.LocalInterfaceId
}

// GetLocalIpv4Address retrieves the value of the leaf LocalIpv4Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv4Address is set, it can
// safely use t.GetLocalIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv4Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv4Address() string {
	if t == nil || t.LocalIpv4Address == nil {
		return ""
	}
	return *t.LocalIpv4Address
}

// GetLocalIpv6Address retrieves the value of the leaf LocalIpv6Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv6Address is set, it can
// safely use t.GetLocalIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv6Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv6Address() string {
	if t == nil || t.LocalIpv6Address == nil {
		return ""
	}
	return *t.LocalIpv6Address
}

// GetMplsBos retrieves the value of the leaf MplsBos from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsBos is set, it can
// safely use t.GetMplsBos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsBos == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsBos() bool {
	if t == nil || t.MplsBos == nil {
		return false
	}
	return *t.MplsBos
}

// GetMplsTc retrieves the value of the leaf MplsTc from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTc is set, it can
// safely use t.GetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTc == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetMplsTtl retrieves the value of the leaf MplsTtl from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTtl is set, it can
// safely use t.GetMplsTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTtl == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTtl() uint8 {
	if t == nil || t.MplsTtl == nil {
		return 0
	}
	return *t.MplsTtl
}

// GetRemoteIpv4Address retrieves the value of the leaf RemoteIpv4Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpv4Address is set, it can
// safely use t.GetRemoteIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpv4Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv4Address() string {
	if t == nil || t.RemoteIpv4Address == nil {
		return ""
	}
	return *t.RemoteIpv4Address
}

// GetRemoteIpv6Address retrieves the value of the leaf RemoteIpv6Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpv6Address is set, it can
// safely use t.GetRemoteIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpv6Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv6Address() string {
	if t == nil || t.RemoteIpv6Address == nil {
		return ""
	}
	return *t.RemoteIpv6Address
}

// GetSid retrieves the value of the leaf Sid from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sid is set, it can
// safely use t.GetSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetSid() NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union {
	if t == nil || t.Sid == nil {
		return nil
	}
	return t.Sid
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetType() E_Segment_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_Community represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/communities/community YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_Community struct {
	ΛMetadata  []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Community  []NetworkInstance_Protocol_Bgp_Rib_Community_Community_Union `path:"state/community" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCommunity []ygot.Annotation                                            `path:"state/@community" ygotAnnotation:"true"`
	Index      *uint64                                                      `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex     []ygot.Annotation                                            `path:"state/@index|@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_Community) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NetworkInstance_Protocol_Bgp_Rib_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) GetCommunity() []NetworkInstance_Protocol_Bgp_Rib_Community_Community_Union {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_Community struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_Community.
func (*NetworkInstance_Protocol_Bgp_Rib_Community) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Bgp_Rib_ExtCommunity represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/ext-communities/ext-community YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_ExtCommunity struct {
	ΛMetadata     []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	ExtCommunity  []NetworkInstance_Protocol_Bgp_Rib_ExtCommunity_ExtCommunity_Union `path:"state/ext-community" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛExtCommunity []ygot.Annotation                                                  `path:"state/@ext-community" ygotAnnotation:"true"`
	Index         *uint64                                                            `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                                  `path:"state/@index|@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_ExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) IsYANGGoStruct() {}

// GetExtCommunity retrieves the value of the leaf ExtCommunity from the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunity is set, it can
// safely use t.GetExtCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunity == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) GetExtCommunity() []NetworkInstance_Protocol_Bgp_Rib_ExtCommunity_ExtCommunity_Union {
	if t == nil || t.ExtCommunity == nil {
		return nil
	}
	return t.ExtCommunity
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_ExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Bgp_Rib_ExtCommunity.
func (*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp YANG schema element.
type NetworkInstance_Protocol_Igmp struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Global     *NetworkInstance_Protocol_Igmp_Global               `path:"global" module:"openconfig-network-instance"`
	ΛGlobal    []ygot.Annotation                                   `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*NetworkInstance_Protocol_Igmp_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                   `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Protocol_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp) NewInterface(InterfaceId string) (*NetworkInstance_Protocol_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Igmp_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Protocol_Igmp_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Protocol_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Protocol_Igmp_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Protocol_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp) GetInterface(InterfaceId string) *NetworkInstance_Protocol_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Protocol_Igmp_Interface struct to the
// list Interface of NetworkInstance_Protocol_Igmp. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp) AppendInterface(v *NetworkInstance_Protocol_Igmp_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp) GetOrCreateGlobal() *NetworkInstance_Protocol_Igmp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Protocol_Igmp_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Protocol_Igmp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp) GetGlobal() *NetworkInstance_Protocol_Igmp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Global.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp.
func (*NetworkInstance_Protocol_Igmp) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global YANG schema element.
type NetworkInstance_Protocol_Igmp_Global struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Ssm       *NetworkInstance_Protocol_Igmp_Global_Ssm `path:"ssm" module:"openconfig-network-instance"`
	ΛSsm      []ygot.Annotation                         `path:"@ssm" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Global) GetOrCreateSsm() *NetworkInstance_Protocol_Igmp_Global_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NetworkInstance_Protocol_Igmp_Global_Ssm{}
	return t.Ssm
}

// GetSsm returns the value of the Ssm struct pointer
// from NetworkInstance_Protocol_Igmp_Global. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Global) GetSsm() *NetworkInstance_Protocol_Igmp_Global_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Global
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Global) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ssm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Global.
func (*NetworkInstance_Protocol_Igmp_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Global_Ssm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Mapping   map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping `path:"mappings/mapping" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMapping  []ygot.Annotation                                            `path:"mappings/@mapping" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm) IsYANGGoStruct() {}

// NewMapping creates a new entry in the Mapping list of the
// NetworkInstance_Protocol_Igmp_Global_Ssm struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) NewMapping(Source string) (*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mapping == nil {
		t.Mapping = make(map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mapping", key)
	}

	t.Mapping[key] = &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping{
		Source: &Source,
	}

	return t.Mapping[key], nil
}

// RenameMapping renames an entry in the list Mapping within
// the NetworkInstance_Protocol_Igmp_Global_Ssm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) RenameMapping(oldK, newK string) error {
	if _, ok := t.Mapping[newK]; ok {
		return fmt.Errorf("key %v already exists in Mapping", newK)
	}

	e, ok := t.Mapping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mapping", oldK)
	}
	e.Source = &newK

	t.Mapping[newK] = e
	delete(t.Mapping, oldK)
	return nil
}

// GetOrCreateMapping retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Global_Ssm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) GetOrCreateMapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping {

	key := Source

	if v, ok := t.Mapping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMapping(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMapping got unexpected error: %v", err))
	}
	return v
}

// GetMapping retrieves the value with the specified key from
// the Mapping map field of NetworkInstance_Protocol_Igmp_Global_Ssm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) GetMapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping {

	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Mapping[key]; ok {
		return lm
	}
	return nil
}

// DeleteMapping deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Global_Ssm. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) DeleteMapping(Source string) {
	key := Source

	delete(t.Mapping, key)
}

// AppendMapping appends the supplied NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct to the
// list Mapping of NetworkInstance_Protocol_Igmp_Global_Ssm. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) AppendMapping(v *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mapping == nil {
		t.Mapping = make(map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping)
	}

	if _, ok := t.Mapping[key]; ok {
		return fmt.Errorf("duplicate key for list Mapping %v", key)
	}

	t.Mapping[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Global_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mapping {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Global_Ssm.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Source     *string           `path:"config/source|source" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSource    []ygot.Annotation `path:"config/@source|@source" ygotAnnotation:"true"`
	SsmRanges  *string           `path:"config/ssm-ranges" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSsmRanges []ygot.Annotation `path:"config/@ssm-ranges" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) IsYANGGoStruct() {}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetSsmRanges retrieves the value of the leaf SsmRanges from the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmRanges is set, it can
// safely use t.GetSsmRanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmRanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) GetSsmRanges() string {
	if t == nil || t.SsmRanges == nil {
		return ""
	}
	return *t.SsmRanges
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface struct {
	ΛMetadata       []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	Counters        *NetworkInstance_Protocol_Igmp_Interface_Counters                `path:"counters" module:"openconfig-network-instance"`
	ΛCounters       []ygot.Annotation                                                `path:"@counters" ygotAnnotation:"true"`
	Enabled         *bool                                                            `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled        []ygot.Annotation                                                `path:"config/@enabled" ygotAnnotation:"true"`
	FilterPrefixes  *string                                                          `path:"config/filter-prefixes" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛFilterPrefixes []ygot.Annotation                                                `path:"config/@filter-prefixes" ygotAnnotation:"true"`
	Group           map[string]*NetworkInstance_Protocol_Igmp_Interface_Group        `path:"membership-groups/group" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛGroup          []ygot.Annotation                                                `path:"membership-groups/@group" ygotAnnotation:"true"`
	InterfaceId     *string                                                          `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId    []ygot.Annotation                                                `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef    *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef            `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef   []ygot.Annotation                                                `path:"@interface-ref" ygotAnnotation:"true"`
	QueryExpires    *uint64                                                          `path:"state/query-expires" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛQueryExpires   []ygot.Annotation                                                `path:"state/@query-expires" ygotAnnotation:"true"`
	QueryInterval   *uint16                                                          `path:"config/query-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛQueryInterval  []ygot.Annotation                                                `path:"config/@query-interval" ygotAnnotation:"true"`
	StaticGroups    map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups `path:"static-membership-groups/static-groups" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛStaticGroups   []ygot.Annotation                                                `path:"static-membership-groups/@static-groups" ygotAnnotation:"true"`
	Version         *uint8                                                           `path:"config/version" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛVersion        []ygot.Annotation                                                `path:"config/@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NetworkInstance_Protocol_Igmp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Interface) NewGroup(Group string) (*NetworkInstance_Protocol_Igmp_Interface_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NetworkInstance_Protocol_Igmp_Interface_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NetworkInstance_Protocol_Igmp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Interface) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateGroup(Group string) *NetworkInstance_Protocol_Igmp_Interface_Group {

	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NetworkInstance_Protocol_Igmp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetGroup(Group string) *NetworkInstance_Protocol_Igmp_Interface_Group {

	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Interface) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied NetworkInstance_Protocol_Igmp_Interface_Group struct to the
// list Group of NetworkInstance_Protocol_Igmp_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface_Group already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Interface) AppendGroup(v *NetworkInstance_Protocol_Igmp_Interface_Group) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewStaticGroups creates a new entry in the StaticGroups list of the
// NetworkInstance_Protocol_Igmp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Interface) NewStaticGroups(StaticGroup string) (*NetworkInstance_Protocol_Igmp_Interface_StaticGroups, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticGroups == nil {
		t.StaticGroups = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups)
	}

	key := StaticGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticGroups[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticGroups", key)
	}

	t.StaticGroups[key] = &NetworkInstance_Protocol_Igmp_Interface_StaticGroups{
		StaticGroup: &StaticGroup,
	}

	return t.StaticGroups[key], nil
}

// RenameStaticGroups renames an entry in the list StaticGroups within
// the NetworkInstance_Protocol_Igmp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Interface) RenameStaticGroups(oldK, newK string) error {
	if _, ok := t.StaticGroups[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticGroups", newK)
	}

	e, ok := t.StaticGroups[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticGroups", oldK)
	}
	e.StaticGroup = &newK

	t.StaticGroups[newK] = e
	delete(t.StaticGroups, oldK)
	return nil
}

// GetOrCreateStaticGroups retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateStaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroups {

	key := StaticGroup

	if v, ok := t.StaticGroups[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticGroups(StaticGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticGroups got unexpected error: %v", err))
	}
	return v
}

// GetStaticGroups retrieves the value with the specified key from
// the StaticGroups map field of NetworkInstance_Protocol_Igmp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetStaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroups {

	if t == nil {
		return nil
	}

	key := StaticGroup

	if lm, ok := t.StaticGroups[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticGroups deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Interface) DeleteStaticGroups(StaticGroup string) {
	key := StaticGroup

	delete(t.StaticGroups, key)
}

// AppendStaticGroups appends the supplied NetworkInstance_Protocol_Igmp_Interface_StaticGroups struct to the
// list StaticGroups of NetworkInstance_Protocol_Igmp_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface_StaticGroups already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Interface) AppendStaticGroups(v *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) error {
	if v.StaticGroup == nil {
		return fmt.Errorf("invalid nil key received for StaticGroup")
	}

	key := *v.StaticGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticGroups == nil {
		t.StaticGroups = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups)
	}

	if _, ok := t.StaticGroups[key]; ok {
		return fmt.Errorf("duplicate key for list StaticGroups %v", key)
	}

	t.StaticGroups[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateCounters() *NetworkInstance_Protocol_Igmp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Igmp_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Igmp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetCounters() *NetworkInstance_Protocol_Igmp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Igmp_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetInterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetFilterPrefixes retrieves the value of the leaf FilterPrefixes from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterPrefixes is set, it can
// safely use t.GetFilterPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterPrefixes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetFilterPrefixes() string {
	if t == nil || t.FilterPrefixes == nil {
		return ""
	}
	return *t.FilterPrefixes
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetQueryExpires retrieves the value of the leaf QueryExpires from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryExpires is set, it can
// safely use t.GetQueryExpires() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryExpires == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetQueryExpires() uint64 {
	if t == nil || t.QueryExpires == nil {
		return 0
	}
	return *t.QueryExpires
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetQueryInterval() uint16 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetVersion retrieves the value of the leaf Version from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 0
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticGroups {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface.
func (*NetworkInstance_Protocol_Igmp_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Queries   *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries `path:"queries" module:"openconfig-network-instance"`
	ΛQueries  []ygot.Annotation                                         `path:"@queries" ygotAnnotation:"true"`
	Reports   *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports `path:"reports" module:"openconfig-network-instance"`
	ΛReports  []ygot.Annotation                                         `path:"@reports" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters) IsYANGGoStruct() {}

// GetOrCreateQueries retrieves the value of the Queries field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetOrCreateQueries() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries {
	if t.Queries != nil {
		return t.Queries
	}
	t.Queries = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries{}
	return t.Queries
}

// GetOrCreateReports retrieves the value of the Reports field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetOrCreateReports() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports {
	if t.Reports != nil {
		return t.Reports
	}
	t.Reports = &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports{}
	return t.Reports
}

// GetQueries returns the value of the Queries struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters. If the receiver or the field Queries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetQueries() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries {
	if t != nil && t.Queries != nil {
		return t.Queries
	}
	return nil
}

// GetReports returns the value of the Reports struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters. If the receiver or the field Reports is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetReports() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports {
	if t != nil && t.Reports != nil {
		return t.Reports
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queries.PopulateDefaults()
	t.Reports.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Counters.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Received  *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received `path:"received" module:"openconfig-network-instance"`
	ΛReceived []ygot.Annotation                                                  `path:"@received" ygotAnnotation:"true"`
	Sent      *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent     `path:"sent" module:"openconfig-network-instance"`
	ΛSent     []ygot.Annotation                                                  `path:"@sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) IsYANGGoStruct() {}

// GetOrCreateReceived retrieves the value of the Received field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetOrCreateReceived() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received {
	if t.Received != nil {
		return t.Received
	}
	t.Received = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received{}
	return t.Received
}

// GetOrCreateSent retrieves the value of the Sent field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetOrCreateSent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent {
	if t.Sent != nil {
		return t.Sent
	}
	t.Sent = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent{}
	return t.Sent
}

// GetReceived returns the value of the Received struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters_Queries. If the receiver or the field Received is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetReceived() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received {
	if t != nil && t.Received != nil {
		return t.Received
	}
	return nil
}

// GetSent returns the value of the Sent struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters_Queries. If the receiver or the field Sent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetSent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent {
	if t != nil && t.Sent != nil {
		return t.Sent
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Received.PopulateDefaults()
	t.Sent.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Counters_Queries.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	V1        *uint32           `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV1       []ygot.Annotation `path:"state/@v1" ygotAnnotation:"true"`
	V2        *uint32           `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV2       []ygot.Annotation `path:"state/@v2" ygotAnnotation:"true"`
	V3        *uint32           `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV3       []ygot.Annotation `path:"state/@v3" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	V1        *uint32           `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV1       []ygot.Annotation `path:"state/@v1" ygotAnnotation:"true"`
	V2        *uint32           `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV2       []ygot.Annotation `path:"state/@v2" ygotAnnotation:"true"`
	V3        *uint32           `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV3       []ygot.Annotation `path:"state/@v3" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	V1        *uint32           `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV1       []ygot.Annotation `path:"state/@v1" ygotAnnotation:"true"`
	V2        *uint32           `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV2       []ygot.Annotation `path:"state/@v2" ygotAnnotation:"true"`
	V3        *uint32           `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛV3       []ygot.Annotation `path:"state/@v3" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Reports implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Reports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Counters_Reports.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_Group represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Group     *string           `path:"state/group|group" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛGroup    []ygot.Annotation `path:"state/@group|@group" ygotAnnotation:"true"`
	Reporter  *string           `path:"state/reporter" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReporter []ygot.Annotation `path:"state/@reporter" ygotAnnotation:"true"`
	Source    *string           `path:"state/source" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSource   []ygot.Annotation `path:"state/@source" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Group) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetReporter retrieves the value of the leaf Reporter from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reporter is set, it can
// safely use t.GetReporter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reporter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetReporter() string {
	if t == nil || t.Reporter == nil {
		return ""
	}
	return *t.Reporter
}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Interface_Group struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_Group.
func (*NetworkInstance_Protocol_Igmp_Interface_Group) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Igmp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Igmp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_InterfaceRef.
func (*NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroups represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroups struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Source       *string           `path:"config/source" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSource      []ygot.Annotation `path:"config/@source" ygotAnnotation:"true"`
	StaticGroup  *string           `path:"config/static-group|static-group" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛStaticGroup []ygot.Annotation `path:"config/@static-group|@static-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_StaticGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_StaticGroups) IsYANGGoStruct() {}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_Protocol_Igmp_Interface_StaticGroups
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetStaticGroup retrieves the value of the leaf StaticGroup from the NetworkInstance_Protocol_Igmp_Interface_StaticGroups
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticGroup is set, it can
// safely use t.GetStaticGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticGroup == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) GetStaticGroup() string {
	if t == nil || t.StaticGroup == nil {
		return ""
	}
	return *t.StaticGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Igmp_Interface_StaticGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Interface_StaticGroups struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StaticGroup == nil {
		return nil, fmt.Errorf("nil value for key StaticGroup")
	}

	return map[string]interface{}{
		"static-group": *t.StaticGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_StaticGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Igmp_Interface_StaticGroups.
func (*NetworkInstance_Protocol_Igmp_Interface_StaticGroups) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis YANG schema element.
type NetworkInstance_Protocol_Isis struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Global     *NetworkInstance_Protocol_Isis_Global               `path:"global" module:"openconfig-network-instance"`
	ΛGlobal    []ygot.Annotation                                   `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*NetworkInstance_Protocol_Isis_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                   `path:"interfaces/@interface" ygotAnnotation:"true"`
	Level      map[uint8]*NetworkInstance_Protocol_Isis_Level      `path:"levels/level" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLevel     []ygot.Annotation                                   `path:"levels/@level" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Protocol_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis) NewInterface(InterfaceId string) (*NetworkInstance_Protocol_Isis_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Isis_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Protocol_Isis_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Protocol_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Protocol_Isis_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Protocol_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis) GetInterface(InterfaceId string) *NetworkInstance_Protocol_Isis_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Protocol_Isis_Interface struct to the
// list Interface of NetworkInstance_Protocol_Isis. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis) AppendInterface(v *NetworkInstance_Protocol_Isis_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Isis_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NetworkInstance_Protocol_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis) NewLevel(LevelNumber uint8) (*NetworkInstance_Protocol_Isis_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*NetworkInstance_Protocol_Isis_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NetworkInstance_Protocol_Isis_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NetworkInstance_Protocol_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis) GetOrCreateLevel(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NetworkInstance_Protocol_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis) GetLevel(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NetworkInstance_Protocol_Isis_Level struct to the
// list Level of NetworkInstance_Protocol_Isis. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Level already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis) AppendLevel(v *NetworkInstance_Protocol_Isis_Level) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*NetworkInstance_Protocol_Isis_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis) GetOrCreateGlobal() *NetworkInstance_Protocol_Isis_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Protocol_Isis_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Protocol_Isis. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis) GetGlobal() *NetworkInstance_Protocol_Isis_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Global.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis.
func (*NetworkInstance_Protocol_Isis) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global YANG schema element.
type NetworkInstance_Protocol_Isis_Global struct {
	ΛMetadata                      []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Af                             map[NetworkInstance_Protocol_Isis_Global_Af_Key]*NetworkInstance_Protocol_Isis_Global_Af `path:"afi-safi/af" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAf                            []ygot.Annotation                                                                        `path:"afi-safi/@af" ygotAnnotation:"true"`
	Afi                            map[E_IsisTypes_AFI_TYPE]*NetworkInstance_Protocol_Isis_Global_Afi                       `path:"igp-shortcuts/afi" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAfi                           []ygot.Annotation                                                                        `path:"igp-shortcuts/@afi" ygotAnnotation:"true"`
	AuthenticationCheck            *bool                                                                                    `path:"config/authentication-check" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAuthenticationCheck           []ygot.Annotation                                                                        `path:"config/@authentication-check" ygotAnnotation:"true"`
	CsnpEnableOnP2PLinks           *bool                                                                                    `path:"config/csnp-enable-on-p2p-links" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCsnpEnableOnP2PLinks          []ygot.Annotation                                                                        `path:"config/@csnp-enable-on-p2p-links" ygotAnnotation:"true"`
	FastFlooding                   *bool                                                                                    `path:"config/fast-flooding" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛFastFlooding                  []ygot.Annotation                                                                        `path:"config/@fast-flooding" ygotAnnotation:"true"`
	GracefulRestart                *NetworkInstance_Protocol_Isis_Global_GracefulRestart                                    `path:"graceful-restart" module:"openconfig-network-instance"`
	ΛGracefulRestart               []ygot.Annotation                                                                        `path:"@graceful-restart" ygotAnnotation:"true"`
	HelloPadding                   E_IsisTypes_HelloPaddingType                                                             `path:"config/hello-padding" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloPadding                  []ygot.Annotation                                                                        `path:"config/@hello-padding" ygotAnnotation:"true"`
	IidTlv                         *bool                                                                                    `path:"config/iid-tlv" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIidTlv                        []ygot.Annotation                                                                        `path:"config/@iid-tlv" ygotAnnotation:"true"`
	Instance                       *string                                                                                  `path:"config/instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInstance                      []ygot.Annotation                                                                        `path:"config/@instance" ygotAnnotation:"true"`
	InstanceId                     *uint16                                                                                  `path:"config/instance-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInstanceId                    []ygot.Annotation                                                                        `path:"config/@instance-id" ygotAnnotation:"true"`
	InterLevelPropagationPolicies  *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies                      `path:"inter-level-propagation-policies" module:"openconfig-network-instance"`
	ΛInterLevelPropagationPolicies []ygot.Annotation                                                                        `path:"@inter-level-propagation-policies" ygotAnnotation:"true"`
	LevelCapability                E_IsisTypes_LevelType                                                                    `path:"config/level-capability" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLevelCapability               []ygot.Annotation                                                                        `path:"config/@level-capability" ygotAnnotation:"true"`
	LspBit                         *NetworkInstance_Protocol_Isis_Global_LspBit                                             `path:"lsp-bit" module:"openconfig-network-instance"`
	ΛLspBit                        []ygot.Annotation                                                                        `path:"@lsp-bit" ygotAnnotation:"true"`
	MaxEcmpPaths                   *uint8                                                                                   `path:"config/max-ecmp-paths" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaxEcmpPaths                  []ygot.Annotation                                                                        `path:"config/@max-ecmp-paths" ygotAnnotation:"true"`
	MaximumAreaAddresses           *uint8                                                                                   `path:"config/maximum-area-addresses" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaximumAreaAddresses          []ygot.Annotation                                                                        `path:"config/@maximum-area-addresses" ygotAnnotation:"true"`
	Mpls                           *NetworkInstance_Protocol_Isis_Global_Mpls                                               `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls                          []ygot.Annotation                                                                        `path:"@mpls" ygotAnnotation:"true"`
	Net                            []string                                                                                 `path:"config/net" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNet                           []ygot.Annotation                                                                        `path:"config/@net" ygotAnnotation:"true"`
	Nsr                            *NetworkInstance_Protocol_Isis_Global_Nsr                                                `path:"nsr" module:"openconfig-network-instance"`
	ΛNsr                           []ygot.Annotation                                                                        `path:"@nsr" ygotAnnotation:"true"`
	PoiTlv                         *bool                                                                                    `path:"config/poi-tlv" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPoiTlv                        []ygot.Annotation                                                                        `path:"config/@poi-tlv" ygotAnnotation:"true"`
	ReferenceBandwidth             *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth                                 `path:"reference-bandwidth" module:"openconfig-network-instance"`
	ΛReferenceBandwidth            []ygot.Annotation                                                                        `path:"@reference-bandwidth" ygotAnnotation:"true"`
	SegmentRouting                 *NetworkInstance_Protocol_Isis_Global_SegmentRouting                                     `path:"segment-routing" module:"openconfig-network-instance"`
	ΛSegmentRouting                []ygot.Annotation                                                                        `path:"@segment-routing" ygotAnnotation:"true"`
	Timers                         *NetworkInstance_Protocol_Isis_Global_Timers                                             `path:"timers" module:"openconfig-network-instance"`
	ΛTimers                        []ygot.Annotation                                                                        `path:"@timers" ygotAnnotation:"true"`
	Transport                      *NetworkInstance_Protocol_Isis_Global_Transport                                          `path:"transport" module:"openconfig-network-instance"`
	ΛTransport                     []ygot.Annotation                                                                        `path:"@transport" ygotAnnotation:"true"`
	WeightedEcmp                   *bool                                                                                    `path:"config/weighted-ecmp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛWeightedEcmp                  []ygot.Annotation                                                                        `path:"config/@weighted-ecmp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Isis_Global_Af_Key represents the key for list Af of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global.
type NetworkInstance_Protocol_Isis_Global_Af_Key struct {
	AfiName  E_IsisTypes_AFI_TYPE  `path:"afi-name"`
	SafiName E_IsisTypes_SAFI_TYPE `path:"safi-name"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Isis_Global_Af_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Isis_Global_Af_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Isis_Global_Af_Key key struct.
func (t NetworkInstance_Protocol_Isis_Global_Af_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"afi-name":  t.AfiName,
		"safi-name": t.SafiName,
	}, nil
}

// NewAf creates a new entry in the Af list of the
// NetworkInstance_Protocol_Isis_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Global) NewAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) (*NetworkInstance_Protocol_Isis_Global_Af, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Af == nil {
		t.Af = make(map[NetworkInstance_Protocol_Isis_Global_Af_Key]*NetworkInstance_Protocol_Isis_Global_Af)
	}

	key := NetworkInstance_Protocol_Isis_Global_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Af[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Af", key)
	}

	t.Af[key] = &NetworkInstance_Protocol_Isis_Global_Af{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	return t.Af[key], nil
}

// RenameAf renames an entry in the list Af within
// the NetworkInstance_Protocol_Isis_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Global) RenameAf(oldK, newK NetworkInstance_Protocol_Isis_Global_Af_Key) error {
	if _, ok := t.Af[newK]; ok {
		return fmt.Errorf("key %v already exists in Af", newK)
	}

	e, ok := t.Af[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Af", oldK)
	}
	e.AfiName = newK.AfiName
	e.SafiName = newK.SafiName

	t.Af[newK] = e
	delete(t.Af, oldK)
	return nil
}

// GetOrCreateAf retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Global_Af {

	key := NetworkInstance_Protocol_Isis_Global_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	if v, ok := t.Af[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAf(AfiName, SafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAf got unexpected error: %v", err))
	}
	return v
}

// GetAf retrieves the value with the specified key from
// the Af map field of NetworkInstance_Protocol_Isis_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Global_Af {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Isis_Global_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	if lm, ok := t.Af[key]; ok {
		return lm
	}
	return nil
}

// DeleteAf deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Global) DeleteAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Isis_Global_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	delete(t.Af, key)
}

// AppendAf appends the supplied NetworkInstance_Protocol_Isis_Global_Af struct to the
// list Af of NetworkInstance_Protocol_Isis_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Global_Af already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Global) AppendAf(v *NetworkInstance_Protocol_Isis_Global_Af) error {
	key := NetworkInstance_Protocol_Isis_Global_Af_Key{
		AfiName:  v.AfiName,
		SafiName: v.SafiName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Af == nil {
		t.Af = make(map[NetworkInstance_Protocol_Isis_Global_Af_Key]*NetworkInstance_Protocol_Isis_Global_Af)
	}

	if _, ok := t.Af[key]; ok {
		return fmt.Errorf("duplicate key for list Af %v", key)
	}

	t.Af[key] = v
	return nil
}

// NewAfi creates a new entry in the Afi list of the
// NetworkInstance_Protocol_Isis_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Global) NewAfi(AfiName E_IsisTypes_AFI_TYPE) (*NetworkInstance_Protocol_Isis_Global_Afi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Afi == nil {
		t.Afi = make(map[E_IsisTypes_AFI_TYPE]*NetworkInstance_Protocol_Isis_Global_Afi)
	}

	key := AfiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Afi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Afi", key)
	}

	t.Afi[key] = &NetworkInstance_Protocol_Isis_Global_Afi{
		AfiName: AfiName,
	}

	return t.Afi[key], nil
}

// RenameAfi renames an entry in the list Afi within
// the NetworkInstance_Protocol_Isis_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Global) RenameAfi(oldK, newK E_IsisTypes_AFI_TYPE) error {
	if _, ok := t.Afi[newK]; ok {
		return fmt.Errorf("key %v already exists in Afi", newK)
	}

	e, ok := t.Afi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Afi", oldK)
	}
	e.AfiName = newK

	t.Afi[newK] = e
	delete(t.Afi, oldK)
	return nil
}

// GetOrCreateAfi retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateAfi(AfiName E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Global_Afi {

	key := AfiName

	if v, ok := t.Afi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfi(AfiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfi got unexpected error: %v", err))
	}
	return v
}

// GetAfi retrieves the value with the specified key from
// the Afi map field of NetworkInstance_Protocol_Isis_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetAfi(AfiName E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Global_Afi {

	if t == nil {
		return nil
	}

	key := AfiName

	if lm, ok := t.Afi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfi deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Global) DeleteAfi(AfiName E_IsisTypes_AFI_TYPE) {
	key := AfiName

	delete(t.Afi, key)
}

// AppendAfi appends the supplied NetworkInstance_Protocol_Isis_Global_Afi struct to the
// list Afi of NetworkInstance_Protocol_Isis_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Global_Afi already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Global) AppendAfi(v *NetworkInstance_Protocol_Isis_Global_Afi) error {
	key := v.AfiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Afi == nil {
		t.Afi = make(map[E_IsisTypes_AFI_TYPE]*NetworkInstance_Protocol_Isis_Global_Afi)
	}

	if _, ok := t.Afi[key]; ok {
		return fmt.Errorf("duplicate key for list Afi %v", key)
	}

	t.Afi[key] = v
	return nil
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateGracefulRestart() *NetworkInstance_Protocol_Isis_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NetworkInstance_Protocol_Isis_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateInterLevelPropagationPolicies retrieves the value of the InterLevelPropagationPolicies field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateInterLevelPropagationPolicies() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies {
	if t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	t.InterLevelPropagationPolicies = &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies{}
	return t.InterLevelPropagationPolicies
}

// GetOrCreateLspBit retrieves the value of the LspBit field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateLspBit() *NetworkInstance_Protocol_Isis_Global_LspBit {
	if t.LspBit != nil {
		return t.LspBit
	}
	t.LspBit = &NetworkInstance_Protocol_Isis_Global_LspBit{}
	return t.LspBit
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateMpls() *NetworkInstance_Protocol_Isis_Global_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NetworkInstance_Protocol_Isis_Global_Mpls{}
	return t.Mpls
}

// GetOrCreateNsr retrieves the value of the Nsr field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateNsr() *NetworkInstance_Protocol_Isis_Global_Nsr {
	if t.Nsr != nil {
		return t.Nsr
	}
	t.Nsr = &NetworkInstance_Protocol_Isis_Global_Nsr{}
	return t.Nsr
}

// GetOrCreateReferenceBandwidth retrieves the value of the ReferenceBandwidth field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth {
	if t.ReferenceBandwidth != nil {
		return t.ReferenceBandwidth
	}
	t.ReferenceBandwidth = &NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth{}
	return t.ReferenceBandwidth
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateSegmentRouting() *NetworkInstance_Protocol_Isis_Global_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NetworkInstance_Protocol_Isis_Global_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateTimers() *NetworkInstance_Protocol_Isis_Global_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NetworkInstance_Protocol_Isis_Global_Timers{}
	return t.Timers
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global) GetOrCreateTransport() *NetworkInstance_Protocol_Isis_Global_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &NetworkInstance_Protocol_Isis_Global_Transport{}
	return t.Transport
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetGracefulRestart() *NetworkInstance_Protocol_Isis_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetInterLevelPropagationPolicies returns the value of the InterLevelPropagationPolicies struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field InterLevelPropagationPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetInterLevelPropagationPolicies() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies {
	if t != nil && t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	return nil
}

// GetLspBit returns the value of the LspBit struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field LspBit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetLspBit() *NetworkInstance_Protocol_Isis_Global_LspBit {
	if t != nil && t.LspBit != nil {
		return t.LspBit
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetMpls() *NetworkInstance_Protocol_Isis_Global_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetNsr returns the value of the Nsr struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field Nsr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetNsr() *NetworkInstance_Protocol_Isis_Global_Nsr {
	if t != nil && t.Nsr != nil {
		return t.Nsr
	}
	return nil
}

// GetReferenceBandwidth returns the value of the ReferenceBandwidth struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field ReferenceBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth {
	if t != nil && t.ReferenceBandwidth != nil {
		return t.ReferenceBandwidth
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetSegmentRouting() *NetworkInstance_Protocol_Isis_Global_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetTimers() *NetworkInstance_Protocol_Isis_Global_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from NetworkInstance_Protocol_Isis_Global. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global) GetTransport() *NetworkInstance_Protocol_Isis_Global_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// GetCsnpEnableOnP2PLinks retrieves the value of the leaf CsnpEnableOnP2PLinks from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpEnableOnP2PLinks is set, it can
// safely use t.GetCsnpEnableOnP2PLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpEnableOnP2PLinks == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetCsnpEnableOnP2PLinks() bool {
	if t == nil || t.CsnpEnableOnP2PLinks == nil {
		return true
	}
	return *t.CsnpEnableOnP2PLinks
}

// GetFastFlooding retrieves the value of the leaf FastFlooding from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFlooding is set, it can
// safely use t.GetFastFlooding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFlooding == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetFastFlooding() bool {
	if t == nil || t.FastFlooding == nil {
		return true
	}
	return *t.FastFlooding
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetHelloPadding() E_IsisTypes_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return IsisTypes_HelloPaddingType_STRICT
	}
	return t.HelloPadding
}

// GetIidTlv retrieves the value of the leaf IidTlv from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetInstance retrieves the value of the leaf Instance from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetInstance() string {
	if t == nil || t.Instance == nil {
		return "0"
	}
	return *t.Instance
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetInstanceId() uint16 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetLevelCapability() E_IsisTypes_LevelType {
	if t == nil || t.LevelCapability == 0 {
		return IsisTypes_LevelType_LEVEL_1_2
	}
	return t.LevelCapability
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 0
	}
	return *t.MaxEcmpPaths
}

// GetMaximumAreaAddresses retrieves the value of the leaf MaximumAreaAddresses from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumAreaAddresses is set, it can
// safely use t.GetMaximumAreaAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumAreaAddresses == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetMaximumAreaAddresses() uint8 {
	if t == nil || t.MaximumAreaAddresses == nil {
		return 3
	}
	return *t.MaximumAreaAddresses
}

// GetNet retrieves the value of the leaf Net from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Net is set, it can
// safely use t.GetNet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Net == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetNet() []string {
	if t == nil || t.Net == nil {
		return nil
	}
	return t.Net
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NetworkInstance_Protocol_Isis_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	if t.CsnpEnableOnP2PLinks == nil {
		var v bool = true
		t.CsnpEnableOnP2PLinks = &v
	}
	if t.FastFlooding == nil {
		var v bool = true
		t.FastFlooding = &v
	}
	if t.HelloPadding == 0 {
		t.HelloPadding = IsisTypes_HelloPaddingType_STRICT
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.Instance == nil {
		var v string = "0"
		t.Instance = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = IsisTypes_LevelType_LEVEL_1_2
	}
	if t.MaximumAreaAddresses == nil {
		var v uint8 = 3
		t.MaximumAreaAddresses = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.GracefulRestart.PopulateDefaults()
	t.InterLevelPropagationPolicies.PopulateDefaults()
	t.LspBit.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Nsr.PopulateDefaults()
	t.ReferenceBandwidth.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.Af {
		e.PopulateDefaults()
	}
	for _, e := range t.Afi {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global.
func (*NetworkInstance_Protocol_Isis_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Af represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af struct {
	ΛMetadata      []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	AfiName        E_IsisTypes_AFI_TYPE                                   `path:"config/afi-name|afi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAfiName       []ygot.Annotation                                      `path:"config/@afi-name|@afi-name" ygotAnnotation:"true"`
	Enabled        *bool                                                  `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled       []ygot.Annotation                                      `path:"config/@enabled" ygotAnnotation:"true"`
	MaxEcmpPaths   *uint8                                                 `path:"config/max-ecmp-paths" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaxEcmpPaths  []ygot.Annotation                                      `path:"config/@max-ecmp-paths" ygotAnnotation:"true"`
	Metric         *uint32                                                `path:"config/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMetric        []ygot.Annotation                                      `path:"config/@metric" ygotAnnotation:"true"`
	MultiTopology  *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology `path:"multi-topology" module:"openconfig-network-instance"`
	ΛMultiTopology []ygot.Annotation                                      `path:"@multi-topology" ygotAnnotation:"true"`
	SafiName       E_IsisTypes_SAFI_TYPE                                  `path:"config/safi-name|safi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSafiName      []ygot.Annotation                                      `path:"config/@safi-name|@safi-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Af implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Af) IsYANGGoStruct() {}

// GetOrCreateMultiTopology retrieves the value of the MultiTopology field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetOrCreateMultiTopology() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology {
	if t.MultiTopology != nil {
		return t.MultiTopology
	}
	t.MultiTopology = &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology{}
	return t.MultiTopology
}

// GetMultiTopology returns the value of the MultiTopology struct pointer
// from NetworkInstance_Protocol_Isis_Global_Af. If the receiver or the field MultiTopology is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetMultiTopology() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology {
	if t != nil && t.MultiTopology != nil {
		return t.MultiTopology
	}
	return nil
}

// GetAfiName retrieves the value of the leaf AfiName from the NetworkInstance_Protocol_Isis_Global_Af
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiName is set, it can
// safely use t.GetAfiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetAfiName() E_IsisTypes_AFI_TYPE {
	if t == nil || t.AfiName == 0 {
		return 0
	}
	return t.AfiName
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_Af
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the NetworkInstance_Protocol_Isis_Global_Af
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 0
	}
	return *t.MaxEcmpPaths
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Isis_Global_Af
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 10
	}
	return *t.Metric
}

// GetSafiName retrieves the value of the leaf SafiName from the NetworkInstance_Protocol_Isis_Global_Af
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SafiName is set, it can
// safely use t.GetSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SafiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af) GetSafiName() E_IsisTypes_SAFI_TYPE {
	if t == nil || t.SafiName == 0 {
		return 0
	}
	return t.SafiName
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Af
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Af) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 10
		t.Metric = &v
	}
	t.MultiTopology.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Isis_Global_Af struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Isis_Global_Af) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name":  t.AfiName,
		"safi-name": t.SafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Af) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Af"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Af) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Af) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Af.
func (*NetworkInstance_Protocol_Isis_Global_Af) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology struct {
	ΛMetadata []ygot.Annotation     `path:"@" ygotAnnotation:"true"`
	AfiName   E_IsisTypes_AFI_TYPE  `path:"config/afi-name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation     `path:"config/@afi-name" ygotAnnotation:"true"`
	Enabled   *bool                 `path:"state/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation     `path:"state/@enabled" ygotAnnotation:"true"`
	SafiName  E_IsisTypes_SAFI_TYPE `path:"config/safi-name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSafiName []ygot.Annotation     `path:"config/@safi-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Af_MultiTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) IsYANGGoStruct() {}

// GetAfiName retrieves the value of the leaf AfiName from the NetworkInstance_Protocol_Isis_Global_Af_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiName is set, it can
// safely use t.GetAfiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) GetAfiName() E_IsisTypes_AFI_TYPE {
	if t == nil || t.AfiName == 0 {
		return 0
	}
	return t.AfiName
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_Af_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetSafiName retrieves the value of the leaf SafiName from the NetworkInstance_Protocol_Isis_Global_Af_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SafiName is set, it can
// safely use t.GetSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SafiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) GetSafiName() E_IsisTypes_SAFI_TYPE {
	if t == nil || t.SafiName == 0 {
		return 0
	}
	return t.SafiName
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Af_MultiTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Af_MultiTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Af_MultiTopology.
func (*NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Afi represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Afi struct {
	ΛMetadata []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	AfiName   E_IsisTypes_AFI_TYPE              `path:"config/afi-name|afi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAfiName  []ygot.Annotation                 `path:"config/@afi-name|@afi-name" ygotAnnotation:"true"`
	NhType    []E_MplsTypes_PATH_SETUP_PROTOCOL `path:"config/nh-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNhType   []ygot.Annotation                 `path:"config/@nh-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Afi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Afi) IsYANGGoStruct() {}

// GetAfiName retrieves the value of the leaf AfiName from the NetworkInstance_Protocol_Isis_Global_Afi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiName is set, it can
// safely use t.GetAfiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) GetAfiName() E_IsisTypes_AFI_TYPE {
	if t == nil || t.AfiName == 0 {
		return 0
	}
	return t.AfiName
}

// GetNhType retrieves the value of the leaf NhType from the NetworkInstance_Protocol_Isis_Global_Afi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NhType is set, it can
// safely use t.GetNhType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NhType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) GetNhType() []E_MplsTypes_PATH_SETUP_PROTOCOL {
	if t == nil || t.NhType == nil {
		return nil
	}
	return t.NhType
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Afi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Isis_Global_Afi struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-name": t.AfiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Afi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Afi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Afi.
func (*NetworkInstance_Protocol_Isis_Global_Afi) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled     *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled    []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
	HelperOnly  *bool             `path:"config/helper-only" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelperOnly []ygot.Annotation `path:"config/@helper-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelperOnly retrieves the value of the leaf HelperOnly from the NetworkInstance_Protocol_Isis_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOnly is set, it can
// safely use t.GetHelperOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOnly == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) GetHelperOnly() bool {
	if t == nil || t.HelperOnly == nil {
		return false
	}
	return *t.HelperOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_GracefulRestart.
func (*NetworkInstance_Protocol_Isis_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies struct {
	ΛMetadata       []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Level1ToLevel2  *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 `path:"level1-to-level2" module:"openconfig-network-instance"`
	ΛLevel1ToLevel2 []ygot.Annotation                                                                  `path:"@level1-to-level2" ygotAnnotation:"true"`
	Level2ToLevel1  *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 `path:"level2-to-level1" module:"openconfig-network-instance"`
	ΛLevel2ToLevel1 []ygot.Annotation                                                                  `path:"@level2-to-level1" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) IsYANGGoStruct() {}

// GetOrCreateLevel1ToLevel2 retrieves the value of the Level1ToLevel2 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) GetOrCreateLevel1ToLevel2() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	t.Level1ToLevel2 = &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2{}
	return t.Level1ToLevel2
}

// GetOrCreateLevel2ToLevel1 retrieves the value of the Level2ToLevel1 field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) GetOrCreateLevel2ToLevel1() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 {
	if t.Level2ToLevel1 != nil {
		return t.Level2ToLevel1
	}
	t.Level2ToLevel1 = &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1{}
	return t.Level2ToLevel1
}

// GetLevel1ToLevel2 returns the value of the Level1ToLevel2 struct pointer
// from NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies. If the receiver or the field Level1ToLevel2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) GetLevel1ToLevel2() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t != nil && t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	return nil
}

// GetLevel2ToLevel1 returns the value of the Level2ToLevel1 struct pointer
// from NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies. If the receiver or the field Level2ToLevel1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) GetLevel2ToLevel1() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 {
	if t != nil && t.Level2ToLevel1 != nil {
		return t.Level2ToLevel1
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1ToLevel2.PopulateDefaults()
	t.Level2ToLevel1.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 struct {
	ΛMetadata            []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_RoutingPolicy_DefaultPolicyType `path:"config/default-import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                 `path:"config/@default-import-policy" ygotAnnotation:"true"`
	ImportPolicy         []string                          `path:"config/import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                 `path:"config/@import-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) IsYANGGoStruct() {
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultImportPolicy is set, it can
// safely use t.GetDefaultImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultImportPolicy == 0 {
		t.DefaultImportPolicy = RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 struct {
	ΛMetadata            []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	DefaultImportPolicy  E_RoutingPolicy_DefaultPolicyType `path:"config/default-import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDefaultImportPolicy []ygot.Annotation                 `path:"config/@default-import-policy" ygotAnnotation:"true"`
	ImportPolicy         []string                          `path:"config/import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛImportPolicy        []ygot.Annotation                 `path:"config/@import-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) IsYANGGoStruct() {
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultImportPolicy is set, it can
// safely use t.GetDefaultImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultImportPolicy == 0 {
		t.DefaultImportPolicy = RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1.
func (*NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_LspBit represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit struct {
	ΛMetadata    []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	AttachedBit  *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit `path:"attached-bit" module:"openconfig-network-instance"`
	ΛAttachedBit []ygot.Annotation                                        `path:"@attached-bit" ygotAnnotation:"true"`
	OverloadBit  *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit `path:"overload-bit" module:"openconfig-network-instance"`
	ΛOverloadBit []ygot.Annotation                                        `path:"@overload-bit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_LspBit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_LspBit) IsYANGGoStruct() {}

// GetOrCreateAttachedBit retrieves the value of the AttachedBit field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) GetOrCreateAttachedBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit {
	if t.AttachedBit != nil {
		return t.AttachedBit
	}
	t.AttachedBit = &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit{}
	return t.AttachedBit
}

// GetOrCreateOverloadBit retrieves the value of the OverloadBit field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) GetOrCreateOverloadBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit {
	if t.OverloadBit != nil {
		return t.OverloadBit
	}
	t.OverloadBit = &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit{}
	return t.OverloadBit
}

// GetAttachedBit returns the value of the AttachedBit struct pointer
// from NetworkInstance_Protocol_Isis_Global_LspBit. If the receiver or the field AttachedBit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) GetAttachedBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit {
	if t != nil && t.AttachedBit != nil {
		return t.AttachedBit
	}
	return nil
}

// GetOverloadBit returns the value of the OverloadBit struct pointer
// from NetworkInstance_Protocol_Isis_Global_LspBit. If the receiver or the field OverloadBit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) GetOverloadBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit {
	if t != nil && t.OverloadBit != nil {
		return t.OverloadBit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_LspBit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AttachedBit.PopulateDefaults()
	t.OverloadBit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_LspBit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_LspBit.
func (*NetworkInstance_Protocol_Isis_Global_LspBit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	IgnoreBit    *bool             `path:"config/ignore-bit" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIgnoreBit   []ygot.Annotation `path:"config/@ignore-bit" ygotAnnotation:"true"`
	SuppressBit  *bool             `path:"config/suppress-bit" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSuppressBit []ygot.Annotation `path:"config/@suppress-bit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) IsYANGGoStruct() {}

// GetIgnoreBit retrieves the value of the leaf IgnoreBit from the NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreBit is set, it can
// safely use t.GetIgnoreBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreBit == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) GetIgnoreBit() bool {
	if t == nil || t.IgnoreBit == nil {
		return false
	}
	return *t.IgnoreBit
}

// GetSuppressBit retrieves the value of the leaf SuppressBit from the NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressBit is set, it can
// safely use t.GetSuppressBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressBit == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) GetSuppressBit() bool {
	if t == nil || t.SuppressBit == nil {
		return false
	}
	return *t.SuppressBit
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreBit == nil {
		var v bool = false
		t.IgnoreBit = &v
	}
	if t.SuppressBit == nil {
		var v bool = false
		t.SuppressBit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit struct {
	ΛMetadata            []ygot.Annotation                                                                                                 `path:"@" ygotAnnotation:"true"`
	AdvertiseHighMetric  *bool                                                                                                             `path:"config/advertise-high-metric" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertiseHighMetric []ygot.Annotation                                                                                                 `path:"config/@advertise-high-metric" ygotAnnotation:"true"`
	ResetTrigger         map[E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger `path:"reset-triggers/reset-trigger" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛResetTrigger        []ygot.Annotation                                                                                                 `path:"reset-triggers/@reset-trigger" ygotAnnotation:"true"`
	SetBit               *bool                                                                                                             `path:"config/set-bit" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSetBit              []ygot.Annotation                                                                                                 `path:"config/@set-bit" ygotAnnotation:"true"`
	SetBitOnBoot         *bool                                                                                                             `path:"config/set-bit-on-boot" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSetBitOnBoot        []ygot.Annotation                                                                                                 `path:"config/@set-bit-on-boot" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) IsYANGGoStruct() {}

// NewResetTrigger creates a new entry in the ResetTrigger list of the
// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) NewResetTrigger(ResetTrigger E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) (*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResetTrigger == nil {
		t.ResetTrigger = make(map[E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
	}

	key := ResetTrigger

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ResetTrigger[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ResetTrigger", key)
	}

	t.ResetTrigger[key] = &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger{
		ResetTrigger: ResetTrigger,
	}

	return t.ResetTrigger[key], nil
}

// RenameResetTrigger renames an entry in the list ResetTrigger within
// the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) RenameResetTrigger(oldK, newK E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) error {
	if _, ok := t.ResetTrigger[newK]; ok {
		return fmt.Errorf("key %v already exists in ResetTrigger", newK)
	}

	e, ok := t.ResetTrigger[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ResetTrigger", oldK)
	}
	e.ResetTrigger = newK

	t.ResetTrigger[newK] = e
	delete(t.ResetTrigger, oldK)
	return nil
}

// GetOrCreateResetTrigger retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) GetOrCreateResetTrigger(ResetTrigger E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger {

	key := ResetTrigger

	if v, ok := t.ResetTrigger[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResetTrigger(ResetTrigger)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResetTrigger got unexpected error: %v", err))
	}
	return v
}

// GetResetTrigger retrieves the value with the specified key from
// the ResetTrigger map field of NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) GetResetTrigger(ResetTrigger E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger {

	if t == nil {
		return nil
	}

	key := ResetTrigger

	if lm, ok := t.ResetTrigger[key]; ok {
		return lm
	}
	return nil
}

// DeleteResetTrigger deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) DeleteResetTrigger(ResetTrigger E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) {
	key := ResetTrigger

	delete(t.ResetTrigger, key)
}

// AppendResetTrigger appends the supplied NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger struct to the
// list ResetTrigger of NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) AppendResetTrigger(v *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) error {
	key := v.ResetTrigger

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResetTrigger == nil {
		t.ResetTrigger = make(map[E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
	}

	if _, ok := t.ResetTrigger[key]; ok {
		return fmt.Errorf("duplicate key for list ResetTrigger %v", key)
	}

	t.ResetTrigger[key] = v
	return nil
}

// GetAdvertiseHighMetric retrieves the value of the leaf AdvertiseHighMetric from the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseHighMetric is set, it can
// safely use t.GetAdvertiseHighMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseHighMetric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) GetAdvertiseHighMetric() bool {
	if t == nil || t.AdvertiseHighMetric == nil {
		return false
	}
	return *t.AdvertiseHighMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// GetSetBitOnBoot retrieves the value of the leaf SetBitOnBoot from the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBitOnBoot is set, it can
// safely use t.GetSetBitOnBoot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBitOnBoot == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) GetSetBitOnBoot() bool {
	if t == nil || t.SetBitOnBoot == nil {
		return false
	}
	return *t.SetBitOnBoot
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseHighMetric == nil {
		var v bool = false
		t.AdvertiseHighMetric = &v
	}
	if t.SetBit == nil {
		var v bool = false
		t.SetBit = &v
	}
	if t.SetBitOnBoot == nil {
		var v bool = false
		t.SetBitOnBoot = &v
	}
	for _, e := range t.ResetTrigger {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger struct {
	ΛMetadata     []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	Delay         *uint16                                 `path:"config/delay" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDelay        []ygot.Annotation                       `path:"config/@delay" ygotAnnotation:"true"`
	ResetTrigger  E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE `path:"config/reset-trigger|reset-trigger" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛResetTrigger []ygot.Annotation                       `path:"config/@reset-trigger|@reset-trigger" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) IsYANGGoStruct() {}

// GetDelay retrieves the value of the leaf Delay from the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) GetDelay() uint16 {
	if t == nil || t.Delay == nil {
		return 0
	}
	return *t.Delay
}

// GetResetTrigger retrieves the value of the leaf ResetTrigger from the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetTrigger is set, it can
// safely use t.GetResetTrigger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetTrigger == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) GetResetTrigger() E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE {
	if t == nil || t.ResetTrigger == 0 {
		return 0
	}
	return t.ResetTrigger
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"reset-trigger": t.ResetTrigger,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger.
func (*NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Mpls represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls struct {
	ΛMetadata   []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	IgpLdpSync  *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync `path:"igp-ldp-sync" module:"openconfig-network-instance"`
	ΛIgpLdpSync []ygot.Annotation                                     `path:"@igp-ldp-sync" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Mpls) IsYANGGoStruct() {}

// GetOrCreateIgpLdpSync retrieves the value of the IgpLdpSync field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) GetOrCreateIgpLdpSync() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync {
	if t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	t.IgpLdpSync = &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync{}
	return t.IgpLdpSync
}

// GetIgpLdpSync returns the value of the IgpLdpSync struct pointer
// from NetworkInstance_Protocol_Isis_Global_Mpls. If the receiver or the field IgpLdpSync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) GetIgpLdpSync() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync {
	if t != nil && t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgpLdpSync.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Mpls.
func (*NetworkInstance_Protocol_Isis_Global_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled             *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled            []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
	PostSessionUpDelay  *uint16           `path:"config/post-session-up-delay" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPostSessionUpDelay []ygot.Annotation `path:"config/@post-session-up-delay" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetPostSessionUpDelay retrieves the value of the leaf PostSessionUpDelay from the NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostSessionUpDelay is set, it can
// safely use t.GetPostSessionUpDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostSessionUpDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) GetPostSessionUpDelay() uint16 {
	if t == nil || t.PostSessionUpDelay == nil {
		return 0
	}
	return *t.PostSessionUpDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync.
func (*NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Nsr represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/nsr YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Nsr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled   *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Nsr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Nsr) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_Nsr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Nsr) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Nsr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Nsr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Nsr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Nsr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Nsr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Nsr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Nsr.
func (*NetworkInstance_Protocol_Isis_Global_Nsr) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ReferenceBandwidth  *uint32           `path:"config/reference-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛReferenceBandwidth []ygot.Annotation `path:"config/@reference-bandwidth" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) IsYANGGoStruct() {}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) GetReferenceBandwidth() uint32 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth.
func (*NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting struct {
	ΛMetadata             []ygot.Annotation                                                                   `path:"@" ygotAnnotation:"true"`
	Enabled               *bool                                                                               `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled              []ygot.Annotation                                                                   `path:"config/@enabled" ygotAnnotation:"true"`
	FlexAlgorithmBinding  map[uint8]*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding `path:"flex-algorithm-bindings/flex-algorithm-binding" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛFlexAlgorithmBinding []ygot.Annotation                                                                   `path:"flex-algorithm-bindings/@flex-algorithm-binding" ygotAnnotation:"true"`
	Srgb                  *string                                                                             `path:"config/srgb" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSrgb                 []ygot.Annotation                                                                   `path:"config/@srgb" ygotAnnotation:"true"`
	Srlb                  *string                                                                             `path:"config/srlb" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSrlb                 []ygot.Annotation                                                                   `path:"config/@srlb" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_SegmentRouting) IsYANGGoStruct() {}

// NewFlexAlgorithmBinding creates a new entry in the FlexAlgorithmBinding list of the
// NetworkInstance_Protocol_Isis_Global_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) NewFlexAlgorithmBinding(FlexAlgoId uint8) (*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgorithmBinding == nil {
		t.FlexAlgorithmBinding = make(map[uint8]*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgorithmBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgorithmBinding", key)
	}

	t.FlexAlgorithmBinding[key] = &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding{
		FlexAlgoId: &FlexAlgoId,
	}

	return t.FlexAlgorithmBinding[key], nil
}

// RenameFlexAlgorithmBinding renames an entry in the list FlexAlgorithmBinding within
// the NetworkInstance_Protocol_Isis_Global_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) RenameFlexAlgorithmBinding(oldK, newK uint8) error {
	if _, ok := t.FlexAlgorithmBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgorithmBinding", newK)
	}

	e, ok := t.FlexAlgorithmBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgorithmBinding", oldK)
	}
	e.FlexAlgoId = &newK

	t.FlexAlgorithmBinding[newK] = e
	delete(t.FlexAlgorithmBinding, oldK)
	return nil
}

// GetOrCreateFlexAlgorithmBinding retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) GetOrCreateFlexAlgorithmBinding(FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding {

	key := FlexAlgoId

	if v, ok := t.FlexAlgorithmBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgorithmBinding(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgorithmBinding got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgorithmBinding retrieves the value with the specified key from
// the FlexAlgorithmBinding map field of NetworkInstance_Protocol_Isis_Global_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) GetFlexAlgorithmBinding(FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgorithmBinding[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgorithmBinding deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Global_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) DeleteFlexAlgorithmBinding(FlexAlgoId uint8) {
	key := FlexAlgoId

	delete(t.FlexAlgorithmBinding, key)
}

// AppendFlexAlgorithmBinding appends the supplied NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding struct to the
// list FlexAlgorithmBinding of NetworkInstance_Protocol_Isis_Global_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) AppendFlexAlgorithmBinding(v *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) error {
	if v.FlexAlgoId == nil {
		return fmt.Errorf("invalid nil key received for FlexAlgoId")
	}

	key := *v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgorithmBinding == nil {
		t.FlexAlgorithmBinding = make(map[uint8]*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
	}

	if _, ok := t.FlexAlgorithmBinding[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgorithmBinding %v", key)
	}

	t.FlexAlgorithmBinding[key] = v
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Global_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetSrgb retrieves the value of the leaf Srgb from the NetworkInstance_Protocol_Isis_Global_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srgb is set, it can
// safely use t.GetSrgb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srgb == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) GetSrgb() string {
	if t == nil || t.Srgb == nil {
		return ""
	}
	return *t.Srgb
}

// GetSrlb retrieves the value of the leaf Srlb from the NetworkInstance_Protocol_Isis_Global_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlb is set, it can
// safely use t.GetSrlb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlb == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) GetSrlb() string {
	if t == nil || t.Srlb == nil {
		return ""
	}
	return *t.Srlb
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.FlexAlgorithmBinding {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_SegmentRouting.
func (*NetworkInstance_Protocol_Isis_Global_SegmentRouting) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding struct {
	ΛMetadata    []ygot.Annotation     `path:"@" ygotAnnotation:"true"`
	Advertised   *bool                 `path:"config/advertised" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdvertised  []ygot.Annotation     `path:"config/@advertised" ygotAnnotation:"true"`
	FlexAlgoId   *uint8                `path:"config/flex-algo-id|flex-algo-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛFlexAlgoId  []ygot.Annotation     `path:"config/@flex-algo-id|@flex-algo-id" ygotAnnotation:"true"`
	IsisLevel    E_IsisTypes_LevelType `path:"config/isis-level" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIsisLevel   []ygot.Annotation     `path:"config/@isis-level" ygotAnnotation:"true"`
	Participate  *bool                 `path:"config/participate" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛParticipate []ygot.Annotation     `path:"config/@participate" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) IsYANGGoStruct() {}

// GetAdvertised retrieves the value of the leaf Advertised from the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertised is set, it can
// safely use t.GetAdvertised() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertised == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) GetAdvertised() bool {
	if t == nil || t.Advertised == nil {
		return false
	}
	return *t.Advertised
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) GetFlexAlgoId() uint8 {
	if t == nil || t.FlexAlgoId == nil {
		return 0
	}
	return *t.FlexAlgoId
}

// GetIsisLevel retrieves the value of the leaf IsisLevel from the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsisLevel is set, it can
// safely use t.GetIsisLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsisLevel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) GetIsisLevel() E_IsisTypes_LevelType {
	if t == nil || t.IsisLevel == 0 {
		return IsisTypes_LevelType_LEVEL_1_2
	}
	return t.IsisLevel
}

// GetParticipate retrieves the value of the leaf Participate from the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Participate is set, it can
// safely use t.GetParticipate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Participate == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) GetParticipate() bool {
	if t == nil || t.Participate == nil {
		return false
	}
	return *t.Participate
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertised == nil {
		var v bool = false
		t.Advertised = &v
	}
	if t.IsisLevel == 0 {
		t.IsisLevel = IsisTypes_LevelType_LEVEL_1_2
	}
	if t.Participate == nil {
		var v bool = false
		t.Participate = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlexAlgoId == nil {
		return nil, fmt.Errorf("nil value for key FlexAlgoId")
	}

	return map[string]interface{}{
		"flex-algo-id": *t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding.
func (*NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers struct {
	ΛMetadata            []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	LspGeneration        *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration `path:"lsp-generation" module:"openconfig-network-instance"`
	ΛLspGeneration       []ygot.Annotation                                          `path:"@lsp-generation" ygotAnnotation:"true"`
	LspLifetimeInterval  *uint16                                                    `path:"config/lsp-lifetime-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspLifetimeInterval []ygot.Annotation                                          `path:"config/@lsp-lifetime-interval" ygotAnnotation:"true"`
	LspRefreshInterval   *uint16                                                    `path:"config/lsp-refresh-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspRefreshInterval  []ygot.Annotation                                          `path:"config/@lsp-refresh-interval" ygotAnnotation:"true"`
	Spf                  *NetworkInstance_Protocol_Isis_Global_Timers_Spf           `path:"spf" module:"openconfig-network-instance"`
	ΛSpf                 []ygot.Annotation                                          `path:"@spf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Timers) IsYANGGoStruct() {}

// GetOrCreateLspGeneration retrieves the value of the LspGeneration field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetOrCreateLspGeneration() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration {
	if t.LspGeneration != nil {
		return t.LspGeneration
	}
	t.LspGeneration = &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration{}
	return t.LspGeneration
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetOrCreateSpf() *NetworkInstance_Protocol_Isis_Global_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &NetworkInstance_Protocol_Isis_Global_Timers_Spf{}
	return t.Spf
}

// GetLspGeneration returns the value of the LspGeneration struct pointer
// from NetworkInstance_Protocol_Isis_Global_Timers. If the receiver or the field LspGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetLspGeneration() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration {
	if t != nil && t.LspGeneration != nil {
		return t.LspGeneration
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from NetworkInstance_Protocol_Isis_Global_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetSpf() *NetworkInstance_Protocol_Isis_Global_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// GetLspLifetimeInterval retrieves the value of the leaf LspLifetimeInterval from the NetworkInstance_Protocol_Isis_Global_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetimeInterval is set, it can
// safely use t.GetLspLifetimeInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetimeInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetLspLifetimeInterval() uint16 {
	if t == nil || t.LspLifetimeInterval == nil {
		return 1200
	}
	return *t.LspLifetimeInterval
}

// GetLspRefreshInterval retrieves the value of the leaf LspRefreshInterval from the NetworkInstance_Protocol_Isis_Global_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspRefreshInterval is set, it can
// safely use t.GetLspRefreshInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspRefreshInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) GetLspRefreshInterval() uint16 {
	if t == nil || t.LspRefreshInterval == nil {
		return 0
	}
	return *t.LspRefreshInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspLifetimeInterval == nil {
		var v uint16 = 1200
		t.LspLifetimeInterval = &v
	}
	t.LspGeneration.PopulateDefaults()
	t.Spf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Timers.
func (*NetworkInstance_Protocol_Isis_Global_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration struct {
	ΛMetadata              []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	AdaptiveTimer          E_IsisTypes_AdaptiveTimerType `path:"state/adaptive-timer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdaptiveTimer         []ygot.Annotation             `path:"state/@adaptive-timer" ygotAnnotation:"true"`
	LspFirstWaitInterval   *uint64                       `path:"config/lsp-first-wait-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspFirstWaitInterval  []ygot.Annotation             `path:"config/@lsp-first-wait-interval" ygotAnnotation:"true"`
	LspMaxWaitInterval     *uint64                       `path:"config/lsp-max-wait-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspMaxWaitInterval    []ygot.Annotation             `path:"config/@lsp-max-wait-interval" ygotAnnotation:"true"`
	LspSecondWaitInterval  *uint64                       `path:"config/lsp-second-wait-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspSecondWaitInterval []ygot.Annotation             `path:"config/@lsp-second-wait-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) IsYANGGoStruct() {}

// GetAdaptiveTimer retrieves the value of the leaf AdaptiveTimer from the NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdaptiveTimer is set, it can
// safely use t.GetAdaptiveTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdaptiveTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) GetAdaptiveTimer() E_IsisTypes_AdaptiveTimerType {
	if t == nil || t.AdaptiveTimer == 0 {
		return 0
	}
	return t.AdaptiveTimer
}

// GetLspFirstWaitInterval retrieves the value of the leaf LspFirstWaitInterval from the NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspFirstWaitInterval is set, it can
// safely use t.GetLspFirstWaitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspFirstWaitInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) GetLspFirstWaitInterval() uint64 {
	if t == nil || t.LspFirstWaitInterval == nil {
		return 0
	}
	return *t.LspFirstWaitInterval
}

// GetLspMaxWaitInterval retrieves the value of the leaf LspMaxWaitInterval from the NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMaxWaitInterval is set, it can
// safely use t.GetLspMaxWaitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMaxWaitInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) GetLspMaxWaitInterval() uint64 {
	if t == nil || t.LspMaxWaitInterval == nil {
		return 0
	}
	return *t.LspMaxWaitInterval
}

// GetLspSecondWaitInterval retrieves the value of the leaf LspSecondWaitInterval from the NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSecondWaitInterval is set, it can
// safely use t.GetLspSecondWaitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSecondWaitInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) GetLspSecondWaitInterval() uint64 {
	if t == nil || t.LspSecondWaitInterval == nil {
		return 0
	}
	return *t.LspSecondWaitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration.
func (*NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf struct {
	ΛMetadata          []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	AdaptiveTimer      E_IsisTypes_AdaptiveTimerType `path:"state/adaptive-timer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAdaptiveTimer     []ygot.Annotation             `path:"state/@adaptive-timer" ygotAnnotation:"true"`
	SpfFirstInterval   *uint64                       `path:"config/spf-first-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSpfFirstInterval  []ygot.Annotation             `path:"config/@spf-first-interval" ygotAnnotation:"true"`
	SpfHoldInterval    *uint64                       `path:"config/spf-hold-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSpfHoldInterval   []ygot.Annotation             `path:"config/@spf-hold-interval" ygotAnnotation:"true"`
	SpfSecondInterval  *uint64                       `path:"config/spf-second-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSpfSecondInterval []ygot.Annotation             `path:"config/@spf-second-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Timers_Spf) IsYANGGoStruct() {}

// GetAdaptiveTimer retrieves the value of the leaf AdaptiveTimer from the NetworkInstance_Protocol_Isis_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdaptiveTimer is set, it can
// safely use t.GetAdaptiveTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdaptiveTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) GetAdaptiveTimer() E_IsisTypes_AdaptiveTimerType {
	if t == nil || t.AdaptiveTimer == 0 {
		return 0
	}
	return t.AdaptiveTimer
}

// GetSpfFirstInterval retrieves the value of the leaf SpfFirstInterval from the NetworkInstance_Protocol_Isis_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfFirstInterval is set, it can
// safely use t.GetSpfFirstInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfFirstInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) GetSpfFirstInterval() uint64 {
	if t == nil || t.SpfFirstInterval == nil {
		return 0
	}
	return *t.SpfFirstInterval
}

// GetSpfHoldInterval retrieves the value of the leaf SpfHoldInterval from the NetworkInstance_Protocol_Isis_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfHoldInterval is set, it can
// safely use t.GetSpfHoldInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfHoldInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) GetSpfHoldInterval() uint64 {
	if t == nil || t.SpfHoldInterval == nil {
		return 5000
	}
	return *t.SpfHoldInterval
}

// GetSpfSecondInterval retrieves the value of the leaf SpfSecondInterval from the NetworkInstance_Protocol_Isis_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondInterval is set, it can
// safely use t.GetSpfSecondInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) GetSpfSecondInterval() uint64 {
	if t == nil || t.SpfSecondInterval == nil {
		return 0
	}
	return *t.SpfSecondInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Timers_Spf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfHoldInterval == nil {
		var v uint64 = 5000
		t.SpfHoldInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Timers_Spf.
func (*NetworkInstance_Protocol_Isis_Global_Timers_Spf) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Global_Transport represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/transport YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Transport struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	LspMtuSize  *uint16           `path:"config/lsp-mtu-size" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLspMtuSize []ygot.Annotation `path:"config/@lsp-mtu-size" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Global_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Global_Transport) IsYANGGoStruct() {}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NetworkInstance_Protocol_Isis_Global_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Global_Transport) GetLspMtuSize() uint16 {
	if t == nil || t.LspMtuSize == nil {
		return 0
	}
	return *t.LspMtuSize
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Global_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Global_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Global_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Global_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Global_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Global_Transport.
func (*NetworkInstance_Protocol_Isis_Global_Transport) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Isis_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Isis_Interface struct {
	ΛMetadata        []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	Af               map[NetworkInstance_Protocol_Isis_Interface_Af_Key]*NetworkInstance_Protocol_Isis_Interface_Af `path:"afi-safi/af" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAf              []ygot.Annotation                                                                              `path:"afi-safi/@af" ygotAnnotation:"true"`
	Authentication   *NetworkInstance_Protocol_Isis_Interface_Authentication                                        `path:"authentication" module:"openconfig-network-instance"`
	ΛAuthentication  []ygot.Annotation                                                                              `path:"@authentication" ygotAnnotation:"true"`
	Bfd              *NetworkInstance_Protocol_Isis_Interface_Bfd                                                   `path:"bfd" module:"openconfig-network-instance"`
	ΛBfd             []ygot.Annotation                                                                              `path:"@bfd" ygotAnnotation:"true"`
	CircuitCounters  *NetworkInstance_Protocol_Isis_Interface_CircuitCounters                                       `path:"circuit-counters" module:"openconfig-network-instance"`
	ΛCircuitCounters []ygot.Annotation                                                                              `path:"@circuit-counters" ygotAnnotation:"true"`
	CircuitType      E_IsisTypes_CircuitType                                                                        `path:"config/circuit-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCircuitType     []ygot.Annotation                                                                              `path:"config/@circuit-type" ygotAnnotation:"true"`
	EnableBfd        *NetworkInstance_Protocol_Isis_Interface_EnableBfd                                             `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd       []ygot.Annotation                                                                              `path:"@enable-bfd" ygotAnnotation:"true"`
	Enabled          *bool                                                                                          `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled         []ygot.Annotation                                                                              `path:"config/@enabled" ygotAnnotation:"true"`
	HelloPadding     E_IsisTypes_HelloPaddingType                                                                   `path:"config/hello-padding" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloPadding    []ygot.Annotation                                                                              `path:"config/@hello-padding" ygotAnnotation:"true"`
	InterfaceId      *string                                                                                        `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId     []ygot.Annotation                                                                              `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef     *NetworkInstance_Protocol_Isis_Interface_InterfaceRef                                          `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef    []ygot.Annotation                                                                              `path:"@interface-ref" ygotAnnotation:"true"`
	Level            map[uint8]*NetworkInstance_Protocol_Isis_Interface_Level                                       `path:"levels/level" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛLevel           []ygot.Annotation                                                                              `path:"levels/@level" ygotAnnotation:"true"`
	Mpls             *NetworkInstance_Protocol_Isis_Interface_Mpls                                                  `path:"mpls" module:"openconfig-network-instance"`
	ΛMpls            []ygot.Annotation                                                                              `path:"@mpls" ygotAnnotation:"true"`
	Passive          *bool                                                                                          `path:"config/passive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPassive         []ygot.Annotation                                                                              `path:"config/@passive" ygotAnnotation:"true"`
	Timers           *NetworkInstance_Protocol_Isis_Interface_Timers                                                `path:"timers" module:"openconfig-network-instance"`
	ΛTimers          []ygot.Annotation                                                                              `path:"@timers" ygotAnnotation:"true"`
	WeightedEcmp     *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp                                          `path:"weighted-ecmp" module:"openconfig-network-instance"`
	ΛWeightedEcmp    []ygot.Annotation                                                                              `path:"@weighted-ecmp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Isis_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Isis_Interface) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Isis_Interface_Af_Key represents the key for list Af of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface.
type NetworkInstance_Protocol_Isis_Interface_Af_Key struct {
	AfiName  E_IsisTypes_AFI_TYPE  `path:"afi-name"`
	SafiName E_IsisTypes_SAFI_TYPE `path:"safi-name"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_Protocol_Isis_Interface_Af_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_Protocol_Isis_Interface_Af_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_Protocol_Isis_Interface_Af_Key key struct.
func (t NetworkInstance_Protocol_Isis_Interface_Af_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"afi-name":  t.AfiName,
		"safi-name": t.SafiName,
	}, nil
}

// NewAf creates a new entry in the Af list of the
// NetworkInstance_Protocol_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Interface) NewAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) (*NetworkInstance_Protocol_Isis_Interface_Af, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Af == nil {
		t.Af = make(map[NetworkInstance_Protocol_Isis_Interface_Af_Key]*NetworkInstance_Protocol_Isis_Interface_Af)
	}

	key := NetworkInstance_Protocol_Isis_Interface_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Af[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Af", key)
	}

	t.Af[key] = &NetworkInstance_Protocol_Isis_Interface_Af{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	return t.Af[key], nil
}

// RenameAf renames an entry in the list Af within
// the NetworkInstance_Protocol_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Interface) RenameAf(oldK, newK NetworkInstance_Protocol_Isis_Interface_Af_Key) error {
	if _, ok := t.Af[newK]; ok {
		return fmt.Errorf("key %v already exists in Af", newK)
	}

	e, ok := t.Af[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Af", oldK)
	}
	e.AfiName = newK.AfiName
	e.SafiName = newK.SafiName

	t.Af[newK] = e
	delete(t.Af, oldK)
	return nil
}

// GetOrCreateAf retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Af {

	key := NetworkInstance_Protocol_Isis_Interface_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	if v, ok := t.Af[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAf(AfiName, SafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAf got unexpected error: %v", err))
	}
	return v
}

// GetAf retrieves the value with the specified key from
// the Af map field of NetworkInstance_Protocol_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Af {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Isis_Interface_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	if lm, ok := t.Af[key]; ok {
		return lm
	}
	return nil
}

// DeleteAf deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Interface) DeleteAf(AfiName E_IsisTypes_AFI_TYPE, SafiName E_IsisTypes_SAFI_TYPE) {
	key := NetworkInstance_Protocol_Isis_Interface_Af_Key{
		AfiName:  AfiName,
		SafiName: SafiName,
	}

	delete(t.Af, key)
}

// AppendAf appends the supplied NetworkInstance_Protocol_Isis_Interface_Af struct to the
// list Af of NetworkInstance_Protocol_Isis_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Interface_Af already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Interface) AppendAf(v *NetworkInstance_Protocol_Isis_Interface_Af) error {
	key := NetworkInstance_Protocol_Isis_Interface_Af_Key{
		AfiName:  v.AfiName,
		SafiName: v.SafiName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Af == nil {
		t.Af = make(map[NetworkInstance_Protocol_Isis_Interface_Af_Key]*NetworkInstance_Protocol_Isis_Interface_Af)
	}

	if _, ok := t.Af[key]; ok {
		return fmt.Errorf("duplicate key for list Af %v", key)
	}

	t.Af[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NetworkInstance_Protocol_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Isis_Interface) NewLevel(LevelNumber uint8) (*NetworkInstance_Protocol_Isis_Interface_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*NetworkInstance_Protocol_Isis_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NetworkInstance_Protocol_Isis_Interface_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NetworkInstance_Protocol_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Isis_Interface) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateLevel(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Interface_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NetworkInstance_Protocol_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetLevel(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Interface_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Isis_Interface) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NetworkInstance_Protocol_Isis_Interface_Level struct to the
// list Level of NetworkInstance_Protocol_Isis_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Isis_Interface_Level already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Isis_Interface) AppendLevel(v *NetworkInstance_Protocol_Isis_Interface_Level) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*NetworkInstance_Protocol_Isis_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateAuthentication() *NetworkInstance_Protocol_Isis_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NetworkInstance_Protocol_Isis_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateBfd() *NetworkInstance_Protocol_Isis_Interface_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NetworkInstance_Protocol_Isis_Interface_Bfd{}
	return t.Bfd
}

// GetOrCreateCircuitCounters retrieves the value of the CircuitCounters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateCircuitCounters() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters {
	if t.CircuitCounters != nil {
		return t.CircuitCounters
	}
	t.CircuitCounters = &NetworkInstance_Protocol_Isis_Interface_CircuitCounters{}
	return t.CircuitCounters
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateEnableBfd() *NetworkInstance_Protocol_Isis_Interface_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &NetworkInstance_Protocol_Isis_Interface_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Isis_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateMpls() *NetworkInstance_Protocol_Isis_Interface_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NetworkInstance_Protocol_Isis_Interface_Mpls{}
	return t.Mpls
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateTimers() *NetworkInstance_Protocol_Isis_Interface_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NetworkInstance_Protocol_Isis_Interface_Timers{}
	return t.Timers
}

// GetOrCreateWeightedEcmp retrieves the value of the WeightedEcmp field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Isis_Interface) GetOrCreateWeightedEcmp() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp {
	if t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	t.WeightedEcmp = &NetworkInstance_Protocol_Isis_Interface_WeightedEcmp{}
	return t.WeightedEcmp
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetAuthentication() *NetworkInstance_Protocol_Isis_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetBfd() *NetworkInstance_Protocol_Isis_Interface_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetCircuitCounters returns the value of the CircuitCounters struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field CircuitCounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetCircuitCounters() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters {
	if t != nil && t.CircuitCounters != nil {
		return t.CircuitCounters
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetEnableBfd() *NetworkInstance_Protocol_Isis_Interface_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetInterfaceRef() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetMpls() *NetworkInstance_Protocol_Isis_Interface_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetTimers() *NetworkInstance_Protocol_Isis_Interface_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetWeightedEcmp returns the value of the WeightedEcmp struct pointer
// from NetworkInstance_Protocol_Isis_Interface. If the receiver or the field WeightedEcmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Isis_Interface) GetWeightedEcmp() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp {
	if t != nil && t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	return nil
}

// GetCircuitType retrieves the value of the leaf CircuitType from the NetworkInstance_Protocol_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitType is set, it can
// safely use t.GetCircuitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Interface) GetCircuitType() E_IsisTypes_CircuitType {
	if t == nil || t.CircuitType == 0 {
		return 0
	}
	return t.CircuitType
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NetworkInstance_Protocol_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Interface) GetHelloPadding() E_IsisTypes_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Protocol_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetPassive retrieves the value of the leaf Passive from the NetworkInstance_Protocol_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Isis_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Isis_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Isis_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	t.Authentication.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.CircuitCounters.PopulateDefaults()
	t.EnableBfd.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.WeightedEcmp.PopulateDefaults()
	for _, e := range t.Af {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Isis_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Isis_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Isis_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Isis_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Isis_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Isis_Interface.
func (*NetworkInstance_Protocol_Isis_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}
