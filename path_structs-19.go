/*
Package ocygot is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"github.com/openconfig/ygot/ygot"
)

// System_Cpu_TotalPath represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPath struct {
	*ygot.NodePath
}

// System_Cpu_TotalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_AvgPath represents the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_InstantPath represents the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxPath represents the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinPath represents the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Total_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPath) Avg() *System_Cpu_Total_AvgPath {
	return &System_Cpu_Total_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPathAny) Avg() *System_Cpu_Total_AvgPathAny {
	return &System_Cpu_Total_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPath) Instant() *System_Cpu_Total_InstantPath {
	return &System_Cpu_Total_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPathAny) Instant() *System_Cpu_Total_InstantPathAny {
	return &System_Cpu_Total_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPath) Interval() *System_Cpu_Total_IntervalPath {
	return &System_Cpu_Total_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPathAny) Interval() *System_Cpu_Total_IntervalPathAny {
	return &System_Cpu_Total_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPath) Max() *System_Cpu_Total_MaxPath {
	return &System_Cpu_Total_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPathAny) Max() *System_Cpu_Total_MaxPathAny {
	return &System_Cpu_Total_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPath) MaxTime() *System_Cpu_Total_MaxTimePath {
	return &System_Cpu_Total_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPathAny) MaxTime() *System_Cpu_Total_MaxTimePathAny {
	return &System_Cpu_Total_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPath) Min() *System_Cpu_Total_MinPath {
	return &System_Cpu_Total_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPathAny) Min() *System_Cpu_Total_MinPathAny {
	return &System_Cpu_Total_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPath) MinTime() *System_Cpu_Total_MinTimePath {
	return &System_Cpu_Total_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPathAny) MinTime() *System_Cpu_Total_MinTimePathAny {
	return &System_Cpu_Total_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_UserPath represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPath struct {
	*ygot.NodePath
}

// System_Cpu_UserPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_AvgPath represents the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_User_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_InstantPath represents the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_User_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_User_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxPath represents the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_User_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MinPath represents the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_User_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_User_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_User_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPath) Avg() *System_Cpu_User_AvgPath {
	return &System_Cpu_User_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPathAny) Avg() *System_Cpu_User_AvgPathAny {
	return &System_Cpu_User_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPath) Instant() *System_Cpu_User_InstantPath {
	return &System_Cpu_User_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPathAny) Instant() *System_Cpu_User_InstantPathAny {
	return &System_Cpu_User_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPath) Interval() *System_Cpu_User_IntervalPath {
	return &System_Cpu_User_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPathAny) Interval() *System_Cpu_User_IntervalPathAny {
	return &System_Cpu_User_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPath) Max() *System_Cpu_User_MaxPath {
	return &System_Cpu_User_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPathAny) Max() *System_Cpu_User_MaxPathAny {
	return &System_Cpu_User_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPath) MaxTime() *System_Cpu_User_MaxTimePath {
	return &System_Cpu_User_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPathAny) MaxTime() *System_Cpu_User_MaxTimePathAny {
	return &System_Cpu_User_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPath) Min() *System_Cpu_User_MinPath {
	return &System_Cpu_User_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPathAny) Min() *System_Cpu_User_MinPathAny {
	return &System_Cpu_User_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPath) MinTime() *System_Cpu_User_MinTimePath {
	return &System_Cpu_User_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPathAny) MinTime() *System_Cpu_User_MinTimePathAny {
	return &System_Cpu_User_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygot.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygot.NodePath
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	return &System_Cpu_Wait_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "avg"
// Path from root: "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	return &System_Cpu_Wait_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	return &System_Cpu_Wait_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous percentage value.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "instant"
// Path from root: "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	return &System_Cpu_Wait_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	return &System_Cpu_Wait_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "interval"
// Path from root: "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	return &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	return &System_Cpu_Wait_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max"
// Path from root: "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	return &System_Cpu_Wait_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	return &System_Cpu_Wait_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "max-time"
// Path from root: "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	return &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	return &System_Cpu_Wait_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min"
// Path from root: "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	return &System_Cpu_Wait_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	return &System_Cpu_Wait_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-system"
// Path from parent: "min-time"
// Path from root: "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	return &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygot.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygot.NodePath
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/config/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygot.NodePath
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/config/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygot.NodePath
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntryAny (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname (wildcarded): string
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	return &System_Dns_HostEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// HostEntry (list): List of static host entries
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "host-entries/host-entry"
// Path from root: "/system/dns/host-entries/host-entry"
// Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	return &System_Dns_HostEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/search"
// Path from root: "/system/dns/config/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	return &System_Dns_SearchPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/search"
// Path from root: "/system/dns/config/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	return &System_Dns_SearchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "search"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPath) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address (wildcarded): string
func (n *System_DnsPathAny) ServerAny() *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPath) Server(Address string) *System_Dns_ServerPath {
	return &System_Dns_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/dns/servers/server"
// Address: string
func (n *System_DnsPathAny) Server(Address string) *System_Dns_ServerPathAny {
	return &System_Dns_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/config/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/config/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygot.NodePath
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/config/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygot.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/alias"
// Path from root: "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	return &System_Dns_HostEntry_AliasPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Alias (leaf-list): Additional aliases for the hostname
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/alias"
// Path from root: "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	return &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alias"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	return &System_Dns_HostEntry_HostnamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Hostname (leaf): Hostname for the static DNS entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/hostname"
// Path from root: "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	return &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hostname"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	return &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv4-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	return &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	return &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/ipv6-address"
// Path from root: "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	return &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygot.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPath represents the /openconfig-system/system/dns/servers/server/config/address YANG schema element.
type System_Dns_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Dns_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/config/address YANG schema element.
type System_Dns_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPath represents the /openconfig-system/system/dns/servers/server/config/port YANG schema element.
type System_Dns_Server_PortPath struct {
	*ygot.NodePath
}

// System_Dns_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server/config/port YANG schema element.
type System_Dns_Server_PortPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/dns/servers/server/config/address"
func (n *System_Dns_ServerPath) Address() *System_Dns_Server_AddressPath {
	return &System_Dns_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address of the DNS server, can be either IPv4
// or IPv6.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/dns/servers/server/config/address"
func (n *System_Dns_ServerPathAny) Address() *System_Dns_Server_AddressPathAny {
	return &System_Dns_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/dns/servers/server/config/port"
func (n *System_Dns_ServerPath) Port() *System_Dns_Server_PortPath {
	return &System_Dns_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the DNS server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/dns/servers/server/config/port"
func (n *System_Dns_ServerPathAny) Port() *System_Dns_Server_PortPathAny {
	return &System_Dns_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_GrpcServerPath represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPath struct {
	*ygot.NodePath
}

// System_GrpcServerPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPath struct {
	*ygot.NodePath
}

// System_GrpcServer_CertificateIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/enable YANG schema element.
type System_GrpcServer_EnablePath struct {
	*ygot.NodePath
}

// System_GrpcServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/enable YANG schema element.
type System_GrpcServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ListenAddressesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPath struct {
	*ygot.NodePath
}

// System_GrpcServer_MetadataAuthenticationPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/name YANG schema element.
type System_GrpcServer_NamePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/name YANG schema element.
type System_GrpcServer_NamePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePath represents the /openconfig-system/system/grpc-servers/grpc-server/config/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePath struct {
	*ygot.NodePath
}

// System_GrpcServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/port YANG schema element.
type System_GrpcServer_PortPath struct {
	*ygot.NodePath
}

// System_GrpcServer_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/port YANG schema element.
type System_GrpcServer_PortPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/services YANG schema element.
type System_GrpcServer_ServicesPath struct {
	*ygot.NodePath
}

// System_GrpcServer_ServicesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/services YANG schema element.
type System_GrpcServer_ServicesPathAny struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPath represents the /openconfig-system/system/grpc-servers/grpc-server/config/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPath struct {
	*ygot.NodePath
}

// System_GrpcServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/config/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPathAny struct {
	*ygot.NodePath
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServerPath) CertificateId() *System_GrpcServer_CertificateIdPath {
	return &System_GrpcServer_CertificateIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/certificate-id"
// Path from root: "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServerPathAny) CertificateId() *System_GrpcServer_CertificateIdPathAny {
	return &System_GrpcServer_CertificateIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "certificate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServerPath) Enable() *System_GrpcServer_EnablePath {
	return &System_GrpcServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServerPathAny) Enable() *System_GrpcServer_EnablePathAny {
	return &System_GrpcServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServerPath) ListenAddresses() *System_GrpcServer_ListenAddressesPath {
	return &System_GrpcServer_ListenAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/listen-addresses"
// Path from root: "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServerPathAny) ListenAddresses() *System_GrpcServer_ListenAddressesPathAny {
	return &System_GrpcServer_ListenAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServerPath) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPath {
	return &System_GrpcServer_MetadataAuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/metadata-authentication"
// Path from root: "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServerPathAny) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPathAny {
	return &System_GrpcServer_MetadataAuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServerPath) Name() *System_GrpcServer_NamePath {
	return &System_GrpcServer_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/name"
// Path from root: "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServerPathAny) Name() *System_GrpcServer_NamePathAny {
	return &System_GrpcServer_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServerPath) NetworkInstance() *System_GrpcServer_NetworkInstancePath {
	return &System_GrpcServer_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServerPathAny) NetworkInstance() *System_GrpcServer_NetworkInstancePathAny {
	return &System_GrpcServer_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServerPath) Port() *System_GrpcServer_PortPath {
	return &System_GrpcServer_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): TCP port on which the gRPC server should listen.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServerPathAny) Port() *System_GrpcServer_PortPathAny {
	return &System_GrpcServer_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/services"
// Path from root: "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServerPath) Services() *System_GrpcServer_ServicesPath {
	return &System_GrpcServer_ServicesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/services"
// Path from root: "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServerPathAny) Services() *System_GrpcServer_ServicesPathAny {
	return &System_GrpcServer_ServicesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "services"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServerPath) TransportSecurity() *System_GrpcServer_TransportSecurityPath {
	return &System_GrpcServer_TransportSecurityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
// ----------------------------------------
// Defining module: "openconfig-system-grpc"
// Instantiating module: "openconfig-system"
// Path from parent: "config/transport-security"
// Path from root: "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServerPathAny) TransportSecurity() *System_GrpcServer_TransportSecurityPathAny {
	return &System_GrpcServer_TransportSecurityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transport-security"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygot.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygot.NodePath
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// LicenseAny (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId (wildcarded): string
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	return &System_License_LicensePath{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// License (list): List of licenses.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "licenses/license"
// Path from root: "/system/license/licenses/license"
// LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	return &System_License_LicensePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygot.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygot.NodePath
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygot.NodePath
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygot.NodePath
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygot.NodePath
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygot.NodePath
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygot.NodePath
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygot.NodePath
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygot.NodePath
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygot.NodePath
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/config/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygot.NodePath
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygot.NodePath
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygot.NodePath
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	return &System_License_License_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): The activation state of the license.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/active"
// Path from root: "/system/license/licenses/license/config/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	return &System_License_License_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	return &System_License_License_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): The license description.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/description"
// Path from root: "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	return &System_License_License_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	return &System_License_License_ExpirationDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expiration-date"
// Path from root: "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	return &System_License_License_ExpirationDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	return &System_License_License_ExpiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// Expired (leaf): The license has expired.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/expired"
// Path from root: "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	return &System_License_License_ExpiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	return &System_License_License_InUsePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/in-use"
// Path from root: "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	return &System_License_License_InUsePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	return &System_License_License_IssueDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/issue-date"
// Path from root: "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	return &System_License_License_IssueDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	return &System_License_License_LicenseDataPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-data"
// Path from root: "/system/license/licenses/license/config/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	return &System_License_License_LicenseDataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-data"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	return &System_License_License_LicenseIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "config/license-id"
// Path from root: "/system/license/licenses/license/config/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	return &System_License_License_LicenseIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "license-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	return &System_License_License_ValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
// ----------------------------------------
// Defining module: "openconfig-license"
// Instantiating module: "openconfig-system"
// Path from parent: "state/valid"
// Path from root: "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	return &System_License_License_ValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygot.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygot.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	return &System_Logging_ConsolePath{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// Console (container): Top-level container for data related to console-based
// logging
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "console"
// Path from root: "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	return &System_Logging_ConsolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
}

// FileAny (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path (wildcarded): string
// FilenamePrefix (wildcarded): string
func (n *System_LoggingPath) FileAny() *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
}

// FileAny (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path (wildcarded): string
// FilenamePrefix (wildcarded): string
func (n *System_LoggingPathAny) FileAny() *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
}

// FileAnyFilenamePrefix (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path: string
// FilenamePrefix (wildcarded): string
func (n *System_LoggingPath) FileAnyFilenamePrefix(Path string) *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": "*"},
			n,
		),
	}
}

// FileAnyFilenamePrefix (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path: string
// FilenamePrefix (wildcarded): string
func (n *System_LoggingPathAny) FileAnyFilenamePrefix(Path string) *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": "*"},
			n,
		),
	}
}

// FileAnyPath (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path (wildcarded): string
// FilenamePrefix: string
func (n *System_LoggingPath) FileAnyPath(FilenamePrefix string) *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": FilenamePrefix},
			n,
		),
	}
}

// FileAnyPath (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path (wildcarded): string
// FilenamePrefix: string
func (n *System_LoggingPathAny) FileAnyPath(FilenamePrefix string) *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": FilenamePrefix},
			n,
		),
	}
}

// File (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path: string
// FilenamePrefix: string
func (n *System_LoggingPath) File(Path string, FilenamePrefix string) *System_Logging_FilePath {
	return &System_Logging_FilePath{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
}

// File (list): List of logfiles
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "files/file"
// Path from root: "/system/logging/files/file"
// Path: string
// FilenamePrefix: string
func (n *System_LoggingPathAny) File(Path string, FilenamePrefix string) *System_Logging_FilePathAny {
	return &System_Logging_FilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServerAny (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host (wildcarded): string
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	return &System_Logging_RemoteServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// RemoteServer (list): List of remote log servers
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "remote-servers/remote-server"
// Path from root: "/system/logging/remote-servers/remote-server"
// Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	return &System_Logging_RemoteServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "vty"
// Path from root: "/system/logging/vty"
func (n *System_LoggingPath) Vty() *System_Logging_VtyPath {
	return &System_Logging_VtyPath{
		NodePath: ygot.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "vty"
// Path from root: "/system/logging/vty"
func (n *System_LoggingPathAny) Vty() *System_Logging_VtyPathAny {
	return &System_Logging_VtyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygot.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	return &System_Logging_Console_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/console/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	return &System_Logging_Console_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/config/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	return &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	return &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	return &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	return &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_FilePath represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePath struct {
	*ygot.NodePath
}

// System_Logging_FilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathAny struct {
	*ygot.NodePath
}

// System_Logging_File_FilenamePrefixPath represents the /openconfig-system/system/logging/files/file/config/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPath struct {
	*ygot.NodePath
}

// System_Logging_File_FilenamePrefixPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/config/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPathAny struct {
	*ygot.NodePath
}

// System_Logging_File_MaxOpenTimePath represents the /openconfig-system/system/logging/files/file/config/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePath struct {
	*ygot.NodePath
}

// System_Logging_File_MaxOpenTimePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/config/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePathAny struct {
	*ygot.NodePath
}

// System_Logging_File_MaxSizePath represents the /openconfig-system/system/logging/files/file/config/max-size YANG schema element.
type System_Logging_File_MaxSizePath struct {
	*ygot.NodePath
}

// System_Logging_File_MaxSizePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/config/max-size YANG schema element.
type System_Logging_File_MaxSizePathAny struct {
	*ygot.NodePath
}

// System_Logging_File_OpenLogfilePath represents the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePath struct {
	*ygot.NodePath
}

// System_Logging_File_OpenLogfilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePathAny struct {
	*ygot.NodePath
}

// System_Logging_File_PathPath represents the /openconfig-system/system/logging/files/file/config/path YANG schema element.
type System_Logging_File_PathPath struct {
	*ygot.NodePath
}

// System_Logging_File_PathPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/config/path YANG schema element.
type System_Logging_File_PathPathAny struct {
	*ygot.NodePath
}

// System_Logging_File_RotatePath represents the /openconfig-system/system/logging/files/file/config/rotate YANG schema element.
type System_Logging_File_RotatePath struct {
	*ygot.NodePath
}

// System_Logging_File_RotatePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/config/rotate YANG schema element.
type System_Logging_File_RotatePathAny struct {
	*ygot.NodePath
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/filename-prefix"
// Path from root: "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_FilePath) FilenamePrefix() *System_Logging_File_FilenamePrefixPath {
	return &System_Logging_File_FilenamePrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/filename-prefix"
// Path from root: "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_FilePathAny) FilenamePrefix() *System_Logging_File_FilenamePrefixPathAny {
	return &System_Logging_File_FilenamePrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/max-open-time"
// Path from root: "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_FilePath) MaxOpenTime() *System_Logging_File_MaxOpenTimePath {
	return &System_Logging_File_MaxOpenTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-open-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/max-open-time"
// Path from root: "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_FilePathAny) MaxOpenTime() *System_Logging_File_MaxOpenTimePathAny {
	return &System_Logging_File_MaxOpenTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-open-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/max-size"
// Path from root: "/system/logging/files/file/config/max-size"
func (n *System_Logging_FilePath) MaxSize() *System_Logging_File_MaxSizePath {
	return &System_Logging_File_MaxSizePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/max-size"
// Path from root: "/system/logging/files/file/config/max-size"
func (n *System_Logging_FilePathAny) MaxSize() *System_Logging_File_MaxSizePathAny {
	return &System_Logging_File_MaxSizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/open-logfile"
// Path from root: "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePath) OpenLogfile() *System_Logging_File_OpenLogfilePath {
	return &System_Logging_File_OpenLogfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "state/open-logfile"
// Path from root: "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePathAny) OpenLogfile() *System_Logging_File_OpenLogfilePathAny {
	return &System_Logging_File_OpenLogfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/path"
// Path from root: "/system/logging/files/file/config/path"
func (n *System_Logging_FilePath) Path() *System_Logging_File_PathPath {
	return &System_Logging_File_PathPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/path"
// Path from root: "/system/logging/files/file/config/path"
func (n *System_Logging_FilePathAny) Path() *System_Logging_File_PathPathAny {
	return &System_Logging_File_PathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rotate"
// Path from root: "/system/logging/files/file/config/rotate"
func (n *System_Logging_FilePath) Rotate() *System_Logging_File_RotatePath {
	return &System_Logging_File_RotatePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rotate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rotate"
// Path from root: "/system/logging/files/file/config/rotate"
func (n *System_Logging_FilePathAny) Rotate() *System_Logging_File_RotatePathAny {
	return &System_Logging_File_RotatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rotate"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) SelectorAny() *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) SelectorAny() *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPath {
	return &System_Logging_File_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/files/file/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	return &System_Logging_File_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_File_SelectorPath represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_File_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_File_Selector_FacilityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/config/facility YANG schema element.
type System_Logging_File_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_File_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/config/facility YANG schema element.
type System_Logging_File_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_File_Selector_SeverityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/config/severity YANG schema element.
type System_Logging_File_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_File_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/config/severity YANG schema element.
type System_Logging_File_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_SelectorPath) Facility() *System_Logging_File_Selector_FacilityPath {
	return &System_Logging_File_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_SelectorPathAny) Facility() *System_Logging_File_Selector_FacilityPathAny {
	return &System_Logging_File_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_SelectorPath) Severity() *System_Logging_File_Selector_SeverityPath {
	return &System_Logging_File_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_SelectorPathAny) Severity() *System_Logging_File_Selector_SeverityPathAny {
	return &System_Logging_File_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_NetworkInstancePath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/config/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	return &System_Logging_RemoteServer_HostPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// Host (leaf): IP address or hostname of the remote log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/host"
// Path from root: "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	return &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServerPath) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePath {
	return &System_Logging_RemoteServer_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServerPathAny) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePathAny {
	return &System_Logging_RemoteServer_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	return &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/remote-port"
// Path from root: "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	return &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	return &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	return &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	return &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IP address for packets to the log server
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	return &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	return &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	return &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	return &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	return &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Logging_VtyPath represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPath struct {
	*ygot.NodePath
}

// System_Logging_VtyPathAny represents the wildcard version of the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPathAny struct {
	*ygot.NodePath
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAny (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnySeverity (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity (wildcarded): E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) SelectorAnySeverity(Facility E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": "*"},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// SelectorAnyFacility (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility (wildcarded): E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) SelectorAnyFacility(Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPath {
	return &System_Logging_Vty_SelectorPath{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// Selector (list): List of selectors for log messages
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "selectors/selector"
// Path from root: "/system/logging/vty/selectors/selector"
// Facility: E_SystemLogging_SYSLOG_FACILITY
// Severity: E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) Selector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	return &System_Logging_Vty_SelectorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
}

// System_Logging_Vty_SelectorPath represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPath struct {
	*ygot.NodePath
}

// System_Logging_Vty_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathAny struct {
	*ygot.NodePath
}

// System_Logging_Vty_Selector_FacilityPath represents the /openconfig-system/system/logging/vty/selectors/selector/config/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPath struct {
	*ygot.NodePath
}

// System_Logging_Vty_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/config/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPathAny struct {
	*ygot.NodePath
}

// System_Logging_Vty_Selector_SeverityPath represents the /openconfig-system/system/logging/vty/selectors/selector/config/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPath struct {
	*ygot.NodePath
}

// System_Logging_Vty_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/config/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPathAny struct {
	*ygot.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_SelectorPath) Facility() *System_Logging_Vty_Selector_FacilityPath {
	return &System_Logging_Vty_Selector_FacilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Facility (leaf): Specifies the facility, or class of messages to log
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/facility"
// Path from root: "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_SelectorPathAny) Facility() *System_Logging_Vty_Selector_FacilityPathAny {
	return &System_Logging_Vty_Selector_FacilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "facility"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_SelectorPath) Severity() *System_Logging_Vty_Selector_SeverityPath {
	return &System_Logging_Vty_Selector_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
// ----------------------------------------
// Defining module: "openconfig-system-logging"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_SelectorPathAny) Severity() *System_Logging_Vty_Selector_SeverityPathAny {
	return &System_Logging_Vty_Selector_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MacAddressPath represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPath struct {
	*ygot.NodePath
}

// System_MacAddressPathAny represents the wildcard version of the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPathAny struct {
	*ygot.NodePath
}

// System_MacAddress_RoutingMacPath represents the /openconfig-system/system/mac-address/config/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPath struct {
	*ygot.NodePath
}

// System_MacAddress_RoutingMacPathAny represents the wildcard version of the /openconfig-system/system/mac-address/config/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPathAny struct {
	*ygot.NodePath
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/routing-mac"
// Path from root: "/system/mac-address/config/routing-mac"
func (n *System_MacAddressPath) RoutingMac() *System_MacAddress_RoutingMacPath {
	return &System_MacAddress_RoutingMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "routing-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/routing-mac"
// Path from root: "/system/mac-address/config/routing-mac"
func (n *System_MacAddressPathAny) RoutingMac() *System_MacAddress_RoutingMacPathAny {
	return &System_MacAddress_RoutingMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "routing-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygot.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygot.NodePath
}

// System_Memory_FreePath represents the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePath struct {
	*ygot.NodePath
}

// System_Memory_FreePathAny represents the wildcard version of the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePathAny struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPath represents the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPath struct {
	*ygot.NodePath
}

// System_Memory_PhysicalPathAny represents the wildcard version of the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPathAny struct {
	*ygot.NodePath
}

// System_Memory_ReservedPath represents the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPath struct {
	*ygot.NodePath
}

// System_Memory_ReservedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPathAny struct {
	*ygot.NodePath
}

// System_Memory_UsedPath represents the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPath struct {
	*ygot.NodePath
}

// System_Memory_UsedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPath) Counters() *System_Memory_CountersPath {
	return &System_Memory_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters for tracking system memory errors
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/counters"
// Path from root: "/system/memory/state/counters"
func (n *System_MemoryPathAny) Counters() *System_Memory_CountersPathAny {
	return &System_Memory_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPath) Free() *System_Memory_FreePath {
	return &System_Memory_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Memory that is not used and is available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/free"
// Path from root: "/system/memory/state/free"
func (n *System_MemoryPathAny) Free() *System_Memory_FreePathAny {
	return &System_Memory_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPath) Physical() *System_Memory_PhysicalPath {
	return &System_Memory_PhysicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Physical (leaf): Reports the total physical memory available on the
// system.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/physical"
// Path from root: "/system/memory/state/physical"
func (n *System_MemoryPathAny) Physical() *System_Memory_PhysicalPathAny {
	return &System_Memory_PhysicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPath) Reserved() *System_Memory_ReservedPath {
	return &System_Memory_ReservedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Reserved (leaf): Memory reserved for system use
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/reserved"
// Path from root: "/system/memory/state/reserved"
func (n *System_MemoryPathAny) Reserved() *System_Memory_ReservedPathAny {
	return &System_Memory_ReservedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPath) Used() *System_Memory_UsedPath {
	return &System_Memory_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Memory that has been used and not available for allocation.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/used"
// Path from root: "/system/memory/state/used"
func (n *System_MemoryPathAny) Used() *System_Memory_UsedPathAny {
	return &System_Memory_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Memory_CountersPath represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPath struct {
	*ygot.NodePath
}

// System_Memory_CountersPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_CorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPath represents the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_TotalEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPathAny struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPath struct {
	*ygot.NodePath
}

// System_Memory_Counters_UncorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPathAny struct {
	*ygot.NodePath
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPath) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPath {
	return &System_Memory_Counters_CorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "correctable-ecc-errors"
// Path from root: "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPathAny) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPathAny {
	return &System_Memory_Counters_CorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPath) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPath {
	return &System_Memory_Counters_TotalEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "total-ecc-errors"
// Path from root: "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPathAny) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPathAny {
	return &System_Memory_Counters_TotalEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPath) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPath {
	return &System_Memory_Counters_UncorrectableEccErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "uncorrectable-ecc-errors"
// Path from root: "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPathAny) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPathAny {
	return &System_Memory_Counters_UncorrectableEccErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygot.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygot.NodePath
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygot.NodePath
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/config/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygot.NodePath
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugServiceAny (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service (wildcarded): E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	return &System_Messages_DebugServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// DebugService (list): List of debugging entries.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "debug-entries/debug-service"
// Path from root: "/system/messages/debug-entries/debug-service"
// Service: E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	return &System_Messages_DebugServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPath) Message() *System_Messages_MessagePath {
	return &System_Messages_MessagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "state/message"
// Path from root: "/system/messages/state/message"
func (n *System_MessagesPathAny) Message() *System_Messages_MessagePathAny {
	return &System_Messages_MessagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	return &System_Messages_SeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/severity"
// Path from root: "/system/messages/config/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	return &System_Messages_SeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygot.NodePath
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/config/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	return &System_Messages_DebugService_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable and disable debugging.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	return &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	return &System_Messages_DebugService_ServicePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "config/service"
// Path from root: "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	return &System_Messages_DebugService_ServicePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Messages_MessagePath represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePath struct {
	*ygot.NodePath
}

// System_Messages_MessagePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePath represents the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePath struct {
	*ygot.NodePath
}

// System_Messages_Message_AppNamePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/app-name YANG schema element.
type System_Messages_Message_AppNamePathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPath represents the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msg YANG schema element.
type System_Messages_Message_MsgPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPath represents the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_MsgidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/msgid YANG schema element.
type System_Messages_Message_MsgidPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPath represents the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPath struct {
	*ygot.NodePath
}

// System_Messages_Message_PriorityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/priority YANG schema element.
type System_Messages_Message_PriorityPathAny struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPath represents the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPath struct {
	*ygot.NodePath
}

// System_Messages_Message_ProcidPathAny represents the wildcard version of the /openconfig-system/system/messages/state/message/procid YANG schema element.
type System_Messages_Message_ProcidPathAny struct {
	*ygot.NodePath
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePath) AppName() *System_Messages_Message_AppNamePath {
	return &System_Messages_Message_AppNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AppName (leaf): The APP-NAME field SHOULD identify the device or
// application that originated the message.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "app-name"
// Path from root: "/system/messages/state/message/app-name"
func (n *System_Messages_MessagePathAny) AppName() *System_Messages_Message_AppNamePathAny {
	return &System_Messages_Message_AppNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"app-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePath) Msg() *System_Messages_Message_MsgPath {
	return &System_Messages_Message_MsgPath{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msg (leaf): Message payload. If other leafs within this container not
// supported, this leaf MAY include the entire message,
// inclding pri, procid, app-name etc..
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msg"
// Path from root: "/system/messages/state/message/msg"
func (n *System_Messages_MessagePathAny) Msg() *System_Messages_Message_MsgPathAny {
	return &System_Messages_Message_MsgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePath) Msgid() *System_Messages_Message_MsgidPath {
	return &System_Messages_Message_MsgidPath{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Msgid (leaf): The MSGID SHOULD identify the type of message. For
// example, a firewall might use the MSGID 'TCPIN' for
// incoming TCP traffic and the MSGID 'TCPOUT' for outgoing
// TCP traffic.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "msgid"
// Path from root: "/system/messages/state/message/msgid"
func (n *System_Messages_MessagePathAny) Msgid() *System_Messages_Message_MsgidPathAny {
	return &System_Messages_Message_MsgidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"msgid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePath) Priority() *System_Messages_Message_PriorityPath {
	return &System_Messages_Message_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The Priority value (PRIVAL) represents both the
// Facility and Severity.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "priority"
// Path from root: "/system/messages/state/message/priority"
func (n *System_Messages_MessagePathAny) Priority() *System_Messages_Message_PriorityPathAny {
	return &System_Messages_Message_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePath) Procid() *System_Messages_Message_ProcidPath {
	return &System_Messages_Message_ProcidPath{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Procid (leaf): PROCID is a value that is included in the message, having
// no interoperable meaning, except that a change in the value
// indicates there has been a discontinuity in syslog
// reporting.
// ----------------------------------------
// Defining module: "openconfig-messages"
// Instantiating module: "openconfig-system"
// Path from parent: "procid"
// Path from root: "/system/messages/state/message/procid"
func (n *System_Messages_MessagePathAny) Procid() *System_Messages_Message_ProcidPathAny {
	return &System_Messages_Message_ProcidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"procid"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_MountPointPath represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPath struct {
	*ygot.NodePath
}

// System_MountPointPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePath represents the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePath struct {
	*ygot.NodePath
}

// System_MountPoint_AvailablePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_NamePath represents the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePath struct {
	*ygot.NodePath
}

// System_MountPoint_NamePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_SizePath represents the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePath struct {
	*ygot.NodePath
}

// System_MountPoint_SizePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePathAny struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPath represents the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPath struct {
	*ygot.NodePath
}

// System_MountPoint_StorageComponentPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPathAny struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPath represents the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPath struct {
	*ygot.NodePath
}

// System_MountPoint_UtilizedPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPathAny struct {
	*ygot.NodePath
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPath) Available() *System_MountPoint_AvailablePath {
	return &System_MountPoint_AvailablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Available (leaf): The amount of unused space on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/available"
// Path from root: "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPathAny) Available() *System_MountPoint_AvailablePathAny {
	return &System_MountPoint_AvailablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPath) Name() *System_MountPoint_NamePath {
	return &System_MountPoint_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Mount point name.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/mount-points/mount-point/state/name"
func (n *System_MountPointPathAny) Name() *System_MountPoint_NamePathAny {
	return &System_MountPoint_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPath) Size() *System_MountPoint_SizePath {
	return &System_MountPoint_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total size of the initialised filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/size"
// Path from root: "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPathAny) Size() *System_MountPoint_SizePathAny {
	return &System_MountPoint_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPath) StorageComponent() *System_MountPoint_StorageComponentPath {
	return &System_MountPoint_StorageComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/storage-component"
// Path from root: "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPathAny) StorageComponent() *System_MountPoint_StorageComponentPathAny {
	return &System_MountPoint_StorageComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPath) Utilized() *System_MountPoint_UtilizedPath {
	return &System_MountPoint_UtilizedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/utilized"
// Path from root: "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPathAny) Utilized() *System_MountPoint_UtilizedPathAny {
	return &System_MountPoint_UtilizedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygot.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPath represents the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPath struct {
	*ygot.NodePath
}

// System_Ntp_AuthMismatchPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygot.NodePath
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygot.NodePath
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/config/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygot.NodePath
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPath) AuthMismatch() *System_Ntp_AuthMismatchPath {
	return &System_Ntp_AuthMismatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/auth-mismatch"
// Path from root: "/system/ntp/state/auth-mismatch"
func (n *System_NtpPathAny) AuthMismatch() *System_Ntp_AuthMismatchPathAny {
	return &System_Ntp_AuthMismatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	return &System_Ntp_EnableNtpAuthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable-ntp-auth"
// Path from root: "/system/ntp/config/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	return &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	return &System_Ntp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enabled"
// Path from root: "/system/ntp/config/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	return &System_Ntp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKeyAny (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId (wildcarded): uint16
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	return &System_Ntp_NtpKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// NtpKey (list): List of NTP authentication keys
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "ntp-keys/ntp-key"
// Path from root: "/system/ntp/ntp-keys/ntp-key"
// KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	return &System_Ntp_NtpKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address (wildcarded): string
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	return &System_Ntp_ServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "servers/server"
// Path from root: "/system/ntp/servers/server"
// Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	return &System_Ntp_ServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygot.NodePath
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/config/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygot.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	return &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-id"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	return &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	return &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyType (leaf): Encryption type used for the NTP authentication key
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-type"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	return &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	return &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyValue (leaf): NTP authentication key value
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/key-value"
// Path from root: "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	return &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygot.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_NetworkInstancePath represents the /openconfig-system/system/ntp/servers/server/config/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePath struct {
	*ygot.NodePath
}

// System_Ntp_Server_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPath represents the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_OffsetPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPath represents the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PollIntervalPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPath represents the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDelayPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPath represents the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_RootDispersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_SourceAddressPath represents the /openconfig-system/system/ntp/servers/server/config/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPath represents the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_StratumPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPathAny struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygot.NodePath
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/config/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygot.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	return &System_Ntp_Server_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): The address or hostname of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/address"
// Path from root: "/system/ntp/servers/server/config/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	return &System_Ntp_Server_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	return &System_Ntp_Server_AssociationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociationType (leaf): The desired association type for this NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/association-type"
// Path from root: "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	return &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "association-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	return &System_Ntp_Server_IburstPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/iburst"
// Path from root: "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	return &System_Ntp_Server_IburstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "iburst"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance used to find this server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_ServerPath) NetworkInstance() *System_Ntp_Server_NetworkInstancePath {
	return &System_Ntp_Server_NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance (leaf): The network instance used to find this server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/network-instance"
// Path from root: "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_ServerPathAny) NetworkInstance() *System_Ntp_Server_NetworkInstancePathAny {
	return &System_Ntp_Server_NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPath) Offset() *System_Ntp_Server_OffsetPath {
	return &System_Ntp_Server_OffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/offset"
// Path from root: "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPathAny) Offset() *System_Ntp_Server_OffsetPathAny {
	return &System_Ntp_Server_OffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPath) PollInterval() *System_Ntp_Server_PollIntervalPath {
	return &System_Ntp_Server_PollIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// PollInterval (leaf): Polling interval of the peer
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/poll-interval"
// Path from root: "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPathAny) PollInterval() *System_Ntp_Server_PollIntervalPathAny {
	return &System_Ntp_Server_PollIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	return &System_Ntp_Server_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): The port number of the NTP server.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/port"
// Path from root: "/system/ntp/servers/server/config/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	return &System_Ntp_Server_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	return &System_Ntp_Server_PreferPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/prefer"
// Path from root: "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	return &System_Ntp_Server_PreferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPath) RootDelay() *System_Ntp_Server_RootDelayPath {
	return &System_Ntp_Server_RootDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-delay"
// Path from root: "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPathAny) RootDelay() *System_Ntp_Server_RootDelayPathAny {
	return &System_Ntp_Server_RootDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPath) RootDispersion() *System_Ntp_Server_RootDispersionPath {
	return &System_Ntp_Server_RootDispersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/root-dispersion"
// Path from root: "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPathAny) RootDispersion() *System_Ntp_Server_RootDispersionPathAny {
	return &System_Ntp_Server_RootDispersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_ServerPath) SourceAddress() *System_Ntp_Server_SourceAddressPath {
	return &System_Ntp_Server_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/source-address"
// Path from root: "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_ServerPathAny) SourceAddress() *System_Ntp_Server_SourceAddressPathAny {
	return &System_Ntp_Server_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPath) Stratum() *System_Ntp_Server_StratumPath {
	return &System_Ntp_Server_StratumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "state/stratum"
// Path from root: "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPathAny) Stratum() *System_Ntp_Server_StratumPathAny {
	return &System_Ntp_Server_StratumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	return &System_Ntp_Server_VersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Version (leaf): Version number to put in outgoing NTP packets
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "config/version"
// Path from root: "/system/ntp/servers/server/config/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	return &System_Ntp_Server_VersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "version"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_ProcessPath represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPath struct {
	*ygot.NodePath
}

// System_ProcessPathAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathAny struct {
	*ygot.NodePath
}

// System_Process_ArgsPath represents the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPath struct {
	*ygot.NodePath
}

// System_Process_ArgsPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPath represents the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageSystemPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPath represents the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPath struct {
	*ygot.NodePath
}

// System_Process_CpuUsageUserPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPathAny struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPath represents the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_CpuUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePath represents the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePath struct {
	*ygot.NodePath
}

// System_Process_MemoryUsagePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePathAny struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPath represents the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPath struct {
	*ygot.NodePath
}

// System_Process_MemoryUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPathAny struct {
	*ygot.NodePath
}

// System_Process_NamePath represents the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePath struct {
	*ygot.NodePath
}

// System_Process_NamePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePathAny struct {
	*ygot.NodePath
}

// System_Process_PidPath represents the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPath struct {
	*ygot.NodePath
}

// System_Process_PidPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPathAny struct {
	*ygot.NodePath
}

// System_Process_StartTimePath represents the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePath struct {
	*ygot.NodePath
}

// System_Process_StartTimePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePathAny struct {
	*ygot.NodePath
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPath) Args() *System_Process_ArgsPath {
	return &System_Process_ArgsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/args"
// Path from root: "/system/processes/process/state/args"
func (n *System_ProcessPathAny) Args() *System_Process_ArgsPathAny {
	return &System_Process_ArgsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPath) CpuUsageSystem() *System_Process_CpuUsageSystemPath {
	return &System_Process_CpuUsageSystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-system"
// Path from root: "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPathAny) CpuUsageSystem() *System_Process_CpuUsageSystemPathAny {
	return &System_Process_CpuUsageSystemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPath) CpuUsageUser() *System_Process_CpuUsageUserPath {
	return &System_Process_CpuUsageUserPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-usage-user"
// Path from root: "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPathAny) CpuUsageUser() *System_Process_CpuUsageUserPathAny {
	return &System_Process_CpuUsageUserPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPath) CpuUtilization() *System_Process_CpuUtilizationPath {
	return &System_Process_CpuUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/cpu-utilization"
// Path from root: "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPathAny) CpuUtilization() *System_Process_CpuUtilizationPathAny {
	return &System_Process_CpuUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPath) MemoryUsage() *System_Process_MemoryUsagePath {
	return &System_Process_MemoryUsagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-usage"
// Path from root: "/system/processes/process/state/memory-usage"
func (n *System_ProcessPathAny) MemoryUsage() *System_Process_MemoryUsagePathAny {
	return &System_Process_MemoryUsagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPath) MemoryUtilization() *System_Process_MemoryUtilizationPath {
	return &System_Process_MemoryUtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/memory-utilization"
// Path from root: "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPathAny) MemoryUtilization() *System_Process_MemoryUtilizationPathAny {
	return &System_Process_MemoryUtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPath) Name() *System_Process_NamePath {
	return &System_Process_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The process name
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/name"
// Path from root: "/system/processes/process/state/name"
func (n *System_ProcessPathAny) Name() *System_Process_NamePathAny {
	return &System_Process_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPath) Pid() *System_Process_PidPath {
	return &System_Process_PidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pid (leaf): The process pid
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/pid"
// Path from root: "/system/processes/process/state/pid"
func (n *System_ProcessPathAny) Pid() *System_Process_PidPathAny {
	return &System_Process_PidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pid"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPath) StartTime() *System_Process_StartTimePath {
	return &System_Process_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
// ----------------------------------------
// Defining module: "openconfig-procmon"
// Instantiating module: "openconfig-system"
// Path from parent: "state/start-time"
// Path from root: "/system/processes/process/state/start-time"
func (n *System_ProcessPathAny) StartTime() *System_Process_StartTimePathAny {
	return &System_Process_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygot.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygot.NodePath
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygot.NodePath
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygot.NodePath
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/config/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	return &System_SshServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/ssh-server/config/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	return &System_SshServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	return &System_SshServer_ProtocolVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/protocol-version"
// Path from root: "/system/ssh-server/config/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	return &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	return &System_SshServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/ssh-server/config/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	return &System_SshServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	return &System_SshServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/ssh-server/config/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	return &System_SshServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	return &System_SshServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/ssh-server/config/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	return &System_SshServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygot.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygot.NodePath
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygot.NodePath
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygot.NodePath
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/config/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygot.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	return &System_TelnetServer_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/enable"
// Path from root: "/system/telnet-server/config/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	return &System_TelnetServer_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	return &System_TelnetServer_RateLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/rate-limit"
// Path from root: "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	return &System_TelnetServer_RateLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	return &System_TelnetServer_SessionLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/session-limit"
// Path from root: "/system/telnet-server/config/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	return &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "session-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	return &System_TelnetServer_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
// ----------------------------------------
// Defining module: "openconfig-system-terminal"
// Instantiating module: "openconfig-system"
// Path from parent: "config/timeout"
// Path from root: "/system/telnet-server/config/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	return &System_TelnetServer_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystemPath represents the /openconfig-telemetry/telemetry-system YANG schema element.
type TelemetrySystemPath struct {
	*ygot.NodePath
}

// TelemetrySystemPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system YANG schema element.
type TelemetrySystemPathAny struct {
	*ygot.NodePath
}

// DestinationGroupAny (list): List of destination-groups. Destination groups allow the
// reuse of common telemetry destinations across the
// telemetry configuration. An operator references a
// set of destinations via the configurable
// destination-group-identifier.
//
// A destination group may contain one or more telemetry
// destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/destination-groups/destination-group"
// GroupId (wildcarded): string
func (n *TelemetrySystemPath) DestinationGroupAny() *TelemetrySystem_DestinationGroupPathAny {
	return &TelemetrySystem_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// DestinationGroupAny (list): List of destination-groups. Destination groups allow the
// reuse of common telemetry destinations across the
// telemetry configuration. An operator references a
// set of destinations via the configurable
// destination-group-identifier.
//
// A destination group may contain one or more telemetry
// destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/destination-groups/destination-group"
// GroupId (wildcarded): string
func (n *TelemetrySystemPathAny) DestinationGroupAny() *TelemetrySystem_DestinationGroupPathAny {
	return &TelemetrySystem_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// DestinationGroup (list): List of destination-groups. Destination groups allow the
// reuse of common telemetry destinations across the
// telemetry configuration. An operator references a
// set of destinations via the configurable
// destination-group-identifier.
//
// A destination group may contain one or more telemetry
// destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/destination-groups/destination-group"
// GroupId: string
func (n *TelemetrySystemPath) DestinationGroup(GroupId string) *TelemetrySystem_DestinationGroupPath {
	return &TelemetrySystem_DestinationGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// DestinationGroup (list): List of destination-groups. Destination groups allow the
// reuse of common telemetry destinations across the
// telemetry configuration. An operator references a
// set of destinations via the configurable
// destination-group-identifier.
//
// A destination group may contain one or more telemetry
// destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/destination-groups/destination-group"
// GroupId: string
func (n *TelemetrySystemPathAny) DestinationGroup(GroupId string) *TelemetrySystem_DestinationGroupPathAny {
	return &TelemetrySystem_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// SensorGroupAny (list): List of telemetry sensory groups on the local
// system, where a sensor grouping represents a resuable
// grouping of multiple paths and exclude filters.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-groups/sensor-group"
// Path from root: "/telemetry-system/sensor-groups/sensor-group"
// SensorGroupId (wildcarded): string
func (n *TelemetrySystemPath) SensorGroupAny() *TelemetrySystem_SensorGroupPathAny {
	return &TelemetrySystem_SensorGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-groups", "sensor-group"},
			map[string]interface{}{"sensor-group-id": "*"},
			n,
		),
	}
}

// SensorGroupAny (list): List of telemetry sensory groups on the local
// system, where a sensor grouping represents a resuable
// grouping of multiple paths and exclude filters.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-groups/sensor-group"
// Path from root: "/telemetry-system/sensor-groups/sensor-group"
// SensorGroupId (wildcarded): string
func (n *TelemetrySystemPathAny) SensorGroupAny() *TelemetrySystem_SensorGroupPathAny {
	return &TelemetrySystem_SensorGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-groups", "sensor-group"},
			map[string]interface{}{"sensor-group-id": "*"},
			n,
		),
	}
}

// SensorGroup (list): List of telemetry sensory groups on the local
// system, where a sensor grouping represents a resuable
// grouping of multiple paths and exclude filters.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-groups/sensor-group"
// Path from root: "/telemetry-system/sensor-groups/sensor-group"
// SensorGroupId: string
func (n *TelemetrySystemPath) SensorGroup(SensorGroupId string) *TelemetrySystem_SensorGroupPath {
	return &TelemetrySystem_SensorGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-groups", "sensor-group"},
			map[string]interface{}{"sensor-group-id": SensorGroupId},
			n,
		),
	}
}

// SensorGroup (list): List of telemetry sensory groups on the local
// system, where a sensor grouping represents a resuable
// grouping of multiple paths and exclude filters.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-groups/sensor-group"
// Path from root: "/telemetry-system/sensor-groups/sensor-group"
// SensorGroupId: string
func (n *TelemetrySystemPathAny) SensorGroup(SensorGroupId string) *TelemetrySystem_SensorGroupPathAny {
	return &TelemetrySystem_SensorGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-groups", "sensor-group"},
			map[string]interface{}{"sensor-group-id": SensorGroupId},
			n,
		),
	}
}

// Subscriptions (container): This container holds information for both persistent
// and dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "subscriptions"
// Path from root: "/telemetry-system/subscriptions"
func (n *TelemetrySystemPath) Subscriptions() *TelemetrySystem_SubscriptionsPath {
	return &TelemetrySystem_SubscriptionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"subscriptions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subscriptions (container): This container holds information for both persistent
// and dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "subscriptions"
// Path from root: "/telemetry-system/subscriptions"
func (n *TelemetrySystemPathAny) Subscriptions() *TelemetrySystem_SubscriptionsPathAny {
	return &TelemetrySystem_SubscriptionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subscriptions"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_DestinationGroupPath represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group YANG schema element.
type TelemetrySystem_DestinationGroupPath struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroupPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/destination-groups/destination-group YANG schema element.
type TelemetrySystem_DestinationGroupPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_GroupIdPath represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/config/group-id YANG schema element.
type TelemetrySystem_DestinationGroup_GroupIdPath struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_GroupIdPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/config/group-id YANG schema element.
type TelemetrySystem_DestinationGroup_GroupIdPathAny struct {
	*ygot.NodePath
}

// DestinationAny (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress (wildcarded): string
// DestinationPort (wildcarded): uint16
func (n *TelemetrySystem_DestinationGroupPath) DestinationAny() *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": "*", "destination-port": "*"},
			n,
		),
	}
}

// DestinationAny (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress (wildcarded): string
// DestinationPort (wildcarded): uint16
func (n *TelemetrySystem_DestinationGroupPathAny) DestinationAny() *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": "*", "destination-port": "*"},
			n,
		),
	}
}

// DestinationAnyDestinationPort (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress: string
// DestinationPort (wildcarded): uint16
func (n *TelemetrySystem_DestinationGroupPath) DestinationAnyDestinationPort(DestinationAddress string) *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": DestinationAddress, "destination-port": "*"},
			n,
		),
	}
}

// DestinationAnyDestinationPort (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress: string
// DestinationPort (wildcarded): uint16
func (n *TelemetrySystem_DestinationGroupPathAny) DestinationAnyDestinationPort(DestinationAddress string) *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": DestinationAddress, "destination-port": "*"},
			n,
		),
	}
}

// DestinationAnyDestinationAddress (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress (wildcarded): string
// DestinationPort: uint16
func (n *TelemetrySystem_DestinationGroupPath) DestinationAnyDestinationAddress(DestinationPort uint16) *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": "*", "destination-port": DestinationPort},
			n,
		),
	}
}

// DestinationAnyDestinationAddress (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress (wildcarded): string
// DestinationPort: uint16
func (n *TelemetrySystem_DestinationGroupPathAny) DestinationAnyDestinationAddress(DestinationPort uint16) *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": "*", "destination-port": DestinationPort},
			n,
		),
	}
}

// Destination (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress: string
// DestinationPort: uint16
func (n *TelemetrySystem_DestinationGroupPath) Destination(DestinationAddress string, DestinationPort uint16) *TelemetrySystem_DestinationGroup_DestinationPath {
	return &TelemetrySystem_DestinationGroup_DestinationPath{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": DestinationAddress, "destination-port": DestinationPort},
			n,
		),
	}
}

// Destination (list): List of telemetry stream destinations
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destinations/destination"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination"
// DestinationAddress: string
// DestinationPort: uint16
func (n *TelemetrySystem_DestinationGroupPathAny) Destination(DestinationAddress string, DestinationPort uint16) *TelemetrySystem_DestinationGroup_DestinationPathAny {
	return &TelemetrySystem_DestinationGroup_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destinations", "destination"},
			map[string]interface{}{"destination-address": DestinationAddress, "destination-port": DestinationPort},
			n,
		),
	}
}

// GroupId (leaf): Unique identifier for the destination group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/group-id"
// Path from root: "/telemetry-system/destination-groups/destination-group/config/group-id"
func (n *TelemetrySystem_DestinationGroupPath) GroupId() *TelemetrySystem_DestinationGroup_GroupIdPath {
	return &TelemetrySystem_DestinationGroup_GroupIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// GroupId (leaf): Unique identifier for the destination group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/group-id"
// Path from root: "/telemetry-system/destination-groups/destination-group/config/group-id"
func (n *TelemetrySystem_DestinationGroupPathAny) GroupId() *TelemetrySystem_DestinationGroup_GroupIdPathAny {
	return &TelemetrySystem_DestinationGroup_GroupIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_DestinationGroup_DestinationPath represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination YANG schema element.
type TelemetrySystem_DestinationGroup_DestinationPath struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_DestinationPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination YANG schema element.
type TelemetrySystem_DestinationGroup_DestinationPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_Destination_DestinationAddressPath represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address YANG schema element.
type TelemetrySystem_DestinationGroup_Destination_DestinationAddressPath struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_Destination_DestinationAddressPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address YANG schema element.
type TelemetrySystem_DestinationGroup_Destination_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_Destination_DestinationPortPath represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port YANG schema element.
type TelemetrySystem_DestinationGroup_Destination_DestinationPortPath struct {
	*ygot.NodePath
}

// TelemetrySystem_DestinationGroup_Destination_DestinationPortPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port YANG schema element.
type TelemetrySystem_DestinationGroup_Destination_DestinationPortPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): IP address of the telemetry stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/destination-address"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"
func (n *TelemetrySystem_DestinationGroup_DestinationPath) DestinationAddress() *TelemetrySystem_DestinationGroup_Destination_DestinationAddressPath {
	return &TelemetrySystem_DestinationGroup_Destination_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): IP address of the telemetry stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/destination-address"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-address"
func (n *TelemetrySystem_DestinationGroup_DestinationPathAny) DestinationAddress() *TelemetrySystem_DestinationGroup_Destination_DestinationAddressPathAny {
	return &TelemetrySystem_DestinationGroup_Destination_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Protocol (udp or tcp) port number for the telemetry
// stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/destination-port"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"
func (n *TelemetrySystem_DestinationGroup_DestinationPath) DestinationPort() *TelemetrySystem_DestinationGroup_Destination_DestinationPortPath {
	return &TelemetrySystem_DestinationGroup_Destination_DestinationPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Protocol (udp or tcp) port number for the telemetry
// stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/destination-port"
// Path from root: "/telemetry-system/destination-groups/destination-group/destinations/destination/config/destination-port"
func (n *TelemetrySystem_DestinationGroup_DestinationPathAny) DestinationPort() *TelemetrySystem_DestinationGroup_Destination_DestinationPortPathAny {
	return &TelemetrySystem_DestinationGroup_Destination_DestinationPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_SensorGroupPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group YANG schema element.
type TelemetrySystem_SensorGroupPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroupPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group YANG schema element.
type TelemetrySystem_SensorGroupPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorGroupIdPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id YANG schema element.
type TelemetrySystem_SensorGroup_SensorGroupIdPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorGroupIdPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id YANG schema element.
type TelemetrySystem_SensorGroup_SensorGroupIdPathAny struct {
	*ygot.NodePath
}

// SensorGroupId (leaf): Name or identifier for the sensor group itself.
// Will be referenced by other configuration specifying a
// sensor group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sensor-group-id"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"
func (n *TelemetrySystem_SensorGroupPath) SensorGroupId() *TelemetrySystem_SensorGroup_SensorGroupIdPath {
	return &TelemetrySystem_SensorGroup_SensorGroupIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sensor-group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorGroupId (leaf): Name or identifier for the sensor group itself.
// Will be referenced by other configuration specifying a
// sensor group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sensor-group-id"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/config/sensor-group-id"
func (n *TelemetrySystem_SensorGroupPathAny) SensorGroupId() *TelemetrySystem_SensorGroup_SensorGroupIdPathAny {
	return &TelemetrySystem_SensorGroup_SensorGroupIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sensor-group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorPathAny (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"
// Path (wildcarded): string
func (n *TelemetrySystem_SensorGroupPath) SensorPathAny() *TelemetrySystem_SensorGroup_SensorPathPathAny {
	return &TelemetrySystem_SensorGroup_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": "*"},
			n,
		),
	}
}

// SensorPathAny (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"
// Path (wildcarded): string
func (n *TelemetrySystem_SensorGroupPathAny) SensorPathAny() *TelemetrySystem_SensorGroup_SensorPathPathAny {
	return &TelemetrySystem_SensorGroup_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": "*"},
			n,
		),
	}
}

// SensorPath (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"
// Path: string
func (n *TelemetrySystem_SensorGroupPath) SensorPath(Path string) *TelemetrySystem_SensorGroup_SensorPathPath {
	return &TelemetrySystem_SensorGroup_SensorPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": Path},
			n,
		),
	}
}

// SensorPath (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path"
// Path: string
func (n *TelemetrySystem_SensorGroupPathAny) SensorPath(Path string) *TelemetrySystem_SensorGroup_SensorPathPathAny {
	return &TelemetrySystem_SensorGroup_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": Path},
			n,
		),
	}
}

// TelemetrySystem_SensorGroup_SensorPathPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPathPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorPathPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPathPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorPath_PathPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath_PathPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SensorGroup_SensorPath_PathPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath_PathPathAny struct {
	*ygot.NodePath
}

// ExcludeFilter (leaf): Filter to exclude certain values out of the state
// values
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/exclude-filter"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"
func (n *TelemetrySystem_SensorGroup_SensorPathPath) ExcludeFilter() *TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPath {
	return &TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeFilter (leaf): Filter to exclude certain values out of the state
// values
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/exclude-filter"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/exclude-filter"
func (n *TelemetrySystem_SensorGroup_SensorPathPathAny) ExcludeFilter() *TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPathAny {
	return &TelemetrySystem_SensorGroup_SensorPath_ExcludeFilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): Path to a section of operational state of interest
// (the sensor).
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"
func (n *TelemetrySystem_SensorGroup_SensorPathPath) Path() *TelemetrySystem_SensorGroup_SensorPath_PathPath {
	return &TelemetrySystem_SensorGroup_SensorPath_PathPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): Path to a section of operational state of interest
// (the sensor).
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/path"
// Path from root: "/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path/config/path"
func (n *TelemetrySystem_SensorGroup_SensorPathPathAny) Path() *TelemetrySystem_SensorGroup_SensorPath_PathPathAny {
	return &TelemetrySystem_SensorGroup_SensorPath_PathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_SubscriptionsPath represents the /openconfig-telemetry/telemetry-system/subscriptions YANG schema element.
type TelemetrySystem_SubscriptionsPath struct {
	*ygot.NodePath
}

// TelemetrySystem_SubscriptionsPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions YANG schema element.
type TelemetrySystem_SubscriptionsPathAny struct {
	*ygot.NodePath
}

// DynamicSubscriptionAny (list): List representation of telemetry subscriptions that
// are configured via an inline RPC, otherwise known
// as dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "dynamic-subscriptions/dynamic-subscription"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription"
// Id (wildcarded): uint64
func (n *TelemetrySystem_SubscriptionsPath) DynamicSubscriptionAny() *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-subscriptions", "dynamic-subscription"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// DynamicSubscriptionAny (list): List representation of telemetry subscriptions that
// are configured via an inline RPC, otherwise known
// as dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "dynamic-subscriptions/dynamic-subscription"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription"
// Id (wildcarded): uint64
func (n *TelemetrySystem_SubscriptionsPathAny) DynamicSubscriptionAny() *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-subscriptions", "dynamic-subscription"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// DynamicSubscription (list): List representation of telemetry subscriptions that
// are configured via an inline RPC, otherwise known
// as dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "dynamic-subscriptions/dynamic-subscription"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription"
// Id: uint64
func (n *TelemetrySystem_SubscriptionsPath) DynamicSubscription(Id uint64) *TelemetrySystem_Subscriptions_DynamicSubscriptionPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-subscriptions", "dynamic-subscription"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// DynamicSubscription (list): List representation of telemetry subscriptions that
// are configured via an inline RPC, otherwise known
// as dynamic telemetry subscriptions.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "dynamic-subscriptions/dynamic-subscription"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription"
// Id: uint64
func (n *TelemetrySystem_SubscriptionsPathAny) DynamicSubscription(Id uint64) *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"dynamic-subscriptions", "dynamic-subscription"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// PersistentSubscriptionAny (list): List of telemetry subscriptions. A telemetry
// subscription consists of a set of collection
// destinations, stream attributes, and associated paths to
// state information in the model (sensor data)
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "persistent-subscriptions/persistent-subscription"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription"
// Name (wildcarded): string
func (n *TelemetrySystem_SubscriptionsPath) PersistentSubscriptionAny() *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"persistent-subscriptions", "persistent-subscription"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PersistentSubscriptionAny (list): List of telemetry subscriptions. A telemetry
// subscription consists of a set of collection
// destinations, stream attributes, and associated paths to
// state information in the model (sensor data)
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "persistent-subscriptions/persistent-subscription"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription"
// Name (wildcarded): string
func (n *TelemetrySystem_SubscriptionsPathAny) PersistentSubscriptionAny() *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"persistent-subscriptions", "persistent-subscription"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PersistentSubscription (list): List of telemetry subscriptions. A telemetry
// subscription consists of a set of collection
// destinations, stream attributes, and associated paths to
// state information in the model (sensor data)
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "persistent-subscriptions/persistent-subscription"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription"
// Name: string
func (n *TelemetrySystem_SubscriptionsPath) PersistentSubscription(Name string) *TelemetrySystem_Subscriptions_PersistentSubscriptionPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"persistent-subscriptions", "persistent-subscription"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// PersistentSubscription (list): List of telemetry subscriptions. A telemetry
// subscription consists of a set of collection
// destinations, stream attributes, and associated paths to
// state information in the model (sensor data)
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "persistent-subscriptions/persistent-subscription"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription"
// Name: string
func (n *TelemetrySystem_SubscriptionsPathAny) PersistentSubscription(Name string) *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"persistent-subscriptions", "persistent-subscription"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TelemetrySystem_Subscriptions_DynamicSubscriptionPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscriptionPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-address YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-address YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-port YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-port YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/heartbeat-interval YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/heartbeat-interval YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_IdPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/id YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_IdPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_IdPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/id YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_IdPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/originated-qos-marking YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/originated-qos-marking YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/sample-interval YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/sample-interval YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/suppress-redundant YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/suppress-redundant YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): IP address of the telemetry stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/destination-address"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-address"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) DestinationAddress() *TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): IP address of the telemetry stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/destination-address"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-address"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) DestinationAddress() *TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Protocol (udp or tcp) port number for the telemetry
// stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/destination-port"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-port"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) DestinationPort() *TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Protocol (udp or tcp) port number for the telemetry
// stream destination
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/destination-port"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/destination-port"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) DestinationPort() *TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_DestinationPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encoding (leaf): Selection of the specific encoding or RPC framework
// for telemetry messages to and from the network element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/encoding"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) Encoding() *TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encoding (leaf): Selection of the specific encoding or RPC framework
// for telemetry messages to and from the network element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/encoding"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) Encoding() *TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_EncodingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// HeartbeatInterval (leaf): Maximum time interval in seconds that may pass
// between updates from a device to a telemetry collector.
// If this interval expires, but there is no updated data to
// send (such as if suppress_updates has been configured), the
// device must send a telemetry message to the collector.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/heartbeat-interval"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/heartbeat-interval"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) HeartbeatInterval() *TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "heartbeat-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HeartbeatInterval (leaf): Maximum time interval in seconds that may pass
// between updates from a device to a telemetry collector.
// If this interval expires, but there is no updated data to
// send (such as if suppress_updates has been configured), the
// device must send a telemetry message to the collector.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/heartbeat-interval"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/heartbeat-interval"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) HeartbeatInterval() *TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_HeartbeatIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "heartbeat-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifer of the telemetry
// subscription.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/id"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/id"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) Id() *TelemetrySystem_Subscriptions_DynamicSubscription_IdPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifer of the telemetry
// subscription.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/id"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/id"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) Id() *TelemetrySystem_Subscriptions_DynamicSubscription_IdPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatedQosMarking (leaf): DSCP marking of packets generated by the telemetry
// subsystem on the network device.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/originated-qos-marking"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/originated-qos-marking"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) OriginatedQosMarking() *TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originated-qos-marking"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatedQosMarking (leaf): DSCP marking of packets generated by the telemetry
// subsystem on the network device.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/originated-qos-marking"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/originated-qos-marking"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) OriginatedQosMarking() *TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_OriginatedQosMarkingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originated-qos-marking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Selection of the transport protocol for the telemetry
// stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/protocol"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) Protocol() *TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Selection of the transport protocol for the telemetry
// stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/protocol"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) Protocol() *TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleInterval (leaf): Time in milliseconds between the device's sample of a
// telemetry data source. For example, setting this to 100
// would require the local device to collect the telemetry
// data every 100 milliseconds. There can be latency or jitter
// in transmitting the data, but the sample must occur at
// the specified interval.
//
// The timestamp must reflect the actual time when the data
// was sampled, not simply the previous sample timestamp +
// sample-interval.
//
// If sample-interval is set to 0, the telemetry sensor
// becomes event based. The sensor must then emit data upon
// every change of the underlying data source.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/sample-interval"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/sample-interval"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) SampleInterval() *TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sample-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleInterval (leaf): Time in milliseconds between the device's sample of a
// telemetry data source. For example, setting this to 100
// would require the local device to collect the telemetry
// data every 100 milliseconds. There can be latency or jitter
// in transmitting the data, but the sample must occur at
// the specified interval.
//
// The timestamp must reflect the actual time when the data
// was sampled, not simply the previous sample timestamp +
// sample-interval.
//
// If sample-interval is set to 0, the telemetry sensor
// becomes event based. The sensor must then emit data upon
// every change of the underlying data source.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/sample-interval"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/sample-interval"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) SampleInterval() *TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SampleIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sample-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorPathAny (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path"
// Path (wildcarded): string
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) SensorPathAny() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": "*"},
			n,
		),
	}
}

// SensorPathAny (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path"
// Path (wildcarded): string
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) SensorPathAny() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": "*"},
			n,
		),
	}
}

// SensorPath (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path"
// Path: string
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) SensorPath(Path string) *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": Path},
			n,
		),
	}
}

// SensorPath (list): List of paths in the model which together
// comprise a sensor grouping. Filters for each path
// to exclude items are also provided.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-paths/sensor-path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path"
// Path: string
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) SensorPath(Path string) *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-paths", "sensor-path"},
			map[string]interface{}{"path": Path},
			n,
		),
	}
}

// SuppressRedundant (leaf): Boolean flag to control suppression of redundant
// telemetry updates to the collector platform. If this flag is
// set to TRUE, then the collector will only send an update at
// the configured interval if a subscribed data value has
// changed. Otherwise, the device will not send an update to
// the collector until expiration of the heartbeat interval.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/suppress-redundant"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/suppress-redundant"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPath) SuppressRedundant() *TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress-redundant"},
			map[string]interface{}{},
			n,
		),
	}
}

// SuppressRedundant (leaf): Boolean flag to control suppression of redundant
// telemetry updates to the collector platform. If this flag is
// set to TRUE, then the collector will only send an update at
// the configured interval if a subscribed data value has
// changed. Otherwise, the device will not send an update to
// the collector until expiration of the heartbeat interval.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/suppress-redundant"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/suppress-redundant"
func (n *TelemetrySystem_Subscriptions_DynamicSubscriptionPathAny) SuppressRedundant() *TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SuppressRedundantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "suppress-redundant"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/exclude-filter YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/exclude-filter YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPathAny struct {
	*ygot.NodePath
}

// ExcludeFilter (leaf): Filter to exclude certain values out of the state
// values
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/exclude-filter"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/exclude-filter"
func (n *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath) ExcludeFilter() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeFilter (leaf): Filter to exclude certain values out of the state
// values
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/exclude-filter"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/exclude-filter"
func (n *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny) ExcludeFilter() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_ExcludeFilterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "exclude-filter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): Path to a section of operational state of interest
// (the sensor).
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/path"
func (n *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPath) Path() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPath {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// Path (leaf): Path to a section of operational state of interest
// (the sensor).
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/path"
// Path from root: "/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path/state/path"
func (n *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPathPathAny) Path() *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPathAny {
	return &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath_PathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "path"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_Subscriptions_PersistentSubscriptionPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscriptionPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/encoding YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/encoding YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_IdPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/id YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_IdPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_IdPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/id YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_IdPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/local-source-address YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/local-source-address YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_NamePath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/name YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_NamePath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_NamePathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/name YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_NamePathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/originated-qos-marking YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/originated-qos-marking YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/protocol YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/protocol YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPathAny struct {
	*ygot.NodePath
}

// DestinationGroupAny (list): Identifier of the previously defined destination
// group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group"
// GroupId (wildcarded): string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) DestinationGroupAny() *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// DestinationGroupAny (list): Identifier of the previously defined destination
// group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group"
// GroupId (wildcarded): string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) DestinationGroupAny() *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
}

// DestinationGroup (list): Identifier of the previously defined destination
// group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group"
// GroupId: string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) DestinationGroup(GroupId string) *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// DestinationGroup (list): Identifier of the previously defined destination
// group
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "destination-groups/destination-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group"
// GroupId: string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) DestinationGroup(GroupId string) *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"destination-groups", "destination-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
}

// Encoding (leaf): Selection of the specific encoding or RPC framework
// for telemetry messages to and from the network element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/encoding"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/encoding"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) Encoding() *TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encoding (leaf): Selection of the specific encoding or RPC framework
// for telemetry messages to and from the network element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/encoding"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/encoding"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) Encoding() *TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_EncodingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encoding"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifer of the telemetry
// subscription.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/id"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/id"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) Id() *TelemetrySystem_Subscriptions_PersistentSubscription_IdPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifer of the telemetry
// subscription.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "state/id"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/state/id"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) Id() *TelemetrySystem_Subscriptions_PersistentSubscription_IdPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalSourceAddress (leaf): The IP address which will be the source of packets from
// the device to a telemetry collector destination.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/local-source-address"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/local-source-address"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) LocalSourceAddress() *TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalSourceAddress (leaf): The IP address which will be the source of packets from
// the device to a telemetry collector destination.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/local-source-address"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/local-source-address"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) LocalSourceAddress() *TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_LocalSourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User configured identifier of the telemetry
// subscription. This value is used primarily for
// subscriptions configured locally on the network
// element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/name"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/name"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) Name() *TelemetrySystem_Subscriptions_PersistentSubscription_NamePath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User configured identifier of the telemetry
// subscription. This value is used primarily for
// subscriptions configured locally on the network
// element.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/name"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/name"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) Name() *TelemetrySystem_Subscriptions_PersistentSubscription_NamePathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatedQosMarking (leaf): DSCP marking of packets generated by the telemetry
// subsystem on the network device.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/originated-qos-marking"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/originated-qos-marking"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) OriginatedQosMarking() *TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "originated-qos-marking"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatedQosMarking (leaf): DSCP marking of packets generated by the telemetry
// subsystem on the network device.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/originated-qos-marking"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/originated-qos-marking"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) OriginatedQosMarking() *TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_OriginatedQosMarkingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "originated-qos-marking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Selection of the transport protocol for the telemetry
// stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/protocol"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/protocol"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) Protocol() *TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Selection of the transport protocol for the telemetry
// stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/protocol"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/config/protocol"
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) Protocol() *TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorProfileAny (list): List of telemetry sensor groups used
// in the subscription
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-profiles/sensor-profile"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile"
// SensorGroup (wildcarded): string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) SensorProfileAny() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-profiles", "sensor-profile"},
			map[string]interface{}{"sensor-group": "*"},
			n,
		),
	}
}

// SensorProfileAny (list): List of telemetry sensor groups used
// in the subscription
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-profiles/sensor-profile"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile"
// SensorGroup (wildcarded): string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) SensorProfileAny() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-profiles", "sensor-profile"},
			map[string]interface{}{"sensor-group": "*"},
			n,
		),
	}
}

// SensorProfile (list): List of telemetry sensor groups used
// in the subscription
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-profiles/sensor-profile"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile"
// SensorGroup: string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPath) SensorProfile(SensorGroup string) *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-profiles", "sensor-profile"},
			map[string]interface{}{"sensor-group": SensorGroup},
			n,
		),
	}
}

// SensorProfile (list): List of telemetry sensor groups used
// in the subscription
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "sensor-profiles/sensor-profile"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile"
// SensorGroup: string
func (n *TelemetrySystem_Subscriptions_PersistentSubscriptionPathAny) SensorProfile(SensorGroup string) *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sensor-profiles", "sensor-profile"},
			map[string]interface{}{"sensor-group": SensorGroup},
			n,
		),
	}
}

// TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/config/group-id YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/config/group-id YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPathAny struct {
	*ygot.NodePath
}

// GroupId (leaf): The destination group id references a reusable
// group of destination addresses and ports for
// the telemetry stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/group-id"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/config/group-id"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPath) GroupId() *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// GroupId (leaf): The destination group id references a reusable
// group of destination addresses and ports for
// the telemetry stream.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/group-id"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/destination-groups/destination-group/config/group-id"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroupPathAny) GroupId() *TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_DestinationGroup_GroupIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "group-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/heartbeat-interval YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/heartbeat-interval YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sample-interval YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sample-interval YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sensor-group YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sensor-group YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPathAny struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPath represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/suppress-redundant YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPath struct {
	*ygot.NodePath
}

// TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPathAny represents the wildcard version of the /openconfig-telemetry/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/suppress-redundant YANG schema element.
type TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPathAny struct {
	*ygot.NodePath
}

// HeartbeatInterval (leaf): Maximum time interval in seconds that may pass
// between updates from a device to a telemetry collector.
// If this interval expires, but there is no updated data to
// send (such as if suppress_updates has been configured), the
// device must send a telemetry message to the collector.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/heartbeat-interval"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath) HeartbeatInterval() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "heartbeat-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HeartbeatInterval (leaf): Maximum time interval in seconds that may pass
// between updates from a device to a telemetry collector.
// If this interval expires, but there is no updated data to
// send (such as if suppress_updates has been configured), the
// device must send a telemetry message to the collector.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/heartbeat-interval"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/heartbeat-interval"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny) HeartbeatInterval() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_HeartbeatIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "heartbeat-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleInterval (leaf): Time in milliseconds between the device's sample of a
// telemetry data source. For example, setting this to 100
// would require the local device to collect the telemetry
// data every 100 milliseconds. There can be latency or jitter
// in transmitting the data, but the sample must occur at
// the specified interval.
//
// The timestamp must reflect the actual time when the data
// was sampled, not simply the previous sample timestamp +
// sample-interval.
//
// If sample-interval is set to 0, the telemetry sensor
// becomes event based. The sensor must then emit data upon
// every change of the underlying data source.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sample-interval"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sample-interval"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath) SampleInterval() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sample-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SampleInterval (leaf): Time in milliseconds between the device's sample of a
// telemetry data source. For example, setting this to 100
// would require the local device to collect the telemetry
// data every 100 milliseconds. There can be latency or jitter
// in transmitting the data, but the sample must occur at
// the specified interval.
//
// The timestamp must reflect the actual time when the data
// was sampled, not simply the previous sample timestamp +
// sample-interval.
//
// If sample-interval is set to 0, the telemetry sensor
// becomes event based. The sensor must then emit data upon
// every change of the underlying data source.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sample-interval"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sample-interval"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny) SampleInterval() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SampleIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sample-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorGroup (leaf): Reference to the sensor group which is used in the profile
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sensor-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sensor-group"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath) SensorGroup() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sensor-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// SensorGroup (leaf): Reference to the sensor group which is used in the profile
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/sensor-group"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/sensor-group"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny) SensorGroup() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SensorGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sensor-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// SuppressRedundant (leaf): Boolean flag to control suppression of redundant
// telemetry updates to the collector platform. If this flag is
// set to TRUE, then the collector will only send an update at
// the configured interval if a subscribed data value has
// changed. Otherwise, the device will not send an update to
// the collector until expiration of the heartbeat interval.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/suppress-redundant"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/suppress-redundant"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePath) SuppressRedundant() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPath {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress-redundant"},
			map[string]interface{}{},
			n,
		),
	}
}

// SuppressRedundant (leaf): Boolean flag to control suppression of redundant
// telemetry updates to the collector platform. If this flag is
// set to TRUE, then the collector will only send an update at
// the configured interval if a subscribed data value has
// changed. Otherwise, the device will not send an update to
// the collector until expiration of the heartbeat interval.
// ----------------------------------------
// Defining module: "openconfig-telemetry"
// Instantiating module: "openconfig-telemetry"
// Path from parent: "config/suppress-redundant"
// Path from root: "/telemetry-system/subscriptions/persistent-subscriptions/persistent-subscription/sensor-profiles/sensor-profile/config/suppress-redundant"
func (n *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfilePathAny) SuppressRedundant() *TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPathAny {
	return &TelemetrySystem_Subscriptions_PersistentSubscription_SensorProfile_SuppressRedundantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress-redundant"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevicePath represents the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePath struct {
	*ygot.NodePath
}

// TerminalDevicePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device YANG schema element.
type TerminalDevicePathAny struct {
	*ygot.NodePath
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePath) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ChannelAny (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index (wildcarded): uint32
func (n *TerminalDevicePathAny) ChannelAny() *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePath) Channel(Index uint32) *TerminalDevice_ChannelPath {
	return &TerminalDevice_ChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Channel (list): List of logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channels/channel"
// Path from root: "/terminal-device/logical-channels/channel"
// Index: uint32
func (n *TerminalDevicePathAny) Channel(Index uint32) *TerminalDevice_ChannelPathAny {
	return &TerminalDevice_ChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId (wildcarded): uint16
func (n *TerminalDevicePath) ModeAny() *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
}

// ModeAny (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId (wildcarded): uint16
func (n *TerminalDevicePathAny) ModeAny() *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": "*"},
			n,
		),
	}
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId: uint16
func (n *TerminalDevicePath) Mode(ModeId uint16) *TerminalDevice_ModePath {
	return &TerminalDevice_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
}

// Mode (list): List of operational modes supported by the platform.
// The operational mode provides a platform-defined summary
// of information such as symbol rate, modulation, pulse
// shaping, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "operational-modes/mode"
// Path from root: "/terminal-device/operational-modes/mode"
// ModeId: uint16
func (n *TerminalDevicePathAny) Mode(ModeId uint16) *TerminalDevice_ModePathAny {
	return &TerminalDevice_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"operational-modes", "mode"},
			map[string]interface{}{"mode-id": ModeId},
			n,
		),
	}
}

// TerminalDevice_ChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_ChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type TerminalDevice_ChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AdminStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/admin-state YANG schema element.
type TerminalDevice_Channel_AdminStatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_ClientMappingModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/client-mapping-mode YANG schema element.
type TerminalDevice_Channel_ClientMappingModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/description YANG schema element.
type TerminalDevice_Channel_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/description YANG schema element.
type TerminalDevice_Channel_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/index YANG schema element.
type TerminalDevice_Channel_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/index YANG schema element.
type TerminalDevice_Channel_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LinkStatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LinkStatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/state/link-state YANG schema element.
type TerminalDevice_Channel_LinkStatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LogicalChannelTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/logical-channel-type YANG schema element.
type TerminalDevice_Channel_LogicalChannelTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_LoopbackModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/loopback-mode YANG schema element.
type TerminalDevice_Channel_LoopbackModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_RateClassPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/rate-class YANG schema element.
type TerminalDevice_Channel_RateClassPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TestSignalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/test-signal YANG schema element.
type TerminalDevice_Channel_TestSignalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_TribProtocolPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/config/trib-protocol YANG schema element.
type TerminalDevice_Channel_TribProtocolPathAny struct {
	*ygot.NodePath
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_ChannelPath) AdminState() *TerminalDevice_Channel_AdminStatePath {
	return &TerminalDevice_Channel_AdminStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminState (leaf): Sets the admin state of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/admin-state"
// Path from root: "/terminal-device/logical-channels/channel/config/admin-state"
func (n *TerminalDevice_ChannelPathAny) AdminState() *TerminalDevice_Channel_AdminStatePathAny {
	return &TerminalDevice_Channel_AdminStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPath) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// AssignmentAny (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index (wildcarded): uint32
func (n *TerminalDevice_ChannelPathAny) AssignmentAny() *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPath) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPath {
	return &TerminalDevice_Channel_AssignmentPath{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Assignment (list): Logical channel elements may be assigned directly to
// optical channels for line-side transmission, or can be
// further groomed into additional stages of logical channel
// elements.  The grooming can multiplex (i.e., split the
// current element into multiple elements in the subsequent
// stage) or de-multiplex (i.e., combine the current element
// with other elements into the same element in the subsequent
// stage) logical elements in each stage.
//
// Note that to support the ability to groom the logical
// elements, the list of logical channel elements should be
// populated with an entry for the logical elements at
// each stage, starting with the initial assignment from the
// respective client physical port.
//
// Each logical element assignment consists of a pointer to
// an element in the next stage, or to an optical channel,
// along with a bandwidth allocation for the corresponding
// assignment (e.g., to split or combine signal).
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "logical-channel-assignments/assignment"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment"
// Index: uint32
func (n *TerminalDevice_ChannelPathAny) Assignment(Index uint32) *TerminalDevice_Channel_AssignmentPathAny {
	return &TerminalDevice_Channel_AssignmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"logical-channel-assignments", "assignment"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_ChannelPath) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePath {
	return &TerminalDevice_Channel_ClientMappingModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientMappingMode (leaf): The client side mapping mode internal to the device that
// specifies the number of client electrical interfaces and
// the data rate of each client electrical interface. For
// example, a ZR+ transceiver with an optical line rate of 400G
// could be configured to break out into four 100G client
// signals which might connect to an interface or a
// physical-channel. This would be configured on the aggregate
// logical channel as MODE_4X100G. This is only valid on the
// aggregate logical channel that is connected directly to the
// optical-channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-mapping-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/client-mapping-mode"
func (n *TerminalDevice_ChannelPathAny) ClientMappingMode() *TerminalDevice_Channel_ClientMappingModePathAny {
	return &TerminalDevice_Channel_ClientMappingModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-mapping-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_ChannelPath) Description() *TerminalDevice_Channel_DescriptionPath {
	return &TerminalDevice_Channel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description of the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/config/description"
func (n *TerminalDevice_ChannelPathAny) Description() *TerminalDevice_Channel_DescriptionPathAny {
	return &TerminalDevice_Channel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPath) Ethernet() *TerminalDevice_Channel_EthernetPath {
	return &TerminalDevice_Channel_EthernetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top level container for data related to Ethernet framing
// for the logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ethernet"
// Path from root: "/terminal-device/logical-channels/channel/ethernet"
func (n *TerminalDevice_ChannelPathAny) Ethernet() *TerminalDevice_Channel_EthernetPathAny {
	return &TerminalDevice_Channel_EthernetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_ChannelPath) Index() *TerminalDevice_Channel_IndexPath {
	return &TerminalDevice_Channel_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/config/index"
func (n *TerminalDevice_ChannelPathAny) Index() *TerminalDevice_Channel_IndexPathAny {
	return &TerminalDevice_Channel_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPath) Ingress() *TerminalDevice_Channel_IngressPath {
	return &TerminalDevice_Channel_IngressPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Top-level container for specifying references to the
// source of signal for the logical channel, either a
// transceiver, individual physical channels, or an interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "ingress"
// Path from root: "/terminal-device/logical-channels/channel/ingress"
func (n *TerminalDevice_ChannelPathAny) Ingress() *TerminalDevice_Channel_IngressPathAny {
	return &TerminalDevice_Channel_IngressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/link-state"
// Path from root: "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPath) LinkState() *TerminalDevice_Channel_LinkStatePath {
	return &TerminalDevice_Channel_LinkStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkState (leaf): Link-state of the Ethernet protocol on the logical channel,
// SONET / SDH framed signal, etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/link-state"
// Path from root: "/terminal-device/logical-channels/channel/state/link-state"
func (n *TerminalDevice_ChannelPathAny) LinkState() *TerminalDevice_Channel_LinkStatePathAny {
	return &TerminalDevice_Channel_LinkStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "link-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_ChannelPath) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePath {
	return &TerminalDevice_Channel_LogicalChannelTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannelType (leaf): The type / stage of the logical element determines the
// configuration and operational state parameters (PMs)
// available for the logical element
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel-type"
// Path from root: "/terminal-device/logical-channels/channel/config/logical-channel-type"
func (n *TerminalDevice_ChannelPathAny) LogicalChannelType() *TerminalDevice_Channel_LogicalChannelTypePathAny {
	return &TerminalDevice_Channel_LogicalChannelTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_ChannelPath) LoopbackMode() *TerminalDevice_Channel_LoopbackModePath {
	return &TerminalDevice_Channel_LoopbackModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): Sets the loopback type on the logical channel. Setting the
// mode to something besides NONE activates the loopback in
// the specified mode.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/loopback-mode"
// Path from root: "/terminal-device/logical-channels/channel/config/loopback-mode"
func (n *TerminalDevice_ChannelPathAny) LoopbackMode() *TerminalDevice_Channel_LoopbackModePathAny {
	return &TerminalDevice_Channel_LoopbackModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPath) Otn() *TerminalDevice_Channel_OtnPath {
	return &TerminalDevice_Channel_OtnPath{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Otn (container): Top level container for OTU configuration when logical
// channel framing is using an OTU protocol, e.g., OTU1, OTU3,
// etc.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "otn"
// Path from root: "/terminal-device/logical-channels/channel/otn"
func (n *TerminalDevice_ChannelPathAny) Otn() *TerminalDevice_Channel_OtnPathAny {
	return &TerminalDevice_Channel_OtnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"otn"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_ChannelPath) RateClass() *TerminalDevice_Channel_RateClassPath {
	return &TerminalDevice_Channel_RateClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// RateClass (leaf): Rounded bit rate of the tributary signal. Exact bit rate
// will be refined by protocol selection.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/rate-class"
// Path from root: "/terminal-device/logical-channels/channel/config/rate-class"
func (n *TerminalDevice_ChannelPathAny) RateClass() *TerminalDevice_Channel_RateClassPathAny {
	return &TerminalDevice_Channel_RateClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "rate-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_ChannelPath) TestSignal() *TerminalDevice_Channel_TestSignalPath {
	return &TerminalDevice_Channel_TestSignalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestSignal (leaf): When enabled the logical channel's DSP will generate a pseudo
// randmon bit stream (PRBS) which can be used during testing.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/test-signal"
// Path from root: "/terminal-device/logical-channels/channel/config/test-signal"
func (n *TerminalDevice_ChannelPathAny) TestSignal() *TerminalDevice_Channel_TestSignalPathAny {
	return &TerminalDevice_Channel_TestSignalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-signal"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_ChannelPath) TribProtocol() *TerminalDevice_Channel_TribProtocolPath {
	return &TerminalDevice_Channel_TribProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TribProtocol (leaf): Protocol framing of the tributary signal. If this
// LogicalChannel is directly connected to a Client-Port or
// Optical-Channel, this is the protocol of the associated port.
// If the LogicalChannel is connected to other LogicalChannels,
// the TributaryProtocol of the LogicalChannels will define a
// specific mapping/demapping or multiplexing/demultiplexing
// function.
//
// Not all protocols are valid, depending on the value
// of trib-rate-class.  The expectation is that the NMS
// will validate that a correct combination of rate class
// and protocol are specfied.  Basic combinations are:
//
// rate class: 1G
// protocols: 1GE
//
// rate class: 2.5G
// protocols: OC48, STM16
//
// rate class: 10G
// protocols:  10GE LAN, 10GE WAN, OC192, STM64, OTU2, OTU2e,
//
//	OTU1e, ODU2, ODU2e, ODU1e
//
// rate class: 40G
// protocols:  40GE, OC768, STM256, OTU3, ODU3
//
// rate class: 100G
// protocols:  100GE, 100G MLG, OTU4, OTUCn, ODU4
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/trib-protocol"
// Path from root: "/terminal-device/logical-channels/channel/config/trib-protocol"
func (n *TerminalDevice_ChannelPathAny) TribProtocol() *TerminalDevice_Channel_TribProtocolPathAny {
	return &TerminalDevice_Channel_TribProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trib-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_AssignmentPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_AssignmentPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type TerminalDevice_Channel_AssignmentPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AllocationPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation YANG schema element.
type TerminalDevice_Channel_Assignment_AllocationPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_AssignmentTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type YANG schema element.
type TerminalDevice_Channel_Assignment_AssignmentTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description YANG schema element.
type TerminalDevice_Channel_Assignment_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_IndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index YANG schema element.
type TerminalDevice_Channel_Assignment_IndexPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_LogicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_LogicalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_MappingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping YANG schema element.
type TerminalDevice_Channel_Assignment_MappingPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_OpticalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel YANG schema element.
type TerminalDevice_Channel_Assignment_OpticalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index YANG schema element.
type TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny struct {
	*ygot.NodePath
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_AssignmentPath) Allocation() *TerminalDevice_Channel_Assignment_AllocationPath {
	return &TerminalDevice_Channel_Assignment_AllocationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Allocation (leaf): Allocation of the logical client channel to the tributary
// or sub-channel, expressed in Gbps. Please note that if the
// assignment is to an OTN logical channel, the allocation must
// be an integer multiplication to tributary-slot-granularity
// of the OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/allocation"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/allocation"
func (n *TerminalDevice_Channel_AssignmentPathAny) Allocation() *TerminalDevice_Channel_Assignment_AllocationPathAny {
	return &TerminalDevice_Channel_Assignment_AllocationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "allocation"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPath) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePath {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssignmentType (leaf): Each logical channel element may be assigned to subsequent
// stages of logical elements to implement further grooming, or
// can be assigned to a line-side optical channel for
// transmission.  Each assignment also has an associated
// bandwidth allocation.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/assignment-type"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type"
func (n *TerminalDevice_Channel_AssignmentPathAny) AssignmentType() *TerminalDevice_Channel_Assignment_AssignmentTypePathAny {
	return &TerminalDevice_Channel_Assignment_AssignmentTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "assignment-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_AssignmentPath) Description() *TerminalDevice_Channel_Assignment_DescriptionPath {
	return &TerminalDevice_Channel_Assignment_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Name assigned to the logical client channel
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/description"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/description"
func (n *TerminalDevice_Channel_AssignmentPathAny) Description() *TerminalDevice_Channel_Assignment_DescriptionPathAny {
	return &TerminalDevice_Channel_Assignment_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_AssignmentPath) Index() *TerminalDevice_Channel_Assignment_IndexPath {
	return &TerminalDevice_Channel_Assignment_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of the current logical client channel to tributary
// mapping
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/index"
func (n *TerminalDevice_Channel_AssignmentPathAny) Index() *TerminalDevice_Channel_Assignment_IndexPathAny {
	return &TerminalDevice_Channel_Assignment_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPath {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogicalChannel (leaf): Reference to another stage of logical channel elements.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/logical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/logical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) LogicalChannel() *TerminalDevice_Channel_Assignment_LogicalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_LogicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "logical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_AssignmentPath) Mapping() *TerminalDevice_Channel_Assignment_MappingPath {
	return &TerminalDevice_Channel_Assignment_MappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mapping (leaf): Logical channel mapping procedure. Valid only when the
// assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/mapping"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping"
func (n *TerminalDevice_Channel_AssignmentPathAny) Mapping() *TerminalDevice_Channel_Assignment_MappingPathAny {
	return &TerminalDevice_Channel_Assignment_MappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPath) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPath {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalChannel (leaf): Reference to the line-side optical channel that should
// carry the current logical channel element.  Use this
// reference to exit the logical element stage.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/optical-channel"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/optical-channel"
func (n *TerminalDevice_Channel_AssignmentPathAny) OpticalChannel() *TerminalDevice_Channel_Assignment_OpticalChannelPathAny {
	return &TerminalDevice_Channel_Assignment_OpticalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "optical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPath) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPath {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotIndex (leaf): Indicates the first tributary slot index allocated to the
// client signal or logical channel in the assignment. Valid
// only when the assignment is to an OTN logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-index"
// Path from root: "/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/tributary-slot-index"
func (n *TerminalDevice_Channel_AssignmentPathAny) TributarySlotIndex() *TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny {
	return &TerminalDevice_Channel_Assignment_TributarySlotIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_EthernetPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_EthernetPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type TerminalDevice_Channel_EthernetPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_AlsDelayPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/als-delay YANG schema element.
type TerminalDevice_Channel_Ethernet_AlsDelayPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_ClientAlsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config/client-als YANG schema element.
type TerminalDevice_Channel_Ethernet_ClientAlsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InJabberFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InJabberFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InLateCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-late-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InLateCollisionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded YANG schema element.
type TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-single-collision YANG schema element.
type TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error YANG schema element.
type TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-block-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames YANG schema element.
type TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors YANG schema element.
type TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny struct {
	*ygot.NodePath
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_EthernetPath) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPath {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlsDelay (leaf): The timer to delay the client-als actions on the client
// port when a local or remote fault is detected on the line
// port. The delay will only be valid when the client-als is
// set to LASER_SHUTDOWN
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/als-delay"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/als-delay"
func (n *TerminalDevice_Channel_EthernetPathAny) AlsDelay() *TerminalDevice_Channel_Ethernet_AlsDelayPathAny {
	return &TerminalDevice_Channel_Ethernet_AlsDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "als-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_EthernetPath) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPath {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// ClientAls (leaf): Sets the client port behavior that defines if the actions
// of automatic laser shutdown (als), ethernet fault
// propagation, or nothing will be done upon the detection
// of a failure on the line port or the upstream remote
// client port.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/client-als"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/config/client-als"
func (n *TerminalDevice_Channel_EthernetPathAny) ClientAls() *TerminalDevice_Channel_Ethernet_ClientAlsPathAny {
	return &TerminalDevice_Channel_Ethernet_ClientAlsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "client-als"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPath) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPath {
	return &TerminalDevice_Channel_Ethernet_EsnrPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr"
func (n *TerminalDevice_Channel_EthernetPathAny) Esnr() *TerminalDevice_Channel_Ethernet_EsnrPathAny {
	return &TerminalDevice_Channel_Ethernet_EsnrPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPath) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath {
	return &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_EthernetPathAny) FecUncorrectableBlocks() *TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny {
	return &TerminalDevice_Channel_Ethernet_FecUncorrectableBlocksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPath {
	return &TerminalDevice_Channel_Ethernet_In_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) In_8021QFrames() *TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_In_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InBlockErrors() *TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-carrier-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InCarrierErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-carrier-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-carrier-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCarrierErrors() *TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InCarrierErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InCrcErrors() *TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-fragment-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPath) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPath {
	return &TerminalDevice_Channel_Ethernet_InFragmentFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-fragment-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-fragment-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InFragmentFrames() *TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InFragmentFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-interrupted-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPath) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPath {
	return &TerminalDevice_Channel_Ethernet_InInterruptedTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-interrupted-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-interrupted-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) InInterruptedTx() *TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny {
	return &TerminalDevice_Channel_Ethernet_InInterruptedTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-jabber-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPath) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPath {
	return &TerminalDevice_Channel_Ethernet_InJabberFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-jabber-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-jabber-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InJabberFrames() *TerminalDevice_Channel_Ethernet_InJabberFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InJabberFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-late-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPath) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPath {
	return &TerminalDevice_Channel_Ethernet_InLateCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-late-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-late-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InLateCollision() *TerminalDevice_Channel_Ethernet_InLateCollisionPathAny {
	return &TerminalDevice_Channel_Ethernet_InLateCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPath {
	return &TerminalDevice_Channel_Ethernet_InMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacControlFrames() *TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-errors-rx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPath) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPath {
	return &TerminalDevice_Channel_Ethernet_InMacErrorsRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-errors-rx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-errors-rx"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacErrorsRx() *TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacErrorsRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPath {
	return &TerminalDevice_Channel_Ethernet_InMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InMacPauseFrames() *TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-maxsize-exceeded"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPath) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath {
	return &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-maxsize-exceeded"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-maxsize-exceeded"
func (n *TerminalDevice_Channel_EthernetPathAny) InMaxsizeExceeded() *TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny {
	return &TerminalDevice_Channel_Ethernet_InMaxsizeExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-oversize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPath {
	return &TerminalDevice_Channel_Ethernet_InOversizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-oversize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-oversize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InOversizeFrames() *TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InOversizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsBipErrors (leaf): The number of received bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsBipErrors() *TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsBipErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a sytem defined threshold indicating the
// link is erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsSeverelyErroredSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is severely erroring
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-severely-errored-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsSeverelyErroredSeconds() *TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsSeverelyErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPath) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath {
	return &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPcsUnavailableSeconds (leaf): The number of seconds that physical coding sublayer (PCS)
// errors have crossed a system defined threshold indicating the
// link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-pcs-unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-pcs-unavailable-seconds"
func (n *TerminalDevice_Channel_EthernetPathAny) InPcsUnavailableSeconds() *TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny {
	return &TerminalDevice_Channel_Ethernet_InPcsUnavailableSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-pcs-unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-single-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPath) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPath {
	return &TerminalDevice_Channel_Ethernet_InSingleCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-single-collision"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-single-collision"
func (n *TerminalDevice_Channel_EthernetPathAny) InSingleCollision() *TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny {
	return &TerminalDevice_Channel_Ethernet_InSingleCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-symbol-error"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPath) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPath {
	return &TerminalDevice_Channel_Ethernet_InSymbolErrorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-symbol-error"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-symbol-error"
func (n *TerminalDevice_Channel_EthernetPathAny) InSymbolError() *TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny {
	return &TerminalDevice_Channel_Ethernet_InSymbolErrorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-undersize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPath) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPath {
	return &TerminalDevice_Channel_Ethernet_InUndersizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/in-undersize-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/in-undersize-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) InUndersizeFrames() *TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_InUndersizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPath) Lldp() *TerminalDevice_Channel_Ethernet_LldpPath {
	return &TerminalDevice_Channel_Ethernet_LldpPath{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): LLDP data for logical channels
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "lldp"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp"
func (n *TerminalDevice_Channel_EthernetPathAny) Lldp() *TerminalDevice_Channel_Ethernet_LldpPathAny {
	return &TerminalDevice_Channel_Ethernet_LldpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPath) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPath {
	return &TerminalDevice_Channel_Ethernet_Out_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-8021q-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-8021q-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) Out_8021QFrames() *TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_Out_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBlockErrors (leaf): The number of transmitted errored blocks. Error detection
// codes are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-block-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutBlockErrors() *TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCrcErrors (leaf): Number of FCS/CRC error check failures sent on the interface
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-crc-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-crc-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutCrcErrors() *TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPath {
	return &TerminalDevice_Channel_Ethernet_OutMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-control-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-control-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacControlFrames() *TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-errors-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPath) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath {
	return &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-errors-tx"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-errors-tx"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacErrorsTx() *TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacErrorsTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPath) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath {
	return &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-mac-pause-frames"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-mac-pause-frames"
func (n *TerminalDevice_Channel_EthernetPathAny) OutMacPauseFrames() *TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny {
	return &TerminalDevice_Channel_Ethernet_OutMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPath) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath {
	return &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPcsBipErrors (leaf): The number of transmitted bit interleaved parity (BIP) errors
// at the physical coding sublayer (PCS). If the interface
// consists of multiple lanes, this will be the sum of all
// errors on the lane
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/out-pcs-bip-errors"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/out-pcs-bip-errors"
func (n *TerminalDevice_Channel_EthernetPathAny) OutPcsBipErrors() *TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny {
	return &TerminalDevice_Channel_Ethernet_OutPcsBipErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "out-pcs-bip-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PostFecBer() *TerminalDevice_Channel_Ethernet_PostFecBerPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPath) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber"
func (n *TerminalDevice_Channel_EthernetPathAny) PreFecBer() *TerminalDevice_Channel_Ethernet_PreFecBerPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPath) QValue() *TerminalDevice_Channel_Ethernet_QValuePath {
	return &TerminalDevice_Channel_Ethernet_QValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value"
func (n *TerminalDevice_Channel_EthernetPathAny) QValue() *TerminalDevice_Channel_Ethernet_QValuePathAny {
	return &TerminalDevice_Channel_Ethernet_QValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_EsnrPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_EsnrPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr YANG schema element.
type TerminalDevice_Channel_Ethernet_EsnrPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/avg"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Avg() *TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/instant"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Instant() *TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/interval"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Interval() *TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Max() *TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/max-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) Min() *TerminalDevice_Channel_Ethernet_Esnr_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPath) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/esnr/min-time"
func (n *TerminalDevice_Channel_Ethernet_EsnrPathAny) MinTime() *TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_Esnr_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_LldpPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_LldpPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp YANG schema element.
type TerminalDevice_Channel_Ethernet_LldpPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny struct {
	*ygot.NodePath
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/counters"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/counters"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Counters() *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/enabled"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/enabled"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Enabled() *TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_LldpPath) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id (wildcarded): string
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) NeighborAny() *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors. If the implementation only
// supports one neighbor, this would always be a list with
// one item. If the device and neighbor supported multiple
// neighbors, which can be achieved via LLDP forwarding, then
// this would be supported
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "neighbors/neighbor"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor"
// Id: string
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Neighbor(Id string) *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPath) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Snooping (leaf): If true, LLDP PDUs are only received and processed on
// the logical-channel, but are not originated by the local
// agent. The PDUs are not dropped by the logical channel after
// processing, but relayed to the downstream link layer
// neighbors. The snooping mode is valid only when LLDP is
// enabled on the logical channel. The snooping mode is useful
// when a logical channel does not want its link layer neighbors
// to discover itself since, for example, it is a lower-layer
// logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/snooping"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/config/snooping"
func (n *TerminalDevice_Channel_Ethernet_LldpPathAny) Snooping() *TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_SnoopingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "snooping"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny struct {
	*ygot.NodePath
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-error-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-error-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameErrorOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameErrorOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-in"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-in"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameIn() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "frame-out"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/frame-out"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) FrameOut() *TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_FrameOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "last-clear"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "last-clear"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/last-clear"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) LastClear() *TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-discard"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-discard"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvDiscard() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-unknown"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPath) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "tlv-unknown"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/state/counters/tlv-unknown"
func (n *TerminalDevice_Channel_Ethernet_Lldp_CountersPathAny) TlvUnknown() *TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny struct {
	*ygot.NodePath
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/age"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/age"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/age"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Age() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/chassis-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/chassis-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ChassisIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ChassisIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Id() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/last-update"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/last-update"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/last-update"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) LastUpdate() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_LastUpdatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddress() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/management-address-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/management-address-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) ManagementAddressType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortId() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/port-id-type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/port-id-type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) PortIdType() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_PortIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-description"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-description"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemDescription() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-name"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/system-name"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/system-name"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) SystemName() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_SystemNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) TlvAny() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// WithType sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "type" to the specified value.
// Type: int32
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithType(Type int32) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygot.ModifyKey(n.NodePath, "type", Type)
	return n
}

// WithOui sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "oui" to the specified value.
// Oui: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithOui(Oui string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygot.ModifyKey(n.NodePath, "oui", Oui)
	return n
}

// WithOuiSubtype sets TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny's key "oui-subtype" to the specified value.
// OuiSubtype: string
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) WithOuiSubtype(OuiSubtype string) *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny {
	ygot.ModifyKey(n.NodePath, "oui-subtype", OuiSubtype)
	return n
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/ttl"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPath) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/ttl"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/state/ttl"
func (n *TerminalDevice_Channel_Ethernet_Lldp_NeighborPathAny) Ttl() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny struct {
	*ygot.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Oui() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui-subtype"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/oui-subtype"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) OuiSubtype() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/type"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Type() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPath) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/value"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/lldp/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_TlvPathAny) Value() *TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny {
	return &TerminalDevice_Channel_Ethernet_Lldp_Neighbor_Tlv_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_PostFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBerPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Avg() *TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Instant() *TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Interval() *TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Max() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) Min() *TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPath) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PostFecBerPathAny) MinTime() *TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PostFecBer_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_PreFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBerPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBerPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Avg() *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Avg() *TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Instant() *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Instant() *TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Interval() *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Interval() *TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Max() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Max() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) MaxTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) MaxTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) Min() *TerminalDevice_Channel_Ethernet_PreFecBer_MinPath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) Min() *TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPath) MinTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Ethernet_PreFecBerPathAny) MinTime() *TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_PreFecBer_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Ethernet_QValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValuePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value YANG schema element.
type TerminalDevice_Channel_Ethernet_QValuePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Avg() *TerminalDevice_Channel_Ethernet_QValue_AvgPath {
	return &TerminalDevice_Channel_Ethernet_QValue_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/avg"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Avg() *TerminalDevice_Channel_Ethernet_QValue_AvgPathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Instant() *TerminalDevice_Channel_Ethernet_QValue_InstantPath {
	return &TerminalDevice_Channel_Ethernet_QValue_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/instant"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Instant() *TerminalDevice_Channel_Ethernet_QValue_InstantPathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Interval() *TerminalDevice_Channel_Ethernet_QValue_IntervalPath {
	return &TerminalDevice_Channel_Ethernet_QValue_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/interval"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Interval() *TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Max() *TerminalDevice_Channel_Ethernet_QValue_MaxPath {
	return &TerminalDevice_Channel_Ethernet_QValue_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/max"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Max() *TerminalDevice_Channel_Ethernet_QValue_MaxPathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) MaxTime() *TerminalDevice_Channel_Ethernet_QValue_MaxTimePath {
	return &TerminalDevice_Channel_Ethernet_QValue_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/max-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) MaxTime() *TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) Min() *TerminalDevice_Channel_Ethernet_QValue_MinPath {
	return &TerminalDevice_Channel_Ethernet_QValue_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/min"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) Min() *TerminalDevice_Channel_Ethernet_QValue_MinPathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePath) MinTime() *TerminalDevice_Channel_Ethernet_QValue_MinTimePath {
	return &TerminalDevice_Channel_Ethernet_QValue_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/ethernet/state/q-value/min-time"
func (n *TerminalDevice_Channel_Ethernet_QValuePathAny) MinTime() *TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny {
	return &TerminalDevice_Channel_Ethernet_QValue_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_IngressPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_IngressPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type TerminalDevice_Channel_IngressPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_InterfacePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_InterfacePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/interface YANG schema element.
type TerminalDevice_Channel_Ingress_InterfacePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_PhysicalChannelPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/physical-channel YANG schema element.
type TerminalDevice_Channel_Ingress_PhysicalChannelPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_TransceiverPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Ingress_TransceiverPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config/transceiver YANG schema element.
type TerminalDevice_Channel_Ingress_TransceiverPathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/interface"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_IngressPath) Interface() *TerminalDevice_Channel_Ingress_InterfacePath {
	return &TerminalDevice_Channel_Ingress_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to the interface carrying the input signal
// for the logical channel. The ingress will specify an interface
// in the case of a transceiver being utilized directly in a
// router and bypassing a dedicated terminal device. When
// specified, the other leaves in the ingress config must be
// empty.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/interface"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/interface"
func (n *TerminalDevice_Channel_IngressPathAny) Interface() *TerminalDevice_Channel_Ingress_InterfacePathAny {
	return &TerminalDevice_Channel_Ingress_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/physical-channel"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_IngressPath) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPath {
	return &TerminalDevice_Channel_Ingress_PhysicalChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// PhysicalChannel (leaf-list): This list should be populated with references
// to the client physical channels that feed this logical
// channel from the transceiver specified in the 'transceiver'
// leaf, which must be specified.  If this leaf-list is empty,
// all physical channels in the transceiver are assumed to be
// mapped to the logical channel.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/physical-channel"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/physical-channel"
func (n *TerminalDevice_Channel_IngressPathAny) PhysicalChannel() *TerminalDevice_Channel_Ingress_PhysicalChannelPathAny {
	return &TerminalDevice_Channel_Ingress_PhysicalChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "physical-channel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/transceiver"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_IngressPath) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPath {
	return &TerminalDevice_Channel_Ingress_TransceiverPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transceiver (leaf): Reference to the transceiver carrying the input signal
// for the logical channel.  If specific physical channels
// are mapped to the logical channel (as opposed to all
// physical channels carried by the transceiver), they can be
// specified in the list of physical channel references.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/transceiver"
// Path from root: "/terminal-device/logical-channels/channel/ingress/config/transceiver"
func (n *TerminalDevice_Channel_IngressPathAny) Transceiver() *TerminalDevice_Channel_Ingress_TransceiverPathAny {
	return &TerminalDevice_Channel_Ingress_TransceiverPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "transceiver"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_OtnPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_OtnPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type TerminalDevice_Channel_OtnPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/background-block-errors YANG schema element.
type TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/background-block-errors YANG schema element.
type TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_CodeViolationsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/code-violations YANG schema element.
type TerminalDevice_Channel_Otn_CodeViolationsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_CodeViolationsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/code-violations YANG schema element.
type TerminalDevice_Channel_Otn_CodeViolationsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_ErroredBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-blocks YANG schema element.
type TerminalDevice_Channel_Otn_ErroredBlocksPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_ErroredBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-blocks YANG schema element.
type TerminalDevice_Channel_Otn_ErroredBlocksPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_ErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_ErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_ErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_ErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecCorrectedBitsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBitsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecCorrectedBytesPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBytesPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes YANG schema element.
type TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecUncorrectableWordsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableWordsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words YANG schema element.
type TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_RdiMsgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/rdi-msg YANG schema element.
type TerminalDevice_Channel_Otn_RdiMsgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_RdiMsgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/rdi-msg YANG schema element.
type TerminalDevice_Channel_Otn_RdiMsgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds YANG schema element.
type TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity YANG schema element.
type TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgAutoPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-auto YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgAutoPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-expected YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgRecvPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-recv YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgRecvPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgRecvPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/tti-msg-recv YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgRecvPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit YANG schema element.
type TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_UnavailableSecondsPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Otn_UnavailableSecondsPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_UnavailableSecondsPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/unavailable-seconds YANG schema element.
type TerminalDevice_Channel_Otn_UnavailableSecondsPathAny struct {
	*ygot.NodePath
}

// BackgroundBlockErrors (leaf): The number of background block errors
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/background-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_OtnPath) BackgroundBlockErrors() *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath {
	return &TerminalDevice_Channel_Otn_BackgroundBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "background-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackgroundBlockErrors (leaf): The number of background block errors
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/background-block-errors"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/background-block-errors"
func (n *TerminalDevice_Channel_OtnPathAny) BackgroundBlockErrors() *TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny {
	return &TerminalDevice_Channel_Otn_BackgroundBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "background-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CodeViolations (leaf): For ethernet or fiberchannel links, the number of 8b/10b
// coding violations. For SONET/SDH, the number of BIP (bit
// interleaved parity) errors
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/code-violations"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_OtnPath) CodeViolations() *TerminalDevice_Channel_Otn_CodeViolationsPath {
	return &TerminalDevice_Channel_Otn_CodeViolationsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "code-violations"},
			map[string]interface{}{},
			n,
		),
	}
}

// CodeViolations (leaf): For ethernet or fiberchannel links, the number of 8b/10b
// coding violations. For SONET/SDH, the number of BIP (bit
// interleaved parity) errors
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/code-violations"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/code-violations"
func (n *TerminalDevice_Channel_OtnPathAny) CodeViolations() *TerminalDevice_Channel_Otn_CodeViolationsPathAny {
	return &TerminalDevice_Channel_Otn_CodeViolationsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "code-violations"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErroredBlocks (leaf): The number of errored blocks. Error detection codes are
// capable to detect whether one or more errors have occurred
// in a given sequence of bits – the block. It is normally not
// possible to determine the exact number of errored bits within
// the block.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/errored-blocks"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_OtnPath) ErroredBlocks() *TerminalDevice_Channel_Otn_ErroredBlocksPath {
	return &TerminalDevice_Channel_Otn_ErroredBlocksPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errored-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErroredBlocks (leaf): The number of errored blocks. Error detection codes are
// capable to detect whether one or more errors have occurred
// in a given sequence of bits – the block. It is normally not
// possible to determine the exact number of errored bits within
// the block.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/errored-blocks"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/errored-blocks"
func (n *TerminalDevice_Channel_OtnPathAny) ErroredBlocks() *TerminalDevice_Channel_Otn_ErroredBlocksPathAny {
	return &TerminalDevice_Channel_Otn_ErroredBlocksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errored-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErroredSeconds (leaf): The number of seconds that at least one errored blocks
// occurs, at least one code violation occurs, loss of sync is
// detected or loss of signal is detected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_OtnPath) ErroredSeconds() *TerminalDevice_Channel_Otn_ErroredSecondsPath {
	return &TerminalDevice_Channel_Otn_ErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// ErroredSeconds (leaf): The number of seconds that at least one errored blocks
// occurs, at least one code violation occurs, loss of sync is
// detected or loss of signal is detected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/errored-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) ErroredSeconds() *TerminalDevice_Channel_Otn_ErroredSecondsPathAny {
	return &TerminalDevice_Channel_Otn_ErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr"
func (n *TerminalDevice_Channel_OtnPath) Esnr() *TerminalDevice_Channel_Otn_EsnrPath {
	return &TerminalDevice_Channel_Otn_EsnrPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esnr (container): Electrical signal to noise ratio. Baud rate
// normalized signal to noise ratio based on
// error vector magnitude in dB with two decimal
// precision. Values include the instantaneous, average,
// minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/esnr"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr"
func (n *TerminalDevice_Channel_OtnPathAny) Esnr() *TerminalDevice_Channel_Otn_EsnrPathAny {
	return &TerminalDevice_Channel_Otn_EsnrPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esnr"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-corrected-bits"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_OtnPath) FecCorrectedBits() *TerminalDevice_Channel_Otn_FecCorrectedBitsPath {
	return &TerminalDevice_Channel_Otn_FecCorrectedBitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-corrected-bits"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bits"
func (n *TerminalDevice_Channel_OtnPathAny) FecCorrectedBits() *TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny {
	return &TerminalDevice_Channel_Otn_FecCorrectedBitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-corrected-bytes"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_OtnPath) FecCorrectedBytes() *TerminalDevice_Channel_Otn_FecCorrectedBytesPath {
	return &TerminalDevice_Channel_Otn_FecCorrectedBytesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-corrected-bytes"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-corrected-bytes"
func (n *TerminalDevice_Channel_OtnPathAny) FecCorrectedBytes() *TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny {
	return &TerminalDevice_Channel_Otn_FecCorrectedBytesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_OtnPath) FecUncorrectableBlocks() *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath {
	return &TerminalDevice_Channel_Otn_FecUncorrectableBlocksPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableBlocks (leaf): The number of blocks or frames that were uncorrectable by
// the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-blocks"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-blocks"
func (n *TerminalDevice_Channel_OtnPathAny) FecUncorrectableBlocks() *TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny {
	return &TerminalDevice_Channel_Otn_FecUncorrectableBlocksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-words"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_OtnPath) FecUncorrectableWords() *TerminalDevice_Channel_Otn_FecUncorrectableWordsPath {
	return &TerminalDevice_Channel_Otn_FecUncorrectableWordsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/fec-uncorrectable-words"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/fec-uncorrectable-words"
func (n *TerminalDevice_Channel_OtnPathAny) FecUncorrectableWords() *TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny {
	return &TerminalDevice_Channel_Otn_FecUncorrectableWordsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber"
func (n *TerminalDevice_Channel_OtnPath) PostFecBer() *TerminalDevice_Channel_Otn_PostFecBerPath {
	return &TerminalDevice_Channel_Otn_PostFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/post-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber"
func (n *TerminalDevice_Channel_OtnPathAny) PostFecBer() *TerminalDevice_Channel_Otn_PostFecBerPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber"
func (n *TerminalDevice_Channel_OtnPath) PreFecBer() *TerminalDevice_Channel_Otn_PreFecBerPath {
	return &TerminalDevice_Channel_Otn_PreFecBerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/pre-fec-ber"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber"
func (n *TerminalDevice_Channel_OtnPathAny) PreFecBer() *TerminalDevice_Channel_Otn_PreFecBerPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value"
func (n *TerminalDevice_Channel_OtnPath) QValue() *TerminalDevice_Channel_Otn_QValuePath {
	return &TerminalDevice_Channel_Otn_QValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// QValue (container): Quality value (factor) in dB of a channel with two
// decimal precision. Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max
// statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/q-value"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value"
func (n *TerminalDevice_Channel_OtnPathAny) QValue() *TerminalDevice_Channel_Otn_QValuePathAny {
	return &TerminalDevice_Channel_Otn_QValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "q-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// RdiMsg (leaf): Remote defect indication (RDI) message received
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/rdi-msg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_OtnPath) RdiMsg() *TerminalDevice_Channel_Otn_RdiMsgPath {
	return &TerminalDevice_Channel_Otn_RdiMsgPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rdi-msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// RdiMsg (leaf): Remote defect indication (RDI) message received
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/rdi-msg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/rdi-msg"
func (n *TerminalDevice_Channel_OtnPathAny) RdiMsg() *TerminalDevice_Channel_Otn_RdiMsgPathAny {
	return &TerminalDevice_Channel_Otn_RdiMsgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "rdi-msg"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeverelyErroredSeconds (leaf): The number of seconds that loss of frame is detected OR
// the number of errored blocks, code violations, loss of sync
// or loss of signal is detected exceeds a predefined
// threshold
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_OtnPath) SeverelyErroredSeconds() *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath {
	return &TerminalDevice_Channel_Otn_SeverelyErroredSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeverelyErroredSeconds (leaf): The number of seconds that loss of frame is detected OR
// the number of errored blocks, code violations, loss of sync
// or loss of signal is detected exceeds a predefined
// threshold
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/severely-errored-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/severely-errored-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) SeverelyErroredSeconds() *TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny {
	return &TerminalDevice_Channel_Otn_SeverelyErroredSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "severely-errored-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-granularity"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPath) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPath {
	return &TerminalDevice_Channel_Otn_TributarySlotGranularityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
	}
}

// TributarySlotGranularity (leaf): Granularity value of OPUk or OPUCn tributary slots for OTN
// signal allocation. The currently defined values follow the
// existing ITU-T G.709 standard, which can be extended as
// needed in future.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tributary-slot-granularity"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity"
func (n *TerminalDevice_Channel_OtnPathAny) TributarySlotGranularity() *TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny {
	return &TerminalDevice_Channel_Otn_TributarySlotGranularityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tributary-slot-granularity"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-auto"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPath {
	return &TerminalDevice_Channel_Otn_TtiMsgAutoPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgAuto (leaf): Trail trace identifier (TTI) transmit message automatically
// created.  If true, then setting a custom transmit message
// would be invalid.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-auto"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-auto"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgAuto() *TerminalDevice_Channel_Otn_TtiMsgAutoPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgAutoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-auto"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-expected"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPath {
	return &TerminalDevice_Channel_Otn_TtiMsgExpectedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgExpected (leaf): Trail trace identifier (TTI) message expected
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-expected"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-expected"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgExpected() *TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgExpectedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-expected"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgRecv (leaf): Trail trace identifier (TTI) message received
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/tti-msg-recv"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgRecv() *TerminalDevice_Channel_Otn_TtiMsgRecvPath {
	return &TerminalDevice_Channel_Otn_TtiMsgRecvPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgRecv (leaf): Trail trace identifier (TTI) message received
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/tti-msg-recv"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/tti-msg-recv"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgRecv() *TerminalDevice_Channel_Otn_TtiMsgRecvPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgRecvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tti-msg-recv"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-transmit"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPath) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPath {
	return &TerminalDevice_Channel_Otn_TtiMsgTransmitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtiMsgTransmit (leaf): Trail trace identifier (TTI) message transmitted
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "config/tti-msg-transmit"
// Path from root: "/terminal-device/logical-channels/channel/otn/config/tti-msg-transmit"
func (n *TerminalDevice_Channel_OtnPathAny) TtiMsgTransmit() *TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny {
	return &TerminalDevice_Channel_Otn_TtiMsgTransmitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tti-msg-transmit"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnavailableSeconds (leaf): The number of seconds during which the link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_OtnPath) UnavailableSeconds() *TerminalDevice_Channel_Otn_UnavailableSecondsPath {
	return &TerminalDevice_Channel_Otn_UnavailableSecondsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnavailableSeconds (leaf): The number of seconds during which the link is unavailable
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/unavailable-seconds"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/unavailable-seconds"
func (n *TerminalDevice_Channel_OtnPathAny) UnavailableSeconds() *TerminalDevice_Channel_Otn_UnavailableSecondsPathAny {
	return &TerminalDevice_Channel_Otn_UnavailableSecondsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "unavailable-seconds"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Otn_EsnrPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_EsnrPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_EsnrPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type TerminalDevice_Channel_Otn_EsnrPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/avg YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/instant YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/interval YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/max-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_Esnr_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr/min-time YANG schema element.
type TerminalDevice_Channel_Otn_Esnr_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Avg() *TerminalDevice_Channel_Otn_Esnr_AvgPath {
	return &TerminalDevice_Channel_Otn_Esnr_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/avg"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Avg() *TerminalDevice_Channel_Otn_Esnr_AvgPathAny {
	return &TerminalDevice_Channel_Otn_Esnr_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Instant() *TerminalDevice_Channel_Otn_Esnr_InstantPath {
	return &TerminalDevice_Channel_Otn_Esnr_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/instant"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Instant() *TerminalDevice_Channel_Otn_Esnr_InstantPathAny {
	return &TerminalDevice_Channel_Otn_Esnr_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Interval() *TerminalDevice_Channel_Otn_Esnr_IntervalPath {
	return &TerminalDevice_Channel_Otn_Esnr_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/interval"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Interval() *TerminalDevice_Channel_Otn_Esnr_IntervalPathAny {
	return &TerminalDevice_Channel_Otn_Esnr_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Max() *TerminalDevice_Channel_Otn_Esnr_MaxPath {
	return &TerminalDevice_Channel_Otn_Esnr_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/max"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Max() *TerminalDevice_Channel_Otn_Esnr_MaxPathAny {
	return &TerminalDevice_Channel_Otn_Esnr_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_EsnrPath) MaxTime() *TerminalDevice_Channel_Otn_Esnr_MaxTimePath {
	return &TerminalDevice_Channel_Otn_Esnr_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/max-time"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) MaxTime() *TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny {
	return &TerminalDevice_Channel_Otn_Esnr_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_EsnrPath) Min() *TerminalDevice_Channel_Otn_Esnr_MinPath {
	return &TerminalDevice_Channel_Otn_Esnr_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/min"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) Min() *TerminalDevice_Channel_Otn_Esnr_MinPathAny {
	return &TerminalDevice_Channel_Otn_Esnr_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_EsnrPath) MinTime() *TerminalDevice_Channel_Otn_Esnr_MinTimePath {
	return &TerminalDevice_Channel_Otn_Esnr_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/esnr/min-time"
func (n *TerminalDevice_Channel_Otn_EsnrPathAny) MinTime() *TerminalDevice_Channel_Otn_Esnr_MinTimePathAny {
	return &TerminalDevice_Channel_Otn_Esnr_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Otn_PostFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBerPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBerPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Avg() *TerminalDevice_Channel_Otn_PostFecBer_AvgPath {
	return &TerminalDevice_Channel_Otn_PostFecBer_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Avg() *TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Instant() *TerminalDevice_Channel_Otn_PostFecBer_InstantPath {
	return &TerminalDevice_Channel_Otn_PostFecBer_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Instant() *TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Interval() *TerminalDevice_Channel_Otn_PostFecBer_IntervalPath {
	return &TerminalDevice_Channel_Otn_PostFecBer_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Interval() *TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Max() *TerminalDevice_Channel_Otn_PostFecBer_MaxPath {
	return &TerminalDevice_Channel_Otn_PostFecBer_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Max() *TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) MaxTime() *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath {
	return &TerminalDevice_Channel_Otn_PostFecBer_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) MaxTime() *TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) Min() *TerminalDevice_Channel_Otn_PostFecBer_MinPath {
	return &TerminalDevice_Channel_Otn_PostFecBer_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) Min() *TerminalDevice_Channel_Otn_PostFecBer_MinPathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPath) MinTime() *TerminalDevice_Channel_Otn_PostFecBer_MinTimePath {
	return &TerminalDevice_Channel_Otn_PostFecBer_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/post-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PostFecBerPathAny) MinTime() *TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny {
	return &TerminalDevice_Channel_Otn_PostFecBer_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Otn_PreFecBerPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBerPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBerPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBerPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time YANG schema element.
type TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Avg() *TerminalDevice_Channel_Otn_PreFecBer_AvgPath {
	return &TerminalDevice_Channel_Otn_PreFecBer_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/avg"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Avg() *TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Instant() *TerminalDevice_Channel_Otn_PreFecBer_InstantPath {
	return &TerminalDevice_Channel_Otn_PreFecBer_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/instant"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Instant() *TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Interval() *TerminalDevice_Channel_Otn_PreFecBer_IntervalPath {
	return &TerminalDevice_Channel_Otn_PreFecBer_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/interval"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Interval() *TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Max() *TerminalDevice_Channel_Otn_PreFecBer_MaxPath {
	return &TerminalDevice_Channel_Otn_PreFecBer_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Max() *TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) MaxTime() *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath {
	return &TerminalDevice_Channel_Otn_PreFecBer_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/max-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) MaxTime() *TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) Min() *TerminalDevice_Channel_Otn_PreFecBer_MinPath {
	return &TerminalDevice_Channel_Otn_PreFecBer_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-transport-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) Min() *TerminalDevice_Channel_Otn_PreFecBer_MinPathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPath) MinTime() *TerminalDevice_Channel_Otn_PreFecBer_MinTimePath {
	return &TerminalDevice_Channel_Otn_PreFecBer_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/pre-fec-ber/min-time"
func (n *TerminalDevice_Channel_Otn_PreFecBerPathAny) MinTime() *TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny {
	return &TerminalDevice_Channel_Otn_PreFecBer_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_Channel_Otn_QValuePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValuePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValuePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type TerminalDevice_Channel_Otn_QValuePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_AvgPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Otn_QValue_AvgPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_AvgPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/avg YANG schema element.
type TerminalDevice_Channel_Otn_QValue_AvgPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_InstantPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Otn_QValue_InstantPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_InstantPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/instant YANG schema element.
type TerminalDevice_Channel_Otn_QValue_InstantPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_IntervalPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Otn_QValue_IntervalPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_IntervalPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/interval YANG schema element.
type TerminalDevice_Channel_Otn_QValue_IntervalPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MaxPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MaxPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MaxTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MaxTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/max-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MaxTimePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MinPath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinPath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MinPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MinTimePath represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinTimePath struct {
	*ygot.NodePath
}

// TerminalDevice_Channel_Otn_QValue_MinTimePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value/min-time YANG schema element.
type TerminalDevice_Channel_Otn_QValue_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValuePath) Avg() *TerminalDevice_Channel_Otn_QValue_AvgPath {
	return &TerminalDevice_Channel_Otn_QValue_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "avg"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/avg"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Avg() *TerminalDevice_Channel_Otn_QValue_AvgPathAny {
	return &TerminalDevice_Channel_Otn_QValue_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValuePath) Instant() *TerminalDevice_Channel_Otn_QValue_InstantPath {
	return &TerminalDevice_Channel_Otn_QValue_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "instant"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/instant"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Instant() *TerminalDevice_Channel_Otn_QValue_InstantPathAny {
	return &TerminalDevice_Channel_Otn_QValue_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValuePath) Interval() *TerminalDevice_Channel_Otn_QValue_IntervalPath {
	return &TerminalDevice_Channel_Otn_QValue_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "interval"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/interval"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Interval() *TerminalDevice_Channel_Otn_QValue_IntervalPathAny {
	return &TerminalDevice_Channel_Otn_QValue_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValuePath) Max() *TerminalDevice_Channel_Otn_QValue_MaxPath {
	return &TerminalDevice_Channel_Otn_QValue_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/max"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Max() *TerminalDevice_Channel_Otn_QValue_MaxPathAny {
	return &TerminalDevice_Channel_Otn_QValue_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValuePath) MaxTime() *TerminalDevice_Channel_Otn_QValue_MaxTimePath {
	return &TerminalDevice_Channel_Otn_QValue_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "max-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/max-time"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) MaxTime() *TerminalDevice_Channel_Otn_QValue_MaxTimePathAny {
	return &TerminalDevice_Channel_Otn_QValue_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValuePath) Min() *TerminalDevice_Channel_Otn_QValue_MinPath {
	return &TerminalDevice_Channel_Otn_QValue_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/min"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) Min() *TerminalDevice_Channel_Otn_QValue_MinPathAny {
	return &TerminalDevice_Channel_Otn_QValue_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValuePath) MinTime() *TerminalDevice_Channel_Otn_QValue_MinTimePath {
	return &TerminalDevice_Channel_Otn_QValue_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "min-time"
// Path from root: "/terminal-device/logical-channels/channel/otn/state/q-value/min-time"
func (n *TerminalDevice_Channel_Otn_QValuePathAny) MinTime() *TerminalDevice_Channel_Otn_QValue_MinTimePathAny {
	return &TerminalDevice_Channel_Otn_QValue_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// TerminalDevice_ModePath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePath struct {
	*ygot.NodePath
}

// TerminalDevice_ModePathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type TerminalDevice_ModePathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_DescriptionPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/description YANG schema element.
type TerminalDevice_Mode_DescriptionPath struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_DescriptionPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/description YANG schema element.
type TerminalDevice_Mode_DescriptionPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_ModeIdPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/mode-id YANG schema element.
type TerminalDevice_Mode_ModeIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_ModeIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/mode-id YANG schema element.
type TerminalDevice_Mode_ModeIdPathAny struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_VendorIdPath represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/vendor-id YANG schema element.
type TerminalDevice_Mode_VendorIdPath struct {
	*ygot.NodePath
}

// TerminalDevice_Mode_VendorIdPathAny represents the wildcard version of the /openconfig-terminal-device/terminal-device/operational-modes/mode/state/vendor-id YANG schema element.
type TerminalDevice_Mode_VendorIdPathAny struct {
	*ygot.NodePath
}

// Description (leaf): Vendor-supplied textual description of the characteristics
// of this operational mode to enable operators to select the
// appropriate mode for the application.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_ModePath) Description() *TerminalDevice_Mode_DescriptionPath {
	return &TerminalDevice_Mode_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Vendor-supplied textual description of the characteristics
// of this operational mode to enable operators to select the
// appropriate mode for the application.
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/description"
// Path from root: "/terminal-device/operational-modes/mode/state/description"
func (n *TerminalDevice_ModePathAny) Description() *TerminalDevice_Mode_DescriptionPathAny {
	return &TerminalDevice_Mode_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModeId (leaf): Two-octet encoding of the vendor-defined operational
// mode
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/mode-id"
// Path from root: "/terminal-device/operational-modes/mode/state/mode-id"
func (n *TerminalDevice_ModePath) ModeId() *TerminalDevice_Mode_ModeIdPath {
	return &TerminalDevice_Mode_ModeIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModeId (leaf): Two-octet encoding of the vendor-defined operational
// mode
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/mode-id"
// Path from root: "/terminal-device/operational-modes/mode/state/mode-id"
func (n *TerminalDevice_ModePathAny) ModeId() *TerminalDevice_Mode_ModeIdPathAny {
	return &TerminalDevice_Mode_ModeIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VendorId (leaf): Identifier to represent the vendor / supplier of the
// platform and the associated operational mode information
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/vendor-id"
// Path from root: "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_ModePath) VendorId() *TerminalDevice_Mode_VendorIdPath {
	return &TerminalDevice_Mode_VendorIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vendor-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VendorId (leaf): Identifier to represent the vendor / supplier of the
// platform and the associated operational mode information
// ----------------------------------------
// Defining module: "openconfig-terminal-device"
// Instantiating module: "openconfig-terminal-device"
// Path from parent: "state/vendor-id"
// Path from root: "/terminal-device/operational-modes/mode/state/vendor-id"
func (n *TerminalDevice_ModePathAny) VendorId() *TerminalDevice_Mode_VendorIdPathAny {
	return &TerminalDevice_Mode_VendorIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vendor-id"},
			map[string]interface{}{},
			n,
		),
	}
}
