/*
Package ocygot is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"github.com/openconfig/ygot/ygot"
)

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Producer(Producer E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Producer(Producer E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/resolved"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/resolved"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Type (leaf): Type of next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Producer(Producer E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Producer(Producer E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/resolved"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/resolved"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Type (leaf): Type of next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of next-hop-group
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/type"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPath {
	return &NetworkInstance_Fdb_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePath {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny struct {
	*ygot.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_NdProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxyPath) Enable() *NetworkInstance_Fdb_NdProxy_EnablePath {
	return &NetworkInstance_Fdb_NdProxy_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxyPathAny) Enable() *NetworkInstance_Fdb_NdProxy_EnablePathAny {
	return &NetworkInstance_Fdb_NdProxy_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPath) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPath {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPathAny) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithmPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm YANG schema element.
type NetworkInstance_FlexAlgorithmPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm YANG schema element.
type NetworkInstance_FlexAlgorithmPathAny struct {
	*ygot.NodePath
}

// AlgorithmAny (list): List of Flexible Algorithms
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algorithm-definition/algorithm"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm"
// FlexAlgoId (wildcarded): uint8
func (n *NetworkInstance_FlexAlgorithmPath) AlgorithmAny() *NetworkInstance_FlexAlgorithm_AlgorithmPathAny {
	return &NetworkInstance_FlexAlgorithm_AlgorithmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algorithm-definition", "algorithm"},
			map[string]interface{}{"flex-algo-id": "*"},
			n,
		),
	}
}

// AlgorithmAny (list): List of Flexible Algorithms
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algorithm-definition/algorithm"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm"
// FlexAlgoId (wildcarded): uint8
func (n *NetworkInstance_FlexAlgorithmPathAny) AlgorithmAny() *NetworkInstance_FlexAlgorithm_AlgorithmPathAny {
	return &NetworkInstance_FlexAlgorithm_AlgorithmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algorithm-definition", "algorithm"},
			map[string]interface{}{"flex-algo-id": "*"},
			n,
		),
	}
}

// Algorithm (list): List of Flexible Algorithms
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algorithm-definition/algorithm"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm"
// FlexAlgoId: uint8
func (n *NetworkInstance_FlexAlgorithmPath) Algorithm(FlexAlgoId uint8) *NetworkInstance_FlexAlgorithm_AlgorithmPath {
	return &NetworkInstance_FlexAlgorithm_AlgorithmPath{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algorithm-definition", "algorithm"},
			map[string]interface{}{"flex-algo-id": FlexAlgoId},
			n,
		),
	}
}

// Algorithm (list): List of Flexible Algorithms
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algorithm-definition/algorithm"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm"
// FlexAlgoId: uint8
func (n *NetworkInstance_FlexAlgorithmPathAny) Algorithm(FlexAlgoId uint8) *NetworkInstance_FlexAlgorithm_AlgorithmPathAny {
	return &NetworkInstance_FlexAlgorithm_AlgorithmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algorithm-definition", "algorithm"},
			map[string]interface{}{"flex-algo-id": FlexAlgoId},
			n,
		),
	}
}

// FlexAlgoGlobalAttributes (container): Flexible Algorithm global attributes
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-global-attributes"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes"
func (n *NetworkInstance_FlexAlgorithmPath) FlexAlgoGlobalAttributes() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoGlobalAttributes (container): Flexible Algorithm global attributes
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-global-attributes"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes"
func (n *NetworkInstance_FlexAlgorithmPathAny) FlexAlgoGlobalAttributes() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of flex-algo interfaces
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_FlexAlgorithmPath) InterfaceAny() *NetworkInstance_FlexAlgorithm_InterfacePathAny {
	return &NetworkInstance_FlexAlgorithm_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of flex-algo interfaces
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_FlexAlgorithmPathAny) InterfaceAny() *NetworkInstance_FlexAlgorithm_InterfacePathAny {
	return &NetworkInstance_FlexAlgorithm_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of flex-algo interfaces
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_FlexAlgorithmPath) Interface(InterfaceId string) *NetworkInstance_FlexAlgorithm_InterfacePath {
	return &NetworkInstance_FlexAlgorithm_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of flex-algo interfaces
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_FlexAlgorithmPathAny) Interface(InterfaceId string) *NetworkInstance_FlexAlgorithm_InterfacePathAny {
	return &NetworkInstance_FlexAlgorithm_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithm_AlgorithmPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm YANG schema element.
type NetworkInstance_FlexAlgorithm_AlgorithmPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_AlgorithmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm YANG schema element.
type NetworkInstance_FlexAlgorithm_AlgorithmPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/algo-flags YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/algo-flags YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/calc-type YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/calc-type YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_ExcludePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/exclude YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_ExcludePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_ExcludePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/exclude YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_ExcludePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-description YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-description YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-id YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-id YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-name YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-name YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-all YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-all YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-any YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-any YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/metric-type YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/metric-type YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/priority YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_PriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/priority YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_PriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/srlg-exclude YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/srlg-exclude YANG schema element.
type NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePathAny struct {
	*ygot.NodePath
}

// AlgoFlags (leaf): Advertise flex-algo definition flags
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/algo-flags"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/algo-flags"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) AlgoFlags() *NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "algo-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlgoFlags (leaf): Advertise flex-algo definition flags
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/algo-flags"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/algo-flags"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) AlgoFlags() *NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_AlgoFlagsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "algo-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// CalcType (leaf): Indicates the calculation type, if advertised
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/calc-type"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/calc-type"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) CalcType() *NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "calc-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// CalcType (leaf): Indicates the calculation type, if advertised
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/calc-type"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/calc-type"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) CalcType() *NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_CalcTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "calc-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Exclude (leaf-list): extended-admin-groups to exclude in path calculation.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/exclude"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) Exclude() *NetworkInstance_FlexAlgorithm_Algorithm_ExcludePath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_ExcludePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude"},
			map[string]interface{}{},
			n,
		),
	}
}

// Exclude (leaf-list): extended-admin-groups to exclude in path calculation.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/exclude"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) Exclude() *NetworkInstance_FlexAlgorithm_Algorithm_ExcludePathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_ExcludePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoDescription (leaf): Description of this flex-algo
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-description"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-description"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) FlexAlgoDescription() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoDescription (leaf): Description of this flex-algo
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-description"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-description"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) FlexAlgoDescription() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoId (leaf): Flex Algorithm Identifier
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-id"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-id"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) FlexAlgoId() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoId (leaf): Flex Algorithm Identifier
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-id"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-id"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) FlexAlgoId() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoName (leaf): Flexible Algorithm name
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-name"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) FlexAlgoName() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlexAlgoName (leaf): Flexible Algorithm name
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flex-algo-name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/flex-algo-name"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) FlexAlgoName() *NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_FlexAlgoNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flex-algo-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAll (leaf-list): extended-admin-groups, all of which must be included
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-all"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) IncludeAll() *NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAll (leaf-list): extended-admin-groups, all of which must be included
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-all"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) IncludeAll() *NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_IncludeAllPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAny (leaf-list): extended-admin-groups, one of which must be included
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-any"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) IncludeAny() *NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAny (leaf-list): extended-admin-groups, one of which must be included
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/include-any"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) IncludeAny() *NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_IncludeAnyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): Indicates which is the corresponding metric type for
// this algorithm
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/metric-type"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) MetricType() *NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): Indicates which is the corresponding metric type for
// this algorithm
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/metric-type"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) MetricType() *NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_MetricTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Indicates the priority for this algorithm
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/priority"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/priority"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) Priority() *NetworkInstance_FlexAlgorithm_Algorithm_PriorityPath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Indicates the priority for this algorithm
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/priority"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/priority"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) Priority() *NetworkInstance_FlexAlgorithm_Algorithm_PriorityPathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgExclude (leaf-list): list of references to named SRLGs to be excluded
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-exclude"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/srlg-exclude"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPath) SrlgExclude() *NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePath {
	return &NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-exclude"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgExclude (leaf-list): list of references to named SRLGs to be excluded
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-exclude"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algorithm-definition/algorithm/config/srlg-exclude"
func (n *NetworkInstance_FlexAlgorithm_AlgorithmPathAny) SrlgExclude() *NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePathAny {
	return &NetworkInstance_FlexAlgorithm_Algorithm_SrlgExcludePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-exclude"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny struct {
	*ygot.NodePath
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group"
// AdminGroupName (wildcarded): string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath) AdminGroupAny() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group"
// AdminGroupName (wildcarded): string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny) AdminGroupAny() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group"
// AdminGroupName: string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath) AdminGroup(AdminGroupName string) *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "flex-algo-admin-groups/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group"
// AdminGroupName: string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny) AdminGroup(AdminGroupName string) *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flex-algo-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
}

// SrlgAny (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg"
// Name (wildcarded): string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath) SrlgAny() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SrlgAny (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg"
// Name (wildcarded): string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny) SrlgAny() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Srlg (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg"
// Name: string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPath) Srlg(Name string) *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Srlg (list): List of shared risk link groups
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlgs/srlg"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg"
// Name: string
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributesPathAny) Srlg(Name string) *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/admin-group-name YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/admin-group-name YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/bit-position YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/bit-position YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPathAny struct {
	*ygot.NodePath
}

// AdminGroupName (leaf): name for mpls admin-group
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group-name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath) AdminGroupName() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroupName (leaf): name for mpls admin-group
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group-name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny) AdminGroupName() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_AdminGroupNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/bit-position"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPath) BitPosition() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bit-position"},
			map[string]interface{}{},
			n,
		),
	}
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/bit-position"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/flex-algo-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroupPathAny) BitPosition() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_AdminGroup_BitPositionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bit-position"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/name YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/name YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/value YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/value YANG schema element.
type NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePathAny struct {
	*ygot.NodePath
}

// Name (leaf): SRLG group identifier
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath) Name() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): SRLG group identifier
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny) Name() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): group ID for the SRLG
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/value"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPath) Value() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePath {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): group ID for the SRLG
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/value"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_SrlgPathAny) Value() *NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePathAny {
	return &NetworkInstance_FlexAlgorithm_FlexAlgoGlobalAttributes_Srlg_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FlexAlgorithm_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface YANG schema element.
type NetworkInstance_FlexAlgorithm_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface YANG schema element.
type NetworkInstance_FlexAlgorithm_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_MinDelayPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/min-delay YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_MinDelayPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_MinDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/min-delay YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_MinDelayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_TeMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_FlexAlgorithm_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_FlexAlgorithm_Interface_TeMetricPathAny struct {
	*ygot.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_FlexAlgorithm_InterfacePath) AdminGroup() *NetworkInstance_FlexAlgorithm_Interface_AdminGroupPath {
	return &NetworkInstance_FlexAlgorithm_Interface_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_FlexAlgorithm_InterfacePathAny) AdminGroup() *NetworkInstance_FlexAlgorithm_Interface_AdminGroupPathAny {
	return &NetworkInstance_FlexAlgorithm_Interface_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_FlexAlgorithm_InterfacePath) InterfaceId() *NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPath {
	return &NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_FlexAlgorithm_InterfacePathAny) InterfaceId() *NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPathAny {
	return &NetworkInstance_FlexAlgorithm_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): Min delay for the link
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-delay"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/min-delay"
func (n *NetworkInstance_FlexAlgorithm_InterfacePath) MinDelay() *NetworkInstance_FlexAlgorithm_Interface_MinDelayPath {
	return &NetworkInstance_FlexAlgorithm_Interface_MinDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): Min delay for the link
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-delay"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/min-delay"
func (n *NetworkInstance_FlexAlgorithm_InterfacePathAny) MinDelay() *NetworkInstance_FlexAlgorithm_Interface_MinDelayPathAny {
	return &NetworkInstance_FlexAlgorithm_Interface_MinDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_FlexAlgorithm_InterfacePath) SrlgMembership() *NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPath {
	return &NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_FlexAlgorithm_InterfacePathAny) SrlgMembership() *NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPathAny {
	return &NetworkInstance_FlexAlgorithm_Interface_SrlgMembershipPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_FlexAlgorithm_InterfacePath) TeMetric() *NetworkInstance_FlexAlgorithm_Interface_TeMetricPath {
	return &NetworkInstance_FlexAlgorithm_Interface_TeMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-flexalgo"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/flex-algorithm/flex-algo-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_FlexAlgorithm_InterfacePathAny) TeMetric() *NetworkInstance_FlexAlgorithm_Interface_TeMetricPathAny {
	return &NetworkInstance_FlexAlgorithm_Interface_TeMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPathAny struct {
	*ygot.NodePath
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny struct {
	*ygot.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygot.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/id YANG schema element.
type NetworkInstance_Interface_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/id YANG schema element.
type NetworkInstance_Interface_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/interface YANG schema element.
type NetworkInstance_Interface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/interface YANG schema element.
type NetworkInstance_Interface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_InterfacePath) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPath {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_InterfacePathAny) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_InterfacePath) Id() *NetworkInstance_Interface_IdPath {
	return &NetworkInstance_Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_InterfacePathAny) Id() *NetworkInstance_Interface_IdPathAny {
	return &NetworkInstance_Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_InterfacePath) Interface() *NetworkInstance_Interface_InterfacePath {
	return &NetworkInstance_Interface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_InterfacePathAny) Interface() *NetworkInstance_Interface_InterfacePathAny {
	return &NetworkInstance_Interface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePath) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPath {
	return &NetworkInstance_Interface_IrbAnycastGatewayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePathAny) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPathAny {
	return &NetworkInstance_Interface_IrbAnycastGatewayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_InterfacePath) MacPinning() *NetworkInstance_Interface_MacPinningPath {
	return &NetworkInstance_Interface_MacPinningPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_InterfacePathAny) MacPinning() *NetworkInstance_Interface_MacPinningPathAny {
	return &NetworkInstance_Interface_MacPinningPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_InterfacePath) Subinterface() *NetworkInstance_Interface_SubinterfacePath {
	return &NetworkInstance_Interface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_InterfacePathAny) Subinterface() *NetworkInstance_Interface_SubinterfacePathAny {
	return &NetworkInstance_Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPath struct {
	*ygot.NodePath
}

// NetworkInstance_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPathAny struct {
	*ygot.NodePath
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPath) Global() *NetworkInstance_Mpls_GlobalPath {
	return &NetworkInstance_Mpls_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPathAny) Global() *NetworkInstance_Mpls_GlobalPathAny {
	return &NetworkInstance_Mpls_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPath) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPathAny) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPath) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePath {
	return &NetworkInstance_Mpls_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPath) Lsps() *NetworkInstance_Mpls_LspsPath {
	return &NetworkInstance_Mpls_LspsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPathAny) Lsps() *NetworkInstance_Mpls_LspsPathAny {
	return &NetworkInstance_Mpls_LspsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPath) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPath {
	return &NetworkInstance_Mpls_SignalingProtocolsPath{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPathAny) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocolsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPath) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPath {
	return &NetworkInstance_Mpls_TeGlobalAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPathAny) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPath) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePath {
	return &NetworkInstance_Mpls_Global_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_GlobalPath) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPath {
	return &NetworkInstance_Mpls_Global_NullLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_GlobalPathAny) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPathAny {
	return &NetworkInstance_Mpls_Global_NullLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPath) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPath {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPathAny) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPathAny {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPath{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPath) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPath {
	return &NetworkInstance_Mpls_Global_TtlPropagationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPathAny) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPathAny {
	return &NetworkInstance_Mpls_Global_TtlPropagationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny struct {
	*ygot.NodePath
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePath) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny struct {
	*ygot.NodePath
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPathAny struct {
	*ygot.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_InterfacePath) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPath {
	return &NetworkInstance_Mpls_Interface_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_InterfacePathAny) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPathAny {
	return &NetworkInstance_Mpls_Interface_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePath) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePathAny) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePath) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPath {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePathAny) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_InterfacePath) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPath {
	return &NetworkInstance_Mpls_Interface_TeMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_InterfacePathAny) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPathAny {
	return &NetworkInstance_Mpls_Interface_TeMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny struct {
	*ygot.NodePath
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_LspsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_LspsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPathAny struct {
	*ygot.NodePath
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPath) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPath) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPath) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPath {
	return &NetworkInstance_Mpls_Lsps_StaticLspPath{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPath) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny struct {
	*ygot.NodePath
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny struct {
	*ygot.NodePath
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny struct {
	*ygot.NodePath
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny struct {
	*ygot.NodePath
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny struct {
	*ygot.NodePath
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny struct {
	*ygot.NodePath
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny struct {
	*ygot.NodePath
}

// Destination (leaf): P2P tunnel destination address
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/destination"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// Destination (leaf): P2P tunnel destination address
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/destination"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-primary-path/p2p-primary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-secondary-paths/p2p-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/record-route-enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/record-route-enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny struct {
	*ygot.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-secondary-paths/candidate-secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
// SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraint(Type E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraint(Type E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygot.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny struct {
	*ygot.NodePath
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secondary-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/secondary-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secondary-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygot.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny struct {
	*ygot.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "admin-groups"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/associated-rsvp-sessions"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/cspf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/cspf-tiebreaker"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExplicitPathName (leaf): reference to a defined path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/explicit-path-name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Path name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-method"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-computation-server"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/path-control"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "path-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type (wildcarded): E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraint(Type E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-metric-bound-constraints/path-metric-bound-constraint"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
// Type: E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraint(Type E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/retry-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "retry-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/spf-metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/use-cspf"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-cspf"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygot.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/exclude-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "exclude-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-all-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-all-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/include-any-group"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-any-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygot.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-upper-bound"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLspPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny struct {
	*ygot.NodePath
}

// Egress (container): Static LSPs for which the router is an
//
//	egress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "egress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Egress (container): Static LSPs for which the router is an
//
//	egress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "egress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Static LSPs for which the router is an
//
//	ingress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ingress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ingress (container): Static LSPs for which the router is an
//
//	ingress node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ingress"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name to identify the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): name to identify the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transit (container): Static LSPs for which the router is an
//
//	transit node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transit"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath{
		NodePath: ygot.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transit (container): Static LSPs for which the router is an
//
//	transit node
//
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "transit"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny struct {
	*ygot.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncomingLabel (leaf): label value on the incoming packet
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/incoming-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "incoming-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): next hop IP address for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/push-label"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "push-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny struct {
	*ygot.NodePath
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	the LSP
//
// ----------------------------------------
// Defining module: "openconfig-mpls-igp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-setup-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	the LSP
//
// ----------------------------------------
// Defining module: "openconfig-mpls-igp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-setup-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny struct {
	*ygot.NodePath
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocolsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocolsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPathAny struct {
	*ygot.NodePath
}

// Ldp (container): LDP global signaling configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPath {
	return &NetworkInstance_Mpls_SignalingProtocols_LdpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ldp (container): LDP global signaling configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ldp"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_LdpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rsvp-te"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTePath{
		NodePath: ygot.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rsvp-te"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPathAny struct {
	*ygot.NodePath
}

// Global (container): Platform wide LDP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): Platform wide LDP configuration and state
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLabelSpaceId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAnyLabelSpaceId(LsrId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLabelSpaceId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId (wildcarded): uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAnyLabelSpaceId(LsrId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": "*"},
			n,
		),
	}
}

// NeighborAnyLsrId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAnyLsrId(LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// NeighborAnyLsrId (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId (wildcarded): string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAnyLsrId(LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Neighbor (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Neighbor (list): List of LDP neighbors and their attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
// LsrId: string
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targeted"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath{
		NodePath: ygot.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "targeted"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny struct {
	*ygot.NodePath
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// Authentication (container): Global LDP authentication
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "authentication"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "graceful-restart"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Global label switch router identifier
// configuration.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LsrId (leaf): Global label switch router identifier
// configuration.
// ----------------------------------------
// Defining module: "openconfig-mpls-ldp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lsr-id"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny {
	return &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lsr-id"},
			map[string]interface{}{},
			n,
		),
	}
}
