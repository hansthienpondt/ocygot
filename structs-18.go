/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_DefinedSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSet struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Name      *string                                           `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                 `path:"config/@name|@name" ygotAnnotation:"true"`
	TagValue  []RoutingPolicy_DefinedSets_TagSet_TagValue_Union `path:"config/tag-value" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛTagValue []ygot.Annotation                                 `path:"config/@tag-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTagValue retrieves the value of the leaf TagValue from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagValue is set, it can
// safely use t.GetTagValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagValue == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetTagValue() []RoutingPolicy_DefinedSets_TagSet_TagValue_Union {
	if t == nil || t.TagValue == nil {
		return nil
	}
	return t.TagValue
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_TagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_TagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_TagSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_TagSet.
func (*RoutingPolicy_DefinedSets_TagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinition struct {
	ΛMetadata  []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Name       *string                                              `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛName      []ygot.Annotation                                    `path:"config/@name|@name" ygotAnnotation:"true"`
	Statement  *RoutingPolicy_PolicyDefinition_Statement_OrderedMap `path:"statements/statement" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛStatement []ygot.Annotation                                    `path:"statements/@statement" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// AppendNewStatement creates a new entry in the Statement
// ordered map of the RoutingPolicy_PolicyDefinition struct. The keys of the list are
// populated from the input arguments.
func (s *RoutingPolicy_PolicyDefinition) AppendNewStatement(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.AppendNew(Name)
}

// AppendStatement appends the supplied RoutingPolicy_PolicyDefinition_Statement struct
// to the list Statement of RoutingPolicy_PolicyDefinition. If the key value(s)
// specified in the supplied RoutingPolicy_PolicyDefinition_Statement already exist in the list, an
// error is returned.
func (s *RoutingPolicy_PolicyDefinition) AppendStatement(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if s.Statement == nil {
		s.Statement = &RoutingPolicy_PolicyDefinition_Statement_OrderedMap{}
	}
	return s.Statement.Append(v)
}

// GetStatement retrieves the value with the specified key from the
// Statement map field of RoutingPolicy_PolicyDefinition. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *RoutingPolicy_PolicyDefinition) GetStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {
	if s == nil {
		return nil
	}
	key := Name
	return s.Statement.Get(key)
}

// DeleteStatement deletes the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If there is no such element, the
// function is a no-op.
func (s *RoutingPolicy_PolicyDefinition) DeleteStatement(Name string) bool {
	key := Name
	return s.Statement.Delete(key)
}

// RoutingPolicy_PolicyDefinition_Statement_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement.
type RoutingPolicy_PolicyDefinition_Statement_OrderedMap struct {
	keys     []string
	valueMap map[string]*RoutingPolicy_PolicyDefinition_Statement
}

// IsYANGOrderedList ensures that RoutingPolicy_PolicyDefinition_Statement_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*RoutingPolicy_PolicyDefinition_Statement_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*RoutingPolicy_PolicyDefinition_Statement{}
	}
}

// Keys returns a copy of the list's keys.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Values() []*RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	var values []*RoutingPolicy_PolicyDefinition_Statement
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of RoutingPolicy_PolicyDefinition_Statement_OrderedMap
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Get(key string) *RoutingPolicy_PolicyDefinition_Statement {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a RoutingPolicy_PolicyDefinition_Statement, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) Append(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	if v == nil {
		return fmt.Errorf("nil RoutingPolicy_PolicyDefinition_Statement")
	}
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new RoutingPolicy_PolicyDefinition_Statement, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *RoutingPolicy_PolicyDefinition_Statement_OrderedMap) AppendNew(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append RoutingPolicy_PolicyDefinition_Statement")
	}
	key := Name

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &RoutingPolicy_PolicyDefinition_Statement{
		Name: &Name,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Statement.Values() {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition.
func (*RoutingPolicy_PolicyDefinition) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement struct {
	ΛMetadata   []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Actions     *RoutingPolicy_PolicyDefinition_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	ΛActions    []ygot.Annotation                                    `path:"@actions" ygotAnnotation:"true"`
	Conditions  *RoutingPolicy_PolicyDefinition_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	ΛConditions []ygot.Annotation                                    `path:"@conditions" ygotAnnotation:"true"`
	Name        *string                                              `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛName       []ygot.Annotation                                    `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &RoutingPolicy_PolicyDefinition_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition_Statement struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement.
func (*RoutingPolicy_PolicyDefinition_Statement) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions struct {
	ΛMetadata     []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	BgpActions    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions  `path:"bgp-actions" module:"openconfig-bgp-policy"`
	ΛBgpActions   []ygot.Annotation                                             `path:"@bgp-actions" ygotAnnotation:"true"`
	OspfActions   *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions `path:"ospf-actions" module:"openconfig-ospf-policy"`
	ΛOspfActions  []ygot.Annotation                                             `path:"@ospf-actions" ygotAnnotation:"true"`
	PolicyResult  E_RoutingPolicy_PolicyResultType                              `path:"config/policy-result" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛPolicyResult []ygot.Annotation                                             `path:"config/@policy-result" ygotAnnotation:"true"`
	SetTag        *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag      `path:"set-tag" module:"openconfig-routing-policy"`
	ΛSetTag       []ygot.Annotation                                             `path:"@set-tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) IsYANGGoStruct() {}

// GetOrCreateBgpActions retrieves the value of the BgpActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t.BgpActions != nil {
		return t.BgpActions
	}
	t.BgpActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions{}
	return t.BgpActions
}

// GetOrCreateOspfActions retrieves the value of the OspfActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateOspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions {
	if t.OspfActions != nil {
		return t.OspfActions
	}
	t.OspfActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions{}
	return t.OspfActions
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetBgpActions returns the value of the BgpActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field BgpActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t != nil && t.BgpActions != nil {
		return t.BgpActions
	}
	return nil
}

// GetOspfActions returns the value of the OspfActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field OspfActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions {
	if t != nil && t.OspfActions != nil {
		return t.OspfActions
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetPolicyResult() E_RoutingPolicy_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	return t.PolicyResult
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PolicyResult == 0 {
		t.PolicyResult = RoutingPolicy_PolicyResultType_NEXT_STATEMENT
	}
	t.BgpActions.PopulateDefaults()
	t.OspfActions.PopulateDefaults()
	t.SetTag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions struct {
	ΛMetadata         []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	SetAsPathPrepend  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend `path:"set-as-path-prepend" module:"openconfig-bgp-policy"`
	ΛSetAsPathPrepend []ygot.Annotation                                                             `path:"@set-as-path-prepend" ygotAnnotation:"true"`
	SetCommunity      *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity     `path:"set-community" module:"openconfig-bgp-policy"`
	ΛSetCommunity     []ygot.Annotation                                                             `path:"@set-community" ygotAnnotation:"true"`
	SetExtCommunity   *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity  `path:"set-ext-community" module:"openconfig-bgp-policy"`
	ΛSetExtCommunity  []ygot.Annotation                                                             `path:"@set-ext-community" ygotAnnotation:"true"`
	SetLocalPref      *uint32                                                                       `path:"config/set-local-pref" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛSetLocalPref     []ygot.Annotation                                                             `path:"config/@set-local-pref" ygotAnnotation:"true"`
	SetMed            RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union      `path:"config/set-med" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛSetMed           []ygot.Annotation                                                             `path:"config/@set-med" ygotAnnotation:"true"`
	SetNextHop        RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union  `path:"config/set-next-hop" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛSetNextHop       []ygot.Annotation                                                             `path:"config/@set-next-hop" ygotAnnotation:"true"`
	SetRouteOrigin    E_BgpTypes_BgpOriginAttrType                                                  `path:"config/set-route-origin" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛSetRouteOrigin   []ygot.Annotation                                                             `path:"config/@set-route-origin" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) IsYANGGoStruct() {}

// GetOrCreateSetAsPathPrepend retrieves the value of the SetAsPathPrepend field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	t.SetAsPathPrepend = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend{}
	return t.SetAsPathPrepend
}

// GetOrCreateSetCommunity retrieves the value of the SetCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t.SetCommunity != nil {
		return t.SetCommunity
	}
	t.SetCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity{}
	return t.SetCommunity
}

// GetOrCreateSetExtCommunity retrieves the value of the SetExtCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	t.SetExtCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity{}
	return t.SetExtCommunity
}

// GetSetAsPathPrepend returns the value of the SetAsPathPrepend struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetAsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t != nil && t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	return nil
}

// GetSetCommunity returns the value of the SetCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t != nil && t.SetCommunity != nil {
		return t.SetCommunity
	}
	return nil
}

// GetSetExtCommunity returns the value of the SetExtCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetExtCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t != nil && t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	return nil
}

// GetSetLocalPref retrieves the value of the leaf SetLocalPref from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLocalPref is set, it can
// safely use t.GetSetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLocalPref == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetLocalPref() uint32 {
	if t == nil || t.SetLocalPref == nil {
		return 0
	}
	return *t.SetLocalPref
}

// GetSetMed retrieves the value of the leaf SetMed from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMed is set, it can
// safely use t.GetSetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMed == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMed() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union {
	if t == nil || t.SetMed == nil {
		return nil
	}
	return t.SetMed
}

// GetSetNextHop retrieves the value of the leaf SetNextHop from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetNextHop is set, it can
// safely use t.GetSetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetNextHop == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetNextHop() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union {
	if t == nil || t.SetNextHop == nil {
		return nil
	}
	return t.SetNextHop
}

// GetSetRouteOrigin retrieves the value of the leaf SetRouteOrigin from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetRouteOrigin is set, it can
// safely use t.GetSetRouteOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetRouteOrigin == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetRouteOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.SetRouteOrigin == 0 {
		return 0
	}
	return t.SetRouteOrigin
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetAsPathPrepend.PopulateDefaults()
	t.SetCommunity.PopulateDefaults()
	t.SetExtCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Asn       *uint32           `path:"config/asn" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛAsn      []ygot.Annotation `path:"config/@asn" ygotAnnotation:"true"`
	RepeatN   *uint8            `path:"config/repeat-n" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛRepeatN  []ygot.Annotation `path:"config/@repeat-n" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) IsYANGGoStruct() {
}

// GetAsn retrieves the value of the leaf Asn from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetRepeatN retrieves the value of the leaf RepeatN from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity struct {
	ΛMetadata  []ygot.Annotation                                                                   `path:"@" ygotAnnotation:"true"`
	Inline     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	ΛInline    []ygot.Annotation                                                                   `path:"@inline" ygotAnnotation:"true"`
	Method     E_SetCommunity_Method                                                               `path:"config/method" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMethod    []ygot.Annotation                                                                   `path:"config/@method" ygotAnnotation:"true"`
	Options    E_BgpPolicy_BgpSetCommunityOptionType                                               `path:"config/options" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛOptions   []ygot.Annotation                                                                   `path:"config/@options" ygotAnnotation:"true"`
	Reference  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
	ΛReference []ygot.Annotation                                                                   `path:"@reference" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	ΛMetadata    []ygot.Annotation                                                                                   `path:"@" ygotAnnotation:"true"`
	Communities  []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union `path:"config/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunities []ygot.Annotation                                                                                   `path:"config/@communities" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CommunitySetRef   *string           `path:"config/community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunitySetRef  []ygot.Annotation `path:"config/@community-set-ref" ygotAnnotation:"true"`
	CommunitySetRefs  []string          `path:"config/community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunitySetRefs []ygot.Annotation `path:"config/@community-set-refs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) IsYANGGoStruct() {
}

// GetCommunitySetRef retrieves the value of the leaf CommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRef is set, it can
// safely use t.GetCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRef() string {
	if t == nil || t.CommunitySetRef == nil {
		return ""
	}
	return *t.CommunitySetRef
}

// GetCommunitySetRefs retrieves the value of the leaf CommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRefs is set, it can
// safely use t.GetCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRefs() []string {
	if t == nil || t.CommunitySetRefs == nil {
		return nil
	}
	return t.CommunitySetRefs
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity struct {
	ΛMetadata  []ygot.Annotation                                                                      `path:"@" ygotAnnotation:"true"`
	Inline     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	ΛInline    []ygot.Annotation                                                                      `path:"@inline" ygotAnnotation:"true"`
	Method     E_SetCommunity_Method                                                                  `path:"config/method" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMethod    []ygot.Annotation                                                                      `path:"config/@method" ygotAnnotation:"true"`
	Options    E_BgpPolicy_BgpSetCommunityOptionType                                                  `path:"config/options" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛOptions   []ygot.Annotation                                                                      `path:"config/@options" ygotAnnotation:"true"`
	Reference  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
	ΛReference []ygot.Annotation                                                                      `path:"@reference" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) IsYANGGoStruct() {
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetMethod() E_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	ΛMetadata    []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	Communities  []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union `path:"config/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunities []ygot.Annotation                                                                                      `path:"config/@communities" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ExtCommunitySetRef   *string           `path:"config/ext-community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛExtCommunitySetRef  []ygot.Annotation `path:"config/@ext-community-set-ref" ygotAnnotation:"true"`
	ExtCommunitySetRefs  []string          `path:"config/ext-community-set-refs" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛExtCommunitySetRefs []ygot.Annotation `path:"config/@ext-community-set-refs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) IsYANGGoStruct() {
}

// GetExtCommunitySetRef retrieves the value of the leaf ExtCommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRef is set, it can
// safely use t.GetExtCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRef() string {
	if t == nil || t.ExtCommunitySetRef == nil {
		return ""
	}
	return *t.ExtCommunitySetRef
}

// GetExtCommunitySetRefs retrieves the value of the leaf ExtCommunitySetRefs from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRefs is set, it can
// safely use t.GetExtCommunitySetRefs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRefs == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRefs() []string {
	if t == nil || t.ExtCommunitySetRefs == nil {
		return nil
	}
	return t.ExtCommunitySetRefs
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions struct {
	ΛMetadata  []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	SetArea    RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union `path:"config/set-area" module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	ΛSetArea   []ygot.Annotation                                                          `path:"config/@set-area" ygotAnnotation:"true"`
	SetMetric  *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric    `path:"set-metric" module:"openconfig-ospf-policy"`
	ΛSetMetric []ygot.Annotation                                                          `path:"@set-metric" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) IsYANGGoStruct() {}

// GetOrCreateSetMetric retrieves the value of the SetMetric field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetOrCreateSetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric {
	if t.SetMetric != nil {
		return t.SetMetric
	}
	t.SetMetric = &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric{}
	return t.SetMetric
}

// GetSetMetric returns the value of the SetMetric struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions. If the receiver or the field SetMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetSetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric {
	if t != nil && t.SetMetric != nil {
		return t.SetMetric
	}
	return nil
}

// GetSetArea retrieves the value of the leaf SetArea from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetArea is set, it can
// safely use t.GetSetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetArea == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) GetSetArea() RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union {
	if t == nil || t.SetArea == nil {
		return nil
	}
	return t.SetArea
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SetMetric.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions) ΛBelongingModule() string {
	return "openconfig-ospf-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric struct {
	ΛMetadata   []ygot.Annotation      `path:"@" ygotAnnotation:"true"`
	Metric      *uint16                `path:"config/metric" module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	ΛMetric     []ygot.Annotation      `path:"config/@metric" ygotAnnotation:"true"`
	MetricType  E_SetMetric_MetricType `path:"config/metric-type" module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	ΛMetricType []ygot.Annotation      `path:"config/@metric-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) IsYANGGoStruct() {}

// GetMetric retrieves the value of the leaf Metric from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) GetMetricType() E_SetMetric_MetricType {
	if t == nil || t.MetricType == 0 {
		return SetMetric_MetricType_EXTERNAL_TYPE_2
	}
	return t.MetricType
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MetricType == 0 {
		t.MetricType = SetMetric_MetricType_EXTERNAL_TYPE_2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric) ΛBelongingModule() string {
	return "openconfig-ospf-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag struct {
	ΛMetadata  []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Inline     *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	ΛInline    []ygot.Annotation                                                  `path:"@inline" ygotAnnotation:"true"`
	Mode       E_SetTag_Mode                                                      `path:"config/mode" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛMode      []ygot.Annotation                                                  `path:"config/@mode" ygotAnnotation:"true"`
	Reference  *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
	ΛReference []ygot.Annotation                                                  `path:"@reference" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetMode() E_SetTag_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inline.PopulateDefaults()
	t.Reference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Tag       []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union `path:"config/tag" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛTag      []ygot.Annotation                                                          `path:"config/@tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) GetTag() []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TagSet    *string           `path:"config/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛTagSet   []ygot.Annotation `path:"config/@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions struct {
	ΛMetadata          []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	BgpConditions      *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions    `path:"bgp-conditions" module:"openconfig-bgp-policy"`
	ΛBgpConditions     []ygot.Annotation                                                     `path:"@bgp-conditions" ygotAnnotation:"true"`
	CallPolicy         *string                                                               `path:"config/call-policy" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛCallPolicy        []ygot.Annotation                                                     `path:"config/@call-policy" ygotAnnotation:"true"`
	InstallProtocolEq  E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"config/install-protocol-eq" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛInstallProtocolEq []ygot.Annotation                                                     `path:"config/@install-protocol-eq" ygotAnnotation:"true"`
	MatchInterface     *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	ΛMatchInterface    []ygot.Annotation                                                     `path:"@match-interface" ygotAnnotation:"true"`
	MatchNeighborSet   *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	ΛMatchNeighborSet  []ygot.Annotation                                                     `path:"@match-neighbor-set" ygotAnnotation:"true"`
	MatchPrefixSet     *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	ΛMatchPrefixSet    []ygot.Annotation                                                     `path:"@match-prefix-set" ygotAnnotation:"true"`
	MatchTagSet        *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
	ΛMatchTagSet       []ygot.Annotation                                                     `path:"@match-tag-set" ygotAnnotation:"true"`
	OspfConditions     *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions   `path:"ospf-conditions" module:"openconfig-ospf-policy"`
	ΛOspfConditions    []ygot.Annotation                                                     `path:"@ospf-conditions" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) IsYANGGoStruct() {}

// GetOrCreateBgpConditions retrieves the value of the BgpConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t.BgpConditions != nil {
		return t.BgpConditions
	}
	t.BgpConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions{}
	return t.BgpConditions
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetOrCreateOspfConditions retrieves the value of the OspfConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateOspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions {
	if t.OspfConditions != nil {
		return t.OspfConditions
	}
	t.OspfConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions{}
	return t.OspfConditions
}

// GetBgpConditions returns the value of the BgpConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field BgpConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t != nil && t.BgpConditions != nil {
		return t.BgpConditions
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetOspfConditions returns the value of the OspfConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field OspfConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions {
	if t != nil && t.OspfConditions != nil {
		return t.OspfConditions
	}
	return nil
}

// GetCallPolicy retrieves the value of the leaf CallPolicy from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallPolicy is set, it can
// safely use t.GetCallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallPolicy == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetCallPolicy() string {
	if t == nil || t.CallPolicy == nil {
		return ""
	}
	return *t.CallPolicy
}

// GetInstallProtocolEq retrieves the value of the leaf InstallProtocolEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallProtocolEq is set, it can
// safely use t.GetInstallProtocolEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallProtocolEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetInstallProtocolEq() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.InstallProtocolEq == 0 {
		return 0
	}
	return t.InstallProtocolEq
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpConditions.PopulateDefaults()
	t.MatchInterface.PopulateDefaults()
	t.MatchNeighborSet.PopulateDefaults()
	t.MatchPrefixSet.PopulateDefaults()
	t.MatchTagSet.PopulateDefaults()
	t.OspfConditions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions struct {
	ΛMetadata        []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	AfiSafiIn        []E_BgpTypes_AFI_SAFI_TYPE                                                        `path:"config/afi-safi-in" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛAfiSafiIn       []ygot.Annotation                                                                 `path:"config/@afi-safi-in" ygotAnnotation:"true"`
	AsPathLength     *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength   `path:"as-path-length" module:"openconfig-bgp-policy"`
	ΛAsPathLength    []ygot.Annotation                                                                 `path:"@as-path-length" ygotAnnotation:"true"`
	CommunityCount   *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount `path:"community-count" module:"openconfig-bgp-policy"`
	ΛCommunityCount  []ygot.Annotation                                                                 `path:"@community-count" ygotAnnotation:"true"`
	CommunitySet     *string                                                                           `path:"config/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunitySet    []ygot.Annotation                                                                 `path:"config/@community-set" ygotAnnotation:"true"`
	ExtCommunitySet  *string                                                                           `path:"config/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛExtCommunitySet []ygot.Annotation                                                                 `path:"config/@ext-community-set" ygotAnnotation:"true"`
	LocalPrefEq      *uint32                                                                           `path:"config/local-pref-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛLocalPrefEq     []ygot.Annotation                                                                 `path:"config/@local-pref-eq" ygotAnnotation:"true"`
	MatchAsPathSet   *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet `path:"match-as-path-set" module:"openconfig-bgp-policy"`
	ΛMatchAsPathSet  []ygot.Annotation                                                                 `path:"@match-as-path-set" ygotAnnotation:"true"`
	MedEq            *uint32                                                                           `path:"config/med-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMedEq           []ygot.Annotation                                                                 `path:"config/@med-eq" ygotAnnotation:"true"`
	NextHopIn        []string                                                                          `path:"config/next-hop-in" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛNextHopIn       []ygot.Annotation                                                                 `path:"config/@next-hop-in" ygotAnnotation:"true"`
	OriginEq         E_BgpTypes_BgpOriginAttrType                                                      `path:"config/origin-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛOriginEq        []ygot.Annotation                                                                 `path:"config/@origin-eq" ygotAnnotation:"true"`
	RouteType        E_BgpConditions_RouteType                                                         `path:"config/route-type" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛRouteType       []ygot.Annotation                                                                 `path:"config/@route-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateCommunityCount retrieves the value of the CommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t.CommunityCount != nil {
		return t.CommunityCount
	}
	t.CommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount{}
	return t.CommunityCount
}

// GetOrCreateMatchAsPathSet retrieves the value of the MatchAsPathSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	t.MatchAsPathSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	return t.MatchAsPathSet
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetCommunityCount returns the value of the CommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field CommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t != nil && t.CommunityCount != nil {
		return t.CommunityCount
	}
	return nil
}

// GetMatchAsPathSet returns the value of the MatchAsPathSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchAsPathSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t != nil && t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	return nil
}

// GetAfiSafiIn retrieves the value of the leaf AfiSafiIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiIn is set, it can
// safely use t.GetAfiSafiIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAfiSafiIn() []E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiIn == nil {
		return nil
	}
	return t.AfiSafiIn
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetLocalPrefEq retrieves the value of the leaf LocalPrefEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPrefEq is set, it can
// safely use t.GetLocalPrefEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPrefEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetLocalPrefEq() uint32 {
	if t == nil || t.LocalPrefEq == nil {
		return 0
	}
	return *t.LocalPrefEq
}

// GetMedEq retrieves the value of the leaf MedEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedEq is set, it can
// safely use t.GetMedEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMedEq() uint32 {
	if t == nil || t.MedEq == nil {
		return 0
	}
	return *t.MedEq
}

// GetNextHopIn retrieves the value of the leaf NextHopIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIn is set, it can
// safely use t.GetNextHopIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetNextHopIn() []string {
	if t == nil || t.NextHopIn == nil {
		return nil
	}
	return t.NextHopIn
}

// GetOriginEq retrieves the value of the leaf OriginEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginEq is set, it can
// safely use t.GetOriginEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOriginEq() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.OriginEq == 0 {
		return 0
	}
	return t.OriginEq
}

// GetRouteType retrieves the value of the leaf RouteType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetRouteType() E_BgpConditions_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPathLength.PopulateDefaults()
	t.CommunityCount.PopulateDefaults()
	t.MatchAsPathSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Operator  E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"config/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛOperator []ygot.Annotation                  `path:"config/@operator" ygotAnnotation:"true"`
	Value     *uint32                            `path:"config/value" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛValue    []ygot.Annotation                  `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount struct {
	ΛMetadata []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Operator  E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"config/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛOperator []ygot.Annotation                  `path:"config/@operator" ygotAnnotation:"true"`
	Value     *uint32                            `path:"config/value" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛValue    []ygot.Annotation                  `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	ΛMetadata        []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	AsPathSet        *string                           `path:"config/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛAsPathSet       []ygot.Annotation                 `path:"config/@as-path-set" ygotAnnotation:"true"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsType `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMatchSetOptions []ygot.Annotation                 `path:"config/@match-set-options" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) IsYANGGoStruct() {
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet struct {
	ΛMetadata        []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                           `path:"config/@match-set-options" ygotAnnotation:"true"`
	NeighborSet      *string                                     `path:"config/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛNeighborSet     []ygot.Annotation                           `path:"config/@neighbor-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetNeighborSet retrieves the value of the leaf NeighborSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSet is set, it can
// safely use t.GetNeighborSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetNeighborSet() string {
	if t == nil || t.NeighborSet == nil {
		return ""
	}
	return *t.NeighborSet
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet struct {
	ΛMetadata        []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                           `path:"config/@match-set-options" ygotAnnotation:"true"`
	PrefixSet        *string                                     `path:"config/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛPrefixSet       []ygot.Annotation                           `path:"config/@prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet struct {
	ΛMetadata        []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛMatchSetOptions []ygot.Annotation                           `path:"config/@match-set-options" ygotAnnotation:"true"`
	TagSet           *string                                     `path:"config/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛTagSet          []ygot.Annotation                           `path:"config/@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AreaEq    RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union `path:"config/area-eq" module:"openconfig-ospf-policy/openconfig-ospf-policy"`
	ΛAreaEq   []ygot.Annotation                                                               `path:"config/@area-eq" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) IsYANGGoStruct() {}

// GetAreaEq retrieves the value of the leaf AreaEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaEq is set, it can
// safely use t.GetAreaEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) GetAreaEq() RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions_AreaEq_Union {
	if t == nil || t.AreaEq == nil {
		return nil
	}
	return t.AreaEq
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditions) ΛBelongingModule() string {
	return "openconfig-ospf-policy"
}

// Sampling represents the /openconfig-sampling/sampling YANG schema element.
type Sampling struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling.
func (*Sampling) ΛBelongingModule() string {
	return "openconfig-sampling"
}

// Stp represents the /openconfig-spanning-tree/stp YANG schema element.
type Stp struct {
	ΛMetadata  []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	Global     *Stp_Global               `path:"global" module:"openconfig-spanning-tree"`
	ΛGlobal    []ygot.Annotation         `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*Stp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛInterface []ygot.Annotation         `path:"interfaces/@interface" ygotAnnotation:"true"`
	Mstp       *Stp_Mstp                 `path:"mstp" module:"openconfig-spanning-tree"`
	ΛMstp      []ygot.Annotation         `path:"@mstp" ygotAnnotation:"true"`
	Rstp       *Stp_Rstp                 `path:"rstp" module:"openconfig-spanning-tree"`
	ΛRstp      []ygot.Annotation         `path:"@rstp" ygotAnnotation:"true"`
	Vlan       map[uint16]*Stp_Vlan      `path:"rapid-pvst/vlan" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛVlan      []ygot.Annotation         `path:"rapid-pvst/@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewInterface(Name string) (*Stp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateInterface(Name string) *Stp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetInterface(Name string) *Stp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp. If there is no such element, the function
// is a no-op.
func (t *Stp) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Interface struct to the
// list Interface of Stp. If the key value(s) specified in
// the supplied Stp_Interface already exist in the list, an error is
// returned.
func (t *Stp) AppendInterface(v *Stp_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVlan creates a new entry in the Vlan list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewVlan(VlanId uint16) (*Stp_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &Stp_Vlan{
		VlanId: &VlanId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameVlan(oldK, newK uint16) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.VlanId = &newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateVlan(VlanId uint16) *Stp_Vlan {

	key := VlanId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetVlan(VlanId uint16) *Stp_Vlan {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlan deletes the value with the specified keys from
// the receiver Stp. If there is no such element, the function
// is a no-op.
func (t *Stp) DeleteVlan(VlanId uint16) {
	key := VlanId

	delete(t.Vlan, key)
}

// AppendVlan appends the supplied Stp_Vlan struct to the
// list Vlan of Stp. If the key value(s) specified in
// the supplied Stp_Vlan already exist in the list, an error is
// returned.
func (t *Stp) AppendVlan(v *Stp_Vlan) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateGlobal() *Stp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &Stp_Global{}
	return t.Global
}

// GetOrCreateMstp retrieves the value of the Mstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateMstp() *Stp_Mstp {
	if t.Mstp != nil {
		return t.Mstp
	}
	t.Mstp = &Stp_Mstp{}
	return t.Mstp
}

// GetOrCreateRstp retrieves the value of the Rstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateRstp() *Stp_Rstp {
	if t.Rstp != nil {
		return t.Rstp
	}
	t.Rstp = &Stp_Rstp{}
	return t.Rstp
}

// GetGlobal returns the value of the Global struct pointer
// from Stp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetGlobal() *Stp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetMstp returns the value of the Mstp struct pointer
// from Stp. If the receiver or the field Mstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetMstp() *Stp_Mstp {
	if t != nil && t.Mstp != nil {
		return t.Mstp
	}
	return nil
}

// GetRstp returns the value of the Rstp struct pointer
// from Stp. If the receiver or the field Rstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetRstp() *Stp_Rstp {
	if t != nil && t.Rstp != nil {
		return t.Rstp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Global.PopulateDefaults()
	t.Mstp.PopulateDefaults()
	t.Rstp.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Vlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp.
func (*Stp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Global represents the /openconfig-spanning-tree/stp/global YANG schema element.
type Stp_Global struct {
	ΛMetadata                   []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	BpduFilter                  *bool                              `path:"config/bpdu-filter" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBpduFilter                 []ygot.Annotation                  `path:"config/@bpdu-filter" ygotAnnotation:"true"`
	BpduGuard                   *bool                              `path:"config/bpdu-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBpduGuard                  []ygot.Annotation                  `path:"config/@bpdu-guard" ygotAnnotation:"true"`
	BpduguardTimeoutRecovery    *uint8                             `path:"config/bpduguard-timeout-recovery" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBpduguardTimeoutRecovery   []ygot.Annotation                  `path:"config/@bpduguard-timeout-recovery" ygotAnnotation:"true"`
	BridgeAssurance             *bool                              `path:"config/bridge-assurance" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgeAssurance            []ygot.Annotation                  `path:"config/@bridge-assurance" ygotAnnotation:"true"`
	EnabledProtocol             []E_SpanningTreeTypes_STP_PROTOCOL `path:"config/enabled-protocol" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛEnabledProtocol            []ygot.Annotation                  `path:"config/@enabled-protocol" ygotAnnotation:"true"`
	EtherchannelMisconfigGuard  *bool                              `path:"config/etherchannel-misconfig-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛEtherchannelMisconfigGuard []ygot.Annotation                  `path:"config/@etherchannel-misconfig-guard" ygotAnnotation:"true"`
	LoopGuard                   *bool                              `path:"config/loop-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛLoopGuard                  []ygot.Annotation                  `path:"config/@loop-guard" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Global) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduFilter is set, it can
// safely use t.GetBpduFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduFilter == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduGuard is set, it can
// safely use t.GetBpduGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetBpduguardTimeoutRecovery retrieves the value of the leaf BpduguardTimeoutRecovery from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduguardTimeoutRecovery is set, it can
// safely use t.GetBpduguardTimeoutRecovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduguardTimeoutRecovery == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduguardTimeoutRecovery() uint8 {
	if t == nil || t.BpduguardTimeoutRecovery == nil {
		return 0
	}
	return *t.BpduguardTimeoutRecovery
}

// GetBridgeAssurance retrieves the value of the leaf BridgeAssurance from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAssurance is set, it can
// safely use t.GetBridgeAssurance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAssurance == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBridgeAssurance() bool {
	if t == nil || t.BridgeAssurance == nil {
		return false
	}
	return *t.BridgeAssurance
}

// GetEnabledProtocol retrieves the value of the leaf EnabledProtocol from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnabledProtocol is set, it can
// safely use t.GetEnabledProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnabledProtocol == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetEnabledProtocol() []E_SpanningTreeTypes_STP_PROTOCOL {
	if t == nil || t.EnabledProtocol == nil {
		return nil
	}
	return t.EnabledProtocol
}

// GetEtherchannelMisconfigGuard retrieves the value of the leaf EtherchannelMisconfigGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtherchannelMisconfigGuard is set, it can
// safely use t.GetEtherchannelMisconfigGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtherchannelMisconfigGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetEtherchannelMisconfigGuard() bool {
	if t == nil || t.EtherchannelMisconfigGuard == nil {
		return false
	}
	return *t.EtherchannelMisconfigGuard
}

// GetLoopGuard retrieves the value of the leaf LoopGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopGuard is set, it can
// safely use t.GetLoopGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetLoopGuard() bool {
	if t == nil || t.LoopGuard == nil {
		return false
	}
	return *t.LoopGuard
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Global
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Global) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Global) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Global.
func (*Stp_Global) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Interface represents the /openconfig-spanning-tree/stp/interfaces/interface YANG schema element.
type Stp_Interface struct {
	ΛMetadata   []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	BpduFilter  *bool                             `path:"config/bpdu-filter" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBpduFilter []ygot.Annotation                 `path:"config/@bpdu-filter" ygotAnnotation:"true"`
	BpduGuard   *bool                             `path:"config/bpdu-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBpduGuard  []ygot.Annotation                 `path:"config/@bpdu-guard" ygotAnnotation:"true"`
	EdgePort    E_SpanningTreeTypes_STP_EDGE_PORT `path:"config/edge-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛEdgePort   []ygot.Annotation                 `path:"config/@edge-port" ygotAnnotation:"true"`
	Guard       E_SpanningTreeTypes_StpGuardType  `path:"config/guard" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛGuard      []ygot.Annotation                 `path:"config/@guard" ygotAnnotation:"true"`
	LinkType    E_SpanningTreeTypes_StpLinkType   `path:"config/link-type" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛLinkType   []ygot.Annotation                 `path:"config/@link-type" ygotAnnotation:"true"`
	Name        *string                           `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛName       []ygot.Annotation                 `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Interface) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduFilter is set, it can
// safely use t.GetBpduFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduFilter == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduGuard is set, it can
// safely use t.GetBpduGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduGuard == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetEdgePort retrieves the value of the leaf EdgePort from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetEdgePort() E_SpanningTreeTypes_STP_EDGE_PORT {
	if t == nil || t.EdgePort == 0 {
		return 0
	}
	return t.EdgePort
}

// GetGuard retrieves the value of the leaf Guard from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Guard is set, it can
// safely use t.GetGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Guard == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetGuard() E_SpanningTreeTypes_StpGuardType {
	if t == nil || t.Guard == 0 {
		return 0
	}
	return t.Guard
}

// GetLinkType retrieves the value of the leaf LinkType from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetLinkType() E_SpanningTreeTypes_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return 0
	}
	return t.LinkType
}

// GetName retrieves the value of the leaf Name from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Stp_Interface struct, which is a YANG list entry.
func (t *Stp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Interface.
func (*Stp_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp represents the /openconfig-spanning-tree/stp/mstp YANG schema element.
type Stp_Mstp struct {
	ΛMetadata        []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	ForwardingDelay  *uint8                           `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardingDelay []ygot.Annotation                `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime        *uint8                           `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHelloTime       []ygot.Annotation                `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount        *uint8                           `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldCount       []ygot.Annotation                `path:"config/@hold-count" ygotAnnotation:"true"`
	MaxAge           *uint8                           `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛMaxAge          []ygot.Annotation                `path:"config/@max-age" ygotAnnotation:"true"`
	MaxHop           *uint8                           `path:"config/max-hop" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛMaxHop          []ygot.Annotation                `path:"config/@max-hop" ygotAnnotation:"true"`
	MstInstance      map[uint16]*Stp_Mstp_MstInstance `path:"mst-instances/mst-instance" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛMstInstance     []ygot.Annotation                `path:"mst-instances/@mst-instance" ygotAnnotation:"true"`
	Name             *string                          `path:"config/name" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛName            []ygot.Annotation                `path:"config/@name" ygotAnnotation:"true"`
	Revision         *uint32                          `path:"config/revision" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRevision        []ygot.Annotation                `path:"config/@revision" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp) IsYANGGoStruct() {}

// NewMstInstance creates a new entry in the MstInstance list of the
// Stp_Mstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp) NewMstInstance(MstId uint16) (*Stp_Mstp_MstInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	key := MstId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MstInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MstInstance", key)
	}

	t.MstInstance[key] = &Stp_Mstp_MstInstance{
		MstId: &MstId,
	}

	return t.MstInstance[key], nil
}

// RenameMstInstance renames an entry in the list MstInstance within
// the Stp_Mstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp) RenameMstInstance(oldK, newK uint16) error {
	if _, ok := t.MstInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MstInstance", newK)
	}

	e, ok := t.MstInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MstInstance", oldK)
	}
	e.MstId = &newK

	t.MstInstance[newK] = e
	delete(t.MstInstance, oldK)
	return nil
}

// GetOrCreateMstInstance retrieves the value with the specified keys from
// the receiver Stp_Mstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp) GetOrCreateMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	key := MstId

	if v, ok := t.MstInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMstInstance(MstId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMstInstance got unexpected error: %v", err))
	}
	return v
}

// GetMstInstance retrieves the value with the specified key from
// the MstInstance map field of Stp_Mstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp) GetMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	if t == nil {
		return nil
	}

	key := MstId

	if lm, ok := t.MstInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteMstInstance deletes the value with the specified keys from
// the receiver Stp_Mstp. If there is no such element, the function
// is a no-op.
func (t *Stp_Mstp) DeleteMstInstance(MstId uint16) {
	key := MstId

	delete(t.MstInstance, key)
}

// AppendMstInstance appends the supplied Stp_Mstp_MstInstance struct to the
// list MstInstance of Stp_Mstp. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance already exist in the list, an error is
// returned.
func (t *Stp_Mstp) AppendMstInstance(v *Stp_Mstp_MstInstance) error {
	if v.MstId == nil {
		return fmt.Errorf("invalid nil key received for MstId")
	}

	key := *v.MstId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	if _, ok := t.MstInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MstInstance %v", key)
	}

	t.MstInstance[key] = v
	return nil
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetMaxHop retrieves the value of the leaf MaxHop from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxHop is set, it can
// safely use t.GetMaxHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxHop == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxHop() uint8 {
	if t == nil || t.MaxHop == nil {
		return 0
	}
	return *t.MaxHop
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevision retrieves the value of the leaf Revision from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revision is set, it can
// safely use t.GetRevision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revision == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetRevision() uint32 {
	if t == nil || t.Revision == nil {
		return 0
	}
	return *t.Revision
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Mstp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Mstp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldCount == nil {
		var v uint8 = 6
		t.HoldCount = &v
	}
	for _, e := range t.MstInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp.
func (*Stp_Mstp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance YANG schema element.
type Stp_Mstp_MstInstance struct {
	ΛMetadata               []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                                    `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation                          `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint16                                    `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation                          `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                                    `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation                          `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint16                                    `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation                          `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	HoldTime                *uint8                                     `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation                          `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Mstp_MstInstance_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation                          `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                                    `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation                          `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MstId                   *uint16                                    `path:"config/mst-id|mst-id" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛMstId                  []ygot.Annotation                          `path:"config/@mst-id|@mst-id" ygotAnnotation:"true"`
	RootCost                *uint32                                    `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation                          `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                                    `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation                          `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                                    `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation                          `path:"state/@topology-changes" ygotAnnotation:"true"`
	Vlan                    []Stp_Mstp_MstInstance_Vlan_Union          `path:"config/vlan" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛVlan                   []ygot.Annotation                          `path:"config/@vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Mstp_MstInstance struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp_MstInstance) NewInterface(Name string) (*Stp_Mstp_MstInstance_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Mstp_MstInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Mstp_MstInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp_MstInstance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Mstp_MstInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp_MstInstance) GetOrCreateInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Mstp_MstInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp_MstInstance) GetInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Mstp_MstInstance. If there is no such element, the function
// is a no-op.
func (t *Stp_Mstp_MstInstance) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Mstp_MstInstance_Interface struct to the
// list Interface of Stp_Mstp_MstInstance. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance_Interface already exist in the list, an error is
// returned.
func (t *Stp_Mstp_MstInstance) AppendInterface(v *Stp_Mstp_MstInstance_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMstId retrieves the value of the leaf MstId from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstId is set, it can
// safely use t.GetMstId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstId == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetMstId() uint16 {
	if t == nil || t.MstId == nil {
		return 0
	}
	return *t.MstId
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlan retrieves the value of the leaf Vlan from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetVlan() []Stp_Mstp_MstInstance_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Mstp_MstInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Mstp_MstInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BridgePriority == nil {
		var v uint16 = 32768
		t.BridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MstId == nil {
		return nil, fmt.Errorf("nil value for key MstId")
	}

	return map[string]interface{}{
		"mst-id": *t.MstId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance.
func (*Stp_Mstp_MstInstance) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance_Interface represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface YANG schema element.
type Stp_Mstp_MstInstance_Interface struct {
	ΛMetadata                 []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                                  `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                        `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Mstp_MstInstance_Interface_Counters `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                        `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                                  `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                        `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint16                                  `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                        `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                                  `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                        `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                                  `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                        `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                                   `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                        `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                                  `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                        `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint16                                  `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                        `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                                  `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                        `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                                  `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                        `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                                  `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                        `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                                   `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                        `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_SpanningTreeTypes_STP_PORT_STATE       `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                        `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_SpanningTreeTypes_STP_PORT_ROLE        `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                        `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Mstp_MstInstance_Interface) GetOrCreateCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Mstp_MstInstance_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Mstp_MstInstance_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Mstp_MstInstance_Interface) GetCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Mstp_MstInstance_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Mstp_MstInstance_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DesignatedBridgePriority == nil {
		var v uint16 = 32768
		t.DesignatedBridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance_Interface struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance_Interface.
func (*Stp_Mstp_MstInstance_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance_Interface_Counters represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Mstp_MstInstance_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Mstp_MstInstance_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Mstp_MstInstance_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Mstp_MstInstance_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance_Interface_Counters.
func (*Stp_Mstp_MstInstance_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp represents the /openconfig-spanning-tree/stp/rstp YANG schema element.
type Stp_Rstp struct {
	ΛMetadata               []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation              `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint16                        `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation              `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation              `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint16                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation              `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardingDelay         *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardingDelay        []ygot.Annotation              `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime               *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHelloTime              []ygot.Annotation              `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount               *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldCount              []ygot.Annotation              `path:"config/@hold-count" ygotAnnotation:"true"`
	HoldTime                *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation              `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Rstp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation              `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation              `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MaxAge                  *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛMaxAge                 []ygot.Annotation              `path:"config/@max-age" ygotAnnotation:"true"`
	RootCost                *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation              `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation              `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation              `path:"state/@topology-changes" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Rstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Rstp) NewInterface(Name string) (*Stp_Rstp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Rstp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Rstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Rstp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Rstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Rstp) GetOrCreateInterface(Name string) *Stp_Rstp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Rstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Rstp) GetInterface(Name string) *Stp_Rstp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Rstp. If there is no such element, the function
// is a no-op.
func (t *Stp_Rstp) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Rstp_Interface struct to the
// list Interface of Stp_Rstp. If the key value(s) specified in
// the supplied Stp_Rstp_Interface already exist in the list, an error is
// returned.
func (t *Stp_Rstp) AppendInterface(v *Stp_Rstp_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Rstp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Rstp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BridgePriority == nil {
		var v uint16 = 32768
		t.BridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	if t.HoldCount == nil {
		var v uint8 = 6
		t.HoldCount = &v
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp.
func (*Stp_Rstp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp_Interface represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface YANG schema element.
type Stp_Rstp_Interface struct {
	ΛMetadata                 []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                            `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                  `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Rstp_Interface_Counters       `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                  `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                            `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                  `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint16                            `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                  `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                            `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                  `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                            `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                  `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                             `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                  `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                            `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                  `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint16                            `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                  `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                            `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                  `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                            `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                  `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                            `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                  `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                             `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                  `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_SpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                  `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_SpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                  `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Rstp_Interface) GetOrCreateCounters() *Stp_Rstp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Rstp_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Rstp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Rstp_Interface) GetCounters() *Stp_Rstp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Rstp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Rstp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DesignatedBridgePriority == nil {
		var v uint16 = 32768
		t.DesignatedBridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Stp_Rstp_Interface struct, which is a YANG list entry.
func (t *Stp_Rstp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp_Interface.
func (*Stp_Rstp_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp_Interface_Counters represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters YANG schema element.
type Stp_Rstp_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Rstp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Rstp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Rstp_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Rstp_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp_Interface_Counters.
func (*Stp_Rstp_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan YANG schema element.
type Stp_Vlan struct {
	ΛMetadata               []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	BridgeAddress           *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgeAddress          []ygot.Annotation              `path:"state/@bridge-address" ygotAnnotation:"true"`
	BridgePriority          *uint16                        `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛBridgePriority         []ygot.Annotation              `path:"config/@bridge-priority" ygotAnnotation:"true"`
	DesignatedRootAddress   *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress  []ygot.Annotation              `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority  *uint16                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority []ygot.Annotation              `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardingDelay         *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardingDelay        []ygot.Annotation              `path:"config/@forwarding-delay" ygotAnnotation:"true"`
	HelloTime               *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHelloTime              []ygot.Annotation              `path:"config/@hello-time" ygotAnnotation:"true"`
	HoldCount               *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldCount              []ygot.Annotation              `path:"config/@hold-count" ygotAnnotation:"true"`
	HoldTime                *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛHoldTime               []ygot.Annotation              `path:"state/@hold-time" ygotAnnotation:"true"`
	Interface               map[string]*Stp_Vlan_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛInterface              []ygot.Annotation              `path:"interfaces/@interface" ygotAnnotation:"true"`
	LastTopologyChange      *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛLastTopologyChange     []ygot.Annotation              `path:"state/@last-topology-change" ygotAnnotation:"true"`
	MaxAge                  *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛMaxAge                 []ygot.Annotation              `path:"config/@max-age" ygotAnnotation:"true"`
	RootCost                *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootCost               []ygot.Annotation              `path:"state/@root-cost" ygotAnnotation:"true"`
	RootPort                *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRootPort               []ygot.Annotation              `path:"state/@root-port" ygotAnnotation:"true"`
	TopologyChanges         *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛTopologyChanges        []ygot.Annotation              `path:"state/@topology-changes" ygotAnnotation:"true"`
	VlanId                  *uint16                        `path:"config/vlan-id|vlan-id" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛVlanId                 []ygot.Annotation              `path:"config/@vlan-id|@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Vlan struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Vlan) NewInterface(Name string) (*Stp_Vlan_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Vlan_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Vlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Vlan) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Vlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Vlan) GetOrCreateInterface(Name string) *Stp_Vlan_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Vlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Vlan) GetInterface(Name string) *Stp_Vlan_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Vlan. If there is no such element, the function
// is a no-op.
func (t *Stp_Vlan) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Vlan_Interface struct to the
// list Interface of Stp_Vlan. If the key value(s) specified in
// the supplied Stp_Vlan_Interface already exist in the list, an error is
// returned.
func (t *Stp_Vlan) AppendInterface(v *Stp_Vlan_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlanId retrieves the value of the leaf VlanId from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BridgePriority == nil {
		var v uint16 = 32768
		t.BridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	if t.HoldCount == nil {
		var v uint8 = 6
		t.HoldCount = &v
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Stp_Vlan struct, which is a YANG list entry.
func (t *Stp_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan.
func (*Stp_Vlan) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan_Interface represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface YANG schema element.
type Stp_Vlan_Interface struct {
	ΛMetadata                 []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Cost                      *uint32                            `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCost                     []ygot.Annotation                  `path:"config/@cost" ygotAnnotation:"true"`
	Counters                  *Stp_Vlan_Interface_Counters       `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛCounters                 []ygot.Annotation                  `path:"state/@counters" ygotAnnotation:"true"`
	DesignatedBridgeAddress   *string                            `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgeAddress  []ygot.Annotation                  `path:"state/@designated-bridge-address" ygotAnnotation:"true"`
	DesignatedBridgePriority  *uint16                            `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedBridgePriority []ygot.Annotation                  `path:"state/@designated-bridge-priority" ygotAnnotation:"true"`
	DesignatedCost            *uint32                            `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedCost           []ygot.Annotation                  `path:"state/@designated-cost" ygotAnnotation:"true"`
	DesignatedPortNum         *uint16                            `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortNum        []ygot.Annotation                  `path:"state/@designated-port-num" ygotAnnotation:"true"`
	DesignatedPortPriority    *uint8                             `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedPortPriority   []ygot.Annotation                  `path:"state/@designated-port-priority" ygotAnnotation:"true"`
	DesignatedRootAddress     *string                            `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootAddress    []ygot.Annotation                  `path:"state/@designated-root-address" ygotAnnotation:"true"`
	DesignatedRootPriority    *uint16                            `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛDesignatedRootPriority   []ygot.Annotation                  `path:"state/@designated-root-priority" ygotAnnotation:"true"`
	ForwardTransisitions      *uint64                            `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛForwardTransisitions     []ygot.Annotation                  `path:"state/@forward-transisitions" ygotAnnotation:"true"`
	Name                      *string                            `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	ΛName                     []ygot.Annotation                  `path:"config/@name|@name" ygotAnnotation:"true"`
	PortNum                   *uint16                            `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortNum                  []ygot.Annotation                  `path:"state/@port-num" ygotAnnotation:"true"`
	PortPriority              *uint8                             `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortPriority             []ygot.Annotation                  `path:"config/@port-priority" ygotAnnotation:"true"`
	PortState                 E_SpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛPortState                []ygot.Annotation                  `path:"state/@port-state" ygotAnnotation:"true"`
	Role                      E_SpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ΛRole                     []ygot.Annotation                  `path:"state/@role" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Vlan_Interface) GetOrCreateCounters() *Stp_Vlan_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Vlan_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Vlan_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Vlan_Interface) GetCounters() *Stp_Vlan_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Vlan_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Vlan_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DesignatedBridgePriority == nil {
		var v uint16 = 32768
		t.DesignatedBridgePriority = &v
	}
	if t.DesignatedRootPriority == nil {
		var v uint16 = 32768
		t.DesignatedRootPriority = &v
	}
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Stp_Vlan_Interface struct, which is a YANG list entry.
func (t *Stp_Vlan_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan_Interface.
func (*Stp_Vlan_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan_Interface_Counters represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters YANG schema element.
type Stp_Vlan_Interface_Counters struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BpduReceived  *uint64           `path:"bpdu-received" module:"openconfig-spanning-tree"`
	ΛBpduReceived []ygot.Annotation `path:"@bpdu-received" ygotAnnotation:"true"`
	BpduSent      *uint64           `path:"bpdu-sent" module:"openconfig-spanning-tree"`
	ΛBpduSent     []ygot.Annotation `path:"@bpdu-sent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Vlan_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Vlan_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// PopulateDefaults recursively populates unset leaf fields in the Stp_Vlan_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Stp_Vlan_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan_Interface_Counters.
func (*Stp_Vlan_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// System represents the /openconfig-system/system YANG schema element.
type System struct {
	ΛMetadata                   []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	Aaa                         *System_Aaa                            `path:"aaa" module:"openconfig-system"`
	ΛAaa                        []ygot.Annotation                      `path:"@aaa" ygotAnnotation:"true"`
	Alarm                       map[string]*System_Alarm               `path:"alarms/alarm" module:"openconfig-system/openconfig-system"`
	ΛAlarm                      []ygot.Annotation                      `path:"alarms/@alarm" ygotAnnotation:"true"`
	BootTime                    *uint64                                `path:"state/boot-time" module:"openconfig-system/openconfig-system"`
	ΛBootTime                   []ygot.Annotation                      `path:"state/@boot-time" ygotAnnotation:"true"`
	Clock                       *System_Clock                          `path:"clock" module:"openconfig-system"`
	ΛClock                      []ygot.Annotation                      `path:"@clock" ygotAnnotation:"true"`
	Cpu                         map[System_Cpu_Index_Union]*System_Cpu `path:"cpus/cpu" module:"openconfig-system/openconfig-system"`
	ΛCpu                        []ygot.Annotation                      `path:"cpus/@cpu" ygotAnnotation:"true"`
	CurrentDatetime             *string                                `path:"state/current-datetime" module:"openconfig-system/openconfig-system"`
	ΛCurrentDatetime            []ygot.Annotation                      `path:"state/@current-datetime" ygotAnnotation:"true"`
	Dns                         *System_Dns                            `path:"dns" module:"openconfig-system"`
	ΛDns                        []ygot.Annotation                      `path:"@dns" ygotAnnotation:"true"`
	DomainName                  *string                                `path:"config/domain-name" module:"openconfig-system/openconfig-system"`
	ΛDomainName                 []ygot.Annotation                      `path:"config/@domain-name" ygotAnnotation:"true"`
	GrpcServer                  map[string]*System_GrpcServer          `path:"grpc-servers/grpc-server" module:"openconfig-system-grpc/openconfig-system-grpc"`
	ΛGrpcServer                 []ygot.Annotation                      `path:"grpc-servers/@grpc-server" ygotAnnotation:"true"`
	Hostname                    *string                                `path:"config/hostname" module:"openconfig-system/openconfig-system"`
	ΛHostname                   []ygot.Annotation                      `path:"config/@hostname" ygotAnnotation:"true"`
	LastConfigurationTimestamp  *uint64                                `path:"state/last-configuration-timestamp" module:"openconfig-system/openconfig-system"`
	ΛLastConfigurationTimestamp []ygot.Annotation                      `path:"state/@last-configuration-timestamp" ygotAnnotation:"true"`
	License                     *System_License                        `path:"license" module:"openconfig-system"`
	ΛLicense                    []ygot.Annotation                      `path:"@license" ygotAnnotation:"true"`
	Logging                     *System_Logging                        `path:"logging" module:"openconfig-system"`
	ΛLogging                    []ygot.Annotation                      `path:"@logging" ygotAnnotation:"true"`
	LoginBanner                 *string                                `path:"config/login-banner" module:"openconfig-system/openconfig-system"`
	ΛLoginBanner                []ygot.Annotation                      `path:"config/@login-banner" ygotAnnotation:"true"`
	MacAddress                  *System_MacAddress                     `path:"mac-address" module:"openconfig-system"`
	ΛMacAddress                 []ygot.Annotation                      `path:"@mac-address" ygotAnnotation:"true"`
	Memory                      *System_Memory                         `path:"memory" module:"openconfig-system"`
	ΛMemory                     []ygot.Annotation                      `path:"@memory" ygotAnnotation:"true"`
	Messages                    *System_Messages                       `path:"messages" module:"openconfig-system"`
	ΛMessages                   []ygot.Annotation                      `path:"@messages" ygotAnnotation:"true"`
	MotdBanner                  *string                                `path:"config/motd-banner" module:"openconfig-system/openconfig-system"`
	ΛMotdBanner                 []ygot.Annotation                      `path:"config/@motd-banner" ygotAnnotation:"true"`
	MountPoint                  map[string]*System_MountPoint          `path:"mount-points/mount-point" module:"openconfig-system/openconfig-system"`
	ΛMountPoint                 []ygot.Annotation                      `path:"mount-points/@mount-point" ygotAnnotation:"true"`
	Ntp                         *System_Ntp                            `path:"ntp" module:"openconfig-system"`
	ΛNtp                        []ygot.Annotation                      `path:"@ntp" ygotAnnotation:"true"`
	Process                     map[uint64]*System_Process             `path:"processes/process" module:"openconfig-system/openconfig-system"`
	ΛProcess                    []ygot.Annotation                      `path:"processes/@process" ygotAnnotation:"true"`
	SoftwareVersion             *string                                `path:"state/software-version" module:"openconfig-system/openconfig-system"`
	ΛSoftwareVersion            []ygot.Annotation                      `path:"state/@software-version" ygotAnnotation:"true"`
	SshServer                   *System_SshServer                      `path:"ssh-server" module:"openconfig-system"`
	ΛSshServer                  []ygot.Annotation                      `path:"@ssh-server" ygotAnnotation:"true"`
	TelnetServer                *System_TelnetServer                   `path:"telnet-server" module:"openconfig-system"`
	ΛTelnetServer               []ygot.Annotation                      `path:"@telnet-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewAlarm(Id string) (*System_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &System_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateAlarm(Id string) *System_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetAlarm(Id string) *System_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied System_Alarm struct to the
// list Alarm of System. If the key value(s) specified in
// the supplied System_Alarm already exist in the list, an error is
// returned.
func (t *System) AppendAlarm(v *System_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewCpu creates a new entry in the Cpu list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewCpu(Index System_Cpu_Index_Union) (*System_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &System_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameCpu(oldK, newK System_Cpu_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateCpu(Index System_Cpu_Index_Union) *System_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetCpu(Index System_Cpu_Index_Union) *System_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteCpu(Index System_Cpu_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied System_Cpu struct to the
// list Cpu of System. If the key value(s) specified in
// the supplied System_Cpu already exist in the list, an error is
// returned.
func (t *System) AppendCpu(v *System_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// NewGrpcServer creates a new entry in the GrpcServer list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewGrpcServer(Name string) (*System_GrpcServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GrpcServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GrpcServer", key)
	}

	t.GrpcServer[key] = &System_GrpcServer{
		Name: &Name,
	}

	return t.GrpcServer[key], nil
}

// RenameGrpcServer renames an entry in the list GrpcServer within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameGrpcServer(oldK, newK string) error {
	if _, ok := t.GrpcServer[newK]; ok {
		return fmt.Errorf("key %v already exists in GrpcServer", newK)
	}

	e, ok := t.GrpcServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GrpcServer", oldK)
	}
	e.Name = &newK

	t.GrpcServer[newK] = e
	delete(t.GrpcServer, oldK)
	return nil
}

// GetOrCreateGrpcServer retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateGrpcServer(Name string) *System_GrpcServer {

	key := Name

	if v, ok := t.GrpcServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGrpcServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGrpcServer got unexpected error: %v", err))
	}
	return v
}

// GetGrpcServer retrieves the value with the specified key from
// the GrpcServer map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetGrpcServer(Name string) *System_GrpcServer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.GrpcServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteGrpcServer deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteGrpcServer(Name string) {
	key := Name

	delete(t.GrpcServer, key)
}

// AppendGrpcServer appends the supplied System_GrpcServer struct to the
// list GrpcServer of System. If the key value(s) specified in
// the supplied System_GrpcServer already exist in the list, an error is
// returned.
func (t *System) AppendGrpcServer(v *System_GrpcServer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	if _, ok := t.GrpcServer[key]; ok {
		return fmt.Errorf("duplicate key for list GrpcServer %v", key)
	}

	t.GrpcServer[key] = v
	return nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewMountPoint(Name string) (*System_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &System_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateMountPoint(Name string) *System_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetMountPoint(Name string) *System_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied System_MountPoint struct to the
// list MountPoint of System. If the key value(s) specified in
// the supplied System_MountPoint already exist in the list, an error is
// returned.
func (t *System) AppendMountPoint(v *System_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// NewProcess creates a new entry in the Process list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewProcess(Pid uint64) (*System_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &System_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateProcess(Pid uint64) *System_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetProcess(Pid uint64) *System_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied System_Process struct to the
// list Process of System. If the key value(s) specified in
// the supplied System_Process already exist in the list, an error is
// returned.
func (t *System) AppendProcess(v *System_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateAaa() *System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &System_Aaa{}
	return t.Aaa
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateClock() *System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &System_Clock{}
	return t.Clock
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateDns() *System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &System_Dns{}
	return t.Dns
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLicense() *System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLogging() *System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &System_Logging{}
	return t.Logging
}

// GetOrCreateMacAddress retrieves the value of the MacAddress field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMacAddress() *System_MacAddress {
	if t.MacAddress != nil {
		return t.MacAddress
	}
	t.MacAddress = &System_MacAddress{}
	return t.MacAddress
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMemory() *System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMessages() *System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &System_Messages{}
	return t.Messages
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateNtp() *System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &System_Ntp{}
	return t.Ntp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateSshServer() *System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &System_SshServer{}
	return t.SshServer
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateTelnetServer() *System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetAaa() *System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetClock() *System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetDns() *System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLicense() *System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLogging() *System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMacAddress returns the value of the MacAddress struct pointer
// from System. If the receiver or the field MacAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMacAddress() *System_MacAddress {
	if t != nil && t.MacAddress != nil {
		return t.MacAddress
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMemory() *System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMessages() *System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetNtp() *System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetSshServer() *System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetTelnetServer() *System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// GetBootTime retrieves the value of the leaf BootTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTime is set, it can
// safely use t.GetBootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTime == nil' before retrieving the leaf's value.
func (t *System) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentDatetime is set, it can
// safely use t.GetCurrentDatetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentDatetime == nil' before retrieving the leaf's value.
func (t *System) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *System) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLastConfigurationTimestamp retrieves the value of the leaf LastConfigurationTimestamp from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastConfigurationTimestamp is set, it can
// safely use t.GetLastConfigurationTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastConfigurationTimestamp == nil' before retrieving the leaf's value.
func (t *System) GetLastConfigurationTimestamp() uint64 {
	if t == nil || t.LastConfigurationTimestamp == nil {
		return 0
	}
	return *t.LastConfigurationTimestamp
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *System) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *System) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareVersion is set, it can
// safely use t.GetSoftwareVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareVersion == nil' before retrieving the leaf's value.
func (t *System) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// PopulateDefaults recursively populates unset leaf fields in the System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.Clock.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.License.PopulateDefaults()
	t.Logging.PopulateDefaults()
	t.MacAddress.PopulateDefaults()
	t.Memory.PopulateDefaults()
	t.Messages.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.SshServer.PopulateDefaults()
	t.TelnetServer.PopulateDefaults()
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Cpu {
		e.PopulateDefaults()
	}
	for _, e := range t.GrpcServer {
		e.PopulateDefaults()
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Process {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System.
func (*System) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type System_Aaa struct {
	ΛMetadata       []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Accounting      *System_Aaa_Accounting             `path:"accounting" module:"openconfig-system"`
	ΛAccounting     []ygot.Annotation                  `path:"@accounting" ygotAnnotation:"true"`
	Authentication  *System_Aaa_Authentication         `path:"authentication" module:"openconfig-system"`
	ΛAuthentication []ygot.Annotation                  `path:"@authentication" ygotAnnotation:"true"`
	Authorization   *System_Aaa_Authorization          `path:"authorization" module:"openconfig-system"`
	ΛAuthorization  []ygot.Annotation                  `path:"@authorization" ygotAnnotation:"true"`
	ServerGroup     map[string]*System_Aaa_ServerGroup `path:"server-groups/server-group" module:"openconfig-system/openconfig-system"`
	ΛServerGroup    []ygot.Annotation                  `path:"server-groups/@server-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa) NewServerGroup(Name string) (*System_Aaa_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa) GetOrCreateServerGroup(Name string) *System_Aaa_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa) GetServerGroup(Name string) *System_Aaa_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver System_Aaa. If there is no such element, the function
// is a no-op.
func (t *System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied System_Aaa_ServerGroup struct to the
// list ServerGroup of System_Aaa. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *System_Aaa) AppendServerGroup(v *System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAccounting() *System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthentication() *System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthorization() *System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	for _, e := range t.ServerGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa.
func (*System_Aaa) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_Accounting struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []System_Aaa_Accounting_AccountingMethod_Union                        `path:"config/accounting-method" module:"openconfig-system/openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                     `path:"config/@accounting-method" ygotAnnotation:"true"`
	Event             map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
	ΛEvent            []ygot.Annotation                                                     `path:"events/@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting) NewEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*System_Aaa_Accounting_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting) RenameEvent(oldK, newK E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting) GetOrCreateEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting) GetEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting) DeleteEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Accounting_Event struct to the
// list Event of System_Aaa_Accounting. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting) AppendEvent(v *System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting) GetAccountingMethod() []System_Aaa_Accounting_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting.
func (*System_Aaa_Accounting) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_Event struct {
	ΛMetadata  []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	EventType  E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE `path:"config/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛEventType []ygot.Annotation                    `path:"config/@event-type|@event-type" ygotAnnotation:"true"`
	Record     E_Event_Record                       `path:"config/record" module:"openconfig-system/openconfig-system"`
	ΛRecord    []ygot.Annotation                    `path:"config/@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetEventType() E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetRecord() E_Event_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Accounting_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Accounting_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Event.
func (*System_Aaa_Accounting_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_Authentication struct {
	ΛMetadata             []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	AdminUser             *System_Aaa_Authentication_AdminUser                   `path:"admin-user" module:"openconfig-system"`
	ΛAdminUser            []ygot.Annotation                                      `path:"@admin-user" ygotAnnotation:"true"`
	AuthenticationMethod  []System_Aaa_Authentication_AuthenticationMethod_Union `path:"config/authentication-method" module:"openconfig-system/openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                      `path:"config/@authentication-method" ygotAnnotation:"true"`
	User                  map[string]*System_Aaa_Authentication_User             `path:"users/user" module:"openconfig-system/openconfig-system"`
	ΛUser                 []ygot.Annotation                                      `path:"users/@user" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authentication) NewUser(Username string) (*System_Aaa_Authentication_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authentication) GetOrCreateUser(Username string) *System_Aaa_Authentication_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authentication) GetUser(Username string) *System_Aaa_Authentication_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied System_Aaa_Authentication_User struct to the
// list User of System_Aaa_Authentication. If the key value(s) specified in
// the supplied System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *System_Aaa_Authentication) AppendUser(v *System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *System_Aaa_Authentication) GetOrCreateAdminUser() *System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication) GetAuthenticationMethod() []System_Aaa_Authentication_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdminUser.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication.
func (*System_Aaa_Authentication) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUser struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"config/admin-password" module:"openconfig-system/openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"config/@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"config/admin-password-hashed" module:"openconfig-system/openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"config/@admin-password-hashed" ygotAnnotation:"true"`
	AdminUsername        *string           `path:"state/admin-username" module:"openconfig-system/openconfig-system"`
	ΛAdminUsername       []ygot.Annotation `path:"state/@admin-username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPasswordHashed is set, it can
// safely use t.GetAdminPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminUsername is set, it can
// safely use t.GetAdminUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminUsername == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_AdminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_AdminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_AdminUser.
func (*System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_User struct {
	ΛMetadata       []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Password        *string                                   `path:"config/password" module:"openconfig-system/openconfig-system"`
	ΛPassword       []ygot.Annotation                         `path:"config/@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                   `path:"config/password-hashed" module:"openconfig-system/openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                         `path:"config/@password-hashed" ygotAnnotation:"true"`
	Role            System_Aaa_Authentication_User_Role_Union `path:"config/role" module:"openconfig-system/openconfig-system"`
	ΛRole           []ygot.Annotation                         `path:"config/@role" ygotAnnotation:"true"`
	SshKey          *string                                   `path:"config/ssh-key" module:"openconfig-system/openconfig-system"`
	ΛSshKey         []ygot.Annotation                         `path:"config/@ssh-key" ygotAnnotation:"true"`
	Username        *string                                   `path:"config/username|username" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛUsername       []ygot.Annotation                         `path:"config/@username|@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordHashed is set, it can
// safely use t.GetPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetRole() System_Aaa_Authentication_User_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authentication_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authentication_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *System_Aaa_Authentication_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_User.
func (*System_Aaa_Authentication_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_Authorization struct {
	ΛMetadata            []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []System_Aaa_Authorization_AuthorizationMethod_Union                        `path:"config/authorization-method" module:"openconfig-system/openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                           `path:"config/@authorization-method" ygotAnnotation:"true"`
	Event                map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
	ΛEvent               []ygot.Annotation                                                           `path:"events/@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authorization) NewEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*System_Aaa_Authorization_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Authorization_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authorization) RenameEvent(oldK, newK E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authorization) GetOrCreateEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authorization) GetEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authorization) DeleteEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Authorization_Event struct to the
// list Event of System_Aaa_Authorization. If the key value(s) specified in
// the supplied System_Aaa_Authorization_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Authorization) AppendEvent(v *System_Aaa_Authorization_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizationMethod is set, it can
// safely use t.GetAuthorizationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetAuthorizationMethod() []System_Aaa_Authorization_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization.
func (*System_Aaa_Authorization) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_Event struct {
	ΛMetadata  []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	EventType  E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"config/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛEventType []ygot.Annotation                       `path:"config/@event-type|@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Authorization_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization_Event) GetEventType() E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_Authorization_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_Authorization_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Aaa_Authorization_Event struct, which is a YANG list entry.
func (t *System_Aaa_Authorization_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization_Event.
func (*System_Aaa_Authorization_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroup struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Name      *string                                   `path:"config/name|name" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛName     []ygot.Annotation                         `path:"config/@name|@name" ygotAnnotation:"true"`
	Server    map[string]*System_Aaa_ServerGroup_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	ΛServer   []ygot.Annotation                         `path:"servers/@server" ygotAnnotation:"true"`
	Type      E_AaaTypes_AAA_SERVER_TYPE                `path:"config/type" module:"openconfig-system/openconfig-system"`
	ΛType     []ygot.Annotation                         `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_ServerGroup) NewServer(Address string) (*System_Aaa_ServerGroup_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_ServerGroup) GetOrCreateServer(Address string) *System_Aaa_ServerGroup_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_ServerGroup) GetServer(Address string) *System_Aaa_ServerGroup_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Aaa_ServerGroup_Server struct to the
// list Server of System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *System_Aaa_ServerGroup) AppendServer(v *System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetType() E_AaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup.
func (*System_Aaa_ServerGroup) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_Server struct {
	ΛMetadata           []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Address             *string                               `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛAddress            []ygot.Annotation                     `path:"config/@address|@address" ygotAnnotation:"true"`
	ConnectionAborts    *uint64                               `path:"state/connection-aborts" module:"openconfig-system/openconfig-system"`
	ΛConnectionAborts   []ygot.Annotation                     `path:"state/@connection-aborts" ygotAnnotation:"true"`
	ConnectionCloses    *uint64                               `path:"state/connection-closes" module:"openconfig-system/openconfig-system"`
	ΛConnectionCloses   []ygot.Annotation                     `path:"state/@connection-closes" ygotAnnotation:"true"`
	ConnectionFailures  *uint64                               `path:"state/connection-failures" module:"openconfig-system/openconfig-system"`
	ΛConnectionFailures []ygot.Annotation                     `path:"state/@connection-failures" ygotAnnotation:"true"`
	ConnectionOpens     *uint64                               `path:"state/connection-opens" module:"openconfig-system/openconfig-system"`
	ΛConnectionOpens    []ygot.Annotation                     `path:"state/@connection-opens" ygotAnnotation:"true"`
	ConnectionTimeouts  *uint64                               `path:"state/connection-timeouts" module:"openconfig-system/openconfig-system"`
	ΛConnectionTimeouts []ygot.Annotation                     `path:"state/@connection-timeouts" ygotAnnotation:"true"`
	ErrorsReceived      *uint64                               `path:"state/errors-received" module:"openconfig-system/openconfig-system"`
	ΛErrorsReceived     []ygot.Annotation                     `path:"state/@errors-received" ygotAnnotation:"true"`
	MessagesReceived    *uint64                               `path:"state/messages-received" module:"openconfig-system/openconfig-system"`
	ΛMessagesReceived   []ygot.Annotation                     `path:"state/@messages-received" ygotAnnotation:"true"`
	MessagesSent        *uint64                               `path:"state/messages-sent" module:"openconfig-system/openconfig-system"`
	ΛMessagesSent       []ygot.Annotation                     `path:"state/@messages-sent" ygotAnnotation:"true"`
	Name                *string                               `path:"config/name" module:"openconfig-system/openconfig-system"`
	ΛName               []ygot.Annotation                     `path:"config/@name" ygotAnnotation:"true"`
	Radius              *System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"openconfig-system"`
	ΛRadius             []ygot.Annotation                     `path:"@radius" ygotAnnotation:"true"`
	Tacacs              *System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	ΛTacacs             []ygot.Annotation                     `path:"@tacacs" ygotAnnotation:"true"`
	Timeout             *uint16                               `path:"config/timeout" module:"openconfig-system/openconfig-system"`
	ΛTimeout            []ygot.Annotation                     `path:"config/@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAborts is set, it can
// safely use t.GetConnectionAborts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAborts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionCloses is set, it can
// safely use t.GetConnectionCloses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionCloses == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionFailures is set, it can
// safely use t.GetConnectionFailures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionFailures == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionOpens is set, it can
// safely use t.GetConnectionOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionOpens == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeouts is set, it can
// safely use t.GetConnectionTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeouts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorsReceived is set, it can
// safely use t.GetErrorsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorsReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesReceived is set, it can
// safely use t.GetMessagesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesSent is set, it can
// safely use t.GetMessagesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesSent == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server.
func (*System_Aaa_ServerGroup_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_Radius struct {
	ΛMetadata           []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16                                        `path:"config/acct-port" module:"openconfig-system/openconfig-system"`
	ΛAcctPort           []ygot.Annotation                              `path:"config/@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16                                        `path:"config/auth-port" module:"openconfig-system/openconfig-system"`
	ΛAuthPort           []ygot.Annotation                              `path:"config/@auth-port" ygotAnnotation:"true"`
	Counters            *System_Aaa_ServerGroup_Server_Radius_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	ΛCounters           []ygot.Annotation                              `path:"state/@counters" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8                                         `path:"config/retransmit-attempts" module:"openconfig-system/openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation                              `path:"config/@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string                                        `path:"config/secret-key" module:"openconfig-system/openconfig-system"`
	ΛSecretKey          []ygot.Annotation                              `path:"config/@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed     *string                                        `path:"config/secret-key-hashed" module:"openconfig-system/openconfig-system"`
	ΛSecretKeyHashed    []ygot.Annotation                              `path:"config/@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress       *string                                        `path:"config/source-address" module:"openconfig-system/openconfig-system"`
	ΛSourceAddress      []ygot.Annotation                              `path:"config/@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server_Radius) GetOrCreateCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_ServerGroup_Server_Radius_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_ServerGroup_Server_Radius. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server_Radius) GetCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctPort == nil {
		var v uint16 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v uint16 = 1812
		t.AuthPort = &v
	}
	t.Counters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius.
func (*System_Aaa_ServerGroup_Server_Radius) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AccessAccepts          *uint64           `path:"access-accepts" module:"openconfig-system"`
	ΛAccessAccepts         []ygot.Annotation `path:"@access-accepts" ygotAnnotation:"true"`
	AccessRejects          *uint64           `path:"access-rejects" module:"openconfig-system"`
	ΛAccessRejects         []ygot.Annotation `path:"@access-rejects" ygotAnnotation:"true"`
	RetriedAccessRequests  *uint64           `path:"retried-access-requests" module:"openconfig-system"`
	ΛRetriedAccessRequests []ygot.Annotation `path:"@retried-access-requests" ygotAnnotation:"true"`
	TimeoutAccessRequests  *uint64           `path:"timeout-access-requests" module:"openconfig-system"`
	ΛTimeoutAccessRequests []ygot.Annotation `path:"@timeout-access-requests" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetriedAccessRequests is set, it can
// safely use t.GetRetriedAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetriedAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAccessRequests is set, it can
// safely use t.GetTimeoutAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Radius_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius_Counters.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port             *uint16           `path:"config/port" module:"openconfig-system/openconfig-system"`
	ΛPort            []ygot.Annotation `path:"config/@port" ygotAnnotation:"true"`
	SecretKey        *string           `path:"config/secret-key" module:"openconfig-system/openconfig-system"`
	ΛSecretKey       []ygot.Annotation `path:"config/@secret-key" ygotAnnotation:"true"`
	SecretKeyHashed  *string           `path:"config/secret-key-hashed" module:"openconfig-system/openconfig-system"`
	ΛSecretKeyHashed []ygot.Annotation `path:"config/@secret-key-hashed" ygotAnnotation:"true"`
	SourceAddress    *string           `path:"config/source-address" module:"openconfig-system/openconfig-system"`
	ΛSourceAddress   []ygot.Annotation `path:"config/@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the System_Aaa_ServerGroup_Server_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Aaa_ServerGroup_Server_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 49
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Tacacs.
func (*System_Aaa_ServerGroup_Server_Tacacs) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_Alarm struct {
	ΛMetadata    []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	Id           *string                                `path:"state/id|id" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛId          []ygot.Annotation                      `path:"state/@id|@id" ygotAnnotation:"true"`
	Resource     *string                                `path:"state/resource" module:"openconfig-system/openconfig-system"`
	ΛResource    []ygot.Annotation                      `path:"state/@resource" ygotAnnotation:"true"`
	Severity     E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity" module:"openconfig-system/openconfig-system"`
	ΛSeverity    []ygot.Annotation                      `path:"state/@severity" ygotAnnotation:"true"`
	Text         *string                                `path:"state/text" module:"openconfig-system/openconfig-system"`
	ΛText        []ygot.Annotation                      `path:"state/@text" ygotAnnotation:"true"`
	TimeCreated  *uint64                                `path:"state/time-created" module:"openconfig-system/openconfig-system"`
	ΛTimeCreated []ygot.Annotation                      `path:"state/@time-created" ygotAnnotation:"true"`
	TypeId       System_Alarm_TypeId_Union              `path:"state/type-id" module:"openconfig-system/openconfig-system"`
	ΛTypeId      []ygot.Annotation                      `path:"state/@type-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Alarm) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resource is set, it can
// safely use t.GetResource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resource == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeCreated is set, it can
// safely use t.GetTimeCreated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeCreated == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeId is set, it can
// safely use t.GetTypeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeId == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTypeId() System_Alarm_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// PopulateDefaults recursively populates unset leaf fields in the System_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the System_Alarm struct, which is a YANG list entry.
func (t *System_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Alarm.
func (*System_Alarm) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Clock represents the /openconfig-system/system/clock YANG schema element.
type System_Clock struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"config/timezone-name" module:"openconfig-system/openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"config/@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Clock) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimezoneName is set, it can
// safely use t.GetTimezoneName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimezoneName == nil' before retrieving the leaf's value.
func (t *System_Clock) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// PopulateDefaults recursively populates unset leaf fields in the System_Clock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Clock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Clock.
func (*System_Clock) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_Cpu struct {
	ΛMetadata          []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	HardwareInterrupt  *System_Cpu_HardwareInterrupt `path:"state/hardware-interrupt" module:"openconfig-system/openconfig-system"`
	ΛHardwareInterrupt []ygot.Annotation             `path:"state/@hardware-interrupt" ygotAnnotation:"true"`
	Idle               *System_Cpu_Idle              `path:"state/idle" module:"openconfig-system/openconfig-system"`
	ΛIdle              []ygot.Annotation             `path:"state/@idle" ygotAnnotation:"true"`
	Index              System_Cpu_Index_Union        `path:"state/index|index" module:"openconfig-system/openconfig-system|openconfig-system"`
	ΛIndex             []ygot.Annotation             `path:"state/@index|@index" ygotAnnotation:"true"`
	Kernel             *System_Cpu_Kernel            `path:"state/kernel" module:"openconfig-system/openconfig-system"`
	ΛKernel            []ygot.Annotation             `path:"state/@kernel" ygotAnnotation:"true"`
	Nice               *System_Cpu_Nice              `path:"state/nice" module:"openconfig-system/openconfig-system"`
	ΛNice              []ygot.Annotation             `path:"state/@nice" ygotAnnotation:"true"`
	SoftwareInterrupt  *System_Cpu_SoftwareInterrupt `path:"state/software-interrupt" module:"openconfig-system/openconfig-system"`
	ΛSoftwareInterrupt []ygot.Annotation             `path:"state/@software-interrupt" ygotAnnotation:"true"`
	Total              *System_Cpu_Total             `path:"state/total" module:"openconfig-system/openconfig-system"`
	ΛTotal             []ygot.Annotation             `path:"state/@total" ygotAnnotation:"true"`
	User               *System_Cpu_User              `path:"state/user" module:"openconfig-system/openconfig-system"`
	ΛUser              []ygot.Annotation             `path:"state/@user" ygotAnnotation:"true"`
	Wait               *System_Cpu_Wait              `path:"state/wait" module:"openconfig-system/openconfig-system"`
	ΛWait              []ygot.Annotation             `path:"state/@wait" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &System_Cpu_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateIdle() *System_Cpu_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &System_Cpu_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateKernel() *System_Cpu_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &System_Cpu_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateNice() *System_Cpu_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &System_Cpu_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &System_Cpu_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateTotal() *System_Cpu_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &System_Cpu_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateUser() *System_Cpu_User {
	if t.User != nil {
		return t.User
	}
	t.User = &System_Cpu_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateWait() *System_Cpu_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &System_Cpu_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from System_Cpu. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetIdle() *System_Cpu_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from System_Cpu. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetKernel() *System_Cpu_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from System_Cpu. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetNice() *System_Cpu_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from System_Cpu. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetTotal() *System_Cpu_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from System_Cpu. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetUser() *System_Cpu_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from System_Cpu. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetWait() *System_Cpu_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the System_Cpu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *System_Cpu) GetIndex() System_Cpu_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HardwareInterrupt.PopulateDefaults()
	t.Idle.PopulateDefaults()
	t.Kernel.PopulateDefaults()
	t.Nice.PopulateDefaults()
	t.SoftwareInterrupt.PopulateDefaults()
	t.Total.PopulateDefaults()
	t.User.PopulateDefaults()
	t.Wait.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the System_Cpu struct, which is a YANG list entry.
func (t *System_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu.
func (*System_Cpu) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_HardwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_HardwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_HardwareInterrupt.
func (*System_Cpu_HardwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_Idle struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Idle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Idle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Idle.
func (*System_Cpu_Idle) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_Kernel struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Kernel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Kernel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Kernel.
func (*System_Cpu_Kernel) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_Nice struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_Nice
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_Nice) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Nice.
func (*System_Cpu_Nice) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that System_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the System_Cpu_SoftwareInterrupt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *System_Cpu_SoftwareInterrupt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_SoftwareInterrupt.
func (*System_Cpu_SoftwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}
