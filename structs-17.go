/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Qos_Classifier_Term_Conditions_Ipv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4 struct {
	ΛMetadata                    []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                            `path:"config/destination-address" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationAddress          []ygot.Annotation                                  `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                            `path:"config/destination-address-prefix-set" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                  `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	Dscp                         *uint8                                             `path:"config/dscp" module:"openconfig-qos/openconfig-qos"`
	ΛDscp                        []ygot.Annotation                                  `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                            `path:"config/dscp-set" module:"openconfig-qos/openconfig-qos"`
	ΛDscpSet                     []ygot.Annotation                                  `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                             `path:"config/hop-limit" module:"openconfig-qos/openconfig-qos"`
	ΛHopLimit                    []ygot.Annotation                                  `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv4                       *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4        `path:"icmpv4" module:"openconfig-qos"`
	ΛIcmpv4                      []ygot.Annotation                                  `path:"@icmpv4" ygotAnnotation:"true"`
	Length                       *uint16                                            `path:"config/length" module:"openconfig-qos/openconfig-qos"`
	ΛLength                      []ygot.Annotation                                  `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union `path:"config/protocol" module:"openconfig-qos/openconfig-qos"`
	ΛProtocol                    []ygot.Annotation                                  `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                            `path:"config/source-address" module:"openconfig-qos/openconfig-qos"`
	ΛSourceAddress               []ygot.Annotation                                  `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                            `path:"config/source-address-prefix-set" module:"openconfig-qos/openconfig-qos"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                  `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIcmpv4 retrieves the value of the Icmpv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetOrCreateIcmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 {
	if t.Icmpv4 != nil {
		return t.Icmpv4
	}
	t.Icmpv4 = &Qos_Classifier_Term_Conditions_Ipv4_Icmpv4{}
	return t.Icmpv4
}

// GetIcmpv4 returns the value of the Icmpv4 struct pointer
// from Qos_Classifier_Term_Conditions_Ipv4. If the receiver or the field Icmpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetIcmpv4() *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 {
	if t != nil && t.Icmpv4 != nil {
		return t.Icmpv4
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetProtocol() Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv4.
func (*Qos_Classifier_Term_Conditions_Ipv4) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4/icmpv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv4Types_CODE `path:"config/code" module:"openconfig-qos/openconfig-qos"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv4Types_TYPE `path:"config/type" module:"openconfig-qos/openconfig-qos"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4_Icmpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) GetCode() E_Icmpv4Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) GetType() E_Icmpv4Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv4_Icmpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4_Icmpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv4_Icmpv4.
func (*Qos_Classifier_Term_Conditions_Ipv4_Icmpv4) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6 struct {
	ΛMetadata                    []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	DestinationAddress           *string                                            `path:"config/destination-address" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationAddress          []ygot.Annotation                                  `path:"config/@destination-address" ygotAnnotation:"true"`
	DestinationAddressPrefixSet  *string                                            `path:"config/destination-address-prefix-set" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationAddressPrefixSet []ygot.Annotation                                  `path:"config/@destination-address-prefix-set" ygotAnnotation:"true"`
	DestinationFlowLabel         *uint32                                            `path:"config/destination-flow-label" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationFlowLabel        []ygot.Annotation                                  `path:"config/@destination-flow-label" ygotAnnotation:"true"`
	Dscp                         *uint8                                             `path:"config/dscp" module:"openconfig-qos/openconfig-qos"`
	ΛDscp                        []ygot.Annotation                                  `path:"config/@dscp" ygotAnnotation:"true"`
	DscpSet                      []uint8                                            `path:"config/dscp-set" module:"openconfig-qos/openconfig-qos"`
	ΛDscpSet                     []ygot.Annotation                                  `path:"config/@dscp-set" ygotAnnotation:"true"`
	HopLimit                     *uint8                                             `path:"config/hop-limit" module:"openconfig-qos/openconfig-qos"`
	ΛHopLimit                    []ygot.Annotation                                  `path:"config/@hop-limit" ygotAnnotation:"true"`
	Icmpv6                       *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6        `path:"icmpv6" module:"openconfig-qos"`
	ΛIcmpv6                      []ygot.Annotation                                  `path:"@icmpv6" ygotAnnotation:"true"`
	Length                       *uint16                                            `path:"config/length" module:"openconfig-qos/openconfig-qos"`
	ΛLength                      []ygot.Annotation                                  `path:"config/@length" ygotAnnotation:"true"`
	Protocol                     Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union `path:"config/protocol" module:"openconfig-qos/openconfig-qos"`
	ΛProtocol                    []ygot.Annotation                                  `path:"config/@protocol" ygotAnnotation:"true"`
	SourceAddress                *string                                            `path:"config/source-address" module:"openconfig-qos/openconfig-qos"`
	ΛSourceAddress               []ygot.Annotation                                  `path:"config/@source-address" ygotAnnotation:"true"`
	SourceAddressPrefixSet       *string                                            `path:"config/source-address-prefix-set" module:"openconfig-qos/openconfig-qos"`
	ΛSourceAddressPrefixSet      []ygot.Annotation                                  `path:"config/@source-address-prefix-set" ygotAnnotation:"true"`
	SourceFlowLabel              *uint32                                            `path:"config/source-flow-label" module:"openconfig-qos/openconfig-qos"`
	ΛSourceFlowLabel             []ygot.Annotation                                  `path:"config/@source-flow-label" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6) IsYANGGoStruct() {}

// GetOrCreateIcmpv6 retrieves the value of the Icmpv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetOrCreateIcmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 {
	if t.Icmpv6 != nil {
		return t.Icmpv6
	}
	t.Icmpv6 = &Qos_Classifier_Term_Conditions_Ipv6_Icmpv6{}
	return t.Icmpv6
}

// GetIcmpv6 returns the value of the Icmpv6 struct pointer
// from Qos_Classifier_Term_Conditions_Ipv6. If the receiver or the field Icmpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetIcmpv6() *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 {
	if t != nil && t.Icmpv6 != nil {
		return t.Icmpv6
	}
	return nil
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationAddressPrefixSet retrieves the value of the leaf DestinationAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddressPrefixSet is set, it can
// safely use t.GetDestinationAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationAddressPrefixSet() string {
	if t == nil || t.DestinationAddressPrefixSet == nil {
		return ""
	}
	return *t.DestinationAddressPrefixSet
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetLength retrieves the value of the leaf Length from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetProtocol() Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceAddressPrefixSet retrieves the value of the leaf SourceAddressPrefixSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddressPrefixSet is set, it can
// safely use t.GetSourceAddressPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddressPrefixSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceAddressPrefixSet() string {
	if t == nil || t.SourceAddressPrefixSet == nil {
		return ""
	}
	return *t.SourceAddressPrefixSet
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv6.
func (*Qos_Classifier_Term_Conditions_Ipv6) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6/icmpv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Code      E_Icmpv6Types_CODE `path:"config/code" module:"openconfig-qos/openconfig-qos"`
	ΛCode     []ygot.Annotation  `path:"config/@code" ygotAnnotation:"true"`
	Type      E_Icmpv6Types_TYPE `path:"config/type" module:"openconfig-qos/openconfig-qos"`
	ΛType     []ygot.Annotation  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6_Icmpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) GetCode() E_Icmpv6Types_CODE {
	if t == nil || t.Code == 0 {
		return 0
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) GetType() E_Icmpv6Types_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Ipv6_Icmpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6_Icmpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv6_Icmpv6.
func (*Qos_Classifier_Term_Conditions_Ipv6_Icmpv6) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_L2 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2 struct {
	ΛMetadata           []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	DestinationMac      *string                                           `path:"config/destination-mac" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationMac     []ygot.Annotation                                 `path:"config/@destination-mac" ygotAnnotation:"true"`
	DestinationMacMask  *string                                           `path:"config/destination-mac-mask" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationMacMask []ygot.Annotation                                 `path:"config/@destination-mac-mask" ygotAnnotation:"true"`
	Ethertype           Qos_Classifier_Term_Conditions_L2_Ethertype_Union `path:"config/ethertype" module:"openconfig-qos/openconfig-qos"`
	ΛEthertype          []ygot.Annotation                                 `path:"config/@ethertype" ygotAnnotation:"true"`
	SourceMac           *string                                           `path:"config/source-mac" module:"openconfig-qos/openconfig-qos"`
	ΛSourceMac          []ygot.Annotation                                 `path:"config/@source-mac" ygotAnnotation:"true"`
	SourceMacMask       *string                                           `path:"config/source-mac-mask" module:"openconfig-qos/openconfig-qos"`
	ΛSourceMacMask      []ygot.Annotation                                 `path:"config/@source-mac-mask" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetEthertype() Qos_Classifier_Term_Conditions_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_L2.
func (*Qos_Classifier_Term_Conditions_L2) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Mpls represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls struct {
	ΛMetadata        []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	EndLabelValue    Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union   `path:"config/end-label-value" module:"openconfig-qos/openconfig-qos"`
	ΛEndLabelValue   []ygot.Annotation                                         `path:"config/@end-label-value" ygotAnnotation:"true"`
	StartLabelValue  Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union `path:"config/start-label-value" module:"openconfig-qos/openconfig-qos"`
	ΛStartLabelValue []ygot.Annotation                                         `path:"config/@start-label-value" ygotAnnotation:"true"`
	TrafficClass     *uint8                                                    `path:"config/traffic-class" module:"openconfig-qos/openconfig-qos"`
	ΛTrafficClass    []ygot.Annotation                                         `path:"config/@traffic-class" ygotAnnotation:"true"`
	TtlValue         *uint8                                                    `path:"config/ttl-value" module:"openconfig-qos/openconfig-qos"`
	ΛTtlValue        []ygot.Annotation                                         `path:"config/@ttl-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Mpls) IsYANGGoStruct() {}

// GetEndLabelValue retrieves the value of the leaf EndLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabelValue is set, it can
// safely use t.GetEndLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetEndLabelValue() Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union {
	if t == nil || t.EndLabelValue == nil {
		return nil
	}
	return t.EndLabelValue
}

// GetStartLabelValue retrieves the value of the leaf StartLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabelValue is set, it can
// safely use t.GetStartLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetStartLabelValue() Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union {
	if t == nil || t.StartLabelValue == nil {
		return nil
	}
	return t.StartLabelValue
}

// GetTrafficClass retrieves the value of the leaf TrafficClass from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficClass is set, it can
// safely use t.GetTrafficClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficClass == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTrafficClass() uint8 {
	if t == nil || t.TrafficClass == nil {
		return 0
	}
	return *t.TrafficClass
}

// GetTtlValue retrieves the value of the leaf TtlValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlValue is set, it can
// safely use t.GetTtlValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTtlValue() uint8 {
	if t == nil || t.TtlValue == nil {
		return 0
	}
	return *t.TtlValue
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Mpls.
func (*Qos_Classifier_Term_Conditions_Mpls) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Transport represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_Transport struct {
	ΛMetadata                []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	BuiltinDetail            E_Transport_BuiltinDetail                                      `path:"config/builtin-detail" module:"openconfig-qos/openconfig-qos"`
	ΛBuiltinDetail           []ygot.Annotation                                              `path:"config/@builtin-detail" ygotAnnotation:"true"`
	DestinationPort          Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union `path:"config/destination-port" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationPort         []ygot.Annotation                                              `path:"config/@destination-port" ygotAnnotation:"true"`
	DestinationPortSet       *string                                                        `path:"config/destination-port-set" module:"openconfig-qos/openconfig-qos"`
	ΛDestinationPortSet      []ygot.Annotation                                              `path:"config/@destination-port-set" ygotAnnotation:"true"`
	DetailMode               E_Transport_DetailMode                                         `path:"config/detail-mode" module:"openconfig-qos/openconfig-qos"`
	ΛDetailMode              []ygot.Annotation                                              `path:"config/@detail-mode" ygotAnnotation:"true"`
	ExplicitDetailMatchMode  E_Transport_ExplicitDetailMatchMode                            `path:"config/explicit-detail-match-mode" module:"openconfig-qos/openconfig-qos"`
	ΛExplicitDetailMatchMode []ygot.Annotation                                              `path:"config/@explicit-detail-match-mode" ygotAnnotation:"true"`
	ExplicitTcpFlags         []E_PacketMatchTypes_TCP_FLAGS                                 `path:"config/explicit-tcp-flags" module:"openconfig-qos/openconfig-qos"`
	ΛExplicitTcpFlags        []ygot.Annotation                                              `path:"config/@explicit-tcp-flags" ygotAnnotation:"true"`
	SourcePort               Qos_Classifier_Term_Conditions_Transport_SourcePort_Union      `path:"config/source-port" module:"openconfig-qos/openconfig-qos"`
	ΛSourcePort              []ygot.Annotation                                              `path:"config/@source-port" ygotAnnotation:"true"`
	SourcePortSet            *string                                                        `path:"config/source-port-set" module:"openconfig-qos/openconfig-qos"`
	ΛSourcePortSet           []ygot.Annotation                                              `path:"config/@source-port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Transport) IsYANGGoStruct() {}

// GetBuiltinDetail retrieves the value of the leaf BuiltinDetail from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BuiltinDetail is set, it can
// safely use t.GetBuiltinDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BuiltinDetail == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetBuiltinDetail() E_Transport_BuiltinDetail {
	if t == nil || t.BuiltinDetail == 0 {
		return 0
	}
	return t.BuiltinDetail
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDestinationPort() Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetDestinationPortSet retrieves the value of the leaf DestinationPortSet from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPortSet is set, it can
// safely use t.GetDestinationPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPortSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDestinationPortSet() string {
	if t == nil || t.DestinationPortSet == nil {
		return ""
	}
	return *t.DestinationPortSet
}

// GetDetailMode retrieves the value of the leaf DetailMode from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailMode is set, it can
// safely use t.GetDetailMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailMode == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDetailMode() E_Transport_DetailMode {
	if t == nil || t.DetailMode == 0 {
		return 0
	}
	return t.DetailMode
}

// GetExplicitDetailMatchMode retrieves the value of the leaf ExplicitDetailMatchMode from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitDetailMatchMode is set, it can
// safely use t.GetExplicitDetailMatchMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitDetailMatchMode == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetExplicitDetailMatchMode() E_Transport_ExplicitDetailMatchMode {
	if t == nil || t.ExplicitDetailMatchMode == 0 {
		return 0
	}
	return t.ExplicitDetailMatchMode
}

// GetExplicitTcpFlags retrieves the value of the leaf ExplicitTcpFlags from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitTcpFlags is set, it can
// safely use t.GetExplicitTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitTcpFlags == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetExplicitTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.ExplicitTcpFlags == nil {
		return nil
	}
	return t.ExplicitTcpFlags
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetSourcePort() Qos_Classifier_Term_Conditions_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetSourcePortSet retrieves the value of the leaf SourcePortSet from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePortSet is set, it can
// safely use t.GetSourcePortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePortSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetSourcePortSet() string {
	if t == nil || t.SourcePortSet == nil {
		return ""
	}
	return *t.SourcePortSet
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Transport.
func (*Qos_Classifier_Term_Conditions_Transport) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_ForwardingGroup represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroup struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FabricPriority        *uint8            `path:"config/fabric-priority" module:"openconfig-qos/openconfig-qos"`
	ΛFabricPriority       []ygot.Annotation `path:"config/@fabric-priority" ygotAnnotation:"true"`
	MulticastOutputQueue  *string           `path:"config/multicast-output-queue" module:"openconfig-qos/openconfig-qos"`
	ΛMulticastOutputQueue []ygot.Annotation `path:"config/@multicast-output-queue" ygotAnnotation:"true"`
	Name                  *string           `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName                 []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	OutputQueue           *string           `path:"config/output-queue" module:"openconfig-qos/openconfig-qos"`
	ΛOutputQueue          []ygot.Annotation `path:"config/@output-queue" ygotAnnotation:"true"`
	UnicastOutputQueue    *string           `path:"config/unicast-output-queue" module:"openconfig-qos/openconfig-qos"`
	ΛUnicastOutputQueue   []ygot.Annotation `path:"config/@unicast-output-queue" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_ForwardingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_ForwardingGroup) IsYANGGoStruct() {}

// GetFabricPriority retrieves the value of the leaf FabricPriority from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FabricPriority is set, it can
// safely use t.GetFabricPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FabricPriority == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetFabricPriority() uint8 {
	if t == nil || t.FabricPriority == nil {
		return 0
	}
	return *t.FabricPriority
}

// GetMulticastOutputQueue retrieves the value of the leaf MulticastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastOutputQueue is set, it can
// safely use t.GetMulticastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetMulticastOutputQueue() string {
	if t == nil || t.MulticastOutputQueue == nil {
		return ""
	}
	return *t.MulticastOutputQueue
}

// GetName retrieves the value of the leaf Name from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutputQueue retrieves the value of the leaf OutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputQueue is set, it can
// safely use t.GetOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetOutputQueue() string {
	if t == nil || t.OutputQueue == nil {
		return ""
	}
	return *t.OutputQueue
}

// GetUnicastOutputQueue retrieves the value of the leaf UnicastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastOutputQueue is set, it can
// safely use t.GetUnicastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetUnicastOutputQueue() string {
	if t == nil || t.UnicastOutputQueue == nil {
		return ""
	}
	return *t.UnicastOutputQueue
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_ForwardingGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_ForwardingGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_ForwardingGroup struct, which is a YANG list entry.
func (t *Qos_ForwardingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_ForwardingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_ForwardingGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_ForwardingGroup.
func (*Qos_ForwardingGroup) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_Interface struct {
	ΛMetadata     []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	Input         *Qos_Interface_Input        `path:"input" module:"openconfig-qos"`
	ΛInput        []ygot.Annotation           `path:"@input" ygotAnnotation:"true"`
	InterfaceId   *string                     `path:"config/interface-id|interface-id" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛInterfaceId  []ygot.Annotation           `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef  *Qos_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-qos"`
	ΛInterfaceRef []ygot.Annotation           `path:"@interface-ref" ygotAnnotation:"true"`
	Output        *Qos_Interface_Output       `path:"output" module:"openconfig-qos"`
	ΛOutput       []ygot.Annotation           `path:"@output" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInput() *Qos_Interface_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &Qos_Interface_Input{}
	return t.Input
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInterfaceRef() *Qos_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateOutput() *Qos_Interface_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_Interface_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from Qos_Interface. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInput() *Qos_Interface_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInterfaceRef() *Qos_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_Interface. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetOutput() *Qos_Interface_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the Qos_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *Qos_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Input.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_Interface struct, which is a YANG list entry.
func (t *Qos_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface.
func (*Qos_Interface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_Input struct {
	ΛMetadata                         []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	BufferAllocationProfile           *string                                                     `path:"config/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛBufferAllocationProfile          []ygot.Annotation                                           `path:"config/@buffer-allocation-profile" ygotAnnotation:"true"`
	Classifier                        map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	ΛClassifier                       []ygot.Annotation                                           `path:"classifiers/@classifier" ygotAnnotation:"true"`
	MulticastBufferAllocationProfile  *string                                                     `path:"config/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛMulticastBufferAllocationProfile []ygot.Annotation                                           `path:"config/@multicast-buffer-allocation-profile" ygotAnnotation:"true"`
	Queue                             map[string]*Qos_Interface_Input_Queue                       `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue                            []ygot.Annotation                                           `path:"queues/@queue" ygotAnnotation:"true"`
	SchedulerPolicy                   *Qos_Interface_Input_SchedulerPolicy                        `path:"scheduler-policy" module:"openconfig-qos"`
	ΛSchedulerPolicy                  []ygot.Annotation                                           `path:"@scheduler-policy" ygotAnnotation:"true"`
	UnicastBufferAllocationProfile    *string                                                     `path:"config/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛUnicastBufferAllocationProfile   []ygot.Annotation                                           `path:"config/@unicast-buffer-allocation-profile" ygotAnnotation:"true"`
	VoqInterface                      map[string]*Qos_Interface_Input_VoqInterface                `path:"virtual-output-queues/voq-interface" module:"openconfig-qos/openconfig-qos"`
	ΛVoqInterface                     []ygot.Annotation                                           `path:"virtual-output-queues/@voq-interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Input_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Input_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameClassifier(oldK, newK E_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteClassifier(Type E_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Input_Classifier struct to the
// list Classifier of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendClassifier(v *Qos_Interface_Input_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewQueue(Name string) (*Qos_Interface_Input_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateQueue(Name string) *Qos_Interface_Input_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetQueue(Name string) *Qos_Interface_Input_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_Queue struct to the
// list Queue of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendQueue(v *Qos_Interface_Input_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewVoqInterface creates a new entry in the VoqInterface list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VoqInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VoqInterface", key)
	}

	t.VoqInterface[key] = &Qos_Interface_Input_VoqInterface{
		Name: &Name,
	}

	return t.VoqInterface[key], nil
}

// RenameVoqInterface renames an entry in the list VoqInterface within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameVoqInterface(oldK, newK string) error {
	if _, ok := t.VoqInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VoqInterface", newK)
	}

	e, ok := t.VoqInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VoqInterface", oldK)
	}
	e.Name = &newK

	t.VoqInterface[newK] = e
	delete(t.VoqInterface, oldK)
	return nil
}

// GetOrCreateVoqInterface retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	key := Name

	if v, ok := t.VoqInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVoqInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVoqInterface got unexpected error: %v", err))
	}
	return v
}

// GetVoqInterface retrieves the value with the specified key from
// the VoqInterface map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VoqInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVoqInterface deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteVoqInterface(Name string) {
	key := Name

	delete(t.VoqInterface, key)
}

// AppendVoqInterface appends the supplied Qos_Interface_Input_VoqInterface struct to the
// list VoqInterface of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendVoqInterface(v *Qos_Interface_Input_VoqInterface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	if _, ok := t.VoqInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VoqInterface %v", key)
	}

	t.VoqInterface[key] = v
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Input) GetOrCreateSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Input_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Input. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Input) GetSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.VoqInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input.
func (*Qos_Interface_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_Classifier struct {
	ΛMetadata []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	Name      *string                                         `path:"config/name" module:"openconfig-qos/openconfig-qos"`
	ΛName     []ygot.Annotation                               `path:"config/@name" ygotAnnotation:"true"`
	Term      map[string]*Qos_Interface_Input_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	ΛTerm     []ygot.Annotation                               `path:"terms/@term" ygotAnnotation:"true"`
	Type      E_Input_Classifier_Type                         `path:"config/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛType     []ygot.Annotation                               `path:"config/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Input_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_Classifier) NewTerm(Id string) (*Qos_Interface_Input_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Input_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Input_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Input_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_Classifier) GetTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Input_Classifier_Term struct to the
// list Term of Qos_Interface_Input_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_Classifier) AppendTerm(v *Qos_Interface_Input_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetType() E_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier.
func (*Qos_Interface_Input_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_Term struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id              *string           `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛId             []ygot.Annotation `path:"state/@id|@id" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	ΛMatchedOctets  []ygot.Annotation `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
	ΛMatchedPackets []ygot.Annotation `path:"state/@matched-packets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier_Term.
func (*Qos_Interface_Input_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Queue represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_Queue struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvgQueueLen             *uint64           `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛAvgQueueLen            []ygot.Annotation `path:"state/@avg-queue-len" ygotAnnotation:"true"`
	DroppedOctets           *uint64           `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedOctets          []ygot.Annotation `path:"state/@dropped-octets" ygotAnnotation:"true"`
	DroppedPkts             *uint64           `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedPkts            []ygot.Annotation `path:"state/@dropped-pkts" ygotAnnotation:"true"`
	EcnMarkedOctets         *uint64           `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedOctets        []ygot.Annotation `path:"state/@ecn-marked-octets" ygotAnnotation:"true"`
	EcnMarkedPkts           *uint64           `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedPkts          []ygot.Annotation `path:"state/@ecn-marked-pkts" ygotAnnotation:"true"`
	EcnSelectedOctets       *uint64           `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedOctets      []ygot.Annotation `path:"state/@ecn-selected-octets" ygotAnnotation:"true"`
	EcnSelectedPkts         *uint64           `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedPkts        []ygot.Annotation `path:"state/@ecn-selected-pkts" ygotAnnotation:"true"`
	MaxQueueLen             *uint64           `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueLen            []ygot.Annotation `path:"state/@max-queue-len" ygotAnnotation:"true"`
	Name                    *string           `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName                   []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	QueueManagementProfile  *string           `path:"config/queue-management-profile" module:"openconfig-qos/openconfig-qos"`
	ΛQueueManagementProfile []ygot.Annotation `path:"config/@queue-management-profile" ygotAnnotation:"true"`
	TransmitOctets          *uint64           `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitOctets         []ygot.Annotation `path:"state/@transmit-octets" ygotAnnotation:"true"`
	TransmitPkts            *uint64           `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitPkts           []ygot.Annotation `path:"state/@transmit-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Queue.
func (*Qos_Interface_Input_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicy struct {
	ΛMetadata  []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Name       *string                                                   `path:"config/name" module:"openconfig-qos/openconfig-qos"`
	ΛName      []ygot.Annotation                                         `path:"config/@name" ygotAnnotation:"true"`
	Scheduler  map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
	ΛScheduler []ygot.Annotation                                         `path:"schedulers/@scheduler" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Input_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Input_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Input_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Input_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Input_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Input_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy.
func (*Qos_Interface_Input_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ConformingOctets  *uint64           `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ΛConformingOctets []ygot.Annotation `path:"state/@conforming-octets" ygotAnnotation:"true"`
	ConformingPkts    *uint64           `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛConformingPkts   []ygot.Annotation `path:"state/@conforming-pkts" ygotAnnotation:"true"`
	ExceedingOctets   *uint64           `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ΛExceedingOctets  []ygot.Annotation `path:"state/@exceeding-octets" ygotAnnotation:"true"`
	ExceedingPkts     *uint64           `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛExceedingPkts    []ygot.Annotation `path:"state/@exceeding-pkts" ygotAnnotation:"true"`
	Sequence          *uint32           `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛSequence         []ygot.Annotation `path:"state/@sequence|@sequence" ygotAnnotation:"true"`
	ViolatingOctets   *uint64           `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ΛViolatingOctets  []ygot.Annotation `path:"state/@violating-octets" ygotAnnotation:"true"`
	ViolatingPkts     *uint64           `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛViolatingPkts    []ygot.Annotation `path:"state/@violating-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterface struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Name      *string                                            `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName     []ygot.Annotation                                  `path:"config/@name|@name" ygotAnnotation:"true"`
	Queue     map[string]*Qos_Interface_Input_VoqInterface_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue    []ygot.Annotation                                  `path:"queues/@queue" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input_VoqInterface struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_VoqInterface) NewQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_VoqInterface_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input_VoqInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_VoqInterface) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_VoqInterface) GetOrCreateQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input_VoqInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_VoqInterface) GetQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_VoqInterface) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_VoqInterface_Queue struct to the
// list Queue of Qos_Interface_Input_VoqInterface. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_VoqInterface) AppendQueue(v *Qos_Interface_Input_VoqInterface_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_VoqInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_VoqInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface.
func (*Qos_Interface_Input_VoqInterface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface_Queue represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvgQueueLen        *uint64           `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛAvgQueueLen       []ygot.Annotation `path:"state/@avg-queue-len" ygotAnnotation:"true"`
	DroppedOctets      *uint64           `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedOctets     []ygot.Annotation `path:"state/@dropped-octets" ygotAnnotation:"true"`
	DroppedPkts        *uint64           `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedPkts       []ygot.Annotation `path:"state/@dropped-pkts" ygotAnnotation:"true"`
	EcnMarkedOctets    *uint64           `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedOctets   []ygot.Annotation `path:"state/@ecn-marked-octets" ygotAnnotation:"true"`
	EcnMarkedPkts      *uint64           `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedPkts     []ygot.Annotation `path:"state/@ecn-marked-pkts" ygotAnnotation:"true"`
	EcnSelectedOctets  *uint64           `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedOctets []ygot.Annotation `path:"state/@ecn-selected-octets" ygotAnnotation:"true"`
	EcnSelectedPkts    *uint64           `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedPkts   []ygot.Annotation `path:"state/@ecn-selected-pkts" ygotAnnotation:"true"`
	MaxQueueLen        *uint64           `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueLen       []ygot.Annotation `path:"state/@max-queue-len" ygotAnnotation:"true"`
	Name               *string           `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName              []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	TransmitOctets     *uint64           `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitOctets    []ygot.Annotation `path:"state/@transmit-octets" ygotAnnotation:"true"`
	TransmitPkts       *uint64           `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitPkts      []ygot.Annotation `path:"state/@transmit-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Input_VoqInterface_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Input_VoqInterface_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface_Queue.
func (*Qos_Interface_Input_VoqInterface_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-qos/openconfig-qos"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-qos/openconfig-qos"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_InterfaceRef.
func (*Qos_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_Output struct {
	ΛMetadata                         []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	BufferAllocationProfile           *string                                                      `path:"config/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛBufferAllocationProfile          []ygot.Annotation                                            `path:"config/@buffer-allocation-profile" ygotAnnotation:"true"`
	Classifier                        map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	ΛClassifier                       []ygot.Annotation                                            `path:"classifiers/@classifier" ygotAnnotation:"true"`
	MulticastBufferAllocationProfile  *string                                                      `path:"config/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛMulticastBufferAllocationProfile []ygot.Annotation                                            `path:"config/@multicast-buffer-allocation-profile" ygotAnnotation:"true"`
	Queue                             map[string]*Qos_Interface_Output_Queue                       `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue                            []ygot.Annotation                                            `path:"queues/@queue" ygotAnnotation:"true"`
	SchedulerPolicy                   *Qos_Interface_Output_SchedulerPolicy                        `path:"scheduler-policy" module:"openconfig-qos"`
	ΛSchedulerPolicy                  []ygot.Annotation                                            `path:"@scheduler-policy" ygotAnnotation:"true"`
	UnicastBufferAllocationProfile    *string                                                      `path:"config/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛUnicastBufferAllocationProfile   []ygot.Annotation                                            `path:"config/@unicast-buffer-allocation-profile" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewClassifier(Type E_Input_Classifier_Type) (*Qos_Interface_Output_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Output_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameClassifier(oldK, newK E_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetClassifier(Type E_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteClassifier(Type E_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Output_Classifier struct to the
// list Classifier of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendClassifier(v *Qos_Interface_Output_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewQueue(Name string) (*Qos_Interface_Output_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Output_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateQueue(Name string) *Qos_Interface_Output_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetQueue(Name string) *Qos_Interface_Output_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Output_Queue struct to the
// list Queue of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendQueue(v *Qos_Interface_Output_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Output_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Output. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output.
func (*Qos_Interface_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_Classifier struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Name      *string                                          `path:"config/name" module:"openconfig-qos/openconfig-qos"`
	ΛName     []ygot.Annotation                                `path:"config/@name" ygotAnnotation:"true"`
	Term      map[string]*Qos_Interface_Output_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	ΛTerm     []ygot.Annotation                                `path:"terms/@term" ygotAnnotation:"true"`
	Type      E_Input_Classifier_Type                          `path:"config/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛType     []ygot.Annotation                                `path:"config/@type|@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Output_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_Classifier) NewTerm(Id string) (*Qos_Interface_Output_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Output_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Output_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Output_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_Classifier) GetTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Output_Classifier_Term struct to the
// list Term of Qos_Interface_Output_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_Classifier) AppendTerm(v *Qos_Interface_Output_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetType() E_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier.
func (*Qos_Interface_Output_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_Term struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id              *string           `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛId             []ygot.Annotation `path:"state/@id|@id" ygotAnnotation:"true"`
	MatchedOctets   *uint64           `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	ΛMatchedOctets  []ygot.Annotation `path:"state/@matched-octets" ygotAnnotation:"true"`
	MatchedPackets  *uint64           `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
	ΛMatchedPackets []ygot.Annotation `path:"state/@matched-packets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier_Term.
func (*Qos_Interface_Output_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Queue represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_Queue struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvgQueueLen             *uint64           `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛAvgQueueLen            []ygot.Annotation `path:"state/@avg-queue-len" ygotAnnotation:"true"`
	DroppedOctets           *uint64           `path:"state/dropped-octets" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedOctets          []ygot.Annotation `path:"state/@dropped-octets" ygotAnnotation:"true"`
	DroppedPkts             *uint64           `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛDroppedPkts            []ygot.Annotation `path:"state/@dropped-pkts" ygotAnnotation:"true"`
	EcnMarkedOctets         *uint64           `path:"state/ecn-marked-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedOctets        []ygot.Annotation `path:"state/@ecn-marked-octets" ygotAnnotation:"true"`
	EcnMarkedPkts           *uint64           `path:"state/ecn-marked-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnMarkedPkts          []ygot.Annotation `path:"state/@ecn-marked-pkts" ygotAnnotation:"true"`
	EcnSelectedOctets       *uint64           `path:"state/ecn-selected-octets" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedOctets      []ygot.Annotation `path:"state/@ecn-selected-octets" ygotAnnotation:"true"`
	EcnSelectedPkts         *uint64           `path:"state/ecn-selected-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛEcnSelectedPkts        []ygot.Annotation `path:"state/@ecn-selected-pkts" ygotAnnotation:"true"`
	MaxQueueLen             *uint64           `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueLen            []ygot.Annotation `path:"state/@max-queue-len" ygotAnnotation:"true"`
	Name                    *string           `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName                   []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	QueueManagementProfile  *string           `path:"config/queue-management-profile" module:"openconfig-qos/openconfig-qos"`
	ΛQueueManagementProfile []ygot.Annotation `path:"config/@queue-management-profile" ygotAnnotation:"true"`
	TransmitOctets          *uint64           `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitOctets         []ygot.Annotation `path:"state/@transmit-octets" ygotAnnotation:"true"`
	TransmitPkts            *uint64           `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛTransmitPkts           []ygot.Annotation `path:"state/@transmit-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedOctets retrieves the value of the leaf DroppedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedOctets is set, it can
// safely use t.GetDroppedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetDroppedOctets() uint64 {
	if t == nil || t.DroppedOctets == nil {
		return 0
	}
	return *t.DroppedOctets
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetEcnMarkedOctets retrieves the value of the leaf EcnMarkedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedOctets is set, it can
// safely use t.GetEcnMarkedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnMarkedOctets() uint64 {
	if t == nil || t.EcnMarkedOctets == nil {
		return 0
	}
	return *t.EcnMarkedOctets
}

// GetEcnMarkedPkts retrieves the value of the leaf EcnMarkedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnMarkedPkts is set, it can
// safely use t.GetEcnMarkedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnMarkedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnMarkedPkts() uint64 {
	if t == nil || t.EcnMarkedPkts == nil {
		return 0
	}
	return *t.EcnMarkedPkts
}

// GetEcnSelectedOctets retrieves the value of the leaf EcnSelectedOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedOctets is set, it can
// safely use t.GetEcnSelectedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnSelectedOctets() uint64 {
	if t == nil || t.EcnSelectedOctets == nil {
		return 0
	}
	return *t.EcnSelectedOctets
}

// GetEcnSelectedPkts retrieves the value of the leaf EcnSelectedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnSelectedPkts is set, it can
// safely use t.GetEcnSelectedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnSelectedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetEcnSelectedPkts() uint64 {
	if t == nil || t.EcnSelectedPkts == nil {
		return 0
	}
	return *t.EcnSelectedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Queue.
func (*Qos_Interface_Output_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicy struct {
	ΛMetadata  []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Name       *string                                                    `path:"config/name" module:"openconfig-qos/openconfig-qos"`
	ΛName      []ygot.Annotation                                          `path:"config/@name" ygotAnnotation:"true"`
	Scheduler  map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
	ΛScheduler []ygot.Annotation                                          `path:"schedulers/@scheduler" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Output_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Output_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Output_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Output_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Output_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Output_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy.
func (*Qos_Interface_Output_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	ConformingOctets  *uint64           `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ΛConformingOctets []ygot.Annotation `path:"state/@conforming-octets" ygotAnnotation:"true"`
	ConformingPkts    *uint64           `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛConformingPkts   []ygot.Annotation `path:"state/@conforming-pkts" ygotAnnotation:"true"`
	ExceedingOctets   *uint64           `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ΛExceedingOctets  []ygot.Annotation `path:"state/@exceeding-octets" ygotAnnotation:"true"`
	ExceedingPkts     *uint64           `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛExceedingPkts    []ygot.Annotation `path:"state/@exceeding-pkts" ygotAnnotation:"true"`
	Sequence          *uint32           `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛSequence         []ygot.Annotation `path:"state/@sequence|@sequence" ygotAnnotation:"true"`
	ViolatingOctets   *uint64           `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ΛViolatingOctets  []ygot.Annotation `path:"state/@violating-octets" ygotAnnotation:"true"`
	ViolatingPkts     *uint64           `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
	ΛViolatingPkts    []ygot.Annotation `path:"state/@violating-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Interface_Output_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Queue represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_Queue struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName     []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	QueueId   *uint8            `path:"config/queue-id" module:"openconfig-qos/openconfig-qos"`
	ΛQueueId  []ygot.Annotation `path:"config/@queue-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Qos_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueId retrieves the value of the leaf QueueId from the Qos_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *Qos_Queue) GetQueueId() uint8 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_Queue struct, which is a YANG list entry.
func (t *Qos_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Queue.
func (*Qos_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfile struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Name      *string                          `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName     []ygot.Annotation                `path:"config/@name|@name" ygotAnnotation:"true"`
	Red       *Qos_QueueManagementProfile_Red  `path:"red" module:"openconfig-qos"`
	ΛRed      []ygot.Annotation                `path:"@red" ygotAnnotation:"true"`
	Wred      *Qos_QueueManagementProfile_Wred `path:"wred" module:"openconfig-qos"`
	ΛWred     []ygot.Annotation                `path:"@wred" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile) IsYANGGoStruct() {}

// GetOrCreateRed retrieves the value of the Red field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateRed() *Qos_QueueManagementProfile_Red {
	if t.Red != nil {
		return t.Red
	}
	t.Red = &Qos_QueueManagementProfile_Red{}
	return t.Red
}

// GetOrCreateWred retrieves the value of the Wred field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateWred() *Qos_QueueManagementProfile_Wred {
	if t.Wred != nil {
		return t.Wred
	}
	t.Wred = &Qos_QueueManagementProfile_Wred{}
	return t.Wred
}

// GetRed returns the value of the Red struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Red is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetRed() *Qos_QueueManagementProfile_Red {
	if t != nil && t.Red != nil {
		return t.Red
	}
	return nil
}

// GetWred returns the value of the Wred struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Wred is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetWred() *Qos_QueueManagementProfile_Wred {
	if t != nil && t.Wred != nil {
		return t.Wred
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_QueueManagementProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Red.PopulateDefaults()
	t.Wred.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_QueueManagementProfile struct, which is a YANG list entry.
func (t *Qos_QueueManagementProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile.
func (*Qos_QueueManagementProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_Red struct {
	ΛMetadata []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	Uniform   *Qos_QueueManagementProfile_Red_Uniform `path:"uniform" module:"openconfig-qos"`
	ΛUniform  []ygot.Annotation                       `path:"@uniform" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Red) GetOrCreateUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Red_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Red. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Red) GetUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Red
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Red) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Uniform.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red.
func (*Qos_QueueManagementProfile_Red) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Drop                 *bool             `path:"config/drop" module:"openconfig-qos/openconfig-qos"`
	ΛDrop                []ygot.Annotation `path:"config/@drop" ygotAnnotation:"true"`
	EnableEcn            *bool             `path:"config/enable-ecn" module:"openconfig-qos/openconfig-qos"`
	ΛEnableEcn           []ygot.Annotation `path:"config/@enable-ecn" ygotAnnotation:"true"`
	MaxThreshold         *uint64           `path:"config/max-threshold" module:"openconfig-qos/openconfig-qos"`
	ΛMaxThreshold        []ygot.Annotation `path:"config/@max-threshold" ygotAnnotation:"true"`
	MaxThresholdPercent  *uint64           `path:"config/max-threshold-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMaxThresholdPercent []ygot.Annotation `path:"config/@max-threshold-percent" ygotAnnotation:"true"`
	MinThreshold         *uint64           `path:"config/min-threshold" module:"openconfig-qos/openconfig-qos"`
	ΛMinThreshold        []ygot.Annotation `path:"config/@min-threshold" ygotAnnotation:"true"`
	MinThresholdPercent  *uint64           `path:"config/min-threshold-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMinThresholdPercent []ygot.Annotation `path:"config/@min-threshold-percent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMaxThresholdPercent() uint64 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 0
	}
	return *t.MaxThresholdPercent
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMinThresholdPercent() uint64 {
	if t == nil || t.MinThresholdPercent == nil {
		return 0
	}
	return *t.MinThresholdPercent
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Red_Uniform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Red_Uniform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	if t.EnableEcn == nil {
		var v bool = false
		t.EnableEcn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red_Uniform.
func (*Qos_QueueManagementProfile_Red_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_Wred struct {
	ΛMetadata []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Uniform   *Qos_QueueManagementProfile_Wred_Uniform `path:"uniform" module:"openconfig-qos"`
	ΛUniform  []ygot.Annotation                        `path:"@uniform" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Wred) GetOrCreateUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Wred_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Wred. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Wred) GetUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Wred
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Wred) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Uniform.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred.
func (*Qos_QueueManagementProfile_Wred) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform struct {
	ΛMetadata                  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Drop                       *bool             `path:"config/drop" module:"openconfig-qos/openconfig-qos"`
	ΛDrop                      []ygot.Annotation `path:"config/@drop" ygotAnnotation:"true"`
	EnableEcn                  *bool             `path:"config/enable-ecn" module:"openconfig-qos/openconfig-qos"`
	ΛEnableEcn                 []ygot.Annotation `path:"config/@enable-ecn" ygotAnnotation:"true"`
	MaxDropProbabilityPercent  *uint8            `path:"config/max-drop-probability-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMaxDropProbabilityPercent []ygot.Annotation `path:"config/@max-drop-probability-percent" ygotAnnotation:"true"`
	MaxThreshold               *uint64           `path:"config/max-threshold" module:"openconfig-qos/openconfig-qos"`
	ΛMaxThreshold              []ygot.Annotation `path:"config/@max-threshold" ygotAnnotation:"true"`
	MaxThresholdPercent        *uint64           `path:"config/max-threshold-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMaxThresholdPercent       []ygot.Annotation `path:"config/@max-threshold-percent" ygotAnnotation:"true"`
	MinThreshold               *uint64           `path:"config/min-threshold" module:"openconfig-qos/openconfig-qos"`
	ΛMinThreshold              []ygot.Annotation `path:"config/@min-threshold" ygotAnnotation:"true"`
	MinThresholdPercent        *uint64           `path:"config/min-threshold-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMinThresholdPercent       []ygot.Annotation `path:"config/@min-threshold-percent" ygotAnnotation:"true"`
	Weight                     *uint32           `path:"config/weight" module:"openconfig-qos/openconfig-qos"`
	ΛWeight                    []ygot.Annotation `path:"config/@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxDropProbabilityPercent retrieves the value of the leaf MaxDropProbabilityPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDropProbabilityPercent is set, it can
// safely use t.GetMaxDropProbabilityPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDropProbabilityPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxDropProbabilityPercent() uint8 {
	if t == nil || t.MaxDropProbabilityPercent == nil {
		return 0
	}
	return *t.MaxDropProbabilityPercent
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxThresholdPercent() uint64 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 0
	}
	return *t.MaxThresholdPercent
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMinThresholdPercent() uint64 {
	if t == nil || t.MinThresholdPercent == nil {
		return 0
	}
	return *t.MinThresholdPercent
}

// GetWeight retrieves the value of the leaf Weight from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_QueueManagementProfile_Wred_Uniform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_QueueManagementProfile_Wred_Uniform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drop == nil {
		var v bool = false
		t.Drop = &v
	}
	if t.EnableEcn == nil {
		var v bool = false
		t.EnableEcn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred_Uniform.
func (*Qos_QueueManagementProfile_Wred_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicy struct {
	ΛMetadata  []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Name       *string                                   `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName      []ygot.Annotation                         `path:"config/@name|@name" ygotAnnotation:"true"`
	Scheduler  map[uint32]*Qos_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
	ΛScheduler []ygot.Annotation                         `path:"schedulers/@scheduler" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy) AppendScheduler(v *Qos_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy.
func (*Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler struct {
	ΛMetadata          []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Input              map[string]*Qos_SchedulerPolicy_Scheduler_Input  `path:"inputs/input" module:"openconfig-qos/openconfig-qos"`
	ΛInput             []ygot.Annotation                                `path:"inputs/@input" ygotAnnotation:"true"`
	OneRateTwoColor    *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor   `path:"one-rate-two-color" module:"openconfig-qos"`
	ΛOneRateTwoColor   []ygot.Annotation                                `path:"@one-rate-two-color" ygotAnnotation:"true"`
	Output             *Qos_SchedulerPolicy_Scheduler_Output            `path:"output" module:"openconfig-qos"`
	ΛOutput            []ygot.Annotation                                `path:"@output" ygotAnnotation:"true"`
	Priority           E_Scheduler_Priority                             `path:"config/priority" module:"openconfig-qos/openconfig-qos"`
	ΛPriority          []ygot.Annotation                                `path:"config/@priority" ygotAnnotation:"true"`
	Sequence           *uint32                                          `path:"config/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛSequence          []ygot.Annotation                                `path:"config/@sequence|@sequence" ygotAnnotation:"true"`
	TwoRateThreeColor  *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor `path:"two-rate-three-color" module:"openconfig-qos"`
	ΛTwoRateThreeColor []ygot.Annotation                                `path:"@two-rate-three-color" ygotAnnotation:"true"`
	Type               E_QosTypes_QOS_SCHEDULER_TYPE                    `path:"config/type" module:"openconfig-qos/openconfig-qos"`
	ΛType              []ygot.Annotation                                `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// NewInput creates a new entry in the Input list of the
// Qos_SchedulerPolicy_Scheduler struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy_Scheduler) NewInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Input[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Input", key)
	}

	t.Input[key] = &Qos_SchedulerPolicy_Scheduler_Input{
		Id: &Id,
	}

	return t.Input[key], nil
}

// RenameInput renames an entry in the list Input within
// the Qos_SchedulerPolicy_Scheduler struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy_Scheduler) RenameInput(oldK, newK string) error {
	if _, ok := t.Input[newK]; ok {
		return fmt.Errorf("key %v already exists in Input", newK)
	}

	e, ok := t.Input[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Input", oldK)
	}
	e.Id = &newK

	t.Input[newK] = e
	delete(t.Input, oldK)
	return nil
}

// GetOrCreateInput retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	key := Id

	if v, ok := t.Input[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInput(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInput got unexpected error: %v", err))
	}
	return v
}

// GetInput retrieves the value with the specified key from
// the Input map field of Qos_SchedulerPolicy_Scheduler. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Input[key]; ok {
		return lm
	}
	return nil
}

// DeleteInput deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy_Scheduler) DeleteInput(Id string) {
	key := Id

	delete(t.Input, key)
}

// AppendInput appends the supplied Qos_SchedulerPolicy_Scheduler_Input struct to the
// list Input of Qos_SchedulerPolicy_Scheduler. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler_Input already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy_Scheduler) AppendInput(v *Qos_SchedulerPolicy_Scheduler_Input) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	if _, ok := t.Input[key]; ok {
		return fmt.Errorf("duplicate key for list Input %v", key)
	}

	t.Input[key] = v
	return nil
}

// GetOrCreateOneRateTwoColor retrieves the value of the OneRateTwoColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	t.OneRateTwoColor = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor{}
	return t.OneRateTwoColor
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_SchedulerPolicy_Scheduler_Output{}
	return t.Output
}

// GetOrCreateTwoRateThreeColor retrieves the value of the TwoRateThreeColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	t.TwoRateThreeColor = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor{}
	return t.TwoRateThreeColor
}

// GetOneRateTwoColor returns the value of the OneRateTwoColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field OneRateTwoColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t != nil && t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetTwoRateThreeColor returns the value of the TwoRateThreeColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field TwoRateThreeColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t != nil && t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	return nil
}

// GetPriority retrieves the value of the leaf Priority from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetPriority() E_Scheduler_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetType retrieves the value of the leaf Type from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetType() E_QosTypes_QOS_SCHEDULER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OneRateTwoColor.PopulateDefaults()
	t.Output.PopulateDefaults()
	t.TwoRateThreeColor.PopulateDefaults()
	for _, e := range t.Input {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler.
func (*Qos_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Input represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Id         *string           `path:"config/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛId        []ygot.Annotation `path:"config/@id|@id" ygotAnnotation:"true"`
	InputType  E_Input_InputType `path:"config/input-type" module:"openconfig-qos/openconfig-qos"`
	ΛInputType []ygot.Annotation `path:"config/@input-type" ygotAnnotation:"true"`
	Queue      *string           `path:"config/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue     []ygot.Annotation `path:"config/@queue" ygotAnnotation:"true"`
	Weight     *uint64           `path:"config/weight" module:"openconfig-qos/openconfig-qos"`
	ΛWeight    []ygot.Annotation `path:"config/@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Input) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetInputType retrieves the value of the leaf InputType from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputType is set, it can
// safely use t.GetInputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetInputType() E_Input_InputType {
	if t == nil || t.InputType == 0 {
		return 0
	}
	return t.InputType
}

// GetQueue retrieves the value of the leaf Queue from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetQueue() string {
	if t == nil || t.Queue == nil {
		return ""
	}
	return *t.Queue
}

// GetWeight retrieves the value of the leaf Weight from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetWeight() uint64 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler_Input struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Input.
func (*Qos_SchedulerPolicy_Scheduler_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor struct {
	ΛMetadata             []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Bc                    *uint32                                                      `path:"config/bc" module:"openconfig-qos/openconfig-qos"`
	ΛBc                   []ygot.Annotation                                            `path:"config/@bc" ygotAnnotation:"true"`
	Cir                   *uint64                                                      `path:"config/cir" module:"openconfig-qos/openconfig-qos"`
	ΛCir                  []ygot.Annotation                                            `path:"config/@cir" ygotAnnotation:"true"`
	CirPct                *uint8                                                       `path:"config/cir-pct" module:"openconfig-qos/openconfig-qos"`
	ΛCirPct               []ygot.Annotation                                            `path:"config/@cir-pct" ygotAnnotation:"true"`
	CirPctRemaining       *uint8                                                       `path:"config/cir-pct-remaining" module:"openconfig-qos/openconfig-qos"`
	ΛCirPctRemaining      []ygot.Annotation                                            `path:"config/@cir-pct-remaining" ygotAnnotation:"true"`
	ConformAction         *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ΛConformAction        []ygot.Annotation                                            `path:"@conform-action" ygotAnnotation:"true"`
	ExceedAction          *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	ΛExceedAction         []ygot.Annotation                                            `path:"@exceed-action" ygotAnnotation:"true"`
	MaxQueueDepthBytes    *uint32                                                      `path:"config/max-queue-depth-bytes" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueDepthBytes   []ygot.Annotation                                            `path:"config/@max-queue-depth-bytes" ygotAnnotation:"true"`
	MaxQueueDepthPackets  *uint32                                                      `path:"config/max-queue-depth-packets" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueDepthPackets []ygot.Annotation                                            `path:"config/@max-queue-depth-packets" ygotAnnotation:"true"`
	MaxQueueDepthPercent  *uint8                                                       `path:"config/max-queue-depth-percent" module:"openconfig-qos/openconfig-qos"`
	ΛMaxQueueDepthPercent []ygot.Annotation                                            `path:"config/@max-queue-depth-percent" ygotAnnotation:"true"`
	QueuingBehavior       E_QosTypes_QueueBehavior                                     `path:"config/queuing-behavior" module:"openconfig-qos/openconfig-qos"`
	ΛQueuingBehavior      []ygot.Annotation                                            `path:"config/@queuing-behavior" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction{}
	return t.ExceedAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetMaxQueueDepthBytes retrieves the value of the leaf MaxQueueDepthBytes from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthBytes is set, it can
// safely use t.GetMaxQueueDepthBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthBytes == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthBytes() uint32 {
	if t == nil || t.MaxQueueDepthBytes == nil {
		return 0
	}
	return *t.MaxQueueDepthBytes
}

// GetMaxQueueDepthPackets retrieves the value of the leaf MaxQueueDepthPackets from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPackets is set, it can
// safely use t.GetMaxQueueDepthPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPackets == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPackets() uint32 {
	if t == nil || t.MaxQueueDepthPackets == nil {
		return 0
	}
	return *t.MaxQueueDepthPackets
}

// GetMaxQueueDepthPercent retrieves the value of the leaf MaxQueueDepthPercent from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPercent is set, it can
// safely use t.GetMaxQueueDepthPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPercent == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPercent() uint8 {
	if t == nil || t.MaxQueueDepthPercent == nil {
		return 0
	}
	return *t.MaxQueueDepthPercent
}

// GetQueuingBehavior retrieves the value of the leaf QueuingBehavior from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingBehavior is set, it can
// safely use t.GetQueuingBehavior() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingBehavior == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetQueuingBehavior() E_QosTypes_QueueBehavior {
	if t == nil || t.QueuingBehavior == 0 {
		return 0
	}
	return t.QueuingBehavior
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ConformAction.PopulateDefaults()
	t.ExceedAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Drop       *bool             `path:"config/drop" module:"openconfig-qos/openconfig-qos"`
	ΛDrop      []ygot.Annotation `path:"config/@drop" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Output represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output struct {
	ΛMetadata       []ygot.Annotation   `path:"@" ygotAnnotation:"true"`
	ChildScheduler  *string             `path:"config/child-scheduler" module:"openconfig-qos/openconfig-qos"`
	ΛChildScheduler []ygot.Annotation   `path:"config/@child-scheduler" ygotAnnotation:"true"`
	OutputFwdGroup  *string             `path:"config/output-fwd-group" module:"openconfig-qos/openconfig-qos"`
	ΛOutputFwdGroup []ygot.Annotation   `path:"config/@output-fwd-group" ygotAnnotation:"true"`
	OutputType      E_Output_OutputType `path:"config/output-type" module:"openconfig-qos/openconfig-qos"`
	ΛOutputType     []ygot.Annotation   `path:"config/@output-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Output) IsYANGGoStruct() {}

// GetChildScheduler retrieves the value of the leaf ChildScheduler from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChildScheduler is set, it can
// safely use t.GetChildScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChildScheduler == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetChildScheduler() string {
	if t == nil || t.ChildScheduler == nil {
		return ""
	}
	return *t.ChildScheduler
}

// GetOutputFwdGroup retrieves the value of the leaf OutputFwdGroup from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFwdGroup is set, it can
// safely use t.GetOutputFwdGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFwdGroup == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputFwdGroup() string {
	if t == nil || t.OutputFwdGroup == nil {
		return ""
	}
	return *t.OutputFwdGroup
}

// GetOutputType retrieves the value of the leaf OutputType from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputType is set, it can
// safely use t.GetOutputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputType() E_Output_OutputType {
	if t == nil || t.OutputType == 0 {
		return 0
	}
	return t.OutputType
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Output.
func (*Qos_SchedulerPolicy_Scheduler_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor struct {
	ΛMetadata        []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Bc               *uint32                                                        `path:"config/bc" module:"openconfig-qos/openconfig-qos"`
	ΛBc              []ygot.Annotation                                              `path:"config/@bc" ygotAnnotation:"true"`
	Be               *uint32                                                        `path:"config/be" module:"openconfig-qos/openconfig-qos"`
	ΛBe              []ygot.Annotation                                              `path:"config/@be" ygotAnnotation:"true"`
	Cir              *uint64                                                        `path:"config/cir" module:"openconfig-qos/openconfig-qos"`
	ΛCir             []ygot.Annotation                                              `path:"config/@cir" ygotAnnotation:"true"`
	CirPct           *uint8                                                         `path:"config/cir-pct" module:"openconfig-qos/openconfig-qos"`
	ΛCirPct          []ygot.Annotation                                              `path:"config/@cir-pct" ygotAnnotation:"true"`
	CirPctRemaining  *uint8                                                         `path:"config/cir-pct-remaining" module:"openconfig-qos/openconfig-qos"`
	ΛCirPctRemaining []ygot.Annotation                                              `path:"config/@cir-pct-remaining" ygotAnnotation:"true"`
	ConformAction    *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ΛConformAction   []ygot.Annotation                                              `path:"@conform-action" ygotAnnotation:"true"`
	ExceedAction     *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	ΛExceedAction    []ygot.Annotation                                              `path:"@exceed-action" ygotAnnotation:"true"`
	Pir              *uint64                                                        `path:"config/pir" module:"openconfig-qos/openconfig-qos"`
	ΛPir             []ygot.Annotation                                              `path:"config/@pir" ygotAnnotation:"true"`
	PirPct           *uint8                                                         `path:"config/pir-pct" module:"openconfig-qos/openconfig-qos"`
	ΛPirPct          []ygot.Annotation                                              `path:"config/@pir-pct" ygotAnnotation:"true"`
	PirPctRemaining  *uint8                                                         `path:"config/pir-pct-remaining" module:"openconfig-qos/openconfig-qos"`
	ΛPirPctRemaining []ygot.Annotation                                              `path:"config/@pir-pct-remaining" ygotAnnotation:"true"`
	ViolateAction    *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction `path:"violate-action" module:"openconfig-qos"`
	ΛViolateAction   []ygot.Annotation                                              `path:"@violate-action" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction{}
	return t.ViolateAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetBe retrieves the value of the leaf Be from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBe() uint32 {
	if t == nil || t.Be == nil {
		return 0
	}
	return *t.Be
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetPir retrieves the value of the leaf Pir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPir() uint64 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetPirPct retrieves the value of the leaf PirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPct is set, it can
// safely use t.GetPirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPct() uint8 {
	if t == nil || t.PirPct == nil {
		return 0
	}
	return *t.PirPct
}

// GetPirPctRemaining retrieves the value of the leaf PirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPctRemaining is set, it can
// safely use t.GetPirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPctRemaining() uint8 {
	if t == nil || t.PirPctRemaining == nil {
		return 0
	}
	return *t.PirPctRemaining
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ConformAction.PopulateDefaults()
	t.ExceedAction.PopulateDefaults()
	t.ViolateAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Drop       *bool             `path:"config/drop" module:"openconfig-qos/openconfig-qos"`
	ΛDrop      []ygot.Annotation `path:"config/@drop" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Drop       *bool             `path:"config/drop" module:"openconfig-qos/openconfig-qos"`
	ΛDrop      []ygot.Annotation `path:"config/@drop" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// RelayAgent represents the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgent struct {
	ΛMetadata []ygot.Annotation  `path:"@" ygotAnnotation:"true"`
	Dhcp      *RelayAgent_Dhcp   `path:"dhcp" module:"openconfig-relay-agent"`
	ΛDhcp     []ygot.Annotation  `path:"@dhcp" ygotAnnotation:"true"`
	Dhcpv6    *RelayAgent_Dhcpv6 `path:"dhcpv6" module:"openconfig-relay-agent"`
	ΛDhcpv6   []ygot.Annotation  `path:"@dhcpv6" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent) IsYANGGoStruct() {}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcp() *RelayAgent_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &RelayAgent_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcpv6() *RelayAgent_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &RelayAgent_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcp returns the value of the Dhcp struct pointer
// from RelayAgent. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcp() *RelayAgent_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from RelayAgent. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcpv6() *RelayAgent_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcp.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent.
func (*RelayAgent) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp represents the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_Dhcp struct {
	ΛMetadata               []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	AgentInformationOption  *RelayAgent_Dhcp_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	ΛAgentInformationOption []ygot.Annotation                       `path:"@agent-information-option" ygotAnnotation:"true"`
	EnableRelayAgent        *bool                                   `path:"config/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableRelayAgent       []ygot.Annotation                       `path:"config/@enable-relay-agent" ygotAnnotation:"true"`
	Interface               map[string]*RelayAgent_Dhcp_Interface   `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛInterface              []ygot.Annotation                       `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcp struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcp) NewInterface(Id string) (*RelayAgent_Dhcp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcp_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcp) GetOrCreateInterface(Id string) *RelayAgent_Dhcp_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcp) GetInterface(Id string) *RelayAgent_Dhcp_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcp. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcp) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcp_Interface struct to the
// list Interface of RelayAgent_Dhcp. If the key value(s) specified in
// the supplied RelayAgent_Dhcp_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcp) AppendInterface(v *RelayAgent_Dhcp_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp) GetAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableRelayAgent == nil {
		var v bool = false
		t.EnableRelayAgent = &v
	}
	t.AgentInformationOption.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp.
func (*RelayAgent_Dhcp) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable    *bool             `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnable   []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_AgentInformationOption) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_AgentInformationOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_AgentInformationOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_AgentInformationOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_AgentInformationOption.
func (*RelayAgent_Dhcp_AgentInformationOption) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_Interface struct {
	ΛMetadata               []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	AgentInformationOption  *RelayAgent_Dhcp_Interface_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	ΛAgentInformationOption []ygot.Annotation                                 `path:"@agent-information-option" ygotAnnotation:"true"`
	Counters                *RelayAgent_Dhcp_Interface_Counters               `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛCounters               []ygot.Annotation                                 `path:"state/@counters" ygotAnnotation:"true"`
	Enable                  *bool                                             `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnable                 []ygot.Annotation                                 `path:"config/@enable" ygotAnnotation:"true"`
	HelperAddress           []string                                          `path:"config/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛHelperAddress          []ygot.Annotation                                 `path:"config/@helper-address" ygotAnnotation:"true"`
	Id                      *string                                           `path:"config/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	ΛId                     []ygot.Annotation                                 `path:"config/@id|@id" ygotAnnotation:"true"`
	InterfaceRef            *RelayAgent_Dhcp_Interface_InterfaceRef           `path:"interface-ref" module:"openconfig-relay-agent"`
	ΛInterfaceRef           []ygot.Annotation                                 `path:"@interface-ref" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface) IsYANGGoStruct() {}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_Interface_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcp_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcp_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AgentInformationOption.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RelayAgent_Dhcp_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface.
func (*RelayAgent_Dhcp_Interface) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CircuitId      *string           `path:"config/circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛCircuitId     []ygot.Annotation `path:"config/@circuit-id" ygotAnnotation:"true"`
	Enable         *bool             `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnable        []ygot.Annotation `path:"config/@enable" ygotAnnotation:"true"`
	RemoteId       *string           `path:"config/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛRemoteId      []ygot.Annotation `path:"config/@remote-id" ygotAnnotation:"true"`
	SentCircuitId  *string           `path:"state/sent-circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSentCircuitId []ygot.Annotation `path:"state/@sent-circuit-id" ygotAnnotation:"true"`
	SentRemoteId   *string           `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSentRemoteId  []ygot.Annotation `path:"state/@sent-remote-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) IsYANGGoStruct() {}

// GetCircuitId retrieves the value of the leaf CircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetCircuitId() string {
	if t == nil || t.CircuitId == nil {
		return ""
	}
	return *t.CircuitId
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentCircuitId retrieves the value of the leaf SentCircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentCircuitId is set, it can
// safely use t.GetSentCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentCircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentCircuitId() string {
	if t == nil || t.SentCircuitId == nil {
		return ""
	}
	return *t.SentCircuitId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_AgentInformationOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enable == nil {
		var v bool = false
		t.Enable = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_AgentInformationOption.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_Counters struct {
	ΛMetadata             []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootreplySent         *uint64           `path:"bootreply-sent" module:"openconfig-relay-agent"`
	ΛBootreplySent        []ygot.Annotation `path:"@bootreply-sent" ygotAnnotation:"true"`
	BootrequestReceived   *uint64           `path:"bootrequest-received" module:"openconfig-relay-agent"`
	ΛBootrequestReceived  []ygot.Annotation `path:"@bootrequest-received" ygotAnnotation:"true"`
	BootrequestSent       *uint64           `path:"bootrequest-sent" module:"openconfig-relay-agent"`
	ΛBootrequestSent      []ygot.Annotation `path:"@bootrequest-sent" ygotAnnotation:"true"`
	DhcpAckSent           *uint64           `path:"dhcp-ack-sent" module:"openconfig-relay-agent"`
	ΛDhcpAckSent          []ygot.Annotation `path:"@dhcp-ack-sent" ygotAnnotation:"true"`
	DhcpDeclineReceived   *uint64           `path:"dhcp-decline-received" module:"openconfig-relay-agent"`
	ΛDhcpDeclineReceived  []ygot.Annotation `path:"@dhcp-decline-received" ygotAnnotation:"true"`
	DhcpDiscoverReceived  *uint64           `path:"dhcp-discover-received" module:"openconfig-relay-agent"`
	ΛDhcpDiscoverReceived []ygot.Annotation `path:"@dhcp-discover-received" ygotAnnotation:"true"`
	DhcpInformReceived    *uint64           `path:"dhcp-inform-received" module:"openconfig-relay-agent"`
	ΛDhcpInformReceived   []ygot.Annotation `path:"@dhcp-inform-received" ygotAnnotation:"true"`
	DhcpNackSent          *uint64           `path:"dhcp-nack-sent" module:"openconfig-relay-agent"`
	ΛDhcpNackSent         []ygot.Annotation `path:"@dhcp-nack-sent" ygotAnnotation:"true"`
	DhcpOfferSent         *uint64           `path:"dhcp-offer-sent" module:"openconfig-relay-agent"`
	ΛDhcpOfferSent        []ygot.Annotation `path:"@dhcp-offer-sent" ygotAnnotation:"true"`
	DhcpReleaseReceived   *uint64           `path:"dhcp-release-received" module:"openconfig-relay-agent"`
	ΛDhcpReleaseReceived  []ygot.Annotation `path:"@dhcp-release-received" ygotAnnotation:"true"`
	DhcpRequestReceived   *uint64           `path:"dhcp-request-received" module:"openconfig-relay-agent"`
	ΛDhcpRequestReceived  []ygot.Annotation `path:"@dhcp-request-received" ygotAnnotation:"true"`
	InvalidOpcode         *uint64           `path:"invalid-opcode" module:"openconfig-relay-agent"`
	ΛInvalidOpcode        []ygot.Annotation `path:"@invalid-opcode" ygotAnnotation:"true"`
	InvalidOptions        *uint64           `path:"invalid-options" module:"openconfig-relay-agent"`
	ΛInvalidOptions       []ygot.Annotation `path:"@invalid-options" ygotAnnotation:"true"`
	TotalDropped          *uint64           `path:"total-dropped" module:"openconfig-relay-agent"`
	ΛTotalDropped         []ygot.Annotation `path:"@total-dropped" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_Counters) IsYANGGoStruct() {}

// GetBootreplySent retrieves the value of the leaf BootreplySent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootreplySent is set, it can
// safely use t.GetBootreplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootreplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootreplySent() uint64 {
	if t == nil || t.BootreplySent == nil {
		return 0
	}
	return *t.BootreplySent
}

// GetBootrequestReceived retrieves the value of the leaf BootrequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestReceived is set, it can
// safely use t.GetBootrequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestReceived() uint64 {
	if t == nil || t.BootrequestReceived == nil {
		return 0
	}
	return *t.BootrequestReceived
}

// GetBootrequestSent retrieves the value of the leaf BootrequestSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestSent is set, it can
// safely use t.GetBootrequestSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestSent() uint64 {
	if t == nil || t.BootrequestSent == nil {
		return 0
	}
	return *t.BootrequestSent
}

// GetDhcpAckSent retrieves the value of the leaf DhcpAckSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpAckSent is set, it can
// safely use t.GetDhcpAckSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpAckSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpAckSent() uint64 {
	if t == nil || t.DhcpAckSent == nil {
		return 0
	}
	return *t.DhcpAckSent
}

// GetDhcpDeclineReceived retrieves the value of the leaf DhcpDeclineReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDeclineReceived is set, it can
// safely use t.GetDhcpDeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDeclineReceived() uint64 {
	if t == nil || t.DhcpDeclineReceived == nil {
		return 0
	}
	return *t.DhcpDeclineReceived
}

// GetDhcpDiscoverReceived retrieves the value of the leaf DhcpDiscoverReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDiscoverReceived is set, it can
// safely use t.GetDhcpDiscoverReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDiscoverReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDiscoverReceived() uint64 {
	if t == nil || t.DhcpDiscoverReceived == nil {
		return 0
	}
	return *t.DhcpDiscoverReceived
}

// GetDhcpInformReceived retrieves the value of the leaf DhcpInformReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpInformReceived is set, it can
// safely use t.GetDhcpInformReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpInformReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpInformReceived() uint64 {
	if t == nil || t.DhcpInformReceived == nil {
		return 0
	}
	return *t.DhcpInformReceived
}

// GetDhcpNackSent retrieves the value of the leaf DhcpNackSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpNackSent is set, it can
// safely use t.GetDhcpNackSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpNackSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpNackSent() uint64 {
	if t == nil || t.DhcpNackSent == nil {
		return 0
	}
	return *t.DhcpNackSent
}

// GetDhcpOfferSent retrieves the value of the leaf DhcpOfferSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOfferSent is set, it can
// safely use t.GetDhcpOfferSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOfferSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpOfferSent() uint64 {
	if t == nil || t.DhcpOfferSent == nil {
		return 0
	}
	return *t.DhcpOfferSent
}

// GetDhcpReleaseReceived retrieves the value of the leaf DhcpReleaseReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpReleaseReceived is set, it can
// safely use t.GetDhcpReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpReleaseReceived() uint64 {
	if t == nil || t.DhcpReleaseReceived == nil {
		return 0
	}
	return *t.DhcpReleaseReceived
}

// GetDhcpRequestReceived retrieves the value of the leaf DhcpRequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpRequestReceived is set, it can
// safely use t.GetDhcpRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpRequestReceived() uint64 {
	if t == nil || t.DhcpRequestReceived == nil {
		return 0
	}
	return *t.DhcpRequestReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_Counters.
func (*RelayAgent_Dhcp_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcp_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_InterfaceRef.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6 represents the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6 struct {
	ΛMetadata         []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	EnableRelayAgent  *bool                                   `path:"config/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableRelayAgent []ygot.Annotation                       `path:"config/@enable-relay-agent" ygotAnnotation:"true"`
	Interface         map[string]*RelayAgent_Dhcpv6_Interface `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛInterface        []ygot.Annotation                       `path:"interfaces/@interface" ygotAnnotation:"true"`
	Options           *RelayAgent_Dhcpv6_Options              `path:"options" module:"openconfig-relay-agent"`
	ΛOptions          []ygot.Annotation                       `path:"@options" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcpv6) NewInterface(Id string) (*RelayAgent_Dhcpv6_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcpv6_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcpv6) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcpv6) GetOrCreateInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcpv6) GetInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcpv6) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcpv6_Interface struct to the
// list Interface of RelayAgent_Dhcpv6. If the key value(s) specified in
// the supplied RelayAgent_Dhcpv6_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcpv6) AppendInterface(v *RelayAgent_Dhcpv6_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6) GetOrCreateOptions() *RelayAgent_Dhcpv6_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6) GetOptions() *RelayAgent_Dhcpv6_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableRelayAgent == nil {
		var v bool = false
		t.EnableRelayAgent = &v
	}
	t.Options.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6.
func (*RelayAgent_Dhcpv6) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface struct {
	ΛMetadata      []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Counters       *RelayAgent_Dhcpv6_Interface_Counters     `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛCounters      []ygot.Annotation                         `path:"state/@counters" ygotAnnotation:"true"`
	Enable         *bool                                     `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnable        []ygot.Annotation                         `path:"config/@enable" ygotAnnotation:"true"`
	HelperAddress  []string                                  `path:"config/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛHelperAddress []ygot.Annotation                         `path:"config/@helper-address" ygotAnnotation:"true"`
	Id             *string                                   `path:"config/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	ΛId            []ygot.Annotation                         `path:"config/@id|@id" ygotAnnotation:"true"`
	InterfaceRef   *RelayAgent_Dhcpv6_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-relay-agent"`
	ΛInterfaceRef  []ygot.Annotation                         `path:"@interface-ref" ygotAnnotation:"true"`
	Options        *RelayAgent_Dhcpv6_Interface_Options      `path:"options" module:"openconfig-relay-agent"`
	ΛOptions       []ygot.Annotation                         `path:"@options" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcpv6_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcpv6_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Interface_Options{}
	return t.Options
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Options.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the RelayAgent_Dhcpv6_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcpv6_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface.
func (*RelayAgent_Dhcpv6_Interface) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters struct {
	ΛMetadata                  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Dhcpv6AdverstiseSent       *uint64           `path:"dhcpv6-adverstise-sent" module:"openconfig-relay-agent"`
	ΛDhcpv6AdverstiseSent      []ygot.Annotation `path:"@dhcpv6-adverstise-sent" ygotAnnotation:"true"`
	Dhcpv6ConfirmReceived      *uint64           `path:"dhcpv6-confirm-received" module:"openconfig-relay-agent"`
	ΛDhcpv6ConfirmReceived     []ygot.Annotation `path:"@dhcpv6-confirm-received" ygotAnnotation:"true"`
	Dhcpv6DeclineReceived      *uint64           `path:"dhcpv6-decline-received" module:"openconfig-relay-agent"`
	ΛDhcpv6DeclineReceived     []ygot.Annotation `path:"@dhcpv6-decline-received" ygotAnnotation:"true"`
	Dhcpv6InfoRequestReceived  *uint64           `path:"dhcpv6-info-request-received" module:"openconfig-relay-agent"`
	ΛDhcpv6InfoRequestReceived []ygot.Annotation `path:"@dhcpv6-info-request-received" ygotAnnotation:"true"`
	Dhcpv6RebindReceived       *uint64           `path:"dhcpv6-rebind-received" module:"openconfig-relay-agent"`
	ΛDhcpv6RebindReceived      []ygot.Annotation `path:"@dhcpv6-rebind-received" ygotAnnotation:"true"`
	Dhcpv6ReconfigureSent      *uint64           `path:"dhcpv6-reconfigure-sent" module:"openconfig-relay-agent"`
	ΛDhcpv6ReconfigureSent     []ygot.Annotation `path:"@dhcpv6-reconfigure-sent" ygotAnnotation:"true"`
	Dhcpv6RelayForwSent        *uint64           `path:"dhcpv6-relay-forw-sent" module:"openconfig-relay-agent"`
	ΛDhcpv6RelayForwSent       []ygot.Annotation `path:"@dhcpv6-relay-forw-sent" ygotAnnotation:"true"`
	Dhcpv6RelayReplyReceived   *uint64           `path:"dhcpv6-relay-reply-received" module:"openconfig-relay-agent"`
	ΛDhcpv6RelayReplyReceived  []ygot.Annotation `path:"@dhcpv6-relay-reply-received" ygotAnnotation:"true"`
	Dhcpv6ReleaseReceived      *uint64           `path:"dhcpv6-release-received" module:"openconfig-relay-agent"`
	ΛDhcpv6ReleaseReceived     []ygot.Annotation `path:"@dhcpv6-release-received" ygotAnnotation:"true"`
	Dhcpv6ReplySent            *uint64           `path:"dhcpv6-reply-sent" module:"openconfig-relay-agent"`
	ΛDhcpv6ReplySent           []ygot.Annotation `path:"@dhcpv6-reply-sent" ygotAnnotation:"true"`
	Dhcpv6RequestReceived      *uint64           `path:"dhcpv6-request-received" module:"openconfig-relay-agent"`
	ΛDhcpv6RequestReceived     []ygot.Annotation `path:"@dhcpv6-request-received" ygotAnnotation:"true"`
	Dhcpv6SolicitReceived      *uint64           `path:"dhcpv6-solicit-received" module:"openconfig-relay-agent"`
	ΛDhcpv6SolicitReceived     []ygot.Annotation `path:"@dhcpv6-solicit-received" ygotAnnotation:"true"`
	InvalidOpcode              *uint64           `path:"invalid-opcode" module:"openconfig-relay-agent"`
	ΛInvalidOpcode             []ygot.Annotation `path:"@invalid-opcode" ygotAnnotation:"true"`
	InvalidOptions             *uint64           `path:"invalid-options" module:"openconfig-relay-agent"`
	ΛInvalidOptions            []ygot.Annotation `path:"@invalid-options" ygotAnnotation:"true"`
	TotalDropped               *uint64           `path:"total-dropped" module:"openconfig-relay-agent"`
	ΛTotalDropped              []ygot.Annotation `path:"@total-dropped" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Counters) IsYANGGoStruct() {}

// GetDhcpv6AdverstiseSent retrieves the value of the leaf Dhcpv6AdverstiseSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6AdverstiseSent is set, it can
// safely use t.GetDhcpv6AdverstiseSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6AdverstiseSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6AdverstiseSent() uint64 {
	if t == nil || t.Dhcpv6AdverstiseSent == nil {
		return 0
	}
	return *t.Dhcpv6AdverstiseSent
}

// GetDhcpv6ConfirmReceived retrieves the value of the leaf Dhcpv6ConfirmReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ConfirmReceived is set, it can
// safely use t.GetDhcpv6ConfirmReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ConfirmReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ConfirmReceived() uint64 {
	if t == nil || t.Dhcpv6ConfirmReceived == nil {
		return 0
	}
	return *t.Dhcpv6ConfirmReceived
}

// GetDhcpv6DeclineReceived retrieves the value of the leaf Dhcpv6DeclineReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6DeclineReceived is set, it can
// safely use t.GetDhcpv6DeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6DeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6DeclineReceived() uint64 {
	if t == nil || t.Dhcpv6DeclineReceived == nil {
		return 0
	}
	return *t.Dhcpv6DeclineReceived
}

// GetDhcpv6InfoRequestReceived retrieves the value of the leaf Dhcpv6InfoRequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6InfoRequestReceived is set, it can
// safely use t.GetDhcpv6InfoRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6InfoRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6InfoRequestReceived() uint64 {
	if t == nil || t.Dhcpv6InfoRequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6InfoRequestReceived
}

// GetDhcpv6RebindReceived retrieves the value of the leaf Dhcpv6RebindReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RebindReceived is set, it can
// safely use t.GetDhcpv6RebindReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RebindReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RebindReceived() uint64 {
	if t == nil || t.Dhcpv6RebindReceived == nil {
		return 0
	}
	return *t.Dhcpv6RebindReceived
}

// GetDhcpv6ReconfigureSent retrieves the value of the leaf Dhcpv6ReconfigureSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReconfigureSent is set, it can
// safely use t.GetDhcpv6ReconfigureSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReconfigureSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReconfigureSent() uint64 {
	if t == nil || t.Dhcpv6ReconfigureSent == nil {
		return 0
	}
	return *t.Dhcpv6ReconfigureSent
}

// GetDhcpv6RelayForwSent retrieves the value of the leaf Dhcpv6RelayForwSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayForwSent is set, it can
// safely use t.GetDhcpv6RelayForwSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayForwSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayForwSent() uint64 {
	if t == nil || t.Dhcpv6RelayForwSent == nil {
		return 0
	}
	return *t.Dhcpv6RelayForwSent
}

// GetDhcpv6RelayReplyReceived retrieves the value of the leaf Dhcpv6RelayReplyReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayReplyReceived is set, it can
// safely use t.GetDhcpv6RelayReplyReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayReplyReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayReplyReceived() uint64 {
	if t == nil || t.Dhcpv6RelayReplyReceived == nil {
		return 0
	}
	return *t.Dhcpv6RelayReplyReceived
}

// GetDhcpv6ReleaseReceived retrieves the value of the leaf Dhcpv6ReleaseReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReleaseReceived is set, it can
// safely use t.GetDhcpv6ReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReleaseReceived() uint64 {
	if t == nil || t.Dhcpv6ReleaseReceived == nil {
		return 0
	}
	return *t.Dhcpv6ReleaseReceived
}

// GetDhcpv6ReplySent retrieves the value of the leaf Dhcpv6ReplySent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReplySent is set, it can
// safely use t.GetDhcpv6ReplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReplySent() uint64 {
	if t == nil || t.Dhcpv6ReplySent == nil {
		return 0
	}
	return *t.Dhcpv6ReplySent
}

// GetDhcpv6RequestReceived retrieves the value of the leaf Dhcpv6RequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RequestReceived is set, it can
// safely use t.GetDhcpv6RequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RequestReceived() uint64 {
	if t == nil || t.Dhcpv6RequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6RequestReceived
}

// GetDhcpv6SolicitReceived retrieves the value of the leaf Dhcpv6SolicitReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6SolicitReceived is set, it can
// safely use t.GetDhcpv6SolicitReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6SolicitReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6SolicitReceived() uint64 {
	if t == nil || t.Dhcpv6SolicitReceived == nil {
		return 0
	}
	return *t.Dhcpv6SolicitReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Counters.
func (*RelayAgent_Dhcpv6_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_InterfaceRef.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableInterfaceId  *bool             `path:"config/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableInterfaceId []ygot.Annotation `path:"config/@enable-interface-id" ygotAnnotation:"true"`
	EnableRemoteId     *bool             `path:"config/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableRemoteId    []ygot.Annotation `path:"config/@enable-remote-id" ygotAnnotation:"true"`
	InterfaceId        *string           `path:"config/interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛInterfaceId       []ygot.Annotation `path:"config/@interface-id" ygotAnnotation:"true"`
	RemoteId           *string           `path:"config/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛRemoteId          []ygot.Annotation `path:"config/@remote-id" ygotAnnotation:"true"`
	SentInterfaceId    *string           `path:"state/sent-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSentInterfaceId   []ygot.Annotation `path:"state/@sent-interface-id" ygotAnnotation:"true"`
	SentRemoteId       *string           `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛSentRemoteId      []ygot.Annotation `path:"state/@sent-remote-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentInterfaceId retrieves the value of the leaf SentInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentInterfaceId is set, it can
// safely use t.GetSentInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentInterfaceId() string {
	if t == nil || t.SentInterfaceId == nil {
		return ""
	}
	return *t.SentInterfaceId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Interface_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Interface_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableInterfaceId == nil {
		var v bool = false
		t.EnableInterfaceId = &v
	}
	if t.EnableRemoteId == nil {
		var v bool = false
		t.EnableRemoteId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Options.
func (*RelayAgent_Dhcpv6_Interface_Options) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_Options struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableInterfaceId  *bool             `path:"config/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableInterfaceId []ygot.Annotation `path:"config/@enable-interface-id" ygotAnnotation:"true"`
	EnableRemoteId     *bool             `path:"config/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	ΛEnableRemoteId    []ygot.Annotation `path:"config/@enable-remote-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the RelayAgent_Dhcpv6_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RelayAgent_Dhcpv6_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableInterfaceId == nil {
		var v bool = false
		t.EnableInterfaceId = &v
	}
	if t.EnableRemoteId == nil {
		var v bool = false
		t.EnableRemoteId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Options) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Options.
func (*RelayAgent_Dhcpv6_Options) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RoutingPolicy represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicy struct {
	ΛMetadata         []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	DefinedSets       *RoutingPolicy_DefinedSets                 `path:"defined-sets" module:"openconfig-routing-policy"`
	ΛDefinedSets      []ygot.Annotation                          `path:"@defined-sets" ygotAnnotation:"true"`
	PolicyDefinition  map[string]*RoutingPolicy_PolicyDefinition `path:"policy-definitions/policy-definition" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛPolicyDefinition []ygot.Annotation                          `path:"policy-definitions/@policy-definition" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy) IsYANGGoStruct() {}

// NewPolicyDefinition creates a new entry in the PolicyDefinition list of the
// RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy) NewPolicyDefinition(Name string) (*RoutingPolicy_PolicyDefinition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyDefinition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyDefinition", key)
	}

	t.PolicyDefinition[key] = &RoutingPolicy_PolicyDefinition{
		Name: &Name,
	}

	return t.PolicyDefinition[key], nil
}

// RenamePolicyDefinition renames an entry in the list PolicyDefinition within
// the RoutingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy) RenamePolicyDefinition(oldK, newK string) error {
	if _, ok := t.PolicyDefinition[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyDefinition", newK)
	}

	e, ok := t.PolicyDefinition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyDefinition", oldK)
	}
	e.Name = &newK

	t.PolicyDefinition[newK] = e
	delete(t.PolicyDefinition, oldK)
	return nil
}

// GetOrCreatePolicyDefinition retrieves the value with the specified keys from
// the receiver RoutingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy) GetOrCreatePolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	key := Name

	if v, ok := t.PolicyDefinition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyDefinition(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyDefinition got unexpected error: %v", err))
	}
	return v
}

// GetPolicyDefinition retrieves the value with the specified key from
// the PolicyDefinition map field of RoutingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy) GetPolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyDefinition[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyDefinition deletes the value with the specified keys from
// the receiver RoutingPolicy. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy) DeletePolicyDefinition(Name string) {
	key := Name

	delete(t.PolicyDefinition, key)
}

// AppendPolicyDefinition appends the supplied RoutingPolicy_PolicyDefinition struct to the
// list PolicyDefinition of RoutingPolicy. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition already exist in the list, an error is
// returned.
func (t *RoutingPolicy) AppendPolicyDefinition(v *RoutingPolicy_PolicyDefinition) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	if _, ok := t.PolicyDefinition[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyDefinition %v", key)
	}

	t.PolicyDefinition[key] = v
	return nil
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy) GetOrCreateDefinedSets() *RoutingPolicy_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &RoutingPolicy_DefinedSets{}
	return t.DefinedSets
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from RoutingPolicy. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy) GetDefinedSets() *RoutingPolicy_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DefinedSets.PopulateDefaults()
	for _, e := range t.PolicyDefinition {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy.
func (*RoutingPolicy) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSets struct {
	ΛMetadata       []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	BgpDefinedSets  *RoutingPolicy_DefinedSets_BgpDefinedSets         `path:"bgp-defined-sets" module:"openconfig-bgp-policy"`
	ΛBgpDefinedSets []ygot.Annotation                                 `path:"@bgp-defined-sets" ygotAnnotation:"true"`
	NeighborSet     map[string]*RoutingPolicy_DefinedSets_NeighborSet `path:"neighbor-sets/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛNeighborSet    []ygot.Annotation                                 `path:"neighbor-sets/@neighbor-set" ygotAnnotation:"true"`
	PrefixSet       map[string]*RoutingPolicy_DefinedSets_PrefixSet   `path:"prefix-sets/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛPrefixSet      []ygot.Annotation                                 `path:"prefix-sets/@prefix-set" ygotAnnotation:"true"`
	TagSet          map[string]*RoutingPolicy_DefinedSets_TagSet      `path:"tag-sets/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛTagSet         []ygot.Annotation                                 `path:"tag-sets/@tag-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets) IsYANGGoStruct() {}

// NewNeighborSet creates a new entry in the NeighborSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewNeighborSet(Name string) (*RoutingPolicy_DefinedSets_NeighborSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NeighborSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NeighborSet", key)
	}

	t.NeighborSet[key] = &RoutingPolicy_DefinedSets_NeighborSet{
		Name: &Name,
	}

	return t.NeighborSet[key], nil
}

// RenameNeighborSet renames an entry in the list NeighborSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameNeighborSet(oldK, newK string) error {
	if _, ok := t.NeighborSet[newK]; ok {
		return fmt.Errorf("key %v already exists in NeighborSet", newK)
	}

	e, ok := t.NeighborSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NeighborSet", oldK)
	}
	e.Name = &newK

	t.NeighborSet[newK] = e
	delete(t.NeighborSet, oldK)
	return nil
}

// GetOrCreateNeighborSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	key := Name

	if v, ok := t.NeighborSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighborSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighborSet got unexpected error: %v", err))
	}
	return v
}

// GetNeighborSet retrieves the value with the specified key from
// the NeighborSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NeighborSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighborSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteNeighborSet(Name string) {
	key := Name

	delete(t.NeighborSet, key)
}

// AppendNeighborSet appends the supplied RoutingPolicy_DefinedSets_NeighborSet struct to the
// list NeighborSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_NeighborSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendNeighborSet(v *RoutingPolicy_DefinedSets_NeighborSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	if _, ok := t.NeighborSet[key]; ok {
		return fmt.Errorf("duplicate key for list NeighborSet %v", key)
	}

	t.NeighborSet[key] = v
	return nil
}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewPrefixSet(Name string) (*RoutingPolicy_DefinedSets_PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &RoutingPolicy_DefinedSets_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// RenamePrefixSet renames an entry in the list PrefixSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenamePrefixSet(oldK, newK string) error {
	if _, ok := t.PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSet", newK)
	}

	e, ok := t.PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSet", oldK)
	}
	e.Name = &newK

	t.PrefixSet[newK] = e
	delete(t.PrefixSet, oldK)
	return nil
}

// GetOrCreatePrefixSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	key := Name

	if v, ok := t.PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSet retrieves the value with the specified key from
// the PrefixSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetPrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeletePrefixSet(Name string) {
	key := Name

	delete(t.PrefixSet, key)
}

// AppendPrefixSet appends the supplied RoutingPolicy_DefinedSets_PrefixSet struct to the
// list PrefixSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendPrefixSet(v *RoutingPolicy_DefinedSets_PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	if _, ok := t.PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSet %v", key)
	}

	t.PrefixSet[key] = v
	return nil
}

// NewTagSet creates a new entry in the TagSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewTagSet(Name string) (*RoutingPolicy_DefinedSets_TagSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TagSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TagSet", key)
	}

	t.TagSet[key] = &RoutingPolicy_DefinedSets_TagSet{
		Name: &Name,
	}

	return t.TagSet[key], nil
}

// RenameTagSet renames an entry in the list TagSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameTagSet(oldK, newK string) error {
	if _, ok := t.TagSet[newK]; ok {
		return fmt.Errorf("key %v already exists in TagSet", newK)
	}

	e, ok := t.TagSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TagSet", oldK)
	}
	e.Name = &newK

	t.TagSet[newK] = e
	delete(t.TagSet, oldK)
	return nil
}

// GetOrCreateTagSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	key := Name

	if v, ok := t.TagSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTagSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTagSet got unexpected error: %v", err))
	}
	return v
}

// GetTagSet retrieves the value with the specified key from
// the TagSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TagSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteTagSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteTagSet(Name string) {
	key := Name

	delete(t.TagSet, key)
}

// AppendTagSet appends the supplied RoutingPolicy_DefinedSets_TagSet struct to the
// list TagSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_TagSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendTagSet(v *RoutingPolicy_DefinedSets_TagSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	if _, ok := t.TagSet[key]; ok {
		return fmt.Errorf("duplicate key for list TagSet %v", key)
	}

	t.TagSet[key] = v
	return nil
}

// GetOrCreateBgpDefinedSets retrieves the value of the BgpDefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_DefinedSets) GetOrCreateBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	t.BgpDefinedSets = &RoutingPolicy_DefinedSets_BgpDefinedSets{}
	return t.BgpDefinedSets
}

// GetBgpDefinedSets returns the value of the BgpDefinedSets struct pointer
// from RoutingPolicy_DefinedSets. If the receiver or the field BgpDefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_DefinedSets) GetBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t != nil && t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpDefinedSets.PopulateDefaults()
	for _, e := range t.NeighborSet {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.TagSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets.
func (*RoutingPolicy_DefinedSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	ΛMetadata        []ygot.Annotation                                                    `path:"@" ygotAnnotation:"true"`
	AsPathSet        map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet       `path:"as-path-sets/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛAsPathSet       []ygot.Annotation                                                    `path:"as-path-sets/@as-path-set" ygotAnnotation:"true"`
	CommunitySet     map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet    `path:"community-sets/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunitySet    []ygot.Annotation                                                    `path:"community-sets/@community-set" ygotAnnotation:"true"`
	ExtCommunitySet  map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet `path:"ext-community-sets/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛExtCommunitySet []ygot.Annotation                                                    `path:"ext-community-sets/@ext-community-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewAsPathSet(AsPathSetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	key := AsPathSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet{
		AsPathSetName: &AsPathSetName,
	}

	return t.AsPathSet[key], nil
}

// RenameAsPathSet renames an entry in the list AsPathSet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameAsPathSet(oldK, newK string) error {
	if _, ok := t.AsPathSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathSet", newK)
	}

	e, ok := t.AsPathSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathSet", oldK)
	}
	e.AsPathSetName = &newK

	t.AsPathSet[newK] = e
	delete(t.AsPathSet, oldK)
	return nil
}

// GetOrCreateAsPathSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	key := AsPathSetName

	if v, ok := t.AsPathSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathSet(AsPathSetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathSet got unexpected error: %v", err))
	}
	return v
}

// GetAsPathSet retrieves the value with the specified key from
// the AsPathSet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	if t == nil {
		return nil
	}

	key := AsPathSetName

	if lm, ok := t.AsPathSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteAsPathSet(AsPathSetName string) {
	key := AsPathSetName

	delete(t.AsPathSet, key)
}

// AppendAsPathSet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct to the
// list AsPathSet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendAsPathSet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) error {
	if v.AsPathSetName == nil {
		return fmt.Errorf("invalid nil key received for AsPathSetName")
	}

	key := *v.AsPathSetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	if _, ok := t.AsPathSet[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathSet %v", key)
	}

	t.AsPathSet[key] = v
	return nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewCommunitySet(CommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	key := CommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet{
		CommunitySetName: &CommunitySetName,
	}

	return t.CommunitySet[key], nil
}

// RenameCommunitySet renames an entry in the list CommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameCommunitySet(oldK, newK string) error {
	if _, ok := t.CommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in CommunitySet", newK)
	}

	e, ok := t.CommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommunitySet", oldK)
	}
	e.CommunitySetName = &newK

	t.CommunitySet[newK] = e
	delete(t.CommunitySet, oldK)
	return nil
}

// GetOrCreateCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	key := CommunitySetName

	if v, ok := t.CommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunitySet(CommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetCommunitySet retrieves the value with the specified key from
// the CommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	if t == nil {
		return nil
	}

	key := CommunitySetName

	if lm, ok := t.CommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteCommunitySet(CommunitySetName string) {
	key := CommunitySetName

	delete(t.CommunitySet, key)
}

// AppendCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct to the
// list CommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) error {
	if v.CommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for CommunitySetName")
	}

	key := *v.CommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	if _, ok := t.CommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list CommunitySet %v", key)
	}

	t.CommunitySet[key] = v
	return nil
}

// NewExtCommunitySet creates a new entry in the ExtCommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewExtCommunitySet(ExtCommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	key := ExtCommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunitySet", key)
	}

	t.ExtCommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet{
		ExtCommunitySetName: &ExtCommunitySetName,
	}

	return t.ExtCommunitySet[key], nil
}

// RenameExtCommunitySet renames an entry in the list ExtCommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameExtCommunitySet(oldK, newK string) error {
	if _, ok := t.ExtCommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunitySet", newK)
	}

	e, ok := t.ExtCommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunitySet", oldK)
	}
	e.ExtCommunitySetName = &newK

	t.ExtCommunitySet[newK] = e
	delete(t.ExtCommunitySet, oldK)
	return nil
}

// GetOrCreateExtCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	key := ExtCommunitySetName

	if v, ok := t.ExtCommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunitySet(ExtCommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunitySet retrieves the value with the specified key from
// the ExtCommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	if t == nil {
		return nil
	}

	key := ExtCommunitySetName

	if lm, ok := t.ExtCommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteExtCommunitySet(ExtCommunitySetName string) {
	key := ExtCommunitySetName

	delete(t.ExtCommunitySet, key)
}

// AppendExtCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct to the
// list ExtCommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendExtCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) error {
	if v.ExtCommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for ExtCommunitySetName")
	}

	key := *v.ExtCommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	if _, ok := t.ExtCommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunitySet %v", key)
	}

	t.ExtCommunitySet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AsPathSet {
		e.PopulateDefaults()
	}
	for _, e := range t.CommunitySet {
		e.PopulateDefaults()
	}
	for _, e := range t.ExtCommunitySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AsPathSetMember  []string          `path:"config/as-path-set-member" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛAsPathSetMember []ygot.Annotation `path:"config/@as-path-set-member" ygotAnnotation:"true"`
	AsPathSetName    *string           `path:"config/as-path-set-name|as-path-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	ΛAsPathSetName   []ygot.Annotation `path:"config/@as-path-set-name|@as-path-set-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) IsYANGGoStruct() {}

// GetAsPathSetMember retrieves the value of the leaf AsPathSetMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetMember is set, it can
// safely use t.GetAsPathSetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetMember() []string {
	if t == nil || t.AsPathSetMember == nil {
		return nil
	}
	return t.AsPathSetMember
}

// GetAsPathSetName retrieves the value of the leaf AsPathSetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetName is set, it can
// safely use t.GetAsPathSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetName() string {
	if t == nil || t.AsPathSetName == nil {
		return ""
	}
	return *t.AsPathSetName
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsPathSetName == nil {
		return nil, fmt.Errorf("nil value for key AsPathSetName")
	}

	return map[string]interface{}{
		"as-path-set-name": *t.AsPathSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct {
	ΛMetadata         []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	CommunityMember   []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union `path:"config/community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛCommunityMember  []ygot.Annotation                                                             `path:"config/@community-member" ygotAnnotation:"true"`
	CommunitySetName  *string                                                                       `path:"config/community-set-name|community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	ΛCommunitySetName []ygot.Annotation                                                             `path:"config/@community-set-name|@community-set-name" ygotAnnotation:"true"`
	MatchSetOptions   E_PolicyTypes_MatchSetOptionsType                                             `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMatchSetOptions  []ygot.Annotation                                                             `path:"config/@match-set-options" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) IsYANGGoStruct() {}

// GetCommunityMember retrieves the value of the leaf CommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityMember is set, it can
// safely use t.GetCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunityMember() []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union {
	if t == nil || t.CommunityMember == nil {
		return nil
	}
	return t.CommunityMember
}

// GetCommunitySetName retrieves the value of the leaf CommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetName is set, it can
// safely use t.GetCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunitySetName() string {
	if t == nil || t.CommunitySetName == nil {
		return ""
	}
	return *t.CommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key CommunitySetName")
	}

	return map[string]interface{}{
		"community-set-name": *t.CommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct {
	ΛMetadata            []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	ExtCommunityMember   []string                          `path:"config/ext-community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛExtCommunityMember  []ygot.Annotation                 `path:"config/@ext-community-member" ygotAnnotation:"true"`
	ExtCommunitySetName  *string                           `path:"config/ext-community-set-name|ext-community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	ΛExtCommunitySetName []ygot.Annotation                 `path:"config/@ext-community-set-name|@ext-community-set-name" ygotAnnotation:"true"`
	MatchSetOptions      E_PolicyTypes_MatchSetOptionsType `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ΛMatchSetOptions     []ygot.Annotation                 `path:"config/@match-set-options" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) IsYANGGoStruct() {}

// GetExtCommunityMember retrieves the value of the leaf ExtCommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityMember is set, it can
// safely use t.GetExtCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunityMember() []string {
	if t == nil || t.ExtCommunityMember == nil {
		return nil
	}
	return t.ExtCommunityMember
}

// GetExtCommunitySetName retrieves the value of the leaf ExtCommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetName is set, it can
// safely use t.GetExtCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunitySetName() string {
	if t == nil || t.ExtCommunitySetName == nil {
		return ""
	}
	return *t.ExtCommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchSetOptions == 0 {
		t.MatchSetOptions = PolicyTypes_MatchSetOptionsType_ANY
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtCommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key ExtCommunitySetName")
	}

	return map[string]interface{}{
		"ext-community-set-name": *t.ExtCommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   []string          `path:"config/address" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛAddress  []ygot.Annotation `path:"config/@address" ygotAnnotation:"true"`
	Name      *string           `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛName     []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_NeighborSet) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_NeighborSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_NeighborSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_NeighborSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_NeighborSet.
func (*RoutingPolicy_DefinedSets_NeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet struct {
	ΛMetadata []ygot.Annotation                                                                              `path:"@" ygotAnnotation:"true"`
	Mode      E_PrefixSet_Mode                                                                               `path:"config/mode" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛMode     []ygot.Annotation                                                                              `path:"config/@mode" ygotAnnotation:"true"`
	Name      *string                                                                                        `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛName     []ygot.Annotation                                                                              `path:"config/@name|@name" ygotAnnotation:"true"`
	Prefix    map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix `path:"prefixes/prefix" module:"openconfig-routing-policy/openconfig-routing-policy"`
	ΛPrefix   []ygot.Annotation                                                                              `path:"prefixes/@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet) IsYANGGoStruct() {}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// IsYANGGoKeyStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key key struct.
func (t RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-prefix":        t.IpPrefix,
		"masklength-range": t.MasklengthRange,
	}, nil
}

// NewPrefix creates a new entry in the Prefix list of the
// RoutingPolicy_DefinedSets_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_PrefixSet) NewPrefix(IpPrefix string, MasklengthRange string) (*RoutingPolicy_DefinedSets_PrefixSet_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &RoutingPolicy_DefinedSets_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the RoutingPolicy_DefinedSets_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) RenamePrefix(oldK, newK RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of RoutingPolicy_DefinedSets_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetPrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	if t == nil {
		return nil
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_PrefixSet) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix struct to the
// list Prefix of RoutingPolicy_DefinedSets_PrefixSet. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_PrefixSet) AppendPrefix(v *RoutingPolicy_DefinedSets_PrefixSet_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetMode() E_PrefixSet_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet.
func (*RoutingPolicy_DefinedSets_PrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	IpPrefix         *string           `path:"config/ip-prefix|ip-prefix" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛIpPrefix        []ygot.Annotation `path:"config/@ip-prefix|@ip-prefix" ygotAnnotation:"true"`
	MasklengthRange  *string           `path:"config/masklength-range|masklength-range" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	ΛMasklengthRange []ygot.Annotation `path:"config/@masklength-range|@masklength-range" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMasklengthRange retrieves the value of the leaf MasklengthRange from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasklengthRange is set, it can
// safely use t.GetMasklengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasklengthRange == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetMasklengthRange() string {
	if t == nil || t.MasklengthRange == nil {
		return ""
	}
	return *t.MasklengthRange
}

// PopulateDefaults recursively populates unset leaf fields in the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet_Prefix.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}
