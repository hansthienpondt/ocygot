/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers struct {
	ΛMetadata                    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DeadTimer                    *uint8            `path:"config/dead-timer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDeadTimer                   []ygot.Annotation `path:"config/@dead-timer" ygotAnnotation:"true"`
	Keepalive                    *uint8            `path:"config/keepalive" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛKeepalive                   []ygot.Annotation `path:"config/@keepalive" ygotAnnotation:"true"`
	RedelegationTimeoutInterval  *uint16           `path:"config/redelegation-timeout-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRedelegationTimeoutInterval []ygot.Annotation `path:"config/@redelegation-timeout-interval" ygotAnnotation:"true"`
	StateTimeoutInterval         *uint16           `path:"config/state-timeout-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛStateTimeoutInterval        []ygot.Annotation `path:"config/@state-timeout-interval" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pcep_PathComputationServer_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) IsYANGGoStruct() {}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetDeadTimer() uint8 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetKeepalive() uint8 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetRedelegationTimeoutInterval retrieves the value of the leaf RedelegationTimeoutInterval from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedelegationTimeoutInterval is set, it can
// safely use t.GetRedelegationTimeoutInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedelegationTimeoutInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetRedelegationTimeoutInterval() uint16 {
	if t == nil || t.RedelegationTimeoutInterval == nil {
		return 0
	}
	return *t.RedelegationTimeoutInterval
}

// GetStateTimeoutInterval retrieves the value of the leaf StateTimeoutInterval from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StateTimeoutInterval is set, it can
// safely use t.GetStateTimeoutInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StateTimeoutInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetStateTimeoutInterval() uint16 {
	if t == nil || t.StateTimeoutInterval == nil {
		return 0
	}
	return *t.StateTimeoutInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DeadTimer == nil {
		var v uint8 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint8 = 30
		t.Keepalive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pcep_PathComputationServer_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pcep_PathComputationServer_Timers.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim YANG schema element.
type NetworkInstance_Protocol_Pim struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Global     *NetworkInstance_Protocol_Pim_Global               `path:"global" module:"openconfig-network-instance"`
	ΛGlobal    []ygot.Annotation                                  `path:"@global" ygotAnnotation:"true"`
	Interface  map[string]*NetworkInstance_Protocol_Pim_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface []ygot.Annotation                                  `path:"interfaces/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Protocol_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim) NewInterface(InterfaceId string) (*NetworkInstance_Protocol_Pim_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Pim_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Protocol_Pim_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Protocol_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Protocol_Pim_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Protocol_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim) GetInterface(InterfaceId string) *NetworkInstance_Protocol_Pim_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Protocol_Pim_Interface struct to the
// list Interface of NetworkInstance_Protocol_Pim. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim) AppendInterface(v *NetworkInstance_Protocol_Pim_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim) GetOrCreateGlobal() *NetworkInstance_Protocol_Pim_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Protocol_Pim_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Protocol_Pim. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim) GetGlobal() *NetworkInstance_Protocol_Pim_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Global.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim.
func (*NetworkInstance_Protocol_Pim) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_Global struct {
	ΛMetadata        []ygot.Annotation                                               `path:"@" ygotAnnotation:"true"`
	Counters         *NetworkInstance_Protocol_Pim_Global_Counters                   `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters        []ygot.Annotation                                               `path:"state/@counters" ygotAnnotation:"true"`
	MaximumGroups    *uint32                                                         `path:"config/maximum-groups" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaximumGroups   []ygot.Annotation                                               `path:"config/@maximum-groups" ygotAnnotation:"true"`
	NeighborCount    *uint8                                                          `path:"state/neighbor-count" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighborCount   []ygot.Annotation                                               `path:"state/@neighbor-count" ygotAnnotation:"true"`
	RendezvousPoint  map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint `path:"rendezvous-points/rendezvous-point" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRendezvousPoint []ygot.Annotation                                               `path:"rendezvous-points/@rendezvous-point" ygotAnnotation:"true"`
	Source           map[string]*NetworkInstance_Protocol_Pim_Global_Source          `path:"sources-joined/source" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSource          []ygot.Annotation                                               `path:"sources-joined/@source" ygotAnnotation:"true"`
	Ssm              *NetworkInstance_Protocol_Pim_Global_Ssm                        `path:"ssm" module:"openconfig-network-instance"`
	ΛSsm             []ygot.Annotation                                               `path:"@ssm" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global) IsYANGGoStruct() {}

// NewRendezvousPoint creates a new entry in the RendezvousPoint list of the
// NetworkInstance_Protocol_Pim_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Global) NewRendezvousPoint(Address string) (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RendezvousPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RendezvousPoint", key)
	}

	t.RendezvousPoint[key] = &NetworkInstance_Protocol_Pim_Global_RendezvousPoint{
		Address: &Address,
	}

	return t.RendezvousPoint[key], nil
}

// RenameRendezvousPoint renames an entry in the list RendezvousPoint within
// the NetworkInstance_Protocol_Pim_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Global) RenameRendezvousPoint(oldK, newK string) error {
	if _, ok := t.RendezvousPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RendezvousPoint", newK)
	}

	e, ok := t.RendezvousPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RendezvousPoint", oldK)
	}
	e.Address = &newK

	t.RendezvousPoint[newK] = e
	delete(t.RendezvousPoint, oldK)
	return nil
}

// GetOrCreateRendezvousPoint retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateRendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPoint {

	key := Address

	if v, ok := t.RendezvousPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRendezvousPoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRendezvousPoint got unexpected error: %v", err))
	}
	return v
}

// GetRendezvousPoint retrieves the value with the specified key from
// the RendezvousPoint map field of NetworkInstance_Protocol_Pim_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetRendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPoint {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.RendezvousPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRendezvousPoint deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Global) DeleteRendezvousPoint(Address string) {
	key := Address

	delete(t.RendezvousPoint, key)
}

// AppendRendezvousPoint appends the supplied NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct to the
// list RendezvousPoint of NetworkInstance_Protocol_Pim_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Global_RendezvousPoint already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Global) AppendRendezvousPoint(v *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint)
	}

	if _, ok := t.RendezvousPoint[key]; ok {
		return fmt.Errorf("duplicate key for list RendezvousPoint %v", key)
	}

	t.RendezvousPoint[key] = v
	return nil
}

// NewSource creates a new entry in the Source list of the
// NetworkInstance_Protocol_Pim_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Global) NewSource(Address string) (*NetworkInstance_Protocol_Pim_Global_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NetworkInstance_Protocol_Pim_Global_Source)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NetworkInstance_Protocol_Pim_Global_Source{
		Address: &Address,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NetworkInstance_Protocol_Pim_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Global) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Address = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateSource(Address string) *NetworkInstance_Protocol_Pim_Global_Source {

	key := Address

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NetworkInstance_Protocol_Pim_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetSource(Address string) *NetworkInstance_Protocol_Pim_Global_Source {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Global) DeleteSource(Address string) {
	key := Address

	delete(t.Source, key)
}

// AppendSource appends the supplied NetworkInstance_Protocol_Pim_Global_Source struct to the
// list Source of NetworkInstance_Protocol_Pim_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Global_Source already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Global) AppendSource(v *NetworkInstance_Protocol_Pim_Global_Source) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NetworkInstance_Protocol_Pim_Global_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateCounters() *NetworkInstance_Protocol_Pim_Global_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Pim_Global_Counters{}
	return t.Counters
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateSsm() *NetworkInstance_Protocol_Pim_Global_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NetworkInstance_Protocol_Pim_Global_Ssm{}
	return t.Ssm
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Pim_Global. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetCounters() *NetworkInstance_Protocol_Pim_Global_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from NetworkInstance_Protocol_Pim_Global. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetSsm() *NetworkInstance_Protocol_Pim_Global_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetMaximumGroups retrieves the value of the leaf MaximumGroups from the NetworkInstance_Protocol_Pim_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumGroups is set, it can
// safely use t.GetMaximumGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global) GetMaximumGroups() uint32 {
	if t == nil || t.MaximumGroups == nil {
		return 0
	}
	return *t.MaximumGroups
}

// GetNeighborCount retrieves the value of the leaf NeighborCount from the NetworkInstance_Protocol_Pim_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborCount is set, it can
// safely use t.GetNeighborCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborCount == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global) GetNeighborCount() uint8 {
	if t == nil || t.NeighborCount == nil {
		return 0
	}
	return *t.NeighborCount
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Global
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Global) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	t.Ssm.PopulateDefaults()
	for _, e := range t.RendezvousPoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global.
func (*NetworkInstance_Protocol_Pim_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootstrapMessages  *uint32           `path:"bootstrap-messages" module:"openconfig-network-instance"`
	ΛBootstrapMessages []ygot.Annotation `path:"@bootstrap-messages" ygotAnnotation:"true"`
	HelloMessages      *uint32           `path:"hello-messages" module:"openconfig-network-instance"`
	ΛHelloMessages     []ygot.Annotation `path:"@hello-messages" ygotAnnotation:"true"`
	JoinPruneMessages  *uint32           `path:"join-prune-messages" module:"openconfig-network-instance"`
	ΛJoinPruneMessages []ygot.Annotation `path:"@join-prune-messages" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Counters) IsYANGGoStruct() {}

// GetBootstrapMessages retrieves the value of the leaf BootstrapMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootstrapMessages is set, it can
// safely use t.GetBootstrapMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootstrapMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetBootstrapMessages() uint32 {
	if t == nil || t.BootstrapMessages == nil {
		return 0
	}
	return *t.BootstrapMessages
}

// GetHelloMessages retrieves the value of the leaf HelloMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMessages is set, it can
// safely use t.GetHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetHelloMessages() uint32 {
	if t == nil || t.HelloMessages == nil {
		return 0
	}
	return *t.HelloMessages
}

// GetJoinPruneMessages retrieves the value of the leaf JoinPruneMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneMessages is set, it can
// safely use t.GetJoinPruneMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetJoinPruneMessages() uint32 {
	if t == nil || t.JoinPruneMessages == nil {
		return 0
	}
	return *t.JoinPruneMessages
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Global_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Counters.
func (*NetworkInstance_Protocol_Pim_Global_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address          *string           `path:"config/address|address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAddress         []ygot.Annotation `path:"config/@address|@address" ygotAnnotation:"true"`
	MulticastGroups  *string           `path:"config/multicast-groups" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMulticastGroups []ygot.Annotation `path:"config/@multicast-groups" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_RendezvousPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Pim_Global_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMulticastGroups retrieves the value of the leaf MulticastGroups from the NetworkInstance_Protocol_Pim_Global_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastGroups is set, it can
// safely use t.GetMulticastGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) GetMulticastGroups() string {
	if t == nil || t.MulticastGroups == nil {
		return ""
	}
	return *t.MulticastGroups
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Global_RendezvousPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_RendezvousPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_RendezvousPoint.
func (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Source represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address              *string           `path:"state/address|address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAddress             []ygot.Annotation `path:"state/@address|@address" ygotAnnotation:"true"`
	Group                *string           `path:"state/group" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛGroup               []ygot.Annotation `path:"state/@group" ygotAnnotation:"true"`
	UpstreamInterfaceId  *string           `path:"state/upstream-interface-id" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUpstreamInterfaceId []ygot.Annotation `path:"state/@upstream-interface-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Source) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetGroup retrieves the value of the leaf Group from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetUpstreamInterfaceId retrieves the value of the leaf UpstreamInterfaceId from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpstreamInterfaceId is set, it can
// safely use t.GetUpstreamInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpstreamInterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetUpstreamInterfaceId() string {
	if t == nil || t.UpstreamInterfaceId == nil {
		return ""
	}
	return *t.UpstreamInterfaceId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Global_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Global_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Global_Source struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Source.
func (*NetworkInstance_Protocol_Pim_Global_Source) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Ssm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SsmRanges  *string           `path:"config/ssm-ranges" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSsmRanges []ygot.Annotation `path:"config/@ssm-ranges" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Ssm) IsYANGGoStruct() {}

// GetSsmRanges retrieves the value of the leaf SsmRanges from the NetworkInstance_Protocol_Pim_Global_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmRanges is set, it can
// safely use t.GetSsmRanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmRanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) GetSsmRanges() string {
	if t == nil || t.SsmRanges == nil {
		return ""
	}
	return *t.SsmRanges
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Global_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Ssm.
func (*NetworkInstance_Protocol_Pim_Global_Ssm) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface struct {
	ΛMetadata          []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	BorderRouter       *bool                                                       `path:"config/border-router" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBorderRouter      []ygot.Annotation                                           `path:"config/@border-router" ygotAnnotation:"true"`
	BsrBorder          *bool                                                       `path:"config/bsr-border" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBsrBorder         []ygot.Annotation                                           `path:"config/@bsr-border" ygotAnnotation:"true"`
	Counters           *NetworkInstance_Protocol_Pim_Interface_Counters            `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                           `path:"state/@counters" ygotAnnotation:"true"`
	DeadTimer          *uint16                                                     `path:"config/dead-timer" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDeadTimer         []ygot.Annotation                                           `path:"config/@dead-timer" ygotAnnotation:"true"`
	DrPriority         *uint32                                                     `path:"config/dr-priority" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDrPriority        []ygot.Annotation                                           `path:"config/@dr-priority" ygotAnnotation:"true"`
	EnableBfd          *NetworkInstance_Protocol_Pim_Interface_EnableBfd           `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd         []ygot.Annotation                                           `path:"@enable-bfd" ygotAnnotation:"true"`
	Enabled            *bool                                                       `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled           []ygot.Annotation                                           `path:"config/@enabled" ygotAnnotation:"true"`
	HelloInterval      *uint8                                                      `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛHelloInterval     []ygot.Annotation                                           `path:"config/@hello-interval" ygotAnnotation:"true"`
	InterfaceId        *string                                                     `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛInterfaceId       []ygot.Annotation                                           `path:"config/@interface-id|@interface-id" ygotAnnotation:"true"`
	InterfaceRef       *NetworkInstance_Protocol_Pim_Interface_InterfaceRef        `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef      []ygot.Annotation                                           `path:"@interface-ref" ygotAnnotation:"true"`
	JoinPruneInterval  *uint8                                                      `path:"config/join-prune-interval" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛJoinPruneInterval []ygot.Annotation                                           `path:"config/@join-prune-interval" ygotAnnotation:"true"`
	MaximumGroups      *uint32                                                     `path:"config/maximum-groups" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaximumGroups     []ygot.Annotation                                           `path:"config/@maximum-groups" ygotAnnotation:"true"`
	Mode               E_PimTypes_PIM_MODE                                         `path:"config/mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMode              []ygot.Annotation                                           `path:"config/@mode" ygotAnnotation:"true"`
	Neighbor           map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighbor          []ygot.Annotation                                           `path:"neighbors/@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Pim_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Interface) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Pim_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Pim_Interface_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Pim_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Pim_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Interface) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Pim_Interface_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Pim_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Interface) AppendNeighbor(v *NetworkInstance_Protocol_Pim_Interface_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateCounters() *NetworkInstance_Protocol_Pim_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Pim_Interface_Counters{}
	return t.Counters
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateEnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &NetworkInstance_Protocol_Pim_Interface_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Pim_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetCounters() *NetworkInstance_Protocol_Pim_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetEnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetInterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetBorderRouter retrieves the value of the leaf BorderRouter from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BorderRouter is set, it can
// safely use t.GetBorderRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BorderRouter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetBorderRouter() bool {
	if t == nil || t.BorderRouter == nil {
		return false
	}
	return *t.BorderRouter
}

// GetBsrBorder retrieves the value of the leaf BsrBorder from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BsrBorder is set, it can
// safely use t.GetBsrBorder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BsrBorder == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetBsrBorder() bool {
	if t == nil || t.BsrBorder == nil {
		return false
	}
	return *t.BsrBorder
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetDeadTimer() uint16 {
	if t == nil || t.DeadTimer == nil {
		return 0
	}
	return *t.DeadTimer
}

// GetDrPriority retrieves the value of the leaf DrPriority from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrPriority is set, it can
// safely use t.GetDrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrPriority == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetDrPriority() uint32 {
	if t == nil || t.DrPriority == nil {
		return 0
	}
	return *t.DrPriority
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetHelloInterval() uint8 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetJoinPruneInterval retrieves the value of the leaf JoinPruneInterval from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneInterval is set, it can
// safely use t.GetJoinPruneInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetJoinPruneInterval() uint8 {
	if t == nil || t.JoinPruneInterval == nil {
		return 0
	}
	return *t.JoinPruneInterval
}

// GetMaximumGroups retrieves the value of the leaf MaximumGroups from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumGroups is set, it can
// safely use t.GetMaximumGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetMaximumGroups() uint32 {
	if t == nil || t.MaximumGroups == nil {
		return 0
	}
	return *t.MaximumGroups
}

// GetMode retrieves the value of the leaf Mode from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetMode() E_PimTypes_PIM_MODE {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BorderRouter == nil {
		var v bool = false
		t.BorderRouter = &v
	}
	if t.BsrBorder == nil {
		var v bool = false
		t.BsrBorder = &v
	}
	if t.Enabled == nil {
		var v bool = false
		t.Enabled = &v
	}
	t.Counters.PopulateDefaults()
	t.EnableBfd.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface.
func (*NetworkInstance_Protocol_Pim_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootstrapMessages  *uint32           `path:"bootstrap-messages" module:"openconfig-network-instance"`
	ΛBootstrapMessages []ygot.Annotation `path:"@bootstrap-messages" ygotAnnotation:"true"`
	HelloMessages      *uint32           `path:"hello-messages" module:"openconfig-network-instance"`
	ΛHelloMessages     []ygot.Annotation `path:"@hello-messages" ygotAnnotation:"true"`
	JoinPruneMessages  *uint32           `path:"join-prune-messages" module:"openconfig-network-instance"`
	ΛJoinPruneMessages []ygot.Annotation `path:"@join-prune-messages" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_Counters) IsYANGGoStruct() {}

// GetBootstrapMessages retrieves the value of the leaf BootstrapMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootstrapMessages is set, it can
// safely use t.GetBootstrapMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootstrapMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetBootstrapMessages() uint32 {
	if t == nil || t.BootstrapMessages == nil {
		return 0
	}
	return *t.BootstrapMessages
}

// GetHelloMessages retrieves the value of the leaf HelloMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMessages is set, it can
// safely use t.GetHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetHelloMessages() uint32 {
	if t == nil || t.HelloMessages == nil {
		return 0
	}
	return *t.HelloMessages
}

// GetJoinPruneMessages retrieves the value of the leaf JoinPruneMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneMessages is set, it can
// safely use t.GetJoinPruneMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetJoinPruneMessages() uint32 {
	if t == nil || t.JoinPruneMessages == nil {
		return 0
	}
	return *t.JoinPruneMessages
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_Counters.
func (*NetworkInstance_Protocol_Pim_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled   *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Pim_Interface_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Interface_EnableBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_EnableBfd.
func (*NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Pim_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Pim_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_InterfaceRef.
func (*NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor struct {
	ΛMetadata            []ygot.Annotation   `path:"@" ygotAnnotation:"true"`
	DrAddress            *string             `path:"state/dr-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDrAddress           []ygot.Annotation   `path:"state/@dr-address" ygotAnnotation:"true"`
	Mode                 E_PimTypes_PIM_MODE `path:"state/mode" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMode                []ygot.Annotation   `path:"state/@mode" ygotAnnotation:"true"`
	NeighborAddress      *string             `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛNeighborAddress     []ygot.Annotation   `path:"state/@neighbor-address|@neighbor-address" ygotAnnotation:"true"`
	NeighborEstablished  *uint64             `path:"state/neighbor-established" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighborEstablished []ygot.Annotation   `path:"state/@neighbor-established" ygotAnnotation:"true"`
	NeighborExpires      *uint64             `path:"state/neighbor-expires" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNeighborExpires     []ygot.Annotation   `path:"state/@neighbor-expires" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_Neighbor) IsYANGGoStruct() {}

// GetDrAddress retrieves the value of the leaf DrAddress from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrAddress is set, it can
// safely use t.GetDrAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetDrAddress() string {
	if t == nil || t.DrAddress == nil {
		return ""
	}
	return *t.DrAddress
}

// GetMode retrieves the value of the leaf Mode from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetMode() E_PimTypes_PIM_MODE {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// GetNeighborEstablished retrieves the value of the leaf NeighborEstablished from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborEstablished is set, it can
// safely use t.GetNeighborEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborEstablished == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborEstablished() uint64 {
	if t == nil || t.NeighborEstablished == nil {
		return 0
	}
	return *t.NeighborEstablished
}

// GetNeighborExpires retrieves the value of the leaf NeighborExpires from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborExpires is set, it can
// safely use t.GetNeighborExpires() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborExpires == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborExpires() uint64 {
	if t == nil || t.NeighborExpires == nil {
		return 0
	}
	return *t.NeighborExpires
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Pim_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Interface_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_Neighbor.
func (*NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_Static struct {
	ΛMetadata    []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Description  *string                                             `path:"config/description" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDescription []ygot.Annotation                                   `path:"config/@description" ygotAnnotation:"true"`
	NextHop      map[string]*NetworkInstance_Protocol_Static_NextHop `path:"next-hops/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHop     []ygot.Annotation                                   `path:"next-hops/@next-hop" ygotAnnotation:"true"`
	Prefix       *string                                             `path:"config/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛPrefix      []ygot.Annotation                                   `path:"config/@prefix|@prefix" ygotAnnotation:"true"`
	SetTag       NetworkInstance_Protocol_Static_SetTag_Union        `path:"config/set-tag" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSetTag      []ygot.Annotation                                   `path:"config/@set-tag" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NetworkInstance_Protocol_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Static) NewNextHop(Index string) (*NetworkInstance_Protocol_Static_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NetworkInstance_Protocol_Static_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NetworkInstance_Protocol_Static_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NetworkInstance_Protocol_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Static) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Static) GetOrCreateNextHop(Index string) *NetworkInstance_Protocol_Static_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NetworkInstance_Protocol_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Static) GetNextHop(Index string) *NetworkInstance_Protocol_Static_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Static. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Static) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NetworkInstance_Protocol_Static_NextHop struct to the
// list NextHop of NetworkInstance_Protocol_Static. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Static_NextHop already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Static) AppendNextHop(v *NetworkInstance_Protocol_Static_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NetworkInstance_Protocol_Static_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSetTag retrieves the value of the leaf SetTag from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetTag is set, it can
// safely use t.GetSetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetSetTag() NetworkInstance_Protocol_Static_SetTag_Union {
	if t == nil || t.SetTag == nil {
		return nil
	}
	return t.SetTag
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Static struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static.
func (*NetworkInstance_Protocol_Static) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop struct {
	ΛMetadata     []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	EnableBfd     *NetworkInstance_Protocol_Static_NextHop_EnableBfd    `path:"enable-bfd" module:"openconfig-network-instance"`
	ΛEnableBfd    []ygot.Annotation                                     `path:"@enable-bfd" ygotAnnotation:"true"`
	Index         *string                                               `path:"config/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex        []ygot.Annotation                                     `path:"config/@index|@index" ygotAnnotation:"true"`
	InterfaceRef  *NetworkInstance_Protocol_Static_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef []ygot.Annotation                                     `path:"@interface-ref" ygotAnnotation:"true"`
	Metric        *uint32                                               `path:"config/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMetric       []ygot.Annotation                                     `path:"config/@metric" ygotAnnotation:"true"`
	NextHop       NetworkInstance_Protocol_Static_NextHop_NextHop_Union `path:"config/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHop      []ygot.Annotation                                     `path:"config/@next-hop" ygotAnnotation:"true"`
	Preference    *uint32                                               `path:"config/preference" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPreference   []ygot.Annotation                                     `path:"config/@preference" ygotAnnotation:"true"`
	Recurse       *bool                                                 `path:"config/recurse" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛRecurse      []ygot.Annotation                                     `path:"config/@recurse" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop) IsYANGGoStruct() {}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Static_NextHop) GetOrCreateEnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &NetworkInstance_Protocol_Static_NextHop_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Static_NextHop) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Static_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from NetworkInstance_Protocol_Static_NextHop. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Static_NextHop) GetEnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Static_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Static_NextHop) GetInterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetIndex() string {
	if t == nil || t.Index == nil {
		return ""
	}
	return *t.Index
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNextHop retrieves the value of the leaf NextHop from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetNextHop() NetworkInstance_Protocol_Static_NextHop_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRecurse retrieves the value of the leaf Recurse from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Recurse is set, it can
// safely use t.GetRecurse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Recurse == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetRecurse() bool {
	if t == nil || t.Recurse == nil {
		return false
	}
	return *t.Recurse
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Static_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Static_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Recurse == nil {
		var v bool = false
		t.Recurse = &v
	}
	t.EnableBfd.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Static_NextHop struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop.
func (*NetworkInstance_Protocol_Static_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled   *bool             `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnabled  []ygot.Annotation `path:"config/@enabled" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Static_NextHop_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Static_NextHop_EnableBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop_EnableBfd.
func (*NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"config/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Static_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Static_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Protocol_Static_NextHop_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop_InterfaceRef.
func (*NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_RouteLimit represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimit struct {
	ΛMetadata          []ygot.Annotation      `path:"@" ygotAnnotation:"true"`
	Afi                E_Types_ADDRESS_FAMILY `path:"config/afi|afi" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAfi               []ygot.Annotation      `path:"config/@afi|@afi" ygotAnnotation:"true"`
	AlarmThreshold     *uint32                `path:"config/alarm-threshold" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛAlarmThreshold    []ygot.Annotation      `path:"config/@alarm-threshold" ygotAnnotation:"true"`
	InstalledRoutes    *uint32                `path:"state/installed-routes" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInstalledRoutes   []ygot.Annotation      `path:"state/@installed-routes" ygotAnnotation:"true"`
	Maximum            *uint32                `path:"config/maximum" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMaximum           []ygot.Annotation      `path:"config/@maximum" ygotAnnotation:"true"`
	ThresholdExceeded  *bool                  `path:"state/threshold-exceeded" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛThresholdExceeded []ygot.Annotation      `path:"state/@threshold-exceeded" ygotAnnotation:"true"`
	WarningOnly        *bool                  `path:"config/warning-only" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛWarningOnly       []ygot.Annotation      `path:"config/@warning-only" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_RouteLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_RouteLimit) IsYANGGoStruct() {}

// GetAfi retrieves the value of the leaf Afi from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Afi is set, it can
// safely use t.GetAfi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Afi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetAfi() E_Types_ADDRESS_FAMILY {
	if t == nil || t.Afi == 0 {
		return 0
	}
	return t.Afi
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmThreshold is set, it can
// safely use t.GetAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmThreshold == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetInstalledRoutes retrieves the value of the leaf InstalledRoutes from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstalledRoutes is set, it can
// safely use t.GetInstalledRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstalledRoutes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetInstalledRoutes() uint32 {
	if t == nil || t.InstalledRoutes == nil {
		return 0
	}
	return *t.InstalledRoutes
}

// GetMaximum retrieves the value of the leaf Maximum from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetThresholdExceeded retrieves the value of the leaf ThresholdExceeded from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdExceeded is set, it can
// safely use t.GetThresholdExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdExceeded == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetThresholdExceeded() bool {
	if t == nil || t.ThresholdExceeded == nil {
		return false
	}
	return *t.ThresholdExceeded
}

// GetWarningOnly retrieves the value of the leaf WarningOnly from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningOnly is set, it can
// safely use t.GetWarningOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningOnly == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetWarningOnly() bool {
	if t == nil || t.WarningOnly == nil {
		return false
	}
	return *t.WarningOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_RouteLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_RouteLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WarningOnly == nil {
		var v bool = false
		t.WarningOnly = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_RouteLimit struct, which is a YANG list entry.
func (t *NetworkInstance_RouteLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi": t.Afi,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_RouteLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_RouteLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_RouteLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_RouteLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_RouteLimit.
func (*NetworkInstance_RouteLimit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting represents the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRouting struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Srgb      map[string]*NetworkInstance_SegmentRouting_Srgb                                          `path:"srgbs/srgb" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSrgb     []ygot.Annotation                                                                        `path:"srgbs/@srgb" ygotAnnotation:"true"`
	Srlb      map[string]*NetworkInstance_SegmentRouting_Srlb                                          `path:"srlbs/srlb" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSrlb     []ygot.Annotation                                                                        `path:"srlbs/@srlb" ygotAnnotation:"true"`
	TePolicy  map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy `path:"te-policies/te-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛTePolicy []ygot.Annotation                                                                        `path:"te-policies/@te-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting) IsYANGGoStruct() {}

// NetworkInstance_SegmentRouting_TePolicy_Key represents the key for list TePolicy of element /openconfig-network-instance/network-instances/network-instance/segment-routing.
type NetworkInstance_SegmentRouting_TePolicy_Key struct {
	Color    uint32 `path:"color"`
	Endpoint string `path:"endpoint"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_SegmentRouting_TePolicy_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_SegmentRouting_TePolicy_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_SegmentRouting_TePolicy_Key key struct.
func (t NetworkInstance_SegmentRouting_TePolicy_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"color":    t.Color,
		"endpoint": t.Endpoint,
	}, nil
}

// NewSrgb creates a new entry in the Srgb list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewSrgb(LocalId string) (*NetworkInstance_SegmentRouting_Srgb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*NetworkInstance_SegmentRouting_Srgb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srgb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srgb", key)
	}

	t.Srgb[key] = &NetworkInstance_SegmentRouting_Srgb{
		LocalId: &LocalId,
	}

	return t.Srgb[key], nil
}

// RenameSrgb renames an entry in the list Srgb within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameSrgb(oldK, newK string) error {
	if _, ok := t.Srgb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srgb", newK)
	}

	e, ok := t.Srgb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srgb", oldK)
	}
	e.LocalId = &newK

	t.Srgb[newK] = e
	delete(t.Srgb, oldK)
	return nil
}

// GetOrCreateSrgb retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateSrgb(LocalId string) *NetworkInstance_SegmentRouting_Srgb {

	key := LocalId

	if v, ok := t.Srgb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrgb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrgb got unexpected error: %v", err))
	}
	return v
}

// GetSrgb retrieves the value with the specified key from
// the Srgb map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetSrgb(LocalId string) *NetworkInstance_SegmentRouting_Srgb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srgb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrgb deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteSrgb(LocalId string) {
	key := LocalId

	delete(t.Srgb, key)
}

// AppendSrgb appends the supplied NetworkInstance_SegmentRouting_Srgb struct to the
// list Srgb of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_Srgb already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendSrgb(v *NetworkInstance_SegmentRouting_Srgb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*NetworkInstance_SegmentRouting_Srgb)
	}

	if _, ok := t.Srgb[key]; ok {
		return fmt.Errorf("duplicate key for list Srgb %v", key)
	}

	t.Srgb[key] = v
	return nil
}

// NewSrlb creates a new entry in the Srlb list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewSrlb(LocalId string) (*NetworkInstance_SegmentRouting_Srlb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*NetworkInstance_SegmentRouting_Srlb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlb", key)
	}

	t.Srlb[key] = &NetworkInstance_SegmentRouting_Srlb{
		LocalId: &LocalId,
	}

	return t.Srlb[key], nil
}

// RenameSrlb renames an entry in the list Srlb within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameSrlb(oldK, newK string) error {
	if _, ok := t.Srlb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srlb", newK)
	}

	e, ok := t.Srlb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srlb", oldK)
	}
	e.LocalId = &newK

	t.Srlb[newK] = e
	delete(t.Srlb, oldK)
	return nil
}

// GetOrCreateSrlb retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateSrlb(LocalId string) *NetworkInstance_SegmentRouting_Srlb {

	key := LocalId

	if v, ok := t.Srlb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlb got unexpected error: %v", err))
	}
	return v
}

// GetSrlb retrieves the value with the specified key from
// the Srlb map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetSrlb(LocalId string) *NetworkInstance_SegmentRouting_Srlb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srlb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlb deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteSrlb(LocalId string) {
	key := LocalId

	delete(t.Srlb, key)
}

// AppendSrlb appends the supplied NetworkInstance_SegmentRouting_Srlb struct to the
// list Srlb of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_Srlb already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendSrlb(v *NetworkInstance_SegmentRouting_Srlb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*NetworkInstance_SegmentRouting_Srlb)
	}

	if _, ok := t.Srlb[key]; ok {
		return fmt.Errorf("duplicate key for list Srlb %v", key)
	}

	t.Srlb[key] = v
	return nil
}

// NewTePolicy creates a new entry in the TePolicy list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewTePolicy(Color uint32, Endpoint string) (*NetworkInstance_SegmentRouting_TePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy)
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TePolicy", key)
	}

	t.TePolicy[key] = &NetworkInstance_SegmentRouting_TePolicy{
		Color:    &Color,
		Endpoint: &Endpoint,
	}

	return t.TePolicy[key], nil
}

// RenameTePolicy renames an entry in the list TePolicy within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameTePolicy(oldK, newK NetworkInstance_SegmentRouting_TePolicy_Key) error {
	if _, ok := t.TePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TePolicy", newK)
	}

	e, ok := t.TePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TePolicy", oldK)
	}
	e.Color = &newK.Color
	e.Endpoint = &newK.Endpoint

	t.TePolicy[newK] = e
	delete(t.TePolicy, oldK)
	return nil
}

// GetOrCreateTePolicy retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateTePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicy {

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if v, ok := t.TePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTePolicy(Color, Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTePolicy got unexpected error: %v", err))
	}
	return v
}

// GetTePolicy retrieves the value with the specified key from
// the TePolicy map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetTePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicy {

	if t == nil {
		return nil
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if lm, ok := t.TePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTePolicy deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteTePolicy(Color uint32, Endpoint string) {
	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	delete(t.TePolicy, key)
}

// AppendTePolicy appends the supplied NetworkInstance_SegmentRouting_TePolicy struct to the
// list TePolicy of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendTePolicy(v *NetworkInstance_SegmentRouting_TePolicy) error {
	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    *v.Color,
		Endpoint: *v.Endpoint,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy)
	}

	if _, ok := t.TePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TePolicy %v", key)
	}

	t.TePolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Srgb {
		e.PopulateDefaults()
	}
	for _, e := range t.Srlb {
		e.PopulateDefaults()
	}
	for _, e := range t.TePolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting.
func (*NetworkInstance_SegmentRouting) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_Srgb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_Srgb struct {
	ΛMetadata        []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	DataplaneType    E_SegmentRoutingTypes_SrDataplaneType `path:"config/dataplane-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDataplaneType   []ygot.Annotation                     `path:"config/@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefixes     []string                              `path:"config/ipv6-prefixes" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIpv6Prefixes    []ygot.Annotation                     `path:"config/@ipv6-prefixes" ygotAnnotation:"true"`
	LocalId          *string                               `path:"config/local-id|local-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLocalId         []ygot.Annotation                     `path:"config/@local-id|@local-id" ygotAnnotation:"true"`
	MplsLabelBlocks  []string                              `path:"config/mpls-label-blocks" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsLabelBlocks []ygot.Annotation                     `path:"config/@mpls-label-blocks" ygotAnnotation:"true"`
	Size             *uint32                               `path:"state/size" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSize            []ygot.Annotation                     `path:"state/@size" ygotAnnotation:"true"`
	Used             *uint32                               `path:"state/used" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛUsed            []ygot.Annotation                     `path:"state/@used" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_Srgb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_Srgb) IsYANGGoStruct() {}

// GetDataplaneType retrieves the value of the leaf DataplaneType from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataplaneType is set, it can
// safely use t.GetDataplaneType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataplaneType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetDataplaneType() E_SegmentRoutingTypes_SrDataplaneType {
	if t == nil || t.DataplaneType == 0 {
		return 0
	}
	return t.DataplaneType
}

// GetIpv6Prefixes retrieves the value of the leaf Ipv6Prefixes from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefixes is set, it can
// safely use t.GetIpv6Prefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefixes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetIpv6Prefixes() []string {
	if t == nil || t.Ipv6Prefixes == nil {
		return nil
	}
	return t.Ipv6Prefixes
}

// GetLocalId retrieves the value of the leaf LocalId from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalId is set, it can
// safely use t.GetLocalId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetLocalId() string {
	if t == nil || t.LocalId == nil {
		return ""
	}
	return *t.LocalId
}

// GetMplsLabelBlocks retrieves the value of the leaf MplsLabelBlocks from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabelBlocks is set, it can
// safely use t.GetMplsLabelBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabelBlocks == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetMplsLabelBlocks() []string {
	if t == nil || t.MplsLabelBlocks == nil {
		return nil
	}
	return t.MplsLabelBlocks
}

// GetSize retrieves the value of the leaf Size from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetUsed retrieves the value of the leaf Used from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetUsed() uint32 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_Srgb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_Srgb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_Srgb struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_Srgb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srgb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_Srgb.
func (*NetworkInstance_SegmentRouting_Srgb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_Srlb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_Srlb struct {
	ΛMetadata       []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	DataplaneType   E_SegmentRoutingTypes_SrDataplaneType `path:"config/dataplane-type" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDataplaneType  []ygot.Annotation                     `path:"config/@dataplane-type" ygotAnnotation:"true"`
	Ipv6Prefix      *string                               `path:"config/ipv6-prefix" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIpv6Prefix     []ygot.Annotation                     `path:"config/@ipv6-prefix" ygotAnnotation:"true"`
	LocalId         *string                               `path:"config/local-id|local-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛLocalId        []ygot.Annotation                     `path:"config/@local-id|@local-id" ygotAnnotation:"true"`
	MplsLabelBlock  *string                               `path:"config/mpls-label-block" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsLabelBlock []ygot.Annotation                     `path:"config/@mpls-label-block" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_Srlb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_Srlb) IsYANGGoStruct() {}

// GetDataplaneType retrieves the value of the leaf DataplaneType from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataplaneType is set, it can
// safely use t.GetDataplaneType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataplaneType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetDataplaneType() E_SegmentRoutingTypes_SrDataplaneType {
	if t == nil || t.DataplaneType == 0 {
		return 0
	}
	return t.DataplaneType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetLocalId retrieves the value of the leaf LocalId from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalId is set, it can
// safely use t.GetLocalId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetLocalId() string {
	if t == nil || t.LocalId == nil {
		return ""
	}
	return *t.LocalId
}

// GetMplsLabelBlock retrieves the value of the leaf MplsLabelBlock from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabelBlock is set, it can
// safely use t.GetMplsLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabelBlock == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetMplsLabelBlock() string {
	if t == nil || t.MplsLabelBlock == nil {
		return ""
	}
	return *t.MplsLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_Srlb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_Srlb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_Srlb struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_Srlb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srlb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_Srlb.
func (*NetworkInstance_SegmentRouting_Srlb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy struct {
	ΛMetadata          []ygot.Annotation                                                                                                    `path:"@" ygotAnnotation:"true"`
	Active             *bool                                                                                                                `path:"state/active" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActive            []ygot.Annotation                                                                                                    `path:"state/@active" ygotAnnotation:"true"`
	ActiveSince        *uint64                                                                                                              `path:"state/active-since" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActiveSince       []ygot.Annotation                                                                                                    `path:"state/@active-since" ygotAnnotation:"true"`
	ActiveTransitions  *uint64                                                                                                              `path:"state/active-transitions" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActiveTransitions []ygot.Annotation                                                                                                    `path:"state/@active-transitions" ygotAnnotation:"true"`
	Bsid               NetworkInstance_SegmentRouting_TePolicy_Bsid_Union                                                                   `path:"state/bsid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛBsid              []ygot.Annotation                                                                                                    `path:"state/@bsid" ygotAnnotation:"true"`
	CandidatePath      map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath `path:"candidate-paths/candidate-path" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCandidatePath     []ygot.Annotation                                                                                                    `path:"candidate-paths/@candidate-path" ygotAnnotation:"true"`
	Color              *uint32                                                                                                              `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛColor             []ygot.Annotation                                                                                                    `path:"state/@color|@color" ygotAnnotation:"true"`
	Counters           *NetworkInstance_SegmentRouting_TePolicy_Counters                                                                    `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters          []ygot.Annotation                                                                                                    `path:"state/@counters" ygotAnnotation:"true"`
	Endpoint           *string                                                                                                              `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛEndpoint          []ygot.Annotation                                                                                                    `path:"state/@endpoint|@endpoint" ygotAnnotation:"true"`
	Name               *string                                                                                                              `path:"state/name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛName              []ygot.Annotation                                                                                                    `path:"state/@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy) IsYANGGoStruct() {}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key represents the key for list CandidatePath of element /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key struct {
	ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType `path:"protocol-origin"`
	OriginatorAsn  uint32                                 `path:"originator-asn"`
	OriginatorAddr string                                 `path:"originator-addr"`
	Discriminator  uint32                                 `path:"discriminator"`
}

// IsYANGGoKeyStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key key struct.
func (t NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"protocol-origin": t.ProtocolOrigin,
		"originator-asn":  t.OriginatorAsn,
		"originator-addr": t.OriginatorAddr,
		"discriminator":   t.Discriminator,
	}, nil
}

// NewCandidatePath creates a new entry in the CandidatePath list of the
// NetworkInstance_SegmentRouting_TePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy) NewCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath)
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidatePath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidatePath", key)
	}

	t.CandidatePath[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  &OriginatorAsn,
		OriginatorAddr: &OriginatorAddr,
		Discriminator:  &Discriminator,
	}

	return t.CandidatePath[key], nil
}

// RenameCandidatePath renames an entry in the list CandidatePath within
// the NetworkInstance_SegmentRouting_TePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy) RenameCandidatePath(oldK, newK NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key) error {
	if _, ok := t.CandidatePath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidatePath", newK)
	}

	e, ok := t.CandidatePath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidatePath", oldK)
	}
	e.ProtocolOrigin = newK.ProtocolOrigin
	e.OriginatorAsn = &newK.OriginatorAsn
	e.OriginatorAddr = &newK.OriginatorAddr
	e.Discriminator = &newK.Discriminator

	t.CandidatePath[newK] = e
	delete(t.CandidatePath, oldK)
	return nil
}

// GetOrCreateCandidatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetOrCreateCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath {

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if v, ok := t.CandidatePath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidatePath(ProtocolOrigin, OriginatorAsn, OriginatorAddr, Discriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidatePath got unexpected error: %v", err))
	}
	return v
}

// GetCandidatePath retrieves the value with the specified key from
// the CandidatePath map field of NetworkInstance_SegmentRouting_TePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath {

	if t == nil {
		return nil
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if lm, ok := t.CandidatePath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidatePath deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy) DeleteCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) {
	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	delete(t.CandidatePath, key)
}

// AppendCandidatePath appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct to the
// list CandidatePath of NetworkInstance_SegmentRouting_TePolicy. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy) AppendCandidatePath(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) error {
	if v.OriginatorAsn == nil {
		return fmt.Errorf("invalid nil key for OriginatorAsn")
	}

	if v.OriginatorAddr == nil {
		return fmt.Errorf("invalid nil key for OriginatorAddr")
	}

	if v.Discriminator == nil {
		return fmt.Errorf("invalid nil key for Discriminator")
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: v.ProtocolOrigin,
		OriginatorAsn:  *v.OriginatorAsn,
		OriginatorAddr: *v.OriginatorAddr,
		Discriminator:  *v.Discriminator,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath)
	}

	if _, ok := t.CandidatePath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidatePath %v", key)
	}

	t.CandidatePath[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActive retrieves the value of the leaf Active from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetActiveSince retrieves the value of the leaf ActiveSince from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSince is set, it can
// safely use t.GetActiveSince() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSince == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActiveSince() uint64 {
	if t == nil || t.ActiveSince == nil {
		return 0
	}
	return *t.ActiveSince
}

// GetActiveTransitions retrieves the value of the leaf ActiveTransitions from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTransitions is set, it can
// safely use t.GetActiveTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTransitions == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActiveTransitions() uint64 {
	if t == nil || t.ActiveTransitions == nil {
		return 0
	}
	return *t.ActiveTransitions
}

// GetBsid retrieves the value of the leaf Bsid from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bsid is set, it can
// safely use t.GetBsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bsid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetBsid() NetworkInstance_SegmentRouting_TePolicy_Bsid_Union {
	if t == nil || t.Bsid == nil {
		return nil
	}
	return t.Bsid
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	for _, e := range t.CandidatePath {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy.
func (*NetworkInstance_SegmentRouting_TePolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct {
	ΛMetadata          []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Active             *bool                                                                         `path:"state/active" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActive            []ygot.Annotation                                                             `path:"state/@active" ygotAnnotation:"true"`
	ActiveSince        *uint64                                                                       `path:"state/active-since" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActiveSince       []ygot.Annotation                                                             `path:"state/@active-since" ygotAnnotation:"true"`
	ActiveTransitions  *uint64                                                                       `path:"state/active-transitions" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛActiveTransitions []ygot.Annotation                                                             `path:"state/@active-transitions" ygotAnnotation:"true"`
	Discriminator      *uint32                                                                       `path:"state/discriminator|discriminator" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛDiscriminator     []ygot.Annotation                                                             `path:"state/@discriminator|@discriminator" ygotAnnotation:"true"`
	Enlp               E_SegmentRoutingTypes_EnlpType                                                `path:"state/enlp" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEnlp              []ygot.Annotation                                                             `path:"state/@enlp" ygotAnnotation:"true"`
	Name               *string                                                                       `path:"state/name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛName              []ygot.Annotation                                                             `path:"state/@name" ygotAnnotation:"true"`
	OriginatorAddr     *string                                                                       `path:"state/originator-addr|originator-addr" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatorAddr    []ygot.Annotation                                                             `path:"state/@originator-addr|@originator-addr" ygotAnnotation:"true"`
	OriginatorAsn      *uint32                                                                       `path:"state/originator-asn|originator-asn" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛOriginatorAsn     []ygot.Annotation                                                             `path:"state/@originator-asn|@originator-asn" ygotAnnotation:"true"`
	Preference         *uint32                                                                       `path:"state/preference" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPreference        []ygot.Annotation                                                             `path:"state/@preference" ygotAnnotation:"true"`
	ProtocolOrigin     E_SegmentRoutingTypes_SrteProtocolType                                        `path:"state/protocol-origin|protocol-origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛProtocolOrigin    []ygot.Annotation                                                             `path:"state/@protocol-origin|@protocol-origin" ygotAnnotation:"true"`
	SegmentList        map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList `path:"segment-lists/segment-list" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSegmentList       []ygot.Annotation                                                             `path:"segment-lists/@segment-list" ygotAnnotation:"true"`
	Valid              *bool                                                                         `path:"state/valid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValid             []ygot.Annotation                                                             `path:"state/@valid" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath) IsYANGGoStruct() {}

// NewSegmentList creates a new entry in the SegmentList list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) NewSegmentList(Id uint32) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList{
		Id: &Id,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) RenameSegmentList(oldK, newK uint32) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.Id = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOrCreateSegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList {

	key := Id

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetSegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) DeleteSegmentList(Id uint32) {
	key := Id

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct to the
// list SegmentList of NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) AppendSegmentList(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetActive retrieves the value of the leaf Active from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetActiveSince retrieves the value of the leaf ActiveSince from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSince is set, it can
// safely use t.GetActiveSince() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSince == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActiveSince() uint64 {
	if t == nil || t.ActiveSince == nil {
		return 0
	}
	return *t.ActiveSince
}

// GetActiveTransitions retrieves the value of the leaf ActiveTransitions from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTransitions is set, it can
// safely use t.GetActiveTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTransitions == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActiveTransitions() uint64 {
	if t == nil || t.ActiveTransitions == nil {
		return 0
	}
	return *t.ActiveTransitions
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// GetEnlp retrieves the value of the leaf Enlp from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enlp is set, it can
// safely use t.GetEnlp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enlp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetEnlp() E_SegmentRoutingTypes_EnlpType {
	if t == nil || t.Enlp == 0 {
		return 0
	}
	return t.Enlp
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginatorAddr retrieves the value of the leaf OriginatorAddr from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorAddr is set, it can
// safely use t.GetOriginatorAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorAddr == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOriginatorAddr() string {
	if t == nil || t.OriginatorAddr == nil {
		return ""
	}
	return *t.OriginatorAddr
}

// GetOriginatorAsn retrieves the value of the leaf OriginatorAsn from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorAsn is set, it can
// safely use t.GetOriginatorAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorAsn == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOriginatorAsn() uint32 {
	if t == nil || t.OriginatorAsn == nil {
		return 0
	}
	return *t.OriginatorAsn
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetProtocolOrigin retrieves the value of the leaf ProtocolOrigin from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolOrigin is set, it can
// safely use t.GetProtocolOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolOrigin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetProtocolOrigin() E_SegmentRoutingTypes_SrteProtocolType {
	if t == nil || t.ProtocolOrigin == 0 {
		return 0
	}
	return t.ProtocolOrigin
}

// GetValid retrieves the value of the leaf Valid from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SegmentList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Discriminator == nil {
		return nil, fmt.Errorf("nil value for key Discriminator")
	}

	if t.OriginatorAddr == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAddr")
	}

	if t.OriginatorAsn == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAsn")
	}

	return map[string]interface{}{
		"discriminator":   *t.Discriminator,
		"originator-addr": *t.OriginatorAddr,
		"originator-asn":  *t.OriginatorAsn,
		"protocol-origin": t.ProtocolOrigin,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct {
	ΛMetadata      []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Counters       *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters           `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters      []ygot.Annotation                                                                     `path:"state/@counters" ygotAnnotation:"true"`
	Id             *uint32                                                                               `path:"state/id|id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛId            []ygot.Annotation                                                                     `path:"state/@id|@id" ygotAnnotation:"true"`
	InvalidReason  E_SegmentRoutingTypes_SrteInvalidSlReason                                             `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInvalidReason []ygot.Annotation                                                                     `path:"state/@invalid-reason" ygotAnnotation:"true"`
	NextHop        map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop `path:"next-hops/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNextHop       []ygot.Annotation                                                                     `path:"next-hops/@next-hop" ygotAnnotation:"true"`
	Sid            map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid     `path:"sids/sid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSid           []ygot.Annotation                                                                     `path:"sids/@sid" ygotAnnotation:"true"`
	Valid          *bool                                                                                 `path:"state/valid" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValid         []ygot.Annotation                                                                     `path:"state/@valid" ygotAnnotation:"true"`
	Weight         *uint32                                                                               `path:"state/weight" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛWeight        []ygot.Annotation                                                                     `path:"state/@weight" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) NewNextHop(Index uint64) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateNextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetNextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct to the
// list NextHop of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) AppendNextHop(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// NewSid creates a new entry in the Sid list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) NewSid(Index uint64) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sid", key)
	}

	t.Sid[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid{
		Index: &Index,
	}

	return t.Sid[key], nil
}

// RenameSid renames an entry in the list Sid within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) RenameSid(oldK, newK uint64) error {
	if _, ok := t.Sid[newK]; ok {
		return fmt.Errorf("key %v already exists in Sid", newK)
	}

	e, ok := t.Sid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sid", oldK)
	}
	e.Index = &newK

	t.Sid[newK] = e
	delete(t.Sid, oldK)
	return nil
}

// GetOrCreateSid retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateSid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid {

	key := Index

	if v, ok := t.Sid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSid(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSid got unexpected error: %v", err))
	}
	return v
}

// GetSid retrieves the value with the specified key from
// the Sid map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetSid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Sid[key]; ok {
		return lm
	}
	return nil
}

// DeleteSid deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) DeleteSid(Index uint64) {
	key := Index

	delete(t.Sid, key)
}

// AppendSid appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct to the
// list Sid of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) AppendSid(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
	}

	if _, ok := t.Sid[key]; ok {
		return fmt.Errorf("duplicate key for list Sid %v", key)
	}

	t.Sid[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetInvalidReason() E_SegmentRoutingTypes_SrteInvalidSlReason {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetValid retrieves the value of the leaf Valid from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// GetWeight retrieves the value of the leaf Weight from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
	for _, e := range t.Sid {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) IsYANGGoStruct() {}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct {
	ΛMetadata             []ygot.Annotation                                                                                      `path:"@" ygotAnnotation:"true"`
	Counters              *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters                    `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛCounters             []ygot.Annotation                                                                                      `path:"state/@counters" ygotAnnotation:"true"`
	DecapsulateHeader     E_AftTypes_EncapsulationHeaderType                                                                     `path:"state/decapsulate-header" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDecapsulateHeader    []ygot.Annotation                                                                                      `path:"state/@decapsulate-header" ygotAnnotation:"true"`
	EncapsulateHeader     E_AftTypes_EncapsulationHeaderType                                                                     `path:"state/encapsulate-header" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛEncapsulateHeader    []ygot.Annotation                                                                                      `path:"state/@encapsulate-header" ygotAnnotation:"true"`
	Index                 *uint64                                                                                                `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex                []ygot.Annotation                                                                                      `path:"state/@index|@index" ygotAnnotation:"true"`
	InterfaceRef          *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef                `path:"interface-ref" module:"openconfig-network-instance"`
	ΛInterfaceRef         []ygot.Annotation                                                                                      `path:"@interface-ref" ygotAnnotation:"true"`
	IpAddress             *string                                                                                                `path:"state/ip-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛIpAddress            []ygot.Annotation                                                                                      `path:"state/@ip-address" ygotAnnotation:"true"`
	MacAddress            *string                                                                                                `path:"state/mac-address" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMacAddress           []ygot.Annotation                                                                                      `path:"state/@mac-address" ygotAnnotation:"true"`
	OriginProtocol        E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                                                    `path:"state/origin-protocol" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛOriginProtocol       []ygot.Annotation                                                                                      `path:"state/@origin-protocol" ygotAnnotation:"true"`
	PopTopLabel           *bool                                                                                                  `path:"state/pop-top-label" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPopTopLabel          []ygot.Annotation                                                                                      `path:"state/@pop-top-label" ygotAnnotation:"true"`
	ProgrammedIndex       *uint64                                                                                                `path:"state/programmed-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛProgrammedIndex      []ygot.Annotation                                                                                      `path:"state/@programmed-index" ygotAnnotation:"true"`
	PushedMplsLabelStack  []NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union `path:"state/pushed-mpls-label-stack" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛPushedMplsLabelStack []ygot.Annotation                                                                                      `path:"state/@pushed-mpls-label-stack" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOrCreateInterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetInterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetDecapsulateHeader retrieves the value of the leaf DecapsulateHeader from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateHeader is set, it can
// safely use t.GetDecapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateHeader == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetDecapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.DecapsulateHeader == 0 {
		return 0
	}
	return t.DecapsulateHeader
}

// GetEncapsulateHeader retrieves the value of the leaf EncapsulateHeader from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulateHeader is set, it can
// safely use t.GetEncapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulateHeader == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetEncapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.EncapsulateHeader == 0 {
		return 0
	}
	return t.EncapsulateHeader
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetOriginProtocol retrieves the value of the leaf OriginProtocol from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginProtocol is set, it can
// safely use t.GetOriginProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOriginProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.OriginProtocol == 0 {
		return 0
	}
	return t.OriginProtocol
}

// GetPopTopLabel retrieves the value of the leaf PopTopLabel from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopTopLabel is set, it can
// safely use t.GetPopTopLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopTopLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetPopTopLabel() bool {
	if t == nil || t.PopTopLabel == nil {
		return false
	}
	return *t.PopTopLabel
}

// GetProgrammedIndex retrieves the value of the leaf ProgrammedIndex from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProgrammedIndex is set, it can
// safely use t.GetProgrammedIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProgrammedIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetProgrammedIndex() uint64 {
	if t == nil || t.ProgrammedIndex == nil {
		return 0
	}
	return *t.ProgrammedIndex
}

// GetPushedMplsLabelStack retrieves the value of the leaf PushedMplsLabelStack from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushedMplsLabelStack is set, it can
// safely use t.GetPushedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetPushedMplsLabelStack() []NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union {
	if t == nil || t.PushedMplsLabelStack == nil {
		return nil
	}
	return t.PushedMplsLabelStack
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PopTopLabel == nil {
		var v bool = false
		t.PopTopLabel = &v
	}
	t.Counters.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) IsYANGGoStruct() {
}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface     *string           `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface    []ygot.Annotation `path:"state/@interface" ygotAnnotation:"true"`
	Subinterface  *uint32           `path:"state/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛSubinterface []ygot.Annotation `path:"state/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct {
	ΛMetadata []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	Index     *uint64                                                                           `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛIndex    []ygot.Annotation                                                                 `path:"state/@index|@index" ygotAnnotation:"true"`
	MplsTc    *uint8                                                                            `path:"state/mpls-tc" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsTc   []ygot.Annotation                                                                 `path:"state/@mpls-tc" ygotAnnotation:"true"`
	MplsTtl   *uint8                                                                            `path:"state/mpls-ttl" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMplsTtl  []ygot.Annotation                                                                 `path:"state/@mpls-ttl" ygotAnnotation:"true"`
	Value     NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛValue    []ygot.Annotation                                                                 `path:"state/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetMplsTc retrieves the value of the leaf MplsTc from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTc is set, it can
// safely use t.GetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTc == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetMplsTtl retrieves the value of the leaf MplsTtl from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTtl is set, it can
// safely use t.GetMplsTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTtl == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetMplsTtl() uint8 {
	if t == nil || t.MplsTtl == nil {
		return 0
	}
	return *t.MplsTtl
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetValue() NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MplsTc == nil {
		var v uint8 = 0
		t.MplsTc = &v
	}
	if t.MplsTtl == nil {
		var v uint8 = 0
		t.MplsTtl = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InLabeledOctets   *uint64           `path:"in-labeled-octets" module:"openconfig-network-instance"`
	ΛInLabeledOctets  []ygot.Annotation `path:"@in-labeled-octets" ygotAnnotation:"true"`
	InLabeledPkts     *uint64           `path:"in-labeled-pkts" module:"openconfig-network-instance"`
	ΛInLabeledPkts    []ygot.Annotation `path:"@in-labeled-pkts" ygotAnnotation:"true"`
	InOctets          *uint64           `path:"in-octets" module:"openconfig-network-instance"`
	ΛInOctets         []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts            *uint64           `path:"in-pkts" module:"openconfig-network-instance"`
	ΛInPkts           []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutLabeledOctets  *uint64           `path:"out-labeled-octets" module:"openconfig-network-instance"`
	ΛOutLabeledOctets []ygot.Annotation `path:"@out-labeled-octets" ygotAnnotation:"true"`
	OutLabeledPkts    *uint64           `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	ΛOutLabeledPkts   []ygot.Annotation `path:"@out-labeled-pkts" ygotAnnotation:"true"`
	OutOctets         *uint64           `path:"out-octets" module:"openconfig-network-instance"`
	ΛOutOctets        []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts           *uint64           `path:"out-pkts" module:"openconfig-network-instance"`
	ΛOutPkts          []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_Counters) IsYANGGoStruct() {}

// GetInLabeledOctets retrieves the value of the leaf InLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLabeledOctets is set, it can
// safely use t.GetInLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInLabeledOctets() uint64 {
	if t == nil || t.InLabeledOctets == nil {
		return 0
	}
	return *t.InLabeledOctets
}

// GetInLabeledPkts retrieves the value of the leaf InLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLabeledPkts is set, it can
// safely use t.GetInLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInLabeledPkts() uint64 {
	if t == nil || t.InLabeledPkts == nil {
		return 0
	}
	return *t.InLabeledPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_SegmentRouting_TePolicy_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Table represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_Table struct {
	ΛMetadata      []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	AddressFamily  E_Types_ADDRESS_FAMILY              `path:"config/address-family|address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAddressFamily []ygot.Annotation                   `path:"config/@address-family|@address-family" ygotAnnotation:"true"`
	Protocol       E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/protocol|protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛProtocol      []ygot.Annotation                   `path:"config/@protocol|@protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Table) IsYANGGoStruct() {}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the NetworkInstance_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Table) GetAddressFamily() E_Types_ADDRESS_FAMILY {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetProtocol retrieves the value of the leaf Protocol from the NetworkInstance_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Table) GetProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NetworkInstance_Table struct, which is a YANG list entry.
func (t *NetworkInstance_Table) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"protocol":       t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Table) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Table) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Table.
func (*NetworkInstance_Table) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_TableConnection represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnection struct {
	ΛMetadata                 []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	AddressFamily             E_Types_ADDRESS_FAMILY              `path:"config/address-family|address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛAddressFamily            []ygot.Annotation                   `path:"config/@address-family|@address-family" ygotAnnotation:"true"`
	DefaultImportPolicy       E_RoutingPolicy_DefaultPolicyType   `path:"config/default-import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDefaultImportPolicy      []ygot.Annotation                   `path:"config/@default-import-policy" ygotAnnotation:"true"`
	DisableMetricPropagation  *bool                               `path:"config/disable-metric-propagation" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛDisableMetricPropagation []ygot.Annotation                   `path:"config/@disable-metric-propagation" ygotAnnotation:"true"`
	DstProtocol               E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/dst-protocol|dst-protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛDstProtocol              []ygot.Annotation                   `path:"config/@dst-protocol|@dst-protocol" ygotAnnotation:"true"`
	ImportPolicy              []string                            `path:"config/import-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛImportPolicy             []ygot.Annotation                   `path:"config/@import-policy" ygotAnnotation:"true"`
	SrcProtocol               E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/src-protocol|src-protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛSrcProtocol              []ygot.Annotation                   `path:"config/@src-protocol|@src-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_TableConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_TableConnection) IsYANGGoStruct() {}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetAddressFamily() E_Types_ADDRESS_FAMILY {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultImportPolicy is set, it can
// safely use t.GetDefaultImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetDisableMetricPropagation retrieves the value of the leaf DisableMetricPropagation from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableMetricPropagation is set, it can
// safely use t.GetDisableMetricPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableMetricPropagation == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDisableMetricPropagation() bool {
	if t == nil || t.DisableMetricPropagation == nil {
		return false
	}
	return *t.DisableMetricPropagation
}

// GetDstProtocol retrieves the value of the leaf DstProtocol from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstProtocol is set, it can
// safely use t.GetDstProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDstProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.DstProtocol == 0 {
		return 0
	}
	return t.DstProtocol
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetSrcProtocol retrieves the value of the leaf SrcProtocol from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcProtocol is set, it can
// safely use t.GetSrcProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetSrcProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.SrcProtocol == 0 {
		return 0
	}
	return t.SrcProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_TableConnection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_TableConnection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultImportPolicy == 0 {
		t.DefaultImportPolicy = RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	if t.DisableMetricPropagation == nil {
		var v bool = false
		t.DisableMetricPropagation = &v
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_TableConnection struct, which is a YANG list entry.
func (t *NetworkInstance_TableConnection) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"dst-protocol":   t.DstProtocol,
		"src-protocol":   t.SrcProtocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_TableConnection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_TableConnection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_TableConnection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_TableConnection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_TableConnection.
func (*NetworkInstance_TableConnection) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Vlan represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_Vlan struct {
	ΛMetadata []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Member    []*NetworkInstance_Vlan_Member `path:"members/member" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛMember   []ygot.Annotation              `path:"members/@member" ygotAnnotation:"true"`
	Name      *string                        `path:"config/name" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛName     []ygot.Annotation              `path:"config/@name" ygotAnnotation:"true"`
	Status    E_Vlan_Status                  `path:"config/status" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛStatus   []ygot.Annotation              `path:"config/@status" ygotAnnotation:"true"`
	VlanId    *uint16                        `path:"config/vlan-id|vlan-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ΛVlanId   []ygot.Annotation              `path:"config/@vlan-id|@vlan-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatus retrieves the value of the leaf Status from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetStatus() E_Vlan_Status {
	if t == nil || t.Status == 0 {
		return Vlan_Status_ACTIVE
	}
	return t.Status
}

// GetVlanId retrieves the value of the leaf VlanId from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Status == 0 {
		t.Status = Vlan_Status_ACTIVE
	}
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NetworkInstance_Vlan struct, which is a YANG list entry.
func (t *NetworkInstance_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan.
func (*NetworkInstance_Vlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Vlan_Member represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_Member struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Interface  *string           `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛInterface []ygot.Annotation `path:"state/@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan_Member) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Vlan_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan_Member) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NetworkInstance_Vlan_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NetworkInstance_Vlan_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan_Member) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan_Member.
func (*NetworkInstance_Vlan_Member) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// OpticalAmplifier represents the /openconfig-optical-amplifier/optical-amplifier YANG schema element.
type OpticalAmplifier struct {
	ΛMetadata           []ygot.Annotation                               `path:"@" ygotAnnotation:"true"`
	Amplifier           map[string]*OpticalAmplifier_Amplifier          `path:"amplifiers/amplifier" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛAmplifier          []ygot.Annotation                               `path:"amplifiers/@amplifier" ygotAnnotation:"true"`
	SupervisoryChannel  map[string]*OpticalAmplifier_SupervisoryChannel `path:"supervisory-channels/supervisory-channel" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛSupervisoryChannel []ygot.Annotation                               `path:"supervisory-channels/@supervisory-channel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier) IsYANGGoStruct() {}

// NewAmplifier creates a new entry in the Amplifier list of the
// OpticalAmplifier struct. The keys of the list are populated from the input
// arguments.
func (t *OpticalAmplifier) NewAmplifier(Name string) (*OpticalAmplifier_Amplifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Amplifier == nil {
		t.Amplifier = make(map[string]*OpticalAmplifier_Amplifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Amplifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Amplifier", key)
	}

	t.Amplifier[key] = &OpticalAmplifier_Amplifier{
		Name: &Name,
	}

	return t.Amplifier[key], nil
}

// RenameAmplifier renames an entry in the list Amplifier within
// the OpticalAmplifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpticalAmplifier) RenameAmplifier(oldK, newK string) error {
	if _, ok := t.Amplifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Amplifier", newK)
	}

	e, ok := t.Amplifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Amplifier", oldK)
	}
	e.Name = &newK

	t.Amplifier[newK] = e
	delete(t.Amplifier, oldK)
	return nil
}

// GetOrCreateAmplifier retrieves the value with the specified keys from
// the receiver OpticalAmplifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpticalAmplifier) GetOrCreateAmplifier(Name string) *OpticalAmplifier_Amplifier {

	key := Name

	if v, ok := t.Amplifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAmplifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAmplifier got unexpected error: %v", err))
	}
	return v
}

// GetAmplifier retrieves the value with the specified key from
// the Amplifier map field of OpticalAmplifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpticalAmplifier) GetAmplifier(Name string) *OpticalAmplifier_Amplifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Amplifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteAmplifier deletes the value with the specified keys from
// the receiver OpticalAmplifier. If there is no such element, the function
// is a no-op.
func (t *OpticalAmplifier) DeleteAmplifier(Name string) {
	key := Name

	delete(t.Amplifier, key)
}

// AppendAmplifier appends the supplied OpticalAmplifier_Amplifier struct to the
// list Amplifier of OpticalAmplifier. If the key value(s) specified in
// the supplied OpticalAmplifier_Amplifier already exist in the list, an error is
// returned.
func (t *OpticalAmplifier) AppendAmplifier(v *OpticalAmplifier_Amplifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Amplifier == nil {
		t.Amplifier = make(map[string]*OpticalAmplifier_Amplifier)
	}

	if _, ok := t.Amplifier[key]; ok {
		return fmt.Errorf("duplicate key for list Amplifier %v", key)
	}

	t.Amplifier[key] = v
	return nil
}

// NewSupervisoryChannel creates a new entry in the SupervisoryChannel list of the
// OpticalAmplifier struct. The keys of the list are populated from the input
// arguments.
func (t *OpticalAmplifier) NewSupervisoryChannel(Interface string) (*OpticalAmplifier_SupervisoryChannel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupervisoryChannel == nil {
		t.SupervisoryChannel = make(map[string]*OpticalAmplifier_SupervisoryChannel)
	}

	key := Interface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SupervisoryChannel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SupervisoryChannel", key)
	}

	t.SupervisoryChannel[key] = &OpticalAmplifier_SupervisoryChannel{
		Interface: &Interface,
	}

	return t.SupervisoryChannel[key], nil
}

// RenameSupervisoryChannel renames an entry in the list SupervisoryChannel within
// the OpticalAmplifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpticalAmplifier) RenameSupervisoryChannel(oldK, newK string) error {
	if _, ok := t.SupervisoryChannel[newK]; ok {
		return fmt.Errorf("key %v already exists in SupervisoryChannel", newK)
	}

	e, ok := t.SupervisoryChannel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SupervisoryChannel", oldK)
	}
	e.Interface = &newK

	t.SupervisoryChannel[newK] = e
	delete(t.SupervisoryChannel, oldK)
	return nil
}

// GetOrCreateSupervisoryChannel retrieves the value with the specified keys from
// the receiver OpticalAmplifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpticalAmplifier) GetOrCreateSupervisoryChannel(Interface string) *OpticalAmplifier_SupervisoryChannel {

	key := Interface

	if v, ok := t.SupervisoryChannel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSupervisoryChannel(Interface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSupervisoryChannel got unexpected error: %v", err))
	}
	return v
}

// GetSupervisoryChannel retrieves the value with the specified key from
// the SupervisoryChannel map field of OpticalAmplifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpticalAmplifier) GetSupervisoryChannel(Interface string) *OpticalAmplifier_SupervisoryChannel {

	if t == nil {
		return nil
	}

	key := Interface

	if lm, ok := t.SupervisoryChannel[key]; ok {
		return lm
	}
	return nil
}

// DeleteSupervisoryChannel deletes the value with the specified keys from
// the receiver OpticalAmplifier. If there is no such element, the function
// is a no-op.
func (t *OpticalAmplifier) DeleteSupervisoryChannel(Interface string) {
	key := Interface

	delete(t.SupervisoryChannel, key)
}

// AppendSupervisoryChannel appends the supplied OpticalAmplifier_SupervisoryChannel struct to the
// list SupervisoryChannel of OpticalAmplifier. If the key value(s) specified in
// the supplied OpticalAmplifier_SupervisoryChannel already exist in the list, an error is
// returned.
func (t *OpticalAmplifier) AppendSupervisoryChannel(v *OpticalAmplifier_SupervisoryChannel) error {
	if v.Interface == nil {
		return fmt.Errorf("invalid nil key received for Interface")
	}

	key := *v.Interface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SupervisoryChannel == nil {
		t.SupervisoryChannel = make(map[string]*OpticalAmplifier_SupervisoryChannel)
	}

	if _, ok := t.SupervisoryChannel[key]; ok {
		return fmt.Errorf("duplicate key for list SupervisoryChannel %v", key)
	}

	t.SupervisoryChannel[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Amplifier {
		e.PopulateDefaults()
	}
	for _, e := range t.SupervisoryChannel {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier.
func (*OpticalAmplifier) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier YANG schema element.
type OpticalAmplifier_Amplifier struct {
	ΛMetadata          []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	ActualGain         *OpticalAmplifier_Amplifier_ActualGain        `path:"state/actual-gain" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛActualGain        []ygot.Annotation                             `path:"state/@actual-gain" ygotAnnotation:"true"`
	ActualGainTilt     *OpticalAmplifier_Amplifier_ActualGainTilt    `path:"state/actual-gain-tilt" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛActualGainTilt    []ygot.Annotation                             `path:"state/@actual-gain-tilt" ygotAnnotation:"true"`
	AmpMode            E_OpticalAmplifier_OPTICAL_AMPLIFIER_MODE     `path:"config/amp-mode" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛAmpMode           []ygot.Annotation                             `path:"config/@amp-mode" ygotAnnotation:"true"`
	Component          *string                                       `path:"state/component" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛComponent         []ygot.Annotation                             `path:"state/@component" ygotAnnotation:"true"`
	EgressPort         *string                                       `path:"state/egress-port" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛEgressPort        []ygot.Annotation                             `path:"state/@egress-port" ygotAnnotation:"true"`
	Enabled            *bool                                         `path:"config/enabled" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛEnabled           []ygot.Annotation                             `path:"config/@enabled" ygotAnnotation:"true"`
	FiberTypeProfile   E_OpticalAmplifier_FIBER_TYPE_PROFILE         `path:"config/fiber-type-profile" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛFiberTypeProfile  []ygot.Annotation                             `path:"config/@fiber-type-profile" ygotAnnotation:"true"`
	GainRange          E_OpticalAmplifier_GAIN_RANGE                 `path:"config/gain-range" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛGainRange         []ygot.Annotation                             `path:"config/@gain-range" ygotAnnotation:"true"`
	IngressPort        *string                                       `path:"state/ingress-port" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛIngressPort       []ygot.Annotation                             `path:"state/@ingress-port" ygotAnnotation:"true"`
	InputPowerCBand    *OpticalAmplifier_Amplifier_InputPowerCBand   `path:"state/input-power-c-band" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛInputPowerCBand   []ygot.Annotation                             `path:"state/@input-power-c-band" ygotAnnotation:"true"`
	InputPowerLBand    *OpticalAmplifier_Amplifier_InputPowerLBand   `path:"state/input-power-l-band" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛInputPowerLBand   []ygot.Annotation                             `path:"state/@input-power-l-band" ygotAnnotation:"true"`
	InputPowerTotal    *OpticalAmplifier_Amplifier_InputPowerTotal   `path:"state/input-power-total" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛInputPowerTotal   []ygot.Annotation                             `path:"state/@input-power-total" ygotAnnotation:"true"`
	LaserBiasCurrent   *OpticalAmplifier_Amplifier_LaserBiasCurrent  `path:"state/laser-bias-current" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛLaserBiasCurrent  []ygot.Annotation                             `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	MaxGain            *float64                                      `path:"config/max-gain" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛMaxGain           []ygot.Annotation                             `path:"config/@max-gain" ygotAnnotation:"true"`
	MaxOutputPower     *float64                                      `path:"config/max-output-power" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛMaxOutputPower    []ygot.Annotation                             `path:"config/@max-output-power" ygotAnnotation:"true"`
	MinGain            *float64                                      `path:"config/min-gain" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛMinGain           []ygot.Annotation                             `path:"config/@min-gain" ygotAnnotation:"true"`
	Name               *string                                       `path:"config/name|name" module:"openconfig-optical-amplifier/openconfig-optical-amplifier|openconfig-optical-amplifier"`
	ΛName              []ygot.Annotation                             `path:"config/@name|@name" ygotAnnotation:"true"`
	OpticalReturnLoss  *OpticalAmplifier_Amplifier_OpticalReturnLoss `path:"state/optical-return-loss" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOpticalReturnLoss []ygot.Annotation                             `path:"state/@optical-return-loss" ygotAnnotation:"true"`
	OutputPowerCBand   *OpticalAmplifier_Amplifier_OutputPowerCBand  `path:"state/output-power-c-band" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOutputPowerCBand  []ygot.Annotation                             `path:"state/@output-power-c-band" ygotAnnotation:"true"`
	OutputPowerLBand   *OpticalAmplifier_Amplifier_OutputPowerLBand  `path:"state/output-power-l-band" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOutputPowerLBand  []ygot.Annotation                             `path:"state/@output-power-l-band" ygotAnnotation:"true"`
	OutputPowerTotal   *OpticalAmplifier_Amplifier_OutputPowerTotal  `path:"state/output-power-total" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOutputPowerTotal  []ygot.Annotation                             `path:"state/@output-power-total" ygotAnnotation:"true"`
	TargetGain         *float64                                      `path:"config/target-gain" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛTargetGain        []ygot.Annotation                             `path:"config/@target-gain" ygotAnnotation:"true"`
	TargetGainTilt     *float64                                      `path:"config/target-gain-tilt" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛTargetGainTilt    []ygot.Annotation                             `path:"config/@target-gain-tilt" ygotAnnotation:"true"`
	TargetOutputPower  *float64                                      `path:"config/target-output-power" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛTargetOutputPower []ygot.Annotation                             `path:"config/@target-output-power" ygotAnnotation:"true"`
	Type               E_OpticalAmplifier_OPTICAL_AMPLIFIER_TYPE     `path:"config/type" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛType              []ygot.Annotation                             `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier) IsYANGGoStruct() {}

// GetOrCreateActualGain retrieves the value of the ActualGain field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateActualGain() *OpticalAmplifier_Amplifier_ActualGain {
	if t.ActualGain != nil {
		return t.ActualGain
	}
	t.ActualGain = &OpticalAmplifier_Amplifier_ActualGain{}
	return t.ActualGain
}

// GetOrCreateActualGainTilt retrieves the value of the ActualGainTilt field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateActualGainTilt() *OpticalAmplifier_Amplifier_ActualGainTilt {
	if t.ActualGainTilt != nil {
		return t.ActualGainTilt
	}
	t.ActualGainTilt = &OpticalAmplifier_Amplifier_ActualGainTilt{}
	return t.ActualGainTilt
}

// GetOrCreateInputPowerCBand retrieves the value of the InputPowerCBand field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateInputPowerCBand() *OpticalAmplifier_Amplifier_InputPowerCBand {
	if t.InputPowerCBand != nil {
		return t.InputPowerCBand
	}
	t.InputPowerCBand = &OpticalAmplifier_Amplifier_InputPowerCBand{}
	return t.InputPowerCBand
}

// GetOrCreateInputPowerLBand retrieves the value of the InputPowerLBand field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateInputPowerLBand() *OpticalAmplifier_Amplifier_InputPowerLBand {
	if t.InputPowerLBand != nil {
		return t.InputPowerLBand
	}
	t.InputPowerLBand = &OpticalAmplifier_Amplifier_InputPowerLBand{}
	return t.InputPowerLBand
}

// GetOrCreateInputPowerTotal retrieves the value of the InputPowerTotal field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateInputPowerTotal() *OpticalAmplifier_Amplifier_InputPowerTotal {
	if t.InputPowerTotal != nil {
		return t.InputPowerTotal
	}
	t.InputPowerTotal = &OpticalAmplifier_Amplifier_InputPowerTotal{}
	return t.InputPowerTotal
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateLaserBiasCurrent() *OpticalAmplifier_Amplifier_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpticalAmplifier_Amplifier_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOpticalReturnLoss retrieves the value of the OpticalReturnLoss field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateOpticalReturnLoss() *OpticalAmplifier_Amplifier_OpticalReturnLoss {
	if t.OpticalReturnLoss != nil {
		return t.OpticalReturnLoss
	}
	t.OpticalReturnLoss = &OpticalAmplifier_Amplifier_OpticalReturnLoss{}
	return t.OpticalReturnLoss
}

// GetOrCreateOutputPowerCBand retrieves the value of the OutputPowerCBand field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateOutputPowerCBand() *OpticalAmplifier_Amplifier_OutputPowerCBand {
	if t.OutputPowerCBand != nil {
		return t.OutputPowerCBand
	}
	t.OutputPowerCBand = &OpticalAmplifier_Amplifier_OutputPowerCBand{}
	return t.OutputPowerCBand
}

// GetOrCreateOutputPowerLBand retrieves the value of the OutputPowerLBand field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateOutputPowerLBand() *OpticalAmplifier_Amplifier_OutputPowerLBand {
	if t.OutputPowerLBand != nil {
		return t.OutputPowerLBand
	}
	t.OutputPowerLBand = &OpticalAmplifier_Amplifier_OutputPowerLBand{}
	return t.OutputPowerLBand
}

// GetOrCreateOutputPowerTotal retrieves the value of the OutputPowerTotal field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_Amplifier) GetOrCreateOutputPowerTotal() *OpticalAmplifier_Amplifier_OutputPowerTotal {
	if t.OutputPowerTotal != nil {
		return t.OutputPowerTotal
	}
	t.OutputPowerTotal = &OpticalAmplifier_Amplifier_OutputPowerTotal{}
	return t.OutputPowerTotal
}

// GetActualGain returns the value of the ActualGain struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field ActualGain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetActualGain() *OpticalAmplifier_Amplifier_ActualGain {
	if t != nil && t.ActualGain != nil {
		return t.ActualGain
	}
	return nil
}

// GetActualGainTilt returns the value of the ActualGainTilt struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field ActualGainTilt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetActualGainTilt() *OpticalAmplifier_Amplifier_ActualGainTilt {
	if t != nil && t.ActualGainTilt != nil {
		return t.ActualGainTilt
	}
	return nil
}

// GetInputPowerCBand returns the value of the InputPowerCBand struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field InputPowerCBand is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetInputPowerCBand() *OpticalAmplifier_Amplifier_InputPowerCBand {
	if t != nil && t.InputPowerCBand != nil {
		return t.InputPowerCBand
	}
	return nil
}

// GetInputPowerLBand returns the value of the InputPowerLBand struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field InputPowerLBand is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetInputPowerLBand() *OpticalAmplifier_Amplifier_InputPowerLBand {
	if t != nil && t.InputPowerLBand != nil {
		return t.InputPowerLBand
	}
	return nil
}

// GetInputPowerTotal returns the value of the InputPowerTotal struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field InputPowerTotal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetInputPowerTotal() *OpticalAmplifier_Amplifier_InputPowerTotal {
	if t != nil && t.InputPowerTotal != nil {
		return t.InputPowerTotal
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetLaserBiasCurrent() *OpticalAmplifier_Amplifier_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOpticalReturnLoss returns the value of the OpticalReturnLoss struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field OpticalReturnLoss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetOpticalReturnLoss() *OpticalAmplifier_Amplifier_OpticalReturnLoss {
	if t != nil && t.OpticalReturnLoss != nil {
		return t.OpticalReturnLoss
	}
	return nil
}

// GetOutputPowerCBand returns the value of the OutputPowerCBand struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field OutputPowerCBand is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetOutputPowerCBand() *OpticalAmplifier_Amplifier_OutputPowerCBand {
	if t != nil && t.OutputPowerCBand != nil {
		return t.OutputPowerCBand
	}
	return nil
}

// GetOutputPowerLBand returns the value of the OutputPowerLBand struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field OutputPowerLBand is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetOutputPowerLBand() *OpticalAmplifier_Amplifier_OutputPowerLBand {
	if t != nil && t.OutputPowerLBand != nil {
		return t.OutputPowerLBand
	}
	return nil
}

// GetOutputPowerTotal returns the value of the OutputPowerTotal struct pointer
// from OpticalAmplifier_Amplifier. If the receiver or the field OutputPowerTotal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_Amplifier) GetOutputPowerTotal() *OpticalAmplifier_Amplifier_OutputPowerTotal {
	if t != nil && t.OutputPowerTotal != nil {
		return t.OutputPowerTotal
	}
	return nil
}

// GetAmpMode retrieves the value of the leaf AmpMode from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmpMode is set, it can
// safely use t.GetAmpMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmpMode == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetAmpMode() E_OpticalAmplifier_OPTICAL_AMPLIFIER_MODE {
	if t == nil || t.AmpMode == 0 {
		return 0
	}
	return t.AmpMode
}

// GetComponent retrieves the value of the leaf Component from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Component is set, it can
// safely use t.GetComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Component == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetComponent() string {
	if t == nil || t.Component == nil {
		return ""
	}
	return *t.Component
}

// GetEgressPort retrieves the value of the leaf EgressPort from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPort is set, it can
// safely use t.GetEgressPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPort == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetEgressPort() string {
	if t == nil || t.EgressPort == nil {
		return ""
	}
	return *t.EgressPort
}

// GetEnabled retrieves the value of the leaf Enabled from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetFiberTypeProfile retrieves the value of the leaf FiberTypeProfile from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FiberTypeProfile is set, it can
// safely use t.GetFiberTypeProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FiberTypeProfile == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetFiberTypeProfile() E_OpticalAmplifier_FIBER_TYPE_PROFILE {
	if t == nil || t.FiberTypeProfile == 0 {
		return 0
	}
	return t.FiberTypeProfile
}

// GetGainRange retrieves the value of the leaf GainRange from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GainRange is set, it can
// safely use t.GetGainRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GainRange == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetGainRange() E_OpticalAmplifier_GAIN_RANGE {
	if t == nil || t.GainRange == 0 {
		return 0
	}
	return t.GainRange
}

// GetIngressPort retrieves the value of the leaf IngressPort from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressPort is set, it can
// safely use t.GetIngressPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressPort == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetIngressPort() string {
	if t == nil || t.IngressPort == nil {
		return ""
	}
	return *t.IngressPort
}

// GetMaxGain retrieves the value of the leaf MaxGain from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGain is set, it can
// safely use t.GetMaxGain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGain == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetMaxGain() float64 {
	if t == nil || t.MaxGain == nil {
		return 0.0
	}
	return *t.MaxGain
}

// GetMaxOutputPower retrieves the value of the leaf MaxOutputPower from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxOutputPower is set, it can
// safely use t.GetMaxOutputPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxOutputPower == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetMaxOutputPower() float64 {
	if t == nil || t.MaxOutputPower == nil {
		return 0.0
	}
	return *t.MaxOutputPower
}

// GetMinGain retrieves the value of the leaf MinGain from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinGain is set, it can
// safely use t.GetMinGain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinGain == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetMinGain() float64 {
	if t == nil || t.MinGain == nil {
		return 0.0
	}
	return *t.MinGain
}

// GetName retrieves the value of the leaf Name from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTargetGain retrieves the value of the leaf TargetGain from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetGain is set, it can
// safely use t.GetTargetGain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetGain == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetTargetGain() float64 {
	if t == nil || t.TargetGain == nil {
		return 0.0
	}
	return *t.TargetGain
}

// GetTargetGainTilt retrieves the value of the leaf TargetGainTilt from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetGainTilt is set, it can
// safely use t.GetTargetGainTilt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetGainTilt == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetTargetGainTilt() float64 {
	if t == nil || t.TargetGainTilt == nil {
		return 0.0
	}
	return *t.TargetGainTilt
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetOutputPower is set, it can
// safely use t.GetTargetOutputPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetOutputPower == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetType retrieves the value of the leaf Type from the OpticalAmplifier_Amplifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier) GetType() E_OpticalAmplifier_OPTICAL_AMPLIFIER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ActualGain.PopulateDefaults()
	t.ActualGainTilt.PopulateDefaults()
	t.InputPowerCBand.PopulateDefaults()
	t.InputPowerLBand.PopulateDefaults()
	t.InputPowerTotal.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.OpticalReturnLoss.PopulateDefaults()
	t.OutputPowerCBand.PopulateDefaults()
	t.OutputPowerLBand.PopulateDefaults()
	t.OutputPowerTotal.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpticalAmplifier_Amplifier struct, which is a YANG list entry.
func (t *OpticalAmplifier_Amplifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier.
func (*OpticalAmplifier_Amplifier) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_ActualGain represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_ActualGain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_ActualGain) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_ActualGain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGain) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_ActualGain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_ActualGain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_ActualGain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_ActualGain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_ActualGain) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_ActualGain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_ActualGain.
func (*OpticalAmplifier_Amplifier_ActualGain) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_ActualGainTilt represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_ActualGainTilt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_ActualGainTilt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_ActualGainTilt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_ActualGainTilt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_ActualGainTilt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_ActualGainTilt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_ActualGainTilt.
func (*OpticalAmplifier_Amplifier_ActualGainTilt) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_InputPowerCBand represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_InputPowerCBand implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_InputPowerCBand) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_InputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_InputPowerCBand
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_InputPowerCBand"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_InputPowerCBand) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_InputPowerCBand.
func (*OpticalAmplifier_Amplifier_InputPowerCBand) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_InputPowerLBand represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_InputPowerLBand implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_InputPowerLBand) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_InputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_InputPowerLBand
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_InputPowerLBand"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_InputPowerLBand) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_InputPowerLBand.
func (*OpticalAmplifier_Amplifier_InputPowerLBand) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_InputPowerTotal represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_InputPowerTotal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_InputPowerTotal) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_InputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_InputPowerTotal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_InputPowerTotal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_InputPowerTotal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_InputPowerTotal.
func (*OpticalAmplifier_Amplifier_InputPowerTotal) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_LaserBiasCurrent.
func (*OpticalAmplifier_Amplifier_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_OpticalReturnLoss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_OpticalReturnLoss) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_OpticalReturnLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_OpticalReturnLoss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_OpticalReturnLoss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_OpticalReturnLoss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_OpticalReturnLoss.
func (*OpticalAmplifier_Amplifier_OpticalReturnLoss) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_OutputPowerCBand represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_OutputPowerCBand implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_OutputPowerCBand) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_OutputPowerCBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_OutputPowerCBand
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_OutputPowerCBand"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_OutputPowerCBand) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_OutputPowerCBand.
func (*OpticalAmplifier_Amplifier_OutputPowerCBand) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_OutputPowerLBand represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_OutputPowerLBand implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_OutputPowerLBand) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_OutputPowerLBand
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_OutputPowerLBand
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_OutputPowerLBand"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_OutputPowerLBand) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_OutputPowerLBand.
func (*OpticalAmplifier_Amplifier_OutputPowerLBand) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_Amplifier_OutputPowerTotal represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_Amplifier_OutputPowerTotal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_Amplifier_OutputPowerTotal) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_Amplifier_OutputPowerTotal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_Amplifier_OutputPowerTotal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_Amplifier_OutputPowerTotal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_Amplifier_OutputPowerTotal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_Amplifier_OutputPowerTotal.
func (*OpticalAmplifier_Amplifier_OutputPowerTotal) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_SupervisoryChannel represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel YANG schema element.
type OpticalAmplifier_SupervisoryChannel struct {
	ΛMetadata         []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	InputPower        *OpticalAmplifier_SupervisoryChannel_InputPower       `path:"state/input-power" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛInputPower       []ygot.Annotation                                     `path:"state/@input-power" ygotAnnotation:"true"`
	Interface         *string                                               `path:"config/interface|interface" module:"openconfig-optical-amplifier/openconfig-optical-amplifier|openconfig-optical-amplifier"`
	ΛInterface        []ygot.Annotation                                     `path:"config/@interface|@interface" ygotAnnotation:"true"`
	LaserBiasCurrent  *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent `path:"state/laser-bias-current" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛLaserBiasCurrent []ygot.Annotation                                     `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	OutputFrequency   *uint64                                               `path:"state/output-frequency" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOutputFrequency  []ygot.Annotation                                     `path:"state/@output-frequency" ygotAnnotation:"true"`
	OutputPower       *OpticalAmplifier_SupervisoryChannel_OutputPower      `path:"state/output-power" module:"openconfig-optical-amplifier/openconfig-optical-amplifier"`
	ΛOutputPower      []ygot.Annotation                                     `path:"state/@output-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_SupervisoryChannel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_SupervisoryChannel) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_SupervisoryChannel) GetOrCreateInputPower() *OpticalAmplifier_SupervisoryChannel_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpticalAmplifier_SupervisoryChannel_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_SupervisoryChannel) GetOrCreateLaserBiasCurrent() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpticalAmplifier_SupervisoryChannel) GetOrCreateOutputPower() *OpticalAmplifier_SupervisoryChannel_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpticalAmplifier_SupervisoryChannel_OutputPower{}
	return t.OutputPower
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpticalAmplifier_SupervisoryChannel. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_SupervisoryChannel) GetInputPower() *OpticalAmplifier_SupervisoryChannel_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpticalAmplifier_SupervisoryChannel. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_SupervisoryChannel) GetLaserBiasCurrent() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpticalAmplifier_SupervisoryChannel. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpticalAmplifier_SupervisoryChannel) GetOutputPower() *OpticalAmplifier_SupervisoryChannel_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetInterface retrieves the value of the leaf Interface from the OpticalAmplifier_SupervisoryChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetOutputFrequency retrieves the value of the leaf OutputFrequency from the OpticalAmplifier_SupervisoryChannel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFrequency is set, it can
// safely use t.GetOutputFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFrequency == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel) GetOutputFrequency() uint64 {
	if t == nil || t.OutputFrequency == nil {
		return 0
	}
	return *t.OutputFrequency
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_SupervisoryChannel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_SupervisoryChannel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the OpticalAmplifier_SupervisoryChannel struct, which is a YANG list entry.
func (t *OpticalAmplifier_SupervisoryChannel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Interface == nil {
		return nil, fmt.Errorf("nil value for key Interface")
	}

	return map[string]interface{}{
		"interface": *t.Interface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_SupervisoryChannel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_SupervisoryChannel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_SupervisoryChannel.
func (*OpticalAmplifier_SupervisoryChannel) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_SupervisoryChannel_InputPower represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_SupervisoryChannel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_SupervisoryChannel_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_SupervisoryChannel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_SupervisoryChannel_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_SupervisoryChannel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_SupervisoryChannel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_SupervisoryChannel_InputPower.
func (*OpticalAmplifier_SupervisoryChannel_InputPower) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent.
func (*OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// OpticalAmplifier_SupervisoryChannel_OutputPower represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-optical-amplifier"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-optical-amplifier"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-optical-amplifier"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-optical-amplifier"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-optical-amplifier"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-optical-amplifier"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-optical-amplifier"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpticalAmplifier_SupervisoryChannel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpticalAmplifier_SupervisoryChannel_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpticalAmplifier_SupervisoryChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the OpticalAmplifier_SupervisoryChannel_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpticalAmplifier_SupervisoryChannel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpticalAmplifier_SupervisoryChannel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpticalAmplifier_SupervisoryChannel_OutputPower.
func (*OpticalAmplifier_SupervisoryChannel_OutputPower) ΛBelongingModule() string {
	return "openconfig-optical-amplifier"
}

// Probe represents the /openconfig-probes/probes/probe YANG schema element.
type Probe struct {
	ΛMetadata []ygot.Annotation      `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                  `path:"config/enabled" module:"openconfig-probes/openconfig-probes"`
	ΛEnabled  []ygot.Annotation      `path:"config/@enabled" ygotAnnotation:"true"`
	Name      *string                `path:"config/name|name" module:"openconfig-probes/openconfig-probes|openconfig-probes"`
	ΛName     []ygot.Annotation      `path:"config/@name|@name" ygotAnnotation:"true"`
	Test      map[string]*Probe_Test `path:"tests/test" module:"openconfig-probes/openconfig-probes"`
	ΛTest     []ygot.Annotation      `path:"tests/@test" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe) IsYANGGoStruct() {}

// NewTest creates a new entry in the Test list of the
// Probe struct. The keys of the list are populated from the input
// arguments.
func (t *Probe) NewTest(Name string) (*Probe_Test, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Test == nil {
		t.Test = make(map[string]*Probe_Test)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Test[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Test", key)
	}

	t.Test[key] = &Probe_Test{
		Name: &Name,
	}

	return t.Test[key], nil
}

// RenameTest renames an entry in the list Test within
// the Probe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Probe) RenameTest(oldK, newK string) error {
	if _, ok := t.Test[newK]; ok {
		return fmt.Errorf("key %v already exists in Test", newK)
	}

	e, ok := t.Test[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Test", oldK)
	}
	e.Name = &newK

	t.Test[newK] = e
	delete(t.Test, oldK)
	return nil
}

// GetOrCreateTest retrieves the value with the specified keys from
// the receiver Probe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Probe) GetOrCreateTest(Name string) *Probe_Test {

	key := Name

	if v, ok := t.Test[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTest(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTest got unexpected error: %v", err))
	}
	return v
}

// GetTest retrieves the value with the specified key from
// the Test map field of Probe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Probe) GetTest(Name string) *Probe_Test {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Test[key]; ok {
		return lm
	}
	return nil
}

// DeleteTest deletes the value with the specified keys from
// the receiver Probe. If there is no such element, the function
// is a no-op.
func (t *Probe) DeleteTest(Name string) {
	key := Name

	delete(t.Test, key)
}

// AppendTest appends the supplied Probe_Test struct to the
// list Test of Probe. If the key value(s) specified in
// the supplied Probe_Test already exist in the list, an error is
// returned.
func (t *Probe) AppendTest(v *Probe_Test) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Test == nil {
		t.Test = make(map[string]*Probe_Test)
	}

	if _, ok := t.Test[key]; ok {
		return fmt.Errorf("duplicate key for list Test %v", key)
	}

	t.Test[key] = v
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Probe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Probe) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the Probe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Probe) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Probe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	for _, e := range t.Test {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Probe struct, which is a YANG list entry.
func (t *Probe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe.
func (*Probe) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Probe_Test represents the /openconfig-probes/probes/probe/tests/test YANG schema element.
type Probe_Test struct {
	ΛMetadata    []ygot.Annotation      `path:"@" ygotAnnotation:"true"`
	Count        *uint64                `path:"config/count" module:"openconfig-probes/openconfig-probes"`
	ΛCount       []ygot.Annotation      `path:"config/@count" ygotAnnotation:"true"`
	Dscp         *uint8                 `path:"config/dscp" module:"openconfig-probes/openconfig-probes"`
	ΛDscp        []ygot.Annotation      `path:"config/@dscp" ygotAnnotation:"true"`
	Enabled      *bool                  `path:"config/enabled" module:"openconfig-probes/openconfig-probes"`
	ΛEnabled     []ygot.Annotation      `path:"config/@enabled" ygotAnnotation:"true"`
	HistorySize  *uint64                `path:"config/history-size" module:"openconfig-probes/openconfig-probes"`
	ΛHistorySize []ygot.Annotation      `path:"config/@history-size" ygotAnnotation:"true"`
	Interval     *uint64                `path:"config/interval" module:"openconfig-probes/openconfig-probes"`
	ΛInterval    []ygot.Annotation      `path:"config/@interval" ygotAnnotation:"true"`
	Name         *string                `path:"config/name|name" module:"openconfig-probes/openconfig-probes|openconfig-probes"`
	ΛName        []ygot.Annotation      `path:"config/@name|@name" ygotAnnotation:"true"`
	Results      *Probe_Test_Results    `path:"results" module:"openconfig-probes"`
	ΛResults     []ygot.Annotation      `path:"@results" ygotAnnotation:"true"`
	Source       *string                `path:"config/source" module:"openconfig-probes/openconfig-probes"`
	ΛSource      []ygot.Annotation      `path:"config/@source" ygotAnnotation:"true"`
	SourcePort   *uint16                `path:"config/source-port" module:"openconfig-probes/openconfig-probes"`
	ΛSourcePort  []ygot.Annotation      `path:"config/@source-port" ygotAnnotation:"true"`
	Target       *Probe_Test_Target     `path:"target" module:"openconfig-probes"`
	ΛTarget      []ygot.Annotation      `path:"@target" ygotAnnotation:"true"`
	TestType     E_ProbesTypes_TestType `path:"config/test-type" module:"openconfig-probes/openconfig-probes"`
	ΛTestType    []ygot.Annotation      `path:"config/@test-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe_Test implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe_Test) IsYANGGoStruct() {}

// GetOrCreateResults retrieves the value of the Results field
// or returns the existing field if it already exists.
func (t *Probe_Test) GetOrCreateResults() *Probe_Test_Results {
	if t.Results != nil {
		return t.Results
	}
	t.Results = &Probe_Test_Results{}
	return t.Results
}

// GetOrCreateTarget retrieves the value of the Target field
// or returns the existing field if it already exists.
func (t *Probe_Test) GetOrCreateTarget() *Probe_Test_Target {
	if t.Target != nil {
		return t.Target
	}
	t.Target = &Probe_Test_Target{}
	return t.Target
}

// GetResults returns the value of the Results struct pointer
// from Probe_Test. If the receiver or the field Results is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Probe_Test) GetResults() *Probe_Test_Results {
	if t != nil && t.Results != nil {
		return t.Results
	}
	return nil
}

// GetTarget returns the value of the Target struct pointer
// from Probe_Test. If the receiver or the field Target is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Probe_Test) GetTarget() *Probe_Test_Target {
	if t != nil && t.Target != nil {
		return t.Target
	}
	return nil
}

// GetCount retrieves the value of the leaf Count from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetCount() uint64 {
	if t == nil || t.Count == nil {
		return 0
	}
	return *t.Count
}

// GetDscp retrieves the value of the leaf Dscp from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetEnabled retrieves the value of the leaf Enabled from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHistorySize retrieves the value of the leaf HistorySize from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HistorySize is set, it can
// safely use t.GetHistorySize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HistorySize == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetHistorySize() uint64 {
	if t == nil || t.HistorySize == nil {
		return 0
	}
	return *t.HistorySize
}

// GetInterval retrieves the value of the leaf Interval from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetName retrieves the value of the leaf Name from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSource retrieves the value of the leaf Source from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetSourcePort() uint16 {
	if t == nil || t.SourcePort == nil {
		return 0
	}
	return *t.SourcePort
}

// GetTestType retrieves the value of the leaf TestType from the Probe_Test
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestType is set, it can
// safely use t.GetTestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestType == nil' before retrieving the leaf's value.
func (t *Probe_Test) GetTestType() E_ProbesTypes_TestType {
	if t == nil || t.TestType == 0 {
		return 0
	}
	return t.TestType
}

// PopulateDefaults recursively populates unset leaf fields in the Probe_Test
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe_Test) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	t.Results.PopulateDefaults()
	t.Target.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Probe_Test struct, which is a YANG list entry.
func (t *Probe_Test) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe_Test"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe_Test) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe_Test.
func (*Probe_Test) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Probe_Test_Results represents the /openconfig-probes/probes/probe/tests/test/results YANG schema element.
type Probe_Test_Results struct {
	ΛMetadata          []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	AvgDelay           *uint64                     `path:"state/avg-delay" module:"openconfig-probes/openconfig-probes"`
	ΛAvgDelay          []ygot.Annotation           `path:"state/@avg-delay" ygotAnnotation:"true"`
	Failed             *bool                       `path:"state/failed" module:"openconfig-probes/openconfig-probes"`
	ΛFailed            []ygot.Annotation           `path:"state/@failed" ygotAnnotation:"true"`
	History            *Probe_Test_Results_History `path:"history" module:"openconfig-probes"`
	ΛHistory           []ygot.Annotation           `path:"@history" ygotAnnotation:"true"`
	Jitter             *uint64                     `path:"state/jitter" module:"openconfig-probes/openconfig-probes"`
	ΛJitter            []ygot.Annotation           `path:"state/@jitter" ygotAnnotation:"true"`
	LastTestTimestamp  *uint64                     `path:"state/last-test-timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛLastTestTimestamp []ygot.Annotation           `path:"state/@last-test-timestamp" ygotAnnotation:"true"`
	LossPercentage     *uint8                      `path:"state/loss-percentage" module:"openconfig-probes/openconfig-probes"`
	ΛLossPercentage    []ygot.Annotation           `path:"state/@loss-percentage" ygotAnnotation:"true"`
	MaxDelay           *uint64                     `path:"state/max-delay" module:"openconfig-probes/openconfig-probes"`
	ΛMaxDelay          []ygot.Annotation           `path:"state/@max-delay" ygotAnnotation:"true"`
	MinDelay           *uint64                     `path:"state/min-delay" module:"openconfig-probes/openconfig-probes"`
	ΛMinDelay          []ygot.Annotation           `path:"state/@min-delay" ygotAnnotation:"true"`
	ProbesReceived     *uint64                     `path:"state/probes-received" module:"openconfig-probes/openconfig-probes"`
	ΛProbesReceived    []ygot.Annotation           `path:"state/@probes-received" ygotAnnotation:"true"`
	ProbesSent         *uint64                     `path:"state/probes-sent" module:"openconfig-probes/openconfig-probes"`
	ΛProbesSent        []ygot.Annotation           `path:"state/@probes-sent" ygotAnnotation:"true"`
	StartTimestamp     *uint64                     `path:"state/start-timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛStartTimestamp    []ygot.Annotation           `path:"state/@start-timestamp" ygotAnnotation:"true"`
	StddevDelay        *uint64                     `path:"state/stddev-delay" module:"openconfig-probes/openconfig-probes"`
	ΛStddevDelay       []ygot.Annotation           `path:"state/@stddev-delay" ygotAnnotation:"true"`
	TestDuration       *uint64                     `path:"state/test-duration" module:"openconfig-probes/openconfig-probes"`
	ΛTestDuration      []ygot.Annotation           `path:"state/@test-duration" ygotAnnotation:"true"`
	Timestamp          *uint64                     `path:"state/timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛTimestamp         []ygot.Annotation           `path:"state/@timestamp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe_Test_Results implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe_Test_Results) IsYANGGoStruct() {}

// GetOrCreateHistory retrieves the value of the History field
// or returns the existing field if it already exists.
func (t *Probe_Test_Results) GetOrCreateHistory() *Probe_Test_Results_History {
	if t.History != nil {
		return t.History
	}
	t.History = &Probe_Test_Results_History{}
	return t.History
}

// GetHistory returns the value of the History struct pointer
// from Probe_Test_Results. If the receiver or the field History is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Probe_Test_Results) GetHistory() *Probe_Test_Results_History {
	if t != nil && t.History != nil {
		return t.History
	}
	return nil
}

// GetAvgDelay retrieves the value of the leaf AvgDelay from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgDelay is set, it can
// safely use t.GetAvgDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetAvgDelay() uint64 {
	if t == nil || t.AvgDelay == nil {
		return 0
	}
	return *t.AvgDelay
}

// GetFailed retrieves the value of the leaf Failed from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Failed is set, it can
// safely use t.GetFailed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Failed == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetFailed() bool {
	if t == nil || t.Failed == nil {
		return false
	}
	return *t.Failed
}

// GetJitter retrieves the value of the leaf Jitter from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Jitter is set, it can
// safely use t.GetJitter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Jitter == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetJitter() uint64 {
	if t == nil || t.Jitter == nil {
		return 0
	}
	return *t.Jitter
}

// GetLastTestTimestamp retrieves the value of the leaf LastTestTimestamp from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTestTimestamp is set, it can
// safely use t.GetLastTestTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTestTimestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetLastTestTimestamp() uint64 {
	if t == nil || t.LastTestTimestamp == nil {
		return 0
	}
	return *t.LastTestTimestamp
}

// GetLossPercentage retrieves the value of the leaf LossPercentage from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossPercentage is set, it can
// safely use t.GetLossPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossPercentage == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetLossPercentage() uint8 {
	if t == nil || t.LossPercentage == nil {
		return 0
	}
	return *t.LossPercentage
}

// GetMaxDelay retrieves the value of the leaf MaxDelay from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDelay is set, it can
// safely use t.GetMaxDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetMaxDelay() uint64 {
	if t == nil || t.MaxDelay == nil {
		return 0
	}
	return *t.MaxDelay
}

// GetMinDelay retrieves the value of the leaf MinDelay from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDelay is set, it can
// safely use t.GetMinDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetMinDelay() uint64 {
	if t == nil || t.MinDelay == nil {
		return 0
	}
	return *t.MinDelay
}

// GetProbesReceived retrieves the value of the leaf ProbesReceived from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbesReceived is set, it can
// safely use t.GetProbesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbesReceived == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetProbesReceived() uint64 {
	if t == nil || t.ProbesReceived == nil {
		return 0
	}
	return *t.ProbesReceived
}

// GetProbesSent retrieves the value of the leaf ProbesSent from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbesSent is set, it can
// safely use t.GetProbesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbesSent == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetProbesSent() uint64 {
	if t == nil || t.ProbesSent == nil {
		return 0
	}
	return *t.ProbesSent
}

// GetStartTimestamp retrieves the value of the leaf StartTimestamp from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTimestamp is set, it can
// safely use t.GetStartTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTimestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetStartTimestamp() uint64 {
	if t == nil || t.StartTimestamp == nil {
		return 0
	}
	return *t.StartTimestamp
}

// GetStddevDelay retrieves the value of the leaf StddevDelay from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StddevDelay is set, it can
// safely use t.GetStddevDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StddevDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetStddevDelay() uint64 {
	if t == nil || t.StddevDelay == nil {
		return 0
	}
	return *t.StddevDelay
}

// GetTestDuration retrieves the value of the leaf TestDuration from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetTestDuration() uint64 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTimestamp retrieves the value of the leaf Timestamp from the Probe_Test_Results
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timestamp is set, it can
// safely use t.GetTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results) GetTimestamp() uint64 {
	if t == nil || t.Timestamp == nil {
		return 0
	}
	return *t.Timestamp
}

// PopulateDefaults recursively populates unset leaf fields in the Probe_Test_Results
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe_Test_Results) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.History.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe_Test_Results"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe_Test_Results) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe_Test_Results.
func (*Probe_Test_Results) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Probe_Test_Results_History represents the /openconfig-probes/probes/probe/tests/test/results/history YANG schema element.
type Probe_Test_Results_History struct {
	ΛMetadata []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Item      map[uint64]*Probe_Test_Results_History_Item `path:"items/item" module:"openconfig-probes/openconfig-probes"`
	ΛItem     []ygot.Annotation                           `path:"items/@item" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe_Test_Results_History implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe_Test_Results_History) IsYANGGoStruct() {}

// NewItem creates a new entry in the Item list of the
// Probe_Test_Results_History struct. The keys of the list are populated from the input
// arguments.
func (t *Probe_Test_Results_History) NewItem(Id uint64) (*Probe_Test_Results_History_Item, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Item == nil {
		t.Item = make(map[uint64]*Probe_Test_Results_History_Item)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Item[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Item", key)
	}

	t.Item[key] = &Probe_Test_Results_History_Item{
		Id: &Id,
	}

	return t.Item[key], nil
}

// RenameItem renames an entry in the list Item within
// the Probe_Test_Results_History struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Probe_Test_Results_History) RenameItem(oldK, newK uint64) error {
	if _, ok := t.Item[newK]; ok {
		return fmt.Errorf("key %v already exists in Item", newK)
	}

	e, ok := t.Item[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Item", oldK)
	}
	e.Id = &newK

	t.Item[newK] = e
	delete(t.Item, oldK)
	return nil
}

// GetOrCreateItem retrieves the value with the specified keys from
// the receiver Probe_Test_Results_History. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Probe_Test_Results_History) GetOrCreateItem(Id uint64) *Probe_Test_Results_History_Item {

	key := Id

	if v, ok := t.Item[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewItem(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateItem got unexpected error: %v", err))
	}
	return v
}

// GetItem retrieves the value with the specified key from
// the Item map field of Probe_Test_Results_History. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Probe_Test_Results_History) GetItem(Id uint64) *Probe_Test_Results_History_Item {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Item[key]; ok {
		return lm
	}
	return nil
}

// DeleteItem deletes the value with the specified keys from
// the receiver Probe_Test_Results_History. If there is no such element, the function
// is a no-op.
func (t *Probe_Test_Results_History) DeleteItem(Id uint64) {
	key := Id

	delete(t.Item, key)
}

// AppendItem appends the supplied Probe_Test_Results_History_Item struct to the
// list Item of Probe_Test_Results_History. If the key value(s) specified in
// the supplied Probe_Test_Results_History_Item already exist in the list, an error is
// returned.
func (t *Probe_Test_Results_History) AppendItem(v *Probe_Test_Results_History_Item) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Item == nil {
		t.Item = make(map[uint64]*Probe_Test_Results_History_Item)
	}

	if _, ok := t.Item[key]; ok {
		return fmt.Errorf("duplicate key for list Item %v", key)
	}

	t.Item[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Probe_Test_Results_History
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe_Test_Results_History) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Item {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results_History) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe_Test_Results_History"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results_History) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe_Test_Results_History) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe_Test_Results_History.
func (*Probe_Test_Results_History) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Probe_Test_Results_History_Item represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item YANG schema element.
type Probe_Test_Results_History_Item struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AvgDelay        *uint64           `path:"state/avg-delay" module:"openconfig-probes/openconfig-probes"`
	ΛAvgDelay       []ygot.Annotation `path:"state/@avg-delay" ygotAnnotation:"true"`
	EndTimestamp    *uint64           `path:"state/end-timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛEndTimestamp   []ygot.Annotation `path:"state/@end-timestamp" ygotAnnotation:"true"`
	Failed          *bool             `path:"state/failed" module:"openconfig-probes/openconfig-probes"`
	ΛFailed         []ygot.Annotation `path:"state/@failed" ygotAnnotation:"true"`
	Id              *uint64           `path:"state/id|id" module:"openconfig-probes/openconfig-probes|openconfig-probes"`
	ΛId             []ygot.Annotation `path:"state/@id|@id" ygotAnnotation:"true"`
	Jitter          *uint64           `path:"state/jitter" module:"openconfig-probes/openconfig-probes"`
	ΛJitter         []ygot.Annotation `path:"state/@jitter" ygotAnnotation:"true"`
	LossPercentage  *uint8            `path:"state/loss-percentage" module:"openconfig-probes/openconfig-probes"`
	ΛLossPercentage []ygot.Annotation `path:"state/@loss-percentage" ygotAnnotation:"true"`
	MaxDelay        *uint64           `path:"state/max-delay" module:"openconfig-probes/openconfig-probes"`
	ΛMaxDelay       []ygot.Annotation `path:"state/@max-delay" ygotAnnotation:"true"`
	MinDelay        *uint64           `path:"state/min-delay" module:"openconfig-probes/openconfig-probes"`
	ΛMinDelay       []ygot.Annotation `path:"state/@min-delay" ygotAnnotation:"true"`
	ProbesReceived  *uint64           `path:"state/probes-received" module:"openconfig-probes/openconfig-probes"`
	ΛProbesReceived []ygot.Annotation `path:"state/@probes-received" ygotAnnotation:"true"`
	ProbesSent      *uint64           `path:"state/probes-sent" module:"openconfig-probes/openconfig-probes"`
	ΛProbesSent     []ygot.Annotation `path:"state/@probes-sent" ygotAnnotation:"true"`
	StartTimestamp  *uint64           `path:"state/start-timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛStartTimestamp []ygot.Annotation `path:"state/@start-timestamp" ygotAnnotation:"true"`
	StddevDelay     *uint64           `path:"state/stddev-delay" module:"openconfig-probes/openconfig-probes"`
	ΛStddevDelay    []ygot.Annotation `path:"state/@stddev-delay" ygotAnnotation:"true"`
	TestDuration    *uint64           `path:"state/test-duration" module:"openconfig-probes/openconfig-probes"`
	ΛTestDuration   []ygot.Annotation `path:"state/@test-duration" ygotAnnotation:"true"`
	Timestamp       *uint64           `path:"state/timestamp" module:"openconfig-probes/openconfig-probes"`
	ΛTimestamp      []ygot.Annotation `path:"state/@timestamp" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe_Test_Results_History_Item implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe_Test_Results_History_Item) IsYANGGoStruct() {}

// GetAvgDelay retrieves the value of the leaf AvgDelay from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgDelay is set, it can
// safely use t.GetAvgDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetAvgDelay() uint64 {
	if t == nil || t.AvgDelay == nil {
		return 0
	}
	return *t.AvgDelay
}

// GetEndTimestamp retrieves the value of the leaf EndTimestamp from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTimestamp is set, it can
// safely use t.GetEndTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTimestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetEndTimestamp() uint64 {
	if t == nil || t.EndTimestamp == nil {
		return 0
	}
	return *t.EndTimestamp
}

// GetFailed retrieves the value of the leaf Failed from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Failed is set, it can
// safely use t.GetFailed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Failed == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetFailed() bool {
	if t == nil || t.Failed == nil {
		return false
	}
	return *t.Failed
}

// GetId retrieves the value of the leaf Id from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetId() uint64 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetJitter retrieves the value of the leaf Jitter from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Jitter is set, it can
// safely use t.GetJitter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Jitter == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetJitter() uint64 {
	if t == nil || t.Jitter == nil {
		return 0
	}
	return *t.Jitter
}

// GetLossPercentage retrieves the value of the leaf LossPercentage from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossPercentage is set, it can
// safely use t.GetLossPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossPercentage == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetLossPercentage() uint8 {
	if t == nil || t.LossPercentage == nil {
		return 0
	}
	return *t.LossPercentage
}

// GetMaxDelay retrieves the value of the leaf MaxDelay from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDelay is set, it can
// safely use t.GetMaxDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetMaxDelay() uint64 {
	if t == nil || t.MaxDelay == nil {
		return 0
	}
	return *t.MaxDelay
}

// GetMinDelay retrieves the value of the leaf MinDelay from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDelay is set, it can
// safely use t.GetMinDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetMinDelay() uint64 {
	if t == nil || t.MinDelay == nil {
		return 0
	}
	return *t.MinDelay
}

// GetProbesReceived retrieves the value of the leaf ProbesReceived from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbesReceived is set, it can
// safely use t.GetProbesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbesReceived == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetProbesReceived() uint64 {
	if t == nil || t.ProbesReceived == nil {
		return 0
	}
	return *t.ProbesReceived
}

// GetProbesSent retrieves the value of the leaf ProbesSent from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbesSent is set, it can
// safely use t.GetProbesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbesSent == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetProbesSent() uint64 {
	if t == nil || t.ProbesSent == nil {
		return 0
	}
	return *t.ProbesSent
}

// GetStartTimestamp retrieves the value of the leaf StartTimestamp from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTimestamp is set, it can
// safely use t.GetStartTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTimestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetStartTimestamp() uint64 {
	if t == nil || t.StartTimestamp == nil {
		return 0
	}
	return *t.StartTimestamp
}

// GetStddevDelay retrieves the value of the leaf StddevDelay from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StddevDelay is set, it can
// safely use t.GetStddevDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StddevDelay == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetStddevDelay() uint64 {
	if t == nil || t.StddevDelay == nil {
		return 0
	}
	return *t.StddevDelay
}

// GetTestDuration retrieves the value of the leaf TestDuration from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetTestDuration() uint64 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTimestamp retrieves the value of the leaf Timestamp from the Probe_Test_Results_History_Item
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timestamp is set, it can
// safely use t.GetTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timestamp == nil' before retrieving the leaf's value.
func (t *Probe_Test_Results_History_Item) GetTimestamp() uint64 {
	if t == nil || t.Timestamp == nil {
		return 0
	}
	return *t.Timestamp
}

// PopulateDefaults recursively populates unset leaf fields in the Probe_Test_Results_History_Item
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe_Test_Results_History_Item) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Probe_Test_Results_History_Item struct, which is a YANG list entry.
func (t *Probe_Test_Results_History_Item) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results_History_Item) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe_Test_Results_History_Item"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Results_History_Item) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe_Test_Results_History_Item) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe_Test_Results_History_Item.
func (*Probe_Test_Results_History_Item) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Probe_Test_Target represents the /openconfig-probes/probes/probe/tests/test/target YANG schema element.
type Probe_Test_Target struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"config/address" module:"openconfig-probes/openconfig-probes"`
	ΛAddress  []ygot.Annotation `path:"config/@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"config/port" module:"openconfig-probes/openconfig-probes"`
	ΛPort     []ygot.Annotation `path:"config/@port" ygotAnnotation:"true"`
	Url       *string           `path:"config/url" module:"openconfig-probes/openconfig-probes"`
	ΛUrl      []ygot.Annotation `path:"config/@url" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Probe_Test_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Probe_Test_Target) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Probe_Test_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Probe_Test_Target) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the Probe_Test_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *Probe_Test_Target) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetUrl retrieves the value of the leaf Url from the Probe_Test_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *Probe_Test_Target) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the Probe_Test_Target
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Probe_Test_Target) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Probe_Test_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Probe_Test_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Probe_Test_Target) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Probe_Test_Target.
func (*Probe_Test_Target) ΛBelongingModule() string {
	return "openconfig-probes"
}

// Qos represents the /openconfig-qos/qos YANG schema element.
type Qos struct {
	ΛMetadata                []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	BufferAllocationProfile  map[string]*Qos_BufferAllocationProfile `path:"buffer-allocation-profiles/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	ΛBufferAllocationProfile []ygot.Annotation                       `path:"buffer-allocation-profiles/@buffer-allocation-profile" ygotAnnotation:"true"`
	Classifier               map[string]*Qos_Classifier              `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	ΛClassifier              []ygot.Annotation                       `path:"classifiers/@classifier" ygotAnnotation:"true"`
	ForwardingGroup          map[string]*Qos_ForwardingGroup         `path:"forwarding-groups/forwarding-group" module:"openconfig-qos/openconfig-qos"`
	ΛForwardingGroup         []ygot.Annotation                       `path:"forwarding-groups/@forwarding-group" ygotAnnotation:"true"`
	Interface                map[string]*Qos_Interface               `path:"interfaces/interface" module:"openconfig-qos/openconfig-qos"`
	ΛInterface               []ygot.Annotation                       `path:"interfaces/@interface" ygotAnnotation:"true"`
	Queue                    map[string]*Qos_Queue                   `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue                   []ygot.Annotation                       `path:"queues/@queue" ygotAnnotation:"true"`
	QueueManagementProfile   map[string]*Qos_QueueManagementProfile  `path:"queue-management-profiles/queue-management-profile" module:"openconfig-qos/openconfig-qos"`
	ΛQueueManagementProfile  []ygot.Annotation                       `path:"queue-management-profiles/@queue-management-profile" ygotAnnotation:"true"`
	SchedulerPolicy          map[string]*Qos_SchedulerPolicy         `path:"scheduler-policies/scheduler-policy" module:"openconfig-qos/openconfig-qos"`
	ΛSchedulerPolicy         []ygot.Annotation                       `path:"scheduler-policies/@scheduler-policy" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos) IsYANGGoStruct() {}

// NewBufferAllocationProfile creates a new entry in the BufferAllocationProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewBufferAllocationProfile(Name string) (*Qos_BufferAllocationProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BufferAllocationProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BufferAllocationProfile", key)
	}

	t.BufferAllocationProfile[key] = &Qos_BufferAllocationProfile{
		Name: &Name,
	}

	return t.BufferAllocationProfile[key], nil
}

// RenameBufferAllocationProfile renames an entry in the list BufferAllocationProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameBufferAllocationProfile(oldK, newK string) error {
	if _, ok := t.BufferAllocationProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in BufferAllocationProfile", newK)
	}

	e, ok := t.BufferAllocationProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BufferAllocationProfile", oldK)
	}
	e.Name = &newK

	t.BufferAllocationProfile[newK] = e
	delete(t.BufferAllocationProfile, oldK)
	return nil
}

// GetOrCreateBufferAllocationProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	key := Name

	if v, ok := t.BufferAllocationProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBufferAllocationProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBufferAllocationProfile got unexpected error: %v", err))
	}
	return v
}

// GetBufferAllocationProfile retrieves the value with the specified key from
// the BufferAllocationProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BufferAllocationProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteBufferAllocationProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteBufferAllocationProfile(Name string) {
	key := Name

	delete(t.BufferAllocationProfile, key)
}

// AppendBufferAllocationProfile appends the supplied Qos_BufferAllocationProfile struct to the
// list BufferAllocationProfile of Qos. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendBufferAllocationProfile(v *Qos_BufferAllocationProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	if _, ok := t.BufferAllocationProfile[key]; ok {
		return fmt.Errorf("duplicate key for list BufferAllocationProfile %v", key)
	}

	t.BufferAllocationProfile[key] = v
	return nil
}

// NewClassifier creates a new entry in the Classifier list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewClassifier(Name string) (*Qos_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameClassifier(oldK, newK string) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Name = &newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateClassifier(Name string) *Qos_Classifier {

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetClassifier(Name string) *Qos_Classifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteClassifier(Name string) {
	key := Name

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Classifier struct to the
// list Classifier of Qos. If the key value(s) specified in
// the supplied Qos_Classifier already exist in the list, an error is
// returned.
func (t *Qos) AppendClassifier(v *Qos_Classifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewForwardingGroup creates a new entry in the ForwardingGroup list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewForwardingGroup(Name string) (*Qos_ForwardingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroup", key)
	}

	t.ForwardingGroup[key] = &Qos_ForwardingGroup{
		Name: &Name,
	}

	return t.ForwardingGroup[key], nil
}

// RenameForwardingGroup renames an entry in the list ForwardingGroup within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameForwardingGroup(oldK, newK string) error {
	if _, ok := t.ForwardingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroup", newK)
	}

	e, ok := t.ForwardingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroup", oldK)
	}
	e.Name = &newK

	t.ForwardingGroup[newK] = e
	delete(t.ForwardingGroup, oldK)
	return nil
}

// GetOrCreateForwardingGroup retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateForwardingGroup(Name string) *Qos_ForwardingGroup {

	key := Name

	if v, ok := t.ForwardingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroup got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroup retrieves the value with the specified key from
// the ForwardingGroup map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetForwardingGroup(Name string) *Qos_ForwardingGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroup deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteForwardingGroup(Name string) {
	key := Name

	delete(t.ForwardingGroup, key)
}

// AppendForwardingGroup appends the supplied Qos_ForwardingGroup struct to the
// list ForwardingGroup of Qos. If the key value(s) specified in
// the supplied Qos_ForwardingGroup already exist in the list, an error is
// returned.
func (t *Qos) AppendForwardingGroup(v *Qos_ForwardingGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	if _, ok := t.ForwardingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroup %v", key)
	}

	t.ForwardingGroup[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewInterface(InterfaceId string) (*Qos_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Qos_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateInterface(InterfaceId string) *Qos_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetInterface(InterfaceId string) *Qos_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Qos_Interface struct to the
// list Interface of Qos. If the key value(s) specified in
// the supplied Qos_Interface already exist in the list, an error is
// returned.
func (t *Qos) AppendInterface(v *Qos_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueue(Name string) (*Qos_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueue(Name string) *Qos_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueue(Name string) *Qos_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Queue struct to the
// list Queue of Qos. If the key value(s) specified in
// the supplied Qos_Queue already exist in the list, an error is
// returned.
func (t *Qos) AppendQueue(v *Qos_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewQueueManagementProfile creates a new entry in the QueueManagementProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueueManagementProfile(Name string) (*Qos_QueueManagementProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueManagementProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueManagementProfile", key)
	}

	t.QueueManagementProfile[key] = &Qos_QueueManagementProfile{
		Name: &Name,
	}

	return t.QueueManagementProfile[key], nil
}

// RenameQueueManagementProfile renames an entry in the list QueueManagementProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueueManagementProfile(oldK, newK string) error {
	if _, ok := t.QueueManagementProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueManagementProfile", newK)
	}

	e, ok := t.QueueManagementProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueManagementProfile", oldK)
	}
	e.Name = &newK

	t.QueueManagementProfile[newK] = e
	delete(t.QueueManagementProfile, oldK)
	return nil
}

// GetOrCreateQueueManagementProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	key := Name

	if v, ok := t.QueueManagementProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueManagementProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueManagementProfile got unexpected error: %v", err))
	}
	return v
}

// GetQueueManagementProfile retrieves the value with the specified key from
// the QueueManagementProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueManagementProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueManagementProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueueManagementProfile(Name string) {
	key := Name

	delete(t.QueueManagementProfile, key)
}

// AppendQueueManagementProfile appends the supplied Qos_QueueManagementProfile struct to the
// list QueueManagementProfile of Qos. If the key value(s) specified in
// the supplied Qos_QueueManagementProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendQueueManagementProfile(v *Qos_QueueManagementProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	if _, ok := t.QueueManagementProfile[key]; ok {
		return fmt.Errorf("duplicate key for list QueueManagementProfile %v", key)
	}

	t.QueueManagementProfile[key] = v
	return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewSchedulerPolicy(Name string) (*Qos_SchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &Qos_SchedulerPolicy{
		Name: &Name,
	}

	return t.SchedulerPolicy[key], nil
}

// RenameSchedulerPolicy renames an entry in the list SchedulerPolicy within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.SchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulerPolicy", newK)
	}

	e, ok := t.SchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.SchedulerPolicy[newK] = e
	delete(t.SchedulerPolicy, oldK)
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	key := Name

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulerPolicy deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteSchedulerPolicy(Name string) {
	key := Name

	delete(t.SchedulerPolicy, key)
}

// AppendSchedulerPolicy appends the supplied Qos_SchedulerPolicy struct to the
// list SchedulerPolicy of Qos. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy already exist in the list, an error is
// returned.
func (t *Qos) AppendSchedulerPolicy(v *Qos_SchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	if _, ok := t.SchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulerPolicy %v", key)
	}

	t.SchedulerPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BufferAllocationProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.ForwardingGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueManagementProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos.
func (*Qos) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfile struct {
	ΛMetadata []ygot.Annotation                             `path:"@" ygotAnnotation:"true"`
	Name      *string                                       `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName     []ygot.Annotation                             `path:"config/@name|@name" ygotAnnotation:"true"`
	Queue     map[string]*Qos_BufferAllocationProfile_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	ΛQueue    []ygot.Annotation                             `path:"queues/@queue" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_BufferAllocationProfile struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_BufferAllocationProfile) NewQueue(Name string) (*Qos_BufferAllocationProfile_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_BufferAllocationProfile_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_BufferAllocationProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_BufferAllocationProfile) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_BufferAllocationProfile) GetOrCreateQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_BufferAllocationProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_BufferAllocationProfile) GetQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If there is no such element, the function
// is a no-op.
func (t *Qos_BufferAllocationProfile) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_BufferAllocationProfile_Queue struct to the
// list Queue of Qos_BufferAllocationProfile. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile_Queue already exist in the list, an error is
// returned.
func (t *Qos_BufferAllocationProfile) AppendQueue(v *Qos_BufferAllocationProfile_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_BufferAllocationProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_BufferAllocationProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile.
func (*Qos_BufferAllocationProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile_Queue represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_Queue struct {
	ΛMetadata                        []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	DedicatedBuffer                  *uint64                        `path:"config/dedicated-buffer" module:"openconfig-qos/openconfig-qos"`
	ΛDedicatedBuffer                 []ygot.Annotation              `path:"config/@dedicated-buffer" ygotAnnotation:"true"`
	DedicatedBufferTemporal          *uint64                        `path:"config/dedicated-buffer-temporal" module:"openconfig-qos/openconfig-qos"`
	ΛDedicatedBufferTemporal         []ygot.Annotation              `path:"config/@dedicated-buffer-temporal" ygotAnnotation:"true"`
	DynamicLimitScalingFactor        *int32                         `path:"config/dynamic-limit-scaling-factor" module:"openconfig-qos/openconfig-qos"`
	ΛDynamicLimitScalingFactor       []ygot.Annotation              `path:"config/@dynamic-limit-scaling-factor" ygotAnnotation:"true"`
	Name                             *string                        `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName                            []ygot.Annotation              `path:"config/@name|@name" ygotAnnotation:"true"`
	SharedBufferLimitType            E_Qos_SHARED_BUFFER_LIMIT_TYPE `path:"config/shared-buffer-limit-type" module:"openconfig-qos/openconfig-qos"`
	ΛSharedBufferLimitType           []ygot.Annotation              `path:"config/@shared-buffer-limit-type" ygotAnnotation:"true"`
	StaticSharedBufferLimit          *uint32                        `path:"config/static-shared-buffer-limit" module:"openconfig-qos/openconfig-qos"`
	ΛStaticSharedBufferLimit         []ygot.Annotation              `path:"config/@static-shared-buffer-limit" ygotAnnotation:"true"`
	StaticSharedBufferLimitTemporal  *uint32                        `path:"config/static-shared-buffer-limit-temporal" module:"openconfig-qos/openconfig-qos"`
	ΛStaticSharedBufferLimitTemporal []ygot.Annotation              `path:"config/@static-shared-buffer-limit-temporal" ygotAnnotation:"true"`
	UseSharedBuffer                  *bool                          `path:"config/use-shared-buffer" module:"openconfig-qos/openconfig-qos"`
	ΛUseSharedBuffer                 []ygot.Annotation              `path:"config/@use-shared-buffer" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile_Queue) IsYANGGoStruct() {}

// GetDedicatedBuffer retrieves the value of the leaf DedicatedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DedicatedBuffer is set, it can
// safely use t.GetDedicatedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DedicatedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDedicatedBuffer() uint64 {
	if t == nil || t.DedicatedBuffer == nil {
		return 0
	}
	return *t.DedicatedBuffer
}

// GetDedicatedBufferTemporal retrieves the value of the leaf DedicatedBufferTemporal from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DedicatedBufferTemporal is set, it can
// safely use t.GetDedicatedBufferTemporal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DedicatedBufferTemporal == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDedicatedBufferTemporal() uint64 {
	if t == nil || t.DedicatedBufferTemporal == nil {
		return 0
	}
	return *t.DedicatedBufferTemporal
}

// GetDynamicLimitScalingFactor retrieves the value of the leaf DynamicLimitScalingFactor from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLimitScalingFactor is set, it can
// safely use t.GetDynamicLimitScalingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLimitScalingFactor == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDynamicLimitScalingFactor() int32 {
	if t == nil || t.DynamicLimitScalingFactor == nil {
		return 0
	}
	return *t.DynamicLimitScalingFactor
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSharedBufferLimitType retrieves the value of the leaf SharedBufferLimitType from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedBufferLimitType is set, it can
// safely use t.GetSharedBufferLimitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedBufferLimitType == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetSharedBufferLimitType() E_Qos_SHARED_BUFFER_LIMIT_TYPE {
	if t == nil || t.SharedBufferLimitType == 0 {
		return 0
	}
	return t.SharedBufferLimitType
}

// GetStaticSharedBufferLimit retrieves the value of the leaf StaticSharedBufferLimit from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticSharedBufferLimit is set, it can
// safely use t.GetStaticSharedBufferLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticSharedBufferLimit == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetStaticSharedBufferLimit() uint32 {
	if t == nil || t.StaticSharedBufferLimit == nil {
		return 0
	}
	return *t.StaticSharedBufferLimit
}

// GetStaticSharedBufferLimitTemporal retrieves the value of the leaf StaticSharedBufferLimitTemporal from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticSharedBufferLimitTemporal is set, it can
// safely use t.GetStaticSharedBufferLimitTemporal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticSharedBufferLimitTemporal == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetStaticSharedBufferLimitTemporal() uint32 {
	if t == nil || t.StaticSharedBufferLimitTemporal == nil {
		return 0
	}
	return *t.StaticSharedBufferLimitTemporal
}

// GetUseSharedBuffer retrieves the value of the leaf UseSharedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSharedBuffer is set, it can
// safely use t.GetUseSharedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSharedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetUseSharedBuffer() bool {
	if t == nil || t.UseSharedBuffer == nil {
		return false
	}
	return *t.UseSharedBuffer
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_BufferAllocationProfile_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_BufferAllocationProfile_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile_Queue struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile_Queue.
func (*Qos_BufferAllocationProfile_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_Classifier struct {
	ΛMetadata []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Name      *string                         `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛName     []ygot.Annotation               `path:"config/@name|@name" ygotAnnotation:"true"`
	Term      map[string]*Qos_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	ΛTerm     []ygot.Annotation               `path:"terms/@term" ygotAnnotation:"true"`
	Type      E_Qos_Classifier_Type           `path:"config/type" module:"openconfig-qos/openconfig-qos"`
	ΛType     []ygot.Annotation               `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Classifier) NewTerm(Id string) (*Qos_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Classifier) GetOrCreateTerm(Id string) *Qos_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Classifier) GetTerm(Id string) *Qos_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Classifier_Term struct to the
// list Term of Qos_Classifier. If the key value(s) specified in
// the supplied Qos_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Classifier) AppendTerm(v *Qos_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetType() E_Qos_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Term {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Qos_Classifier struct, which is a YANG list entry.
func (t *Qos_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier.
func (*Qos_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_Term struct {
	ΛMetadata   []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Actions     *Qos_Classifier_Term_Actions    `path:"actions" module:"openconfig-qos"`
	ΛActions    []ygot.Annotation               `path:"@actions" ygotAnnotation:"true"`
	Conditions  *Qos_Classifier_Term_Conditions `path:"conditions" module:"openconfig-qos"`
	ΛConditions []ygot.Annotation               `path:"@conditions" ygotAnnotation:"true"`
	Id          *string                         `path:"config/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	ΛId         []ygot.Annotation               `path:"config/@id|@id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateActions() *Qos_Classifier_Term_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Qos_Classifier_Term_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateConditions() *Qos_Classifier_Term_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &Qos_Classifier_Term_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetActions() *Qos_Classifier_Term_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetConditions() *Qos_Classifier_Term_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Actions.PopulateDefaults()
	t.Conditions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Qos_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term.
func (*Qos_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_Actions struct {
	ΛMetadata    []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	Remark       *Qos_Classifier_Term_Actions_Remark `path:"remark" module:"openconfig-qos"`
	ΛRemark      []ygot.Annotation                   `path:"@remark" ygotAnnotation:"true"`
	TargetGroup  *string                             `path:"config/target-group" module:"openconfig-qos/openconfig-qos"`
	ΛTargetGroup []ygot.Annotation                   `path:"config/@target-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions) IsYANGGoStruct() {}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Actions) GetOrCreateRemark() *Qos_Classifier_Term_Actions_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &Qos_Classifier_Term_Actions_Remark{}
	return t.Remark
}

// GetRemark returns the value of the Remark struct pointer
// from Qos_Classifier_Term_Actions. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Actions) GetRemark() *Qos_Classifier_Term_Actions_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetTargetGroup retrieves the value of the leaf TargetGroup from the Qos_Classifier_Term_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetGroup is set, it can
// safely use t.GetTargetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetGroup == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions) GetTargetGroup() string {
	if t == nil || t.TargetGroup == nil {
		return ""
	}
	return *t.TargetGroup
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Actions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Actions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Remark.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions.
func (*Qos_Classifier_Term_Actions) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions_Remark represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_Remark struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	SetDot1P   *uint8            `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos"`
	ΛSetDot1P  []ygot.Annotation `path:"config/@set-dot1p" ygotAnnotation:"true"`
	SetDscp    *uint8            `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos"`
	ΛSetDscp   []ygot.Annotation `path:"config/@set-dscp" ygotAnnotation:"true"`
	SetMplsTc  *uint8            `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos"`
	ΛSetMplsTc []ygot.Annotation `path:"config/@set-mpls-tc" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions_Remark) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Actions_Remark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Actions_Remark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions_Remark.
func (*Qos_Classifier_Term_Actions_Remark) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_Conditions struct {
	ΛMetadata  []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Ipv4       *Qos_Classifier_Term_Conditions_Ipv4      `path:"ipv4" module:"openconfig-qos"`
	ΛIpv4      []ygot.Annotation                         `path:"@ipv4" ygotAnnotation:"true"`
	Ipv6       *Qos_Classifier_Term_Conditions_Ipv6      `path:"ipv6" module:"openconfig-qos"`
	ΛIpv6      []ygot.Annotation                         `path:"@ipv6" ygotAnnotation:"true"`
	L2         *Qos_Classifier_Term_Conditions_L2        `path:"l2" module:"openconfig-qos"`
	ΛL2        []ygot.Annotation                         `path:"@l2" ygotAnnotation:"true"`
	Mpls       *Qos_Classifier_Term_Conditions_Mpls      `path:"mpls" module:"openconfig-qos"`
	ΛMpls      []ygot.Annotation                         `path:"@mpls" ygotAnnotation:"true"`
	Transport  *Qos_Classifier_Term_Conditions_Transport `path:"transport" module:"openconfig-qos"`
	ΛTransport []ygot.Annotation                         `path:"@transport" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Qos_Classifier_Term_Conditions_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Qos_Classifier_Term_Conditions_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateL2() *Qos_Classifier_Term_Conditions_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Qos_Classifier_Term_Conditions_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Qos_Classifier_Term_Conditions_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Qos_Classifier_Term_Conditions_Transport{}
	return t.Transport
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetL2() *Qos_Classifier_Term_Conditions_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Qos_Classifier_Term_Conditions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Qos_Classifier_Term_Conditions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions.
func (*Qos_Classifier_Term_Conditions) ΛBelongingModule() string {
	return "openconfig-qos"
}
