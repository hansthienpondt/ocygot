/*
Package ocygot is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_OpticalChannel_ModulatorBiasXPhase represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-x-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasXPhase struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasXPhase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasXPhase) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasXPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasXPhase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasXPhase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasXPhase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasXPhase.
func (*Component_OpticalChannel_ModulatorBiasXPhase) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulatorBiasXi represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xi YANG schema element.
type Component_OpticalChannel_ModulatorBiasXi struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasXi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasXi) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasXi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXi) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasXi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasXi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasXi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasXi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasXi.
func (*Component_OpticalChannel_ModulatorBiasXi) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulatorBiasXq represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-xq YANG schema element.
type Component_OpticalChannel_ModulatorBiasXq struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasXq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasXq) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasXq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasXq) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasXq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasXq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasXq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasXq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasXq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasXq.
func (*Component_OpticalChannel_ModulatorBiasXq) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulatorBiasYPhase represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-y-phase YANG schema element.
type Component_OpticalChannel_ModulatorBiasYPhase struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasYPhase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasYPhase) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasYPhase
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasYPhase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasYPhase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasYPhase) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasYPhase.
func (*Component_OpticalChannel_ModulatorBiasYPhase) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulatorBiasYi represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yi YANG schema element.
type Component_OpticalChannel_ModulatorBiasYi struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasYi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasYi) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasYi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYi) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasYi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasYi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasYi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasYi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasYi.
func (*Component_OpticalChannel_ModulatorBiasYi) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_ModulatorBiasYq represents the /openconfig-platform/components/component/optical-channel/state/modulator-bias-yq YANG schema element.
type Component_OpticalChannel_ModulatorBiasYq struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_ModulatorBiasYq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_ModulatorBiasYq) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_ModulatorBiasYq
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_ModulatorBiasYq) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_ModulatorBiasYq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_ModulatorBiasYq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_ModulatorBiasYq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_ModulatorBiasYq) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_ModulatorBiasYq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_ModulatorBiasYq.
func (*Component_OpticalChannel_ModulatorBiasYq) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_Osnr represents the /openconfig-platform/components/component/optical-channel/state/osnr YANG schema element.
type Component_OpticalChannel_Osnr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_Osnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_Osnr) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_Osnr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_Osnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_Osnr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_Osnr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_Osnr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_Osnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_Osnr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_Osnr) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_Osnr.
func (*Component_OpticalChannel_Osnr) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_OutputPower represents the /openconfig-platform/components/component/optical-channel/state/output-power YANG schema element.
type Component_OpticalChannel_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_OutputPower.
func (*Component_OpticalChannel_OutputPower) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_PolarizationDependentLoss represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss YANG schema element.
type Component_OpticalChannel_PolarizationDependentLoss struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_PolarizationDependentLoss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_PolarizationDependentLoss) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_PolarizationDependentLoss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationDependentLoss) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_PolarizationDependentLoss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_PolarizationDependentLoss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PolarizationDependentLoss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_PolarizationDependentLoss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PolarizationDependentLoss) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_PolarizationDependentLoss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_PolarizationDependentLoss.
func (*Component_OpticalChannel_PolarizationDependentLoss) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_PolarizationModeDispersion represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_PolarizationModeDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_PolarizationModeDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_PolarizationModeDispersion) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_PolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PolarizationModeDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_PolarizationModeDispersion
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_PolarizationModeDispersion) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PolarizationModeDispersion) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_PolarizationModeDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PolarizationModeDispersion) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_PolarizationModeDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_PolarizationModeDispersion.
func (*Component_OpticalChannel_PolarizationModeDispersion) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_PostFecBer represents the /openconfig-platform/components/component/optical-channel/state/post-fec-ber YANG schema element.
type Component_OpticalChannel_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_PostFecBer.
func (*Component_OpticalChannel_PostFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_PreFecBer represents the /openconfig-platform/components/component/optical-channel/state/pre-fec-ber YANG schema element.
type Component_OpticalChannel_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_PreFecBer.
func (*Component_OpticalChannel_PreFecBer) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_QValue represents the /openconfig-platform/components/component/optical-channel/state/q-value YANG schema element.
type Component_OpticalChannel_QValue struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_QValue) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_QValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_QValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_QValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_QValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_QValue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_QValue.
func (*Component_OpticalChannel_QValue) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_SecondOrderPolarizationModeDispersion represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion YANG schema element.
type Component_OpticalChannel_SecondOrderPolarizationModeDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_SecondOrderPolarizationModeDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_SecondOrderPolarizationModeDispersion) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_SecondOrderPolarizationModeDispersion
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_SecondOrderPolarizationModeDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_SecondOrderPolarizationModeDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_SecondOrderPolarizationModeDispersion.
func (*Component_OpticalChannel_SecondOrderPolarizationModeDispersion) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_OpticalChannel_SopRoc represents the /openconfig-platform/components/component/optical-channel/state/sop-roc YANG schema element.
type Component_OpticalChannel_SopRoc struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_OpticalChannel_SopRoc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_OpticalChannel_SopRoc) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_OpticalChannel_SopRoc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_OpticalChannel_SopRoc) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_OpticalChannel_SopRoc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_OpticalChannel_SopRoc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_SopRoc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_OpticalChannel_SopRoc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_OpticalChannel_SopRoc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_OpticalChannel_SopRoc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_OpticalChannel_SopRoc.
func (*Component_OpticalChannel_SopRoc) ΛBelongingModule() string {
	return "openconfig-terminal-device"
}

// Component_Pcie represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_Pcie struct {
	ΛMetadata          []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	CorrectableErrors  *Component_Pcie_CorrectableErrors `path:"correctable-errors" module:"openconfig-platform"`
	ΛCorrectableErrors []ygot.Annotation                 `path:"@correctable-errors" ygotAnnotation:"true"`
	FatalErrors        *Component_Pcie_FatalErrors       `path:"fatal-errors" module:"openconfig-platform"`
	ΛFatalErrors       []ygot.Annotation                 `path:"@fatal-errors" ygotAnnotation:"true"`
	NonFatalErrors     *Component_Pcie_NonFatalErrors    `path:"non-fatal-errors" module:"openconfig-platform"`
	ΛNonFatalErrors    []ygot.Annotation                 `path:"@non-fatal-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Pcie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie) IsYANGGoStruct() {}

// GetOrCreateCorrectableErrors retrieves the value of the CorrectableErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateCorrectableErrors() *Component_Pcie_CorrectableErrors {
	if t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	t.CorrectableErrors = &Component_Pcie_CorrectableErrors{}
	return t.CorrectableErrors
}

// GetOrCreateFatalErrors retrieves the value of the FatalErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateFatalErrors() *Component_Pcie_FatalErrors {
	if t.FatalErrors != nil {
		return t.FatalErrors
	}
	t.FatalErrors = &Component_Pcie_FatalErrors{}
	return t.FatalErrors
}

// GetOrCreateNonFatalErrors retrieves the value of the NonFatalErrors field
// or returns the existing field if it already exists.
func (t *Component_Pcie) GetOrCreateNonFatalErrors() *Component_Pcie_NonFatalErrors {
	if t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	t.NonFatalErrors = &Component_Pcie_NonFatalErrors{}
	return t.NonFatalErrors
}

// GetCorrectableErrors returns the value of the CorrectableErrors struct pointer
// from Component_Pcie. If the receiver or the field CorrectableErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetCorrectableErrors() *Component_Pcie_CorrectableErrors {
	if t != nil && t.CorrectableErrors != nil {
		return t.CorrectableErrors
	}
	return nil
}

// GetFatalErrors returns the value of the FatalErrors struct pointer
// from Component_Pcie. If the receiver or the field FatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetFatalErrors() *Component_Pcie_FatalErrors {
	if t != nil && t.FatalErrors != nil {
		return t.FatalErrors
	}
	return nil
}

// GetNonFatalErrors returns the value of the NonFatalErrors struct pointer
// from Component_Pcie. If the receiver or the field NonFatalErrors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Pcie) GetNonFatalErrors() *Component_Pcie_NonFatalErrors {
	if t != nil && t.NonFatalErrors != nil {
		return t.NonFatalErrors
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CorrectableErrors.PopulateDefaults()
	t.FatalErrors.PopulateDefaults()
	t.NonFatalErrors.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie.
func (*Component_Pcie) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_CorrectableErrors represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrors struct {
	ΛMetadata               []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdvisoryNonFatalErrors  *uint64           `path:"advisory-non-fatal-errors" module:"openconfig-platform"`
	ΛAdvisoryNonFatalErrors []ygot.Annotation `path:"@advisory-non-fatal-errors" ygotAnnotation:"true"`
	BadDllpErrors           *uint64           `path:"bad-dllp-errors" module:"openconfig-platform"`
	ΛBadDllpErrors          []ygot.Annotation `path:"@bad-dllp-errors" ygotAnnotation:"true"`
	BadTlpErrors            *uint64           `path:"bad-tlp-errors" module:"openconfig-platform"`
	ΛBadTlpErrors           []ygot.Annotation `path:"@bad-tlp-errors" ygotAnnotation:"true"`
	HdrLogOverflowErrors    *uint64           `path:"hdr-log-overflow-errors" module:"openconfig-platform"`
	ΛHdrLogOverflowErrors   []ygot.Annotation `path:"@hdr-log-overflow-errors" ygotAnnotation:"true"`
	InternalErrors          *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors         []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	ReceiverErrors          *uint64           `path:"receiver-errors" module:"openconfig-platform"`
	ΛReceiverErrors         []ygot.Annotation `path:"@receiver-errors" ygotAnnotation:"true"`
	RelayRolloverErrors     *uint64           `path:"relay-rollover-errors" module:"openconfig-platform"`
	ΛRelayRolloverErrors    []ygot.Annotation `path:"@relay-rollover-errors" ygotAnnotation:"true"`
	ReplayTimeoutErrors     *uint64           `path:"replay-timeout-errors" module:"openconfig-platform"`
	ΛReplayTimeoutErrors    []ygot.Annotation `path:"@replay-timeout-errors" ygotAnnotation:"true"`
	TotalErrors             *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors            []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Pcie_CorrectableErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_CorrectableErrors) IsYANGGoStruct() {}

// GetAdvisoryNonFatalErrors retrieves the value of the leaf AdvisoryNonFatalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvisoryNonFatalErrors is set, it can
// safely use t.GetAdvisoryNonFatalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvisoryNonFatalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetAdvisoryNonFatalErrors() uint64 {
	if t == nil || t.AdvisoryNonFatalErrors == nil {
		return 0
	}
	return *t.AdvisoryNonFatalErrors
}

// GetBadDllpErrors retrieves the value of the leaf BadDllpErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadDllpErrors is set, it can
// safely use t.GetBadDllpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadDllpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetBadDllpErrors() uint64 {
	if t == nil || t.BadDllpErrors == nil {
		return 0
	}
	return *t.BadDllpErrors
}

// GetBadTlpErrors retrieves the value of the leaf BadTlpErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BadTlpErrors is set, it can
// safely use t.GetBadTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BadTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetBadTlpErrors() uint64 {
	if t == nil || t.BadTlpErrors == nil {
		return 0
	}
	return *t.BadTlpErrors
}

// GetHdrLogOverflowErrors retrieves the value of the leaf HdrLogOverflowErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HdrLogOverflowErrors is set, it can
// safely use t.GetHdrLogOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HdrLogOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetHdrLogOverflowErrors() uint64 {
	if t == nil || t.HdrLogOverflowErrors == nil {
		return 0
	}
	return *t.HdrLogOverflowErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetReceiverErrors retrieves the value of the leaf ReceiverErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverErrors is set, it can
// safely use t.GetReceiverErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetReceiverErrors() uint64 {
	if t == nil || t.ReceiverErrors == nil {
		return 0
	}
	return *t.ReceiverErrors
}

// GetRelayRolloverErrors retrieves the value of the leaf RelayRolloverErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayRolloverErrors is set, it can
// safely use t.GetRelayRolloverErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayRolloverErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetRelayRolloverErrors() uint64 {
	if t == nil || t.RelayRolloverErrors == nil {
		return 0
	}
	return *t.RelayRolloverErrors
}

// GetReplayTimeoutErrors retrieves the value of the leaf ReplayTimeoutErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayTimeoutErrors is set, it can
// safely use t.GetReplayTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetReplayTimeoutErrors() uint64 {
	if t == nil || t.ReplayTimeoutErrors == nil {
		return 0
	}
	return *t.ReplayTimeoutErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_CorrectableErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_CorrectableErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_CorrectableErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_CorrectableErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_CorrectableErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_CorrectableErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_CorrectableErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_CorrectableErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_CorrectableErrors.
func (*Component_Pcie_CorrectableErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_FatalErrors represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Pcie_FatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_FatalErrors) IsYANGGoStruct() {}

// GetAcsViolationErrors retrieves the value of the leaf AcsViolationErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcsViolationErrors is set, it can
// safely use t.GetAcsViolationErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcsViolationErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetAcsViolationErrors() uint64 {
	if t == nil || t.AcsViolationErrors == nil {
		return 0
	}
	return *t.AcsViolationErrors
}

// GetAtomicOpBlockedErrors retrieves the value of the leaf AtomicOpBlockedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicOpBlockedErrors is set, it can
// safely use t.GetAtomicOpBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicOpBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetAtomicOpBlockedErrors() uint64 {
	if t == nil || t.AtomicOpBlockedErrors == nil {
		return 0
	}
	return *t.AtomicOpBlockedErrors
}

// GetBlockedTlpErrors retrieves the value of the leaf BlockedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockedTlpErrors is set, it can
// safely use t.GetBlockedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetBlockedTlpErrors() uint64 {
	if t == nil || t.BlockedTlpErrors == nil {
		return 0
	}
	return *t.BlockedTlpErrors
}

// GetCompletionAbortErrors retrieves the value of the leaf CompletionAbortErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionAbortErrors is set, it can
// safely use t.GetCompletionAbortErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionAbortErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetCompletionAbortErrors() uint64 {
	if t == nil || t.CompletionAbortErrors == nil {
		return 0
	}
	return *t.CompletionAbortErrors
}

// GetCompletionTimeoutErrors retrieves the value of the leaf CompletionTimeoutErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionTimeoutErrors is set, it can
// safely use t.GetCompletionTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetCompletionTimeoutErrors() uint64 {
	if t == nil || t.CompletionTimeoutErrors == nil {
		return 0
	}
	return *t.CompletionTimeoutErrors
}

// GetDataLinkErrors retrieves the value of the leaf DataLinkErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataLinkErrors is set, it can
// safely use t.GetDataLinkErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataLinkErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetDataLinkErrors() uint64 {
	if t == nil || t.DataLinkErrors == nil {
		return 0
	}
	return *t.DataLinkErrors
}

// GetEcrcErrors retrieves the value of the leaf EcrcErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcrcErrors is set, it can
// safely use t.GetEcrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcrcErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetEcrcErrors() uint64 {
	if t == nil || t.EcrcErrors == nil {
		return 0
	}
	return *t.EcrcErrors
}

// GetFlowControlProtocolErrors retrieves the value of the leaf FlowControlProtocolErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowControlProtocolErrors is set, it can
// safely use t.GetFlowControlProtocolErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowControlProtocolErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetFlowControlProtocolErrors() uint64 {
	if t == nil || t.FlowControlProtocolErrors == nil {
		return 0
	}
	return *t.FlowControlProtocolErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetMalformedTlpErrors retrieves the value of the leaf MalformedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedTlpErrors is set, it can
// safely use t.GetMalformedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetMalformedTlpErrors() uint64 {
	if t == nil || t.MalformedTlpErrors == nil {
		return 0
	}
	return *t.MalformedTlpErrors
}

// GetPoisonedTlpErrors retrieves the value of the leaf PoisonedTlpErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoisonedTlpErrors is set, it can
// safely use t.GetPoisonedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoisonedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetPoisonedTlpErrors() uint64 {
	if t == nil || t.PoisonedTlpErrors == nil {
		return 0
	}
	return *t.PoisonedTlpErrors
}

// GetReceiverOverflowErrors retrieves the value of the leaf ReceiverOverflowErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverOverflowErrors is set, it can
// safely use t.GetReceiverOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetReceiverOverflowErrors() uint64 {
	if t == nil || t.ReceiverOverflowErrors == nil {
		return 0
	}
	return *t.ReceiverOverflowErrors
}

// GetSurpriseDownErrors retrieves the value of the leaf SurpriseDownErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SurpriseDownErrors is set, it can
// safely use t.GetSurpriseDownErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SurpriseDownErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetSurpriseDownErrors() uint64 {
	if t == nil || t.SurpriseDownErrors == nil {
		return 0
	}
	return *t.SurpriseDownErrors
}

// GetTlpPrefixBlockedErrors retrieves the value of the leaf TlpPrefixBlockedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlpPrefixBlockedErrors is set, it can
// safely use t.GetTlpPrefixBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlpPrefixBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetTlpPrefixBlockedErrors() uint64 {
	if t == nil || t.TlpPrefixBlockedErrors == nil {
		return 0
	}
	return *t.TlpPrefixBlockedErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// GetUndefinedErrors retrieves the value of the leaf UndefinedErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UndefinedErrors is set, it can
// safely use t.GetUndefinedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UndefinedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUndefinedErrors() uint64 {
	if t == nil || t.UndefinedErrors == nil {
		return 0
	}
	return *t.UndefinedErrors
}

// GetUnexpectedCompletionErrors retrieves the value of the leaf UnexpectedCompletionErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnexpectedCompletionErrors is set, it can
// safely use t.GetUnexpectedCompletionErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnexpectedCompletionErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUnexpectedCompletionErrors() uint64 {
	if t == nil || t.UnexpectedCompletionErrors == nil {
		return 0
	}
	return *t.UnexpectedCompletionErrors
}

// GetUnsupportedRequestErrors retrieves the value of the leaf UnsupportedRequestErrors from the Component_Pcie_FatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnsupportedRequestErrors is set, it can
// safely use t.GetUnsupportedRequestErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnsupportedRequestErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_FatalErrors) GetUnsupportedRequestErrors() uint64 {
	if t == nil || t.UnsupportedRequestErrors == nil {
		return 0
	}
	return *t.UnsupportedRequestErrors
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_FatalErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_FatalErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_FatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_FatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_FatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_FatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_FatalErrors.
func (*Component_Pcie_FatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Pcie_NonFatalErrors represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrors struct {
	ΛMetadata                   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcsViolationErrors          *uint64           `path:"acs-violation-errors" module:"openconfig-platform"`
	ΛAcsViolationErrors         []ygot.Annotation `path:"@acs-violation-errors" ygotAnnotation:"true"`
	AtomicOpBlockedErrors       *uint64           `path:"atomic-op-blocked-errors" module:"openconfig-platform"`
	ΛAtomicOpBlockedErrors      []ygot.Annotation `path:"@atomic-op-blocked-errors" ygotAnnotation:"true"`
	BlockedTlpErrors            *uint64           `path:"blocked-tlp-errors" module:"openconfig-platform"`
	ΛBlockedTlpErrors           []ygot.Annotation `path:"@blocked-tlp-errors" ygotAnnotation:"true"`
	CompletionAbortErrors       *uint64           `path:"completion-abort-errors" module:"openconfig-platform"`
	ΛCompletionAbortErrors      []ygot.Annotation `path:"@completion-abort-errors" ygotAnnotation:"true"`
	CompletionTimeoutErrors     *uint64           `path:"completion-timeout-errors" module:"openconfig-platform"`
	ΛCompletionTimeoutErrors    []ygot.Annotation `path:"@completion-timeout-errors" ygotAnnotation:"true"`
	DataLinkErrors              *uint64           `path:"data-link-errors" module:"openconfig-platform"`
	ΛDataLinkErrors             []ygot.Annotation `path:"@data-link-errors" ygotAnnotation:"true"`
	EcrcErrors                  *uint64           `path:"ecrc-errors" module:"openconfig-platform"`
	ΛEcrcErrors                 []ygot.Annotation `path:"@ecrc-errors" ygotAnnotation:"true"`
	FlowControlProtocolErrors   *uint64           `path:"flow-control-protocol-errors" module:"openconfig-platform"`
	ΛFlowControlProtocolErrors  []ygot.Annotation `path:"@flow-control-protocol-errors" ygotAnnotation:"true"`
	InternalErrors              *uint64           `path:"internal-errors" module:"openconfig-platform"`
	ΛInternalErrors             []ygot.Annotation `path:"@internal-errors" ygotAnnotation:"true"`
	MalformedTlpErrors          *uint64           `path:"malformed-tlp-errors" module:"openconfig-platform"`
	ΛMalformedTlpErrors         []ygot.Annotation `path:"@malformed-tlp-errors" ygotAnnotation:"true"`
	PoisonedTlpErrors           *uint64           `path:"poisoned-tlp-errors" module:"openconfig-platform"`
	ΛPoisonedTlpErrors          []ygot.Annotation `path:"@poisoned-tlp-errors" ygotAnnotation:"true"`
	ReceiverOverflowErrors      *uint64           `path:"receiver-overflow-errors" module:"openconfig-platform"`
	ΛReceiverOverflowErrors     []ygot.Annotation `path:"@receiver-overflow-errors" ygotAnnotation:"true"`
	SurpriseDownErrors          *uint64           `path:"surprise-down-errors" module:"openconfig-platform"`
	ΛSurpriseDownErrors         []ygot.Annotation `path:"@surprise-down-errors" ygotAnnotation:"true"`
	TlpPrefixBlockedErrors      *uint64           `path:"tlp-prefix-blocked-errors" module:"openconfig-platform"`
	ΛTlpPrefixBlockedErrors     []ygot.Annotation `path:"@tlp-prefix-blocked-errors" ygotAnnotation:"true"`
	TotalErrors                 *uint64           `path:"total-errors" module:"openconfig-platform"`
	ΛTotalErrors                []ygot.Annotation `path:"@total-errors" ygotAnnotation:"true"`
	UndefinedErrors             *uint64           `path:"undefined-errors" module:"openconfig-platform"`
	ΛUndefinedErrors            []ygot.Annotation `path:"@undefined-errors" ygotAnnotation:"true"`
	UnexpectedCompletionErrors  *uint64           `path:"unexpected-completion-errors" module:"openconfig-platform"`
	ΛUnexpectedCompletionErrors []ygot.Annotation `path:"@unexpected-completion-errors" ygotAnnotation:"true"`
	UnsupportedRequestErrors    *uint64           `path:"unsupported-request-errors" module:"openconfig-platform"`
	ΛUnsupportedRequestErrors   []ygot.Annotation `path:"@unsupported-request-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Pcie_NonFatalErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Pcie_NonFatalErrors) IsYANGGoStruct() {}

// GetAcsViolationErrors retrieves the value of the leaf AcsViolationErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcsViolationErrors is set, it can
// safely use t.GetAcsViolationErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcsViolationErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetAcsViolationErrors() uint64 {
	if t == nil || t.AcsViolationErrors == nil {
		return 0
	}
	return *t.AcsViolationErrors
}

// GetAtomicOpBlockedErrors retrieves the value of the leaf AtomicOpBlockedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicOpBlockedErrors is set, it can
// safely use t.GetAtomicOpBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicOpBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetAtomicOpBlockedErrors() uint64 {
	if t == nil || t.AtomicOpBlockedErrors == nil {
		return 0
	}
	return *t.AtomicOpBlockedErrors
}

// GetBlockedTlpErrors retrieves the value of the leaf BlockedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockedTlpErrors is set, it can
// safely use t.GetBlockedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetBlockedTlpErrors() uint64 {
	if t == nil || t.BlockedTlpErrors == nil {
		return 0
	}
	return *t.BlockedTlpErrors
}

// GetCompletionAbortErrors retrieves the value of the leaf CompletionAbortErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionAbortErrors is set, it can
// safely use t.GetCompletionAbortErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionAbortErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetCompletionAbortErrors() uint64 {
	if t == nil || t.CompletionAbortErrors == nil {
		return 0
	}
	return *t.CompletionAbortErrors
}

// GetCompletionTimeoutErrors retrieves the value of the leaf CompletionTimeoutErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompletionTimeoutErrors is set, it can
// safely use t.GetCompletionTimeoutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompletionTimeoutErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetCompletionTimeoutErrors() uint64 {
	if t == nil || t.CompletionTimeoutErrors == nil {
		return 0
	}
	return *t.CompletionTimeoutErrors
}

// GetDataLinkErrors retrieves the value of the leaf DataLinkErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataLinkErrors is set, it can
// safely use t.GetDataLinkErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataLinkErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetDataLinkErrors() uint64 {
	if t == nil || t.DataLinkErrors == nil {
		return 0
	}
	return *t.DataLinkErrors
}

// GetEcrcErrors retrieves the value of the leaf EcrcErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcrcErrors is set, it can
// safely use t.GetEcrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcrcErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetEcrcErrors() uint64 {
	if t == nil || t.EcrcErrors == nil {
		return 0
	}
	return *t.EcrcErrors
}

// GetFlowControlProtocolErrors retrieves the value of the leaf FlowControlProtocolErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowControlProtocolErrors is set, it can
// safely use t.GetFlowControlProtocolErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowControlProtocolErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetFlowControlProtocolErrors() uint64 {
	if t == nil || t.FlowControlProtocolErrors == nil {
		return 0
	}
	return *t.FlowControlProtocolErrors
}

// GetInternalErrors retrieves the value of the leaf InternalErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalErrors is set, it can
// safely use t.GetInternalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetInternalErrors() uint64 {
	if t == nil || t.InternalErrors == nil {
		return 0
	}
	return *t.InternalErrors
}

// GetMalformedTlpErrors retrieves the value of the leaf MalformedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedTlpErrors is set, it can
// safely use t.GetMalformedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetMalformedTlpErrors() uint64 {
	if t == nil || t.MalformedTlpErrors == nil {
		return 0
	}
	return *t.MalformedTlpErrors
}

// GetPoisonedTlpErrors retrieves the value of the leaf PoisonedTlpErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoisonedTlpErrors is set, it can
// safely use t.GetPoisonedTlpErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoisonedTlpErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetPoisonedTlpErrors() uint64 {
	if t == nil || t.PoisonedTlpErrors == nil {
		return 0
	}
	return *t.PoisonedTlpErrors
}

// GetReceiverOverflowErrors retrieves the value of the leaf ReceiverOverflowErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiverOverflowErrors is set, it can
// safely use t.GetReceiverOverflowErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiverOverflowErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetReceiverOverflowErrors() uint64 {
	if t == nil || t.ReceiverOverflowErrors == nil {
		return 0
	}
	return *t.ReceiverOverflowErrors
}

// GetSurpriseDownErrors retrieves the value of the leaf SurpriseDownErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SurpriseDownErrors is set, it can
// safely use t.GetSurpriseDownErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SurpriseDownErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetSurpriseDownErrors() uint64 {
	if t == nil || t.SurpriseDownErrors == nil {
		return 0
	}
	return *t.SurpriseDownErrors
}

// GetTlpPrefixBlockedErrors retrieves the value of the leaf TlpPrefixBlockedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlpPrefixBlockedErrors is set, it can
// safely use t.GetTlpPrefixBlockedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlpPrefixBlockedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetTlpPrefixBlockedErrors() uint64 {
	if t == nil || t.TlpPrefixBlockedErrors == nil {
		return 0
	}
	return *t.TlpPrefixBlockedErrors
}

// GetTotalErrors retrieves the value of the leaf TotalErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalErrors is set, it can
// safely use t.GetTotalErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetTotalErrors() uint64 {
	if t == nil || t.TotalErrors == nil {
		return 0
	}
	return *t.TotalErrors
}

// GetUndefinedErrors retrieves the value of the leaf UndefinedErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UndefinedErrors is set, it can
// safely use t.GetUndefinedErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UndefinedErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUndefinedErrors() uint64 {
	if t == nil || t.UndefinedErrors == nil {
		return 0
	}
	return *t.UndefinedErrors
}

// GetUnexpectedCompletionErrors retrieves the value of the leaf UnexpectedCompletionErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnexpectedCompletionErrors is set, it can
// safely use t.GetUnexpectedCompletionErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnexpectedCompletionErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUnexpectedCompletionErrors() uint64 {
	if t == nil || t.UnexpectedCompletionErrors == nil {
		return 0
	}
	return *t.UnexpectedCompletionErrors
}

// GetUnsupportedRequestErrors retrieves the value of the leaf UnsupportedRequestErrors from the Component_Pcie_NonFatalErrors
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnsupportedRequestErrors is set, it can
// safely use t.GetUnsupportedRequestErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnsupportedRequestErrors == nil' before retrieving the leaf's value.
func (t *Component_Pcie_NonFatalErrors) GetUnsupportedRequestErrors() uint64 {
	if t == nil || t.UnsupportedRequestErrors == nil {
		return 0
	}
	return *t.UnsupportedRequestErrors
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Pcie_NonFatalErrors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Pcie_NonFatalErrors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_NonFatalErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Pcie_NonFatalErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Pcie_NonFatalErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Pcie_NonFatalErrors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Pcie_NonFatalErrors.
func (*Component_Pcie_NonFatalErrors) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type Component_Port struct {
	ΛMetadata     []ygot.Annotation            `path:"@" ygotAnnotation:"true"`
	BreakoutMode  *Component_Port_BreakoutMode `path:"breakout-mode" module:"openconfig-platform-port"`
	ΛBreakoutMode []ygot.Annotation            `path:"@breakout-mode" ygotAnnotation:"true"`
	OpticalPort   *Component_Port_OpticalPort  `path:"optical-port" module:"openconfig-transport-line-common"`
	ΛOpticalPort  []ygot.Annotation            `path:"@optical-port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port) IsYANGGoStruct() {}

// GetOrCreateBreakoutMode retrieves the value of the BreakoutMode field
// or returns the existing field if it already exists.
func (t *Component_Port) GetOrCreateBreakoutMode() *Component_Port_BreakoutMode {
	if t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	t.BreakoutMode = &Component_Port_BreakoutMode{}
	return t.BreakoutMode
}

// GetOrCreateOpticalPort retrieves the value of the OpticalPort field
// or returns the existing field if it already exists.
func (t *Component_Port) GetOrCreateOpticalPort() *Component_Port_OpticalPort {
	if t.OpticalPort != nil {
		return t.OpticalPort
	}
	t.OpticalPort = &Component_Port_OpticalPort{}
	return t.OpticalPort
}

// GetBreakoutMode returns the value of the BreakoutMode struct pointer
// from Component_Port. If the receiver or the field BreakoutMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port) GetBreakoutMode() *Component_Port_BreakoutMode {
	if t != nil && t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	return nil
}

// GetOpticalPort returns the value of the OpticalPort struct pointer
// from Component_Port. If the receiver or the field OpticalPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port) GetOpticalPort() *Component_Port_OpticalPort {
	if t != nil && t.OpticalPort != nil {
		return t.OpticalPort
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BreakoutMode.PopulateDefaults()
	t.OpticalPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port.
func (*Component_Port) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Port_BreakoutMode represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutMode struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Group     map[uint8]*Component_Port_BreakoutMode_Group `path:"groups/group" module:"openconfig-platform-port/openconfig-platform-port"`
	ΛGroup    []ygot.Annotation                            `path:"groups/@group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_BreakoutMode) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// Component_Port_BreakoutMode struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Port_BreakoutMode) NewGroup(Index uint8) (*Component_Port_BreakoutMode_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint8]*Component_Port_BreakoutMode_Group)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &Component_Port_BreakoutMode_Group{
		Index: &Index,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the Component_Port_BreakoutMode struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Port_BreakoutMode) RenameGroup(oldK, newK uint8) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Index = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver Component_Port_BreakoutMode. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Port_BreakoutMode) GetOrCreateGroup(Index uint8) *Component_Port_BreakoutMode_Group {

	key := Index

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of Component_Port_BreakoutMode. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Port_BreakoutMode) GetGroup(Index uint8) *Component_Port_BreakoutMode_Group {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver Component_Port_BreakoutMode. If there is no such element, the function
// is a no-op.
func (t *Component_Port_BreakoutMode) DeleteGroup(Index uint8) {
	key := Index

	delete(t.Group, key)
}

// AppendGroup appends the supplied Component_Port_BreakoutMode_Group struct to the
// list Group of Component_Port_BreakoutMode. If the key value(s) specified in
// the supplied Component_Port_BreakoutMode_Group already exist in the list, an error is
// returned.
func (t *Component_Port_BreakoutMode) AppendGroup(v *Component_Port_BreakoutMode_Group) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint8]*Component_Port_BreakoutMode_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_BreakoutMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_BreakoutMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_BreakoutMode.
func (*Component_Port_BreakoutMode) ΛBelongingModule() string {
	return "openconfig-platform-port"
}

// Component_Port_BreakoutMode_Group represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_Group struct {
	ΛMetadata            []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	BreakoutSpeed        E_IfEthernet_ETHERNET_SPEED `path:"config/breakout-speed" module:"openconfig-platform-port/openconfig-platform-port"`
	ΛBreakoutSpeed       []ygot.Annotation           `path:"config/@breakout-speed" ygotAnnotation:"true"`
	Index                *uint8                      `path:"config/index|index" module:"openconfig-platform-port/openconfig-platform-port|openconfig-platform-port"`
	ΛIndex               []ygot.Annotation           `path:"config/@index|@index" ygotAnnotation:"true"`
	NumBreakouts         *uint8                      `path:"config/num-breakouts" module:"openconfig-platform-port/openconfig-platform-port"`
	ΛNumBreakouts        []ygot.Annotation           `path:"config/@num-breakouts" ygotAnnotation:"true"`
	NumPhysicalChannels  *uint8                      `path:"config/num-physical-channels" module:"openconfig-platform-port/openconfig-platform-port"`
	ΛNumPhysicalChannels []ygot.Annotation           `path:"config/@num-physical-channels" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_BreakoutMode_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_BreakoutMode_Group) IsYANGGoStruct() {}

// GetBreakoutSpeed retrieves the value of the leaf BreakoutSpeed from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BreakoutSpeed is set, it can
// safely use t.GetBreakoutSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BreakoutSpeed == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetBreakoutSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.BreakoutSpeed == 0 {
		return 0
	}
	return t.BreakoutSpeed
}

// GetIndex retrieves the value of the leaf Index from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetNumBreakouts retrieves the value of the leaf NumBreakouts from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumBreakouts is set, it can
// safely use t.GetNumBreakouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumBreakouts == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetNumBreakouts() uint8 {
	if t == nil || t.NumBreakouts == nil {
		return 0
	}
	return *t.NumBreakouts
}

// GetNumPhysicalChannels retrieves the value of the leaf NumPhysicalChannels from the Component_Port_BreakoutMode_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumPhysicalChannels is set, it can
// safely use t.GetNumPhysicalChannels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumPhysicalChannels == nil' before retrieving the leaf's value.
func (t *Component_Port_BreakoutMode_Group) GetNumPhysicalChannels() uint8 {
	if t == nil || t.NumPhysicalChannels == nil {
		return 0
	}
	return *t.NumPhysicalChannels
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_BreakoutMode_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_BreakoutMode_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Port_BreakoutMode_Group struct, which is a YANG list entry.
func (t *Component_Port_BreakoutMode_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_BreakoutMode_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_BreakoutMode_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_BreakoutMode_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_BreakoutMode_Group.
func (*Component_Port_BreakoutMode_Group) ΛBelongingModule() string {
	return "openconfig-platform-port"
}

// Component_Port_OpticalPort represents the /openconfig-platform/components/component/port/optical-port YANG schema element.
type Component_Port_OpticalPort struct {
	ΛMetadata        []ygot.Annotation                       `path:"@" ygotAnnotation:"true"`
	AdminState       E_TransportTypes_AdminStateType         `path:"config/admin-state" module:"openconfig-transport-line-common/openconfig-transport-line-common"`
	ΛAdminState      []ygot.Annotation                       `path:"config/@admin-state" ygotAnnotation:"true"`
	InputPower       *Component_Port_OpticalPort_InputPower  `path:"state/input-power" module:"openconfig-transport-line-common/openconfig-transport-line-common"`
	ΛInputPower      []ygot.Annotation                       `path:"state/@input-power" ygotAnnotation:"true"`
	OpticalPortType  E_TransportTypes_OPTICAL_PORT_TYPE      `path:"state/optical-port-type" module:"openconfig-transport-line-common/openconfig-transport-line-common"`
	ΛOpticalPortType []ygot.Annotation                       `path:"state/@optical-port-type" ygotAnnotation:"true"`
	OutputPower      *Component_Port_OpticalPort_OutputPower `path:"state/output-power" module:"openconfig-transport-line-common/openconfig-transport-line-common"`
	ΛOutputPower     []ygot.Annotation                       `path:"state/@output-power" ygotAnnotation:"true"`
	Tilt             *float64                                `path:"state/tilt" module:"openconfig-transport-line-common/openconfig-transport-line-common"`
	ΛTilt            []ygot.Annotation                       `path:"state/@tilt" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_OpticalPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_OpticalPort) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Port_OpticalPort) GetOrCreateInputPower() *Component_Port_OpticalPort_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Port_OpticalPort_InputPower{}
	return t.InputPower
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Port_OpticalPort) GetOrCreateOutputPower() *Component_Port_OpticalPort_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Port_OpticalPort_OutputPower{}
	return t.OutputPower
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Port_OpticalPort. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port_OpticalPort) GetInputPower() *Component_Port_OpticalPort_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Port_OpticalPort. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Port_OpticalPort) GetOutputPower() *Component_Port_OpticalPort_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the Component_Port_OpticalPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort) GetAdminState() E_TransportTypes_AdminStateType {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetOpticalPortType retrieves the value of the leaf OpticalPortType from the Component_Port_OpticalPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpticalPortType is set, it can
// safely use t.GetOpticalPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpticalPortType == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort) GetOpticalPortType() E_TransportTypes_OPTICAL_PORT_TYPE {
	if t == nil || t.OpticalPortType == 0 {
		return 0
	}
	return t.OpticalPortType
}

// GetTilt retrieves the value of the leaf Tilt from the Component_Port_OpticalPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tilt is set, it can
// safely use t.GetTilt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tilt == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort) GetTilt() float64 {
	if t == nil || t.Tilt == nil {
		return 0.0
	}
	return *t.Tilt
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_OpticalPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_OpticalPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_OpticalPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_OpticalPort) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_OpticalPort.
func (*Component_Port_OpticalPort) ΛBelongingModule() string {
	return "openconfig-transport-line-common"
}

// Component_Port_OpticalPort_InputPower represents the /openconfig-platform/components/component/port/optical-port/state/input-power YANG schema element.
type Component_Port_OpticalPort_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-common"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-common"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-common"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-common"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-common"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-common"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-common"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_OpticalPort_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_OpticalPort_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Port_OpticalPort_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_OpticalPort_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_OpticalPort_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_OpticalPort_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_OpticalPort_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_OpticalPort_InputPower.
func (*Component_Port_OpticalPort_InputPower) ΛBelongingModule() string {
	return "openconfig-transport-line-common"
}

// Component_Port_OpticalPort_OutputPower represents the /openconfig-platform/components/component/port/optical-port/state/output-power YANG schema element.
type Component_Port_OpticalPort_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-transport-line-common"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-transport-line-common"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-transport-line-common"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-transport-line-common"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-transport-line-common"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-transport-line-common"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-transport-line-common"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Port_OpticalPort_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Port_OpticalPort_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Port_OpticalPort_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Port_OpticalPort_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Port_OpticalPort_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Port_OpticalPort_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Port_OpticalPort_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Port_OpticalPort_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Port_OpticalPort_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Port_OpticalPort_OutputPower.
func (*Component_Port_OpticalPort_OutputPower) ΛBelongingModule() string {
	return "openconfig-transport-line-common"
}

// Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupply struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_PowerSupply) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_PowerSupply
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_PowerSupply) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_PowerSupply.
func (*Component_PowerSupply) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_Property struct {
	ΛMetadata     []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                          `path:"state/configurable" module:"openconfig-platform/openconfig-platform"`
	ΛConfigurable []ygot.Annotation              `path:"state/@configurable" ygotAnnotation:"true"`
	Name          *string                        `path:"config/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	ΛName         []ygot.Annotation              `path:"config/@name|@name" ygotAnnotation:"true"`
	Value         Component_Property_Value_Union `path:"config/value" module:"openconfig-platform/openconfig-platform"`
	ΛValue        []ygot.Annotation              `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Property) IsYANGGoStruct() {}

// GetConfigurable retrieves the value of the leaf Configurable from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Configurable is set, it can
// safely use t.GetConfigurable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Configurable == nil' before retrieving the leaf's value.
func (t *Component_Property) GetConfigurable() bool {
	if t == nil || t.Configurable == nil {
		return false
	}
	return *t.Configurable
}

// GetName retrieves the value of the leaf Name from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Property) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the Component_Property
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *Component_Property) GetValue() Component_Property_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Property
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Property) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Property struct, which is a YANG list entry.
func (t *Component_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Property) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Property) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Property.
func (*Component_Property) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_SoftwareModule represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModule struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_SoftwareModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_SoftwareModule) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_SoftwareModule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_SoftwareModule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_SoftwareModule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_SoftwareModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_SoftwareModule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_SoftwareModule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_SoftwareModule.
func (*Component_SoftwareModule) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_Storage struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Storage) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the Component_Storage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Storage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Storage.
func (*Component_Storage) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_Subcomponent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"config/name|name" module:"openconfig-platform/openconfig-platform|openconfig-platform"`
	ΛName     []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Subcomponent) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Component_Subcomponent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Component_Subcomponent) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Subcomponent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Subcomponent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Subcomponent struct, which is a YANG list entry.
func (t *Component_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Subcomponent.
func (*Component_Subcomponent) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_Temperature struct {
	ΛMetadata       []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                      `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                  `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                      `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                      `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                               `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                      `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                               `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                      `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                      `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                               `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                      `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                      `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                               `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                      `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                      `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Temperature) IsYANGGoStruct() {}

// GetAlarmSeverity retrieves the value of the leaf AlarmSeverity from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmSeverity is set, it can
// safely use t.GetAlarmSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmSeverity == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.AlarmSeverity == 0 {
		return 0
	}
	return t.AlarmSeverity
}

// GetAlarmStatus retrieves the value of the leaf AlarmStatus from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmStatus is set, it can
// safely use t.GetAlarmStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmStatus == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmStatus() bool {
	if t == nil || t.AlarmStatus == nil {
		return false
	}
	return *t.AlarmStatus
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmThreshold is set, it can
// safely use t.GetAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmThreshold == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetAvg retrieves the value of the leaf Avg from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Temperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Temperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Temperature
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Temperature) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Temperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Temperature.
func (*Component_Temperature) ΛBelongingModule() string {
	return "openconfig-platform"
}

// Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_Transceiver struct {
	ΛMetadata               []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Channel                 map[uint16]*Component_Transceiver_Channel                                   `path:"physical-channels/channel" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛChannel                []ygot.Annotation                                                           `path:"physical-channels/@channel" ygotAnnotation:"true"`
	ConnectorType           E_TransportTypes_FIBER_CONNECTOR_TYPE                                       `path:"state/connector-type" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛConnectorType          []ygot.Annotation                                                           `path:"state/@connector-type" ygotAnnotation:"true"`
	DateCode                *string                                                                     `path:"state/date-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛDateCode               []ygot.Annotation                                                           `path:"state/@date-code" ygotAnnotation:"true"`
	Enabled                 *bool                                                                       `path:"config/enabled" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛEnabled                []ygot.Annotation                                                           `path:"config/@enabled" ygotAnnotation:"true"`
	EthernetPmd             E_TransportTypes_ETHERNET_PMD_TYPE                                          `path:"state/ethernet-pmd" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛEthernetPmd            []ygot.Annotation                                                           `path:"state/@ethernet-pmd" ygotAnnotation:"true"`
	EthernetPmdPreconf      E_TransportTypes_ETHERNET_PMD_TYPE                                          `path:"config/ethernet-pmd-preconf" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf     []ygot.Annotation                                                           `path:"config/@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FaultCondition          *bool                                                                       `path:"state/fault-condition" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFaultCondition         []ygot.Annotation                                                           `path:"state/@fault-condition" ygotAnnotation:"true"`
	FecCorrectedBits        *uint64                                                                     `path:"state/fec-corrected-bits" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecCorrectedBits       []ygot.Annotation                                                           `path:"state/@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes       *uint64                                                                     `path:"state/fec-corrected-bytes" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecCorrectedBytes      []ygot.Annotation                                                           `path:"state/@fec-corrected-bytes" ygotAnnotation:"true"`
	FecMode                 E_PlatformTypes_FEC_MODE_TYPE                                               `path:"config/fec-mode" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecMode                []ygot.Annotation                                                           `path:"config/@fec-mode" ygotAnnotation:"true"`
	FecStatus               E_PlatformTypes_FEC_STATUS_TYPE                                             `path:"state/fec-status" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecStatus              []ygot.Annotation                                                           `path:"state/@fec-status" ygotAnnotation:"true"`
	FecUncorrectableBlocks  *uint64                                                                     `path:"state/fec-uncorrectable-blocks" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecUncorrectableBlocks []ygot.Annotation                                                           `path:"state/@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords   *uint64                                                                     `path:"state/fec-uncorrectable-words" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFecUncorrectableWords  []ygot.Annotation                                                           `path:"state/@fec-uncorrectable-words" ygotAnnotation:"true"`
	FormFactor              E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                               `path:"state/form-factor" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFormFactor             []ygot.Annotation                                                           `path:"state/@form-factor" ygotAnnotation:"true"`
	FormFactorPreconf       E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                               `path:"config/form-factor-preconf" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛFormFactorPreconf      []ygot.Annotation                                                           `path:"config/@form-factor-preconf" ygotAnnotation:"true"`
	InputPower              *Component_Transceiver_InputPower                                           `path:"state/input-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛInputPower             []ygot.Annotation                                                           `path:"state/@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent        *Component_Transceiver_LaserBiasCurrent                                     `path:"state/laser-bias-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserBiasCurrent       []ygot.Annotation                                                           `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	ModuleFunctionalType    E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE                         `path:"config/module-functional-type" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛModuleFunctionalType   []ygot.Annotation                                                           `path:"config/@module-functional-type" ygotAnnotation:"true"`
	OtnComplianceCode       E_TransportTypes_OTN_APPLICATION_CODE                                       `path:"state/otn-compliance-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOtnComplianceCode      []ygot.Annotation                                                           `path:"state/@otn-compliance-code" ygotAnnotation:"true"`
	OutputPower             *Component_Transceiver_OutputPower                                          `path:"state/output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOutputPower            []ygot.Annotation                                                           `path:"state/@output-power" ygotAnnotation:"true"`
	PostFecBer              *Component_Transceiver_PostFecBer                                           `path:"state/post-fec-ber" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛPostFecBer             []ygot.Annotation                                                           `path:"state/@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer               *Component_Transceiver_PreFecBer                                            `path:"state/pre-fec-ber" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛPreFecBer              []ygot.Annotation                                                           `path:"state/@pre-fec-ber" ygotAnnotation:"true"`
	Present                 E_Transceiver_Present                                                       `path:"state/present" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛPresent                []ygot.Annotation                                                           `path:"state/@present" ygotAnnotation:"true"`
	SerialNo                *string                                                                     `path:"state/serial-no" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛSerialNo               []ygot.Annotation                                                           `path:"state/@serial-no" ygotAnnotation:"true"`
	SonetSdhComplianceCode  E_TransportTypes_SONET_APPLICATION_CODE                                     `path:"state/sonet-sdh-compliance-code" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛSonetSdhComplianceCode []ygot.Annotation                                                           `path:"state/@sonet-sdh-compliance-code" ygotAnnotation:"true"`
	SupplyVoltage           *Component_Transceiver_SupplyVoltage                                        `path:"state/supply-voltage" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛSupplyVoltage          []ygot.Annotation                                                           `path:"state/@supply-voltage" ygotAnnotation:"true"`
	Threshold               map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold `path:"thresholds/threshold" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛThreshold              []ygot.Annotation                                                           `path:"thresholds/@threshold" ygotAnnotation:"true"`
	Vendor                  *string                                                                     `path:"state/vendor" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛVendor                 []ygot.Annotation                                                           `path:"state/@vendor" ygotAnnotation:"true"`
	VendorPart              *string                                                                     `path:"state/vendor-part" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛVendorPart             []ygot.Annotation                                                           `path:"state/@vendor-part" ygotAnnotation:"true"`
	VendorRev               *string                                                                     `path:"state/vendor-rev" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛVendorRev              []ygot.Annotation                                                           `path:"state/@vendor-rev" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewChannel(Index uint16) (*Component_Transceiver_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &Component_Transceiver_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameChannel(oldK, newK uint16) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateChannel(Index uint16) *Component_Transceiver_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetChannel(Index uint16) *Component_Transceiver_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver Component_Transceiver. If there is no such element, the function
// is a no-op.
func (t *Component_Transceiver) DeleteChannel(Index uint16) {
	key := Index

	delete(t.Channel, key)
}

// AppendChannel appends the supplied Component_Transceiver_Channel struct to the
// list Channel of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Channel already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendChannel(v *Component_Transceiver_Channel) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*Component_Transceiver_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// NewThreshold creates a new entry in the Threshold list of the
// Component_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *Component_Transceiver) NewThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) (*Component_Transceiver_Threshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold)
	}

	key := Severity

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Threshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Threshold", key)
	}

	t.Threshold[key] = &Component_Transceiver_Threshold{
		Severity: Severity,
	}

	return t.Threshold[key], nil
}

// RenameThreshold renames an entry in the list Threshold within
// the Component_Transceiver struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Component_Transceiver) RenameThreshold(oldK, newK E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) error {
	if _, ok := t.Threshold[newK]; ok {
		return fmt.Errorf("key %v already exists in Threshold", newK)
	}

	e, ok := t.Threshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Threshold", oldK)
	}
	e.Severity = newK

	t.Threshold[newK] = e
	delete(t.Threshold, oldK)
	return nil
}

// GetOrCreateThreshold retrieves the value with the specified keys from
// the receiver Component_Transceiver. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Component_Transceiver) GetOrCreateThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_Threshold {

	key := Severity

	if v, ok := t.Threshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewThreshold(Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateThreshold got unexpected error: %v", err))
	}
	return v
}

// GetThreshold retrieves the value with the specified key from
// the Threshold map field of Component_Transceiver. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Component_Transceiver) GetThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_Threshold {

	if t == nil {
		return nil
	}

	key := Severity

	if lm, ok := t.Threshold[key]; ok {
		return lm
	}
	return nil
}

// DeleteThreshold deletes the value with the specified keys from
// the receiver Component_Transceiver. If there is no such element, the function
// is a no-op.
func (t *Component_Transceiver) DeleteThreshold(Severity E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) {
	key := Severity

	delete(t.Threshold, key)
}

// AppendThreshold appends the supplied Component_Transceiver_Threshold struct to the
// list Threshold of Component_Transceiver. If the key value(s) specified in
// the supplied Component_Transceiver_Threshold already exist in the list, an error is
// returned.
func (t *Component_Transceiver) AppendThreshold(v *Component_Transceiver_Threshold) error {
	key := v.Severity

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Threshold == nil {
		t.Threshold = make(map[E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*Component_Transceiver_Threshold)
	}

	if _, ok := t.Threshold[key]; ok {
		return fmt.Errorf("duplicate key for list Threshold %v", key)
	}

	t.Threshold[key] = v
	return nil
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateInputPower() *Component_Transceiver_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateOutputPower() *Component_Transceiver_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePostFecBer() *Component_Transceiver_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &Component_Transceiver_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreatePreFecBer() *Component_Transceiver_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &Component_Transceiver_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateSupplyVoltage retrieves the value of the SupplyVoltage field
// or returns the existing field if it already exists.
func (t *Component_Transceiver) GetOrCreateSupplyVoltage() *Component_Transceiver_SupplyVoltage {
	if t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	t.SupplyVoltage = &Component_Transceiver_SupplyVoltage{}
	return t.SupplyVoltage
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetInputPower() *Component_Transceiver_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetLaserBiasCurrent() *Component_Transceiver_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetOutputPower() *Component_Transceiver_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPostFecBer() *Component_Transceiver_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from Component_Transceiver. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetPreFecBer() *Component_Transceiver_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetSupplyVoltage returns the value of the SupplyVoltage struct pointer
// from Component_Transceiver. If the receiver or the field SupplyVoltage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver) GetSupplyVoltage() *Component_Transceiver_SupplyVoltage {
	if t != nil && t.SupplyVoltage != nil {
		return t.SupplyVoltage
	}
	return nil
}

// GetConnectorType retrieves the value of the leaf ConnectorType from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectorType is set, it can
// safely use t.GetConnectorType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectorType == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetConnectorType() E_TransportTypes_FIBER_CONNECTOR_TYPE {
	if t == nil || t.ConnectorType == 0 {
		return 0
	}
	return t.ConnectorType
}

// GetDateCode retrieves the value of the leaf DateCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DateCode is set, it can
// safely use t.GetDateCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DateCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetDateCode() string {
	if t == nil || t.DateCode == nil {
		return ""
	}
	return *t.DateCode
}

// GetEnabled retrieves the value of the leaf Enabled from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEthernetPmd retrieves the value of the leaf EthernetPmd from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetPmd is set, it can
// safely use t.GetEthernetPmd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetPmd == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmd() E_TransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmd == 0 {
		return 0
	}
	return t.EthernetPmd
}

// GetEthernetPmdPreconf retrieves the value of the leaf EthernetPmdPreconf from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetPmdPreconf is set, it can
// safely use t.GetEthernetPmdPreconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetPmdPreconf == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetEthernetPmdPreconf() E_TransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmdPreconf == 0 {
		return 0
	}
	return t.EthernetPmdPreconf
}

// GetFaultCondition retrieves the value of the leaf FaultCondition from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultCondition is set, it can
// safely use t.GetFaultCondition() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultCondition == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFaultCondition() bool {
	if t == nil || t.FaultCondition == nil {
		return false
	}
	return *t.FaultCondition
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBits is set, it can
// safely use t.GetFecCorrectedBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBits == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecCorrectedBytes is set, it can
// safely use t.GetFecCorrectedBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecCorrectedBytes == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecMode retrieves the value of the leaf FecMode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecMode is set, it can
// safely use t.GetFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecMode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecMode() E_PlatformTypes_FEC_MODE_TYPE {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetFecStatus retrieves the value of the leaf FecStatus from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecStatus is set, it can
// safely use t.GetFecStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecStatus == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecStatus() E_PlatformTypes_FEC_STATUS_TYPE {
	if t == nil || t.FecStatus == 0 {
		return 0
	}
	return t.FecStatus
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableBlocks is set, it can
// safely use t.GetFecUncorrectableBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableBlocks == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorrectableWords is set, it can
// safely use t.GetFecUncorrectableWords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorrectableWords == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetFormFactor retrieves the value of the leaf FormFactor from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FormFactor is set, it can
// safely use t.GetFormFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FormFactor == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactor() E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactor == 0 {
		return 0
	}
	return t.FormFactor
}

// GetFormFactorPreconf retrieves the value of the leaf FormFactorPreconf from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FormFactorPreconf is set, it can
// safely use t.GetFormFactorPreconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FormFactorPreconf == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetFormFactorPreconf() E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactorPreconf == 0 {
		return 0
	}
	return t.FormFactorPreconf
}

// GetModuleFunctionalType retrieves the value of the leaf ModuleFunctionalType from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleFunctionalType is set, it can
// safely use t.GetModuleFunctionalType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleFunctionalType == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetModuleFunctionalType() E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE {
	if t == nil || t.ModuleFunctionalType == 0 {
		return 0
	}
	return t.ModuleFunctionalType
}

// GetOtnComplianceCode retrieves the value of the leaf OtnComplianceCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtnComplianceCode is set, it can
// safely use t.GetOtnComplianceCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtnComplianceCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetOtnComplianceCode() E_TransportTypes_OTN_APPLICATION_CODE {
	if t == nil || t.OtnComplianceCode == 0 {
		return 0
	}
	return t.OtnComplianceCode
}

// GetPresent retrieves the value of the leaf Present from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Present is set, it can
// safely use t.GetPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Present == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetPresent() E_Transceiver_Present {
	if t == nil || t.Present == 0 {
		return 0
	}
	return t.Present
}

// GetSerialNo retrieves the value of the leaf SerialNo from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SerialNo is set, it can
// safely use t.GetSerialNo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SerialNo == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSonetSdhComplianceCode retrieves the value of the leaf SonetSdhComplianceCode from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SonetSdhComplianceCode is set, it can
// safely use t.GetSonetSdhComplianceCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SonetSdhComplianceCode == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetSonetSdhComplianceCode() E_TransportTypes_SONET_APPLICATION_CODE {
	if t == nil || t.SonetSdhComplianceCode == 0 {
		return 0
	}
	return t.SonetSdhComplianceCode
}

// GetVendor retrieves the value of the leaf Vendor from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendor() string {
	if t == nil || t.Vendor == nil {
		return ""
	}
	return *t.Vendor
}

// GetVendorPart retrieves the value of the leaf VendorPart from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorPart is set, it can
// safely use t.GetVendorPart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorPart == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorPart() string {
	if t == nil || t.VendorPart == nil {
		return ""
	}
	return *t.VendorPart
}

// GetVendorRev retrieves the value of the leaf VendorRev from the Component_Transceiver
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorRev is set, it can
// safely use t.GetVendorRev() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorRev == nil' before retrieving the leaf's value.
func (t *Component_Transceiver) GetVendorRev() string {
	if t == nil || t.VendorRev == nil {
		return ""
	}
	return *t.VendorRev
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
	t.PostFecBer.PopulateDefaults()
	t.PreFecBer.PopulateDefaults()
	t.SupplyVoltage.PopulateDefaults()
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
	for _, e := range t.Threshold {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver.
func (*Component_Transceiver) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_Channel struct {
	ΛMetadata                 []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	AssociatedOpticalChannel  *string                                                 `path:"config/associated-optical-channel" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛAssociatedOpticalChannel []ygot.Annotation                                       `path:"config/@associated-optical-channel" ygotAnnotation:"true"`
	Description               *string                                                 `path:"config/description" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛDescription              []ygot.Annotation                                       `path:"config/@description" ygotAnnotation:"true"`
	Index                     *uint16                                                 `path:"config/index|index" module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver"`
	ΛIndex                    []ygot.Annotation                                       `path:"config/@index|@index" ygotAnnotation:"true"`
	InputPower                *Component_Transceiver_Channel_InputPower               `path:"state/input-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛInputPower               []ygot.Annotation                                       `path:"state/@input-power" ygotAnnotation:"true"`
	LaserAge                  *uint8                                                  `path:"state/laser-age" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserAge                 []ygot.Annotation                                       `path:"state/@laser-age" ygotAnnotation:"true"`
	LaserBiasCurrent          *Component_Transceiver_Channel_LaserBiasCurrent         `path:"state/laser-bias-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserBiasCurrent         []ygot.Annotation                                       `path:"state/@laser-bias-current" ygotAnnotation:"true"`
	LaserTemperature          *Component_Transceiver_Channel_LaserTemperature         `path:"state/laser-temperature" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserTemperature         []ygot.Annotation                                       `path:"state/@laser-temperature" ygotAnnotation:"true"`
	OutputFrequency           *uint64                                                 `path:"state/output-frequency" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOutputFrequency          []ygot.Annotation                                       `path:"state/@output-frequency" ygotAnnotation:"true"`
	OutputPower               *Component_Transceiver_Channel_OutputPower              `path:"state/output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOutputPower              []ygot.Annotation                                       `path:"state/@output-power" ygotAnnotation:"true"`
	TargetFrequencyDeviation  *Component_Transceiver_Channel_TargetFrequencyDeviation `path:"state/target-frequency-deviation" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛTargetFrequencyDeviation []ygot.Annotation                                       `path:"state/@target-frequency-deviation" ygotAnnotation:"true"`
	TargetOutputPower         *float64                                                `path:"config/target-output-power" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛTargetOutputPower        []ygot.Annotation                                       `path:"config/@target-output-power" ygotAnnotation:"true"`
	TecCurrent                *Component_Transceiver_Channel_TecCurrent               `path:"state/tec-current" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛTecCurrent               []ygot.Annotation                                       `path:"state/@tec-current" ygotAnnotation:"true"`
	TxLaser                   *bool                                                   `path:"config/tx-laser" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛTxLaser                  []ygot.Annotation                                       `path:"config/@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateInputPower() *Component_Transceiver_Channel_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &Component_Transceiver_Channel_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &Component_Transceiver_Channel_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateLaserTemperature retrieves the value of the LaserTemperature field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateLaserTemperature() *Component_Transceiver_Channel_LaserTemperature {
	if t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	t.LaserTemperature = &Component_Transceiver_Channel_LaserTemperature{}
	return t.LaserTemperature
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &Component_Transceiver_Channel_OutputPower{}
	return t.OutputPower
}

// GetOrCreateTargetFrequencyDeviation retrieves the value of the TargetFrequencyDeviation field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateTargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviation {
	if t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	t.TargetFrequencyDeviation = &Component_Transceiver_Channel_TargetFrequencyDeviation{}
	return t.TargetFrequencyDeviation
}

// GetOrCreateTecCurrent retrieves the value of the TecCurrent field
// or returns the existing field if it already exists.
func (t *Component_Transceiver_Channel) GetOrCreateTecCurrent() *Component_Transceiver_Channel_TecCurrent {
	if t.TecCurrent != nil {
		return t.TecCurrent
	}
	t.TecCurrent = &Component_Transceiver_Channel_TecCurrent{}
	return t.TecCurrent
}

// GetInputPower returns the value of the InputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetInputPower() *Component_Transceiver_Channel_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from Component_Transceiver_Channel. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetLaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetLaserTemperature returns the value of the LaserTemperature struct pointer
// from Component_Transceiver_Channel. If the receiver or the field LaserTemperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetLaserTemperature() *Component_Transceiver_Channel_LaserTemperature {
	if t != nil && t.LaserTemperature != nil {
		return t.LaserTemperature
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from Component_Transceiver_Channel. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetOutputPower() *Component_Transceiver_Channel_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetTargetFrequencyDeviation returns the value of the TargetFrequencyDeviation struct pointer
// from Component_Transceiver_Channel. If the receiver or the field TargetFrequencyDeviation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetTargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviation {
	if t != nil && t.TargetFrequencyDeviation != nil {
		return t.TargetFrequencyDeviation
	}
	return nil
}

// GetTecCurrent returns the value of the TecCurrent struct pointer
// from Component_Transceiver_Channel. If the receiver or the field TecCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Component_Transceiver_Channel) GetTecCurrent() *Component_Transceiver_Channel_TecCurrent {
	if t != nil && t.TecCurrent != nil {
		return t.TecCurrent
	}
	return nil
}

// GetAssociatedOpticalChannel retrieves the value of the leaf AssociatedOpticalChannel from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociatedOpticalChannel is set, it can
// safely use t.GetAssociatedOpticalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociatedOpticalChannel == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetAssociatedOpticalChannel() string {
	if t == nil || t.AssociatedOpticalChannel == nil {
		return ""
	}
	return *t.AssociatedOpticalChannel
}

// GetDescription retrieves the value of the leaf Description from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLaserAge retrieves the value of the leaf LaserAge from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserAge is set, it can
// safely use t.GetLaserAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserAge == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetLaserAge() uint8 {
	if t == nil || t.LaserAge == nil {
		return 0
	}
	return *t.LaserAge
}

// GetOutputFrequency retrieves the value of the leaf OutputFrequency from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFrequency is set, it can
// safely use t.GetOutputFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFrequency == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetOutputFrequency() uint64 {
	if t == nil || t.OutputFrequency == nil {
		return 0
	}
	return *t.OutputFrequency
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetOutputPower is set, it can
// safely use t.GetTargetOutputPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetOutputPower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetTxLaser retrieves the value of the leaf TxLaser from the Component_Transceiver_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLaser is set, it can
// safely use t.GetTxLaser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLaser == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InputPower.PopulateDefaults()
	t.LaserBiasCurrent.PopulateDefaults()
	t.LaserTemperature.PopulateDefaults()
	t.OutputPower.PopulateDefaults()
	t.TargetFrequencyDeviation.PopulateDefaults()
	t.TecCurrent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Channel struct, which is a YANG list entry.
func (t *Component_Transceiver_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel.
func (*Component_Transceiver_Channel) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_InputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_InputPower.
func (*Component_Transceiver_Channel_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_LaserBiasCurrent.
func (*Component_Transceiver_Channel_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_LaserTemperature represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperature struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_LaserTemperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_LaserTemperature) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_LaserTemperature
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_LaserTemperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_LaserTemperature
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_LaserTemperature) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserTemperature) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_LaserTemperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_LaserTemperature) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_LaserTemperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_LaserTemperature.
func (*Component_Transceiver_Channel_LaserTemperature) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_OutputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_OutputPower.
func (*Component_Transceiver_Channel_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_TargetFrequencyDeviation represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_TargetFrequencyDeviation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_TargetFrequencyDeviation) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_TargetFrequencyDeviation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_TargetFrequencyDeviation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_TargetFrequencyDeviation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_TargetFrequencyDeviation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_TargetFrequencyDeviation.
func (*Component_Transceiver_Channel_TargetFrequencyDeviation) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Channel_TecCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Channel_TecCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Channel_TecCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_Channel_TecCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Channel_TecCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Channel_TecCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Channel_TecCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TecCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Channel_TecCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Channel_TecCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Channel_TecCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Channel_TecCurrent.
func (*Component_Transceiver_Channel_TecCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_InputPower represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_InputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_InputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_InputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_InputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_InputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_InputPower.
func (*Component_Transceiver_InputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_LaserBiasCurrent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_LaserBiasCurrent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_LaserBiasCurrent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_LaserBiasCurrent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_LaserBiasCurrent.
func (*Component_Transceiver_LaserBiasCurrent) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_OutputPower represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_OutputPower
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_OutputPower
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_OutputPower) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_OutputPower) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_OutputPower.
func (*Component_Transceiver_OutputPower) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_PostFecBer represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PostFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_PostFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_PostFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PostFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_PostFecBer.
func (*Component_Transceiver_PostFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_PreFecBer represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_PreFecBer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_PreFecBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_PreFecBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PreFecBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_PreFecBer.
func (*Component_Transceiver_PreFecBer) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_SupplyVoltage represents the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltage struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_SupplyVoltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_SupplyVoltage) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the Component_Transceiver_SupplyVoltage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_SupplyVoltage) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_SupplyVoltage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_SupplyVoltage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_SupplyVoltage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_SupplyVoltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_SupplyVoltage) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_SupplyVoltage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_SupplyVoltage.
func (*Component_Transceiver_SupplyVoltage) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// Component_Transceiver_Threshold represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_Threshold struct {
	ΛMetadata               []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	InputPowerLower         *float64                               `path:"state/input-power-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛInputPowerLower        []ygot.Annotation                      `path:"state/@input-power-lower" ygotAnnotation:"true"`
	InputPowerUpper         *float64                               `path:"state/input-power-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛInputPowerUpper        []ygot.Annotation                      `path:"state/@input-power-upper" ygotAnnotation:"true"`
	LaserBiasCurrentLower   *float64                               `path:"state/laser-bias-current-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserBiasCurrentLower  []ygot.Annotation                      `path:"state/@laser-bias-current-lower" ygotAnnotation:"true"`
	LaserBiasCurrentUpper   *float64                               `path:"state/laser-bias-current-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserBiasCurrentUpper  []ygot.Annotation                      `path:"state/@laser-bias-current-upper" ygotAnnotation:"true"`
	LaserTemperatureLower   *float64                               `path:"state/laser-temperature-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserTemperatureLower  []ygot.Annotation                      `path:"state/@laser-temperature-lower" ygotAnnotation:"true"`
	LaserTemperatureUpper   *float64                               `path:"state/laser-temperature-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛLaserTemperatureUpper  []ygot.Annotation                      `path:"state/@laser-temperature-upper" ygotAnnotation:"true"`
	ModuleTemperatureLower  *float64                               `path:"state/module-temperature-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛModuleTemperatureLower []ygot.Annotation                      `path:"state/@module-temperature-lower" ygotAnnotation:"true"`
	ModuleTemperatureUpper  *float64                               `path:"state/module-temperature-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛModuleTemperatureUpper []ygot.Annotation                      `path:"state/@module-temperature-upper" ygotAnnotation:"true"`
	OutputPowerLower        *float64                               `path:"state/output-power-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOutputPowerLower       []ygot.Annotation                      `path:"state/@output-power-lower" ygotAnnotation:"true"`
	OutputPowerUpper        *float64                               `path:"state/output-power-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛOutputPowerUpper       []ygot.Annotation                      `path:"state/@output-power-upper" ygotAnnotation:"true"`
	Severity                E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity|severity" module:"openconfig-platform-transceiver/openconfig-platform-transceiver|openconfig-platform-transceiver"`
	ΛSeverity               []ygot.Annotation                      `path:"state/@severity|@severity" ygotAnnotation:"true"`
	SupplyVoltageLower      *float64                               `path:"state/supply-voltage-lower" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛSupplyVoltageLower     []ygot.Annotation                      `path:"state/@supply-voltage-lower" ygotAnnotation:"true"`
	SupplyVoltageUpper      *float64                               `path:"state/supply-voltage-upper" module:"openconfig-platform-transceiver/openconfig-platform-transceiver"`
	ΛSupplyVoltageUpper     []ygot.Annotation                      `path:"state/@supply-voltage-upper" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Component_Transceiver_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Component_Transceiver_Threshold) IsYANGGoStruct() {}

// GetInputPowerLower retrieves the value of the leaf InputPowerLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerLower is set, it can
// safely use t.GetInputPowerLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetInputPowerLower() float64 {
	if t == nil || t.InputPowerLower == nil {
		return 0.0
	}
	return *t.InputPowerLower
}

// GetInputPowerUpper retrieves the value of the leaf InputPowerUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPowerUpper is set, it can
// safely use t.GetInputPowerUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPowerUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetInputPowerUpper() float64 {
	if t == nil || t.InputPowerUpper == nil {
		return 0.0
	}
	return *t.InputPowerUpper
}

// GetLaserBiasCurrentLower retrieves the value of the leaf LaserBiasCurrentLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserBiasCurrentLower is set, it can
// safely use t.GetLaserBiasCurrentLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserBiasCurrentLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserBiasCurrentLower() float64 {
	if t == nil || t.LaserBiasCurrentLower == nil {
		return 0.0
	}
	return *t.LaserBiasCurrentLower
}

// GetLaserBiasCurrentUpper retrieves the value of the leaf LaserBiasCurrentUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserBiasCurrentUpper is set, it can
// safely use t.GetLaserBiasCurrentUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserBiasCurrentUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserBiasCurrentUpper() float64 {
	if t == nil || t.LaserBiasCurrentUpper == nil {
		return 0.0
	}
	return *t.LaserBiasCurrentUpper
}

// GetLaserTemperatureLower retrieves the value of the leaf LaserTemperatureLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserTemperatureLower is set, it can
// safely use t.GetLaserTemperatureLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserTemperatureLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserTemperatureLower() float64 {
	if t == nil || t.LaserTemperatureLower == nil {
		return 0.0
	}
	return *t.LaserTemperatureLower
}

// GetLaserTemperatureUpper retrieves the value of the leaf LaserTemperatureUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LaserTemperatureUpper is set, it can
// safely use t.GetLaserTemperatureUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LaserTemperatureUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetLaserTemperatureUpper() float64 {
	if t == nil || t.LaserTemperatureUpper == nil {
		return 0.0
	}
	return *t.LaserTemperatureUpper
}

// GetModuleTemperatureLower retrieves the value of the leaf ModuleTemperatureLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleTemperatureLower is set, it can
// safely use t.GetModuleTemperatureLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleTemperatureLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetModuleTemperatureLower() float64 {
	if t == nil || t.ModuleTemperatureLower == nil {
		return 0.0
	}
	return *t.ModuleTemperatureLower
}

// GetModuleTemperatureUpper retrieves the value of the leaf ModuleTemperatureUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ModuleTemperatureUpper is set, it can
// safely use t.GetModuleTemperatureUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ModuleTemperatureUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetModuleTemperatureUpper() float64 {
	if t == nil || t.ModuleTemperatureUpper == nil {
		return 0.0
	}
	return *t.ModuleTemperatureUpper
}

// GetOutputPowerLower retrieves the value of the leaf OutputPowerLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputPowerLower is set, it can
// safely use t.GetOutputPowerLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputPowerLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetOutputPowerLower() float64 {
	if t == nil || t.OutputPowerLower == nil {
		return 0.0
	}
	return *t.OutputPowerLower
}

// GetOutputPowerUpper retrieves the value of the leaf OutputPowerUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputPowerUpper is set, it can
// safely use t.GetOutputPowerUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputPowerUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetOutputPowerUpper() float64 {
	if t == nil || t.OutputPowerUpper == nil {
		return 0.0
	}
	return *t.OutputPowerUpper
}

// GetSeverity retrieves the value of the leaf Severity from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetSupplyVoltageLower retrieves the value of the leaf SupplyVoltageLower from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplyVoltageLower is set, it can
// safely use t.GetSupplyVoltageLower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplyVoltageLower == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSupplyVoltageLower() float64 {
	if t == nil || t.SupplyVoltageLower == nil {
		return 0.0
	}
	return *t.SupplyVoltageLower
}

// GetSupplyVoltageUpper retrieves the value of the leaf SupplyVoltageUpper from the Component_Transceiver_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplyVoltageUpper is set, it can
// safely use t.GetSupplyVoltageUpper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplyVoltageUpper == nil' before retrieving the leaf's value.
func (t *Component_Transceiver_Threshold) GetSupplyVoltageUpper() float64 {
	if t == nil || t.SupplyVoltageUpper == nil {
		return 0.0
	}
	return *t.SupplyVoltageUpper
}

// PopulateDefaults recursively populates unset leaf fields in the Component_Transceiver_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Component_Transceiver_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Component_Transceiver_Threshold struct, which is a YANG list entry.
func (t *Component_Transceiver_Threshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Component_Transceiver_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Component_Transceiver_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Component_Transceiver_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Component_Transceiver_Threshold.
func (*Component_Transceiver_Threshold) ΛBelongingModule() string {
	return "openconfig-platform-transceiver"
}

// DefinedSets represents the /openconfig-defined-sets/defined-sets YANG schema element.
type DefinedSets struct {
	ΛMetadata      []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Ipv4PrefixSet  map[string]*DefinedSets_Ipv4PrefixSet `path:"ipv4-prefix-sets/ipv4-prefix-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛIpv4PrefixSet []ygot.Annotation                     `path:"ipv4-prefix-sets/@ipv4-prefix-set" ygotAnnotation:"true"`
	Ipv6PrefixSet  map[string]*DefinedSets_Ipv6PrefixSet `path:"ipv6-prefix-sets/ipv6-prefix-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛIpv6PrefixSet []ygot.Annotation                     `path:"ipv6-prefix-sets/@ipv6-prefix-set" ygotAnnotation:"true"`
	PortSet        map[string]*DefinedSets_PortSet       `path:"port-sets/port-set" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛPortSet       []ygot.Annotation                     `path:"port-sets/@port-set" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets) IsYANGGoStruct() {}

// NewIpv4PrefixSet creates a new entry in the Ipv4PrefixSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewIpv4PrefixSet(Name string) (*DefinedSets_Ipv4PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*DefinedSets_Ipv4PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4PrefixSet", key)
	}

	t.Ipv4PrefixSet[key] = &DefinedSets_Ipv4PrefixSet{
		Name: &Name,
	}

	return t.Ipv4PrefixSet[key], nil
}

// RenameIpv4PrefixSet renames an entry in the list Ipv4PrefixSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenameIpv4PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv4PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4PrefixSet", newK)
	}

	e, ok := t.Ipv4PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv4PrefixSet[newK] = e
	delete(t.Ipv4PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv4PrefixSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreateIpv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSet {

	key := Name

	if v, ok := t.Ipv4PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv4PrefixSet retrieves the value with the specified key from
// the Ipv4PrefixSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetIpv4PrefixSet(Name string) *DefinedSets_Ipv4PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv4PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4PrefixSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeleteIpv4PrefixSet(Name string) {
	key := Name

	delete(t.Ipv4PrefixSet, key)
}

// AppendIpv4PrefixSet appends the supplied DefinedSets_Ipv4PrefixSet struct to the
// list Ipv4PrefixSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_Ipv4PrefixSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendIpv4PrefixSet(v *DefinedSets_Ipv4PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4PrefixSet == nil {
		t.Ipv4PrefixSet = make(map[string]*DefinedSets_Ipv4PrefixSet)
	}

	if _, ok := t.Ipv4PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4PrefixSet %v", key)
	}

	t.Ipv4PrefixSet[key] = v
	return nil
}

// NewIpv6PrefixSet creates a new entry in the Ipv6PrefixSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewIpv6PrefixSet(Name string) (*DefinedSets_Ipv6PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*DefinedSets_Ipv6PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6PrefixSet", key)
	}

	t.Ipv6PrefixSet[key] = &DefinedSets_Ipv6PrefixSet{
		Name: &Name,
	}

	return t.Ipv6PrefixSet[key], nil
}

// RenameIpv6PrefixSet renames an entry in the list Ipv6PrefixSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenameIpv6PrefixSet(oldK, newK string) error {
	if _, ok := t.Ipv6PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6PrefixSet", newK)
	}

	e, ok := t.Ipv6PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6PrefixSet", oldK)
	}
	e.Name = &newK

	t.Ipv6PrefixSet[newK] = e
	delete(t.Ipv6PrefixSet, oldK)
	return nil
}

// GetOrCreateIpv6PrefixSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreateIpv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSet {

	key := Name

	if v, ok := t.Ipv6PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6PrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6PrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetIpv6PrefixSet retrieves the value with the specified key from
// the Ipv6PrefixSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetIpv6PrefixSet(Name string) *DefinedSets_Ipv6PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv6PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6PrefixSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeleteIpv6PrefixSet(Name string) {
	key := Name

	delete(t.Ipv6PrefixSet, key)
}

// AppendIpv6PrefixSet appends the supplied DefinedSets_Ipv6PrefixSet struct to the
// list Ipv6PrefixSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_Ipv6PrefixSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendIpv6PrefixSet(v *DefinedSets_Ipv6PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6PrefixSet == nil {
		t.Ipv6PrefixSet = make(map[string]*DefinedSets_Ipv6PrefixSet)
	}

	if _, ok := t.Ipv6PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6PrefixSet %v", key)
	}

	t.Ipv6PrefixSet[key] = v
	return nil
}

// NewPortSet creates a new entry in the PortSet list of the
// DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *DefinedSets) NewPortSet(Name string) (*DefinedSets_PortSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*DefinedSets_PortSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortSet", key)
	}

	t.PortSet[key] = &DefinedSets_PortSet{
		Name: &Name,
	}

	return t.PortSet[key], nil
}

// RenamePortSet renames an entry in the list PortSet within
// the DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *DefinedSets) RenamePortSet(oldK, newK string) error {
	if _, ok := t.PortSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PortSet", newK)
	}

	e, ok := t.PortSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortSet", oldK)
	}
	e.Name = &newK

	t.PortSet[newK] = e
	delete(t.PortSet, oldK)
	return nil
}

// GetOrCreatePortSet retrieves the value with the specified keys from
// the receiver DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *DefinedSets) GetOrCreatePortSet(Name string) *DefinedSets_PortSet {

	key := Name

	if v, ok := t.PortSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortSet got unexpected error: %v", err))
	}
	return v
}

// GetPortSet retrieves the value with the specified key from
// the PortSet map field of DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *DefinedSets) GetPortSet(Name string) *DefinedSets_PortSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PortSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePortSet deletes the value with the specified keys from
// the receiver DefinedSets. If there is no such element, the function
// is a no-op.
func (t *DefinedSets) DeletePortSet(Name string) {
	key := Name

	delete(t.PortSet, key)
}

// AppendPortSet appends the supplied DefinedSets_PortSet struct to the
// list PortSet of DefinedSets. If the key value(s) specified in
// the supplied DefinedSets_PortSet already exist in the list, an error is
// returned.
func (t *DefinedSets) AppendPortSet(v *DefinedSets_PortSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortSet == nil {
		t.PortSet = make(map[string]*DefinedSets_PortSet)
	}

	if _, ok := t.PortSet[key]; ok {
		return fmt.Errorf("duplicate key for list PortSet %v", key)
	}

	t.PortSet[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6PrefixSet {
		e.PopulateDefaults()
	}
	for _, e := range t.PortSet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets.
func (*DefinedSets) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_Ipv4PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv4-prefix-sets/ipv4-prefix-set YANG schema element.
type DefinedSets_Ipv4PrefixSet struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"config/description" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"config/@description" ygotAnnotation:"true"`
	Name         *string           `path:"config/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"config/prefix" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"config/@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that DefinedSets_Ipv4PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_Ipv4PrefixSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the DefinedSets_Ipv4PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv4PrefixSet) GetPrefix() []string {
	if t == nil || t.Prefix == nil {
		return nil
	}
	return t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_Ipv4PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_Ipv4PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_Ipv4PrefixSet struct, which is a YANG list entry.
func (t *DefinedSets_Ipv4PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv4PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_Ipv4PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv4PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_Ipv4PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_Ipv4PrefixSet.
func (*DefinedSets_Ipv4PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_Ipv6PrefixSet represents the /openconfig-defined-sets/defined-sets/ipv6-prefix-sets/ipv6-prefix-set YANG schema element.
type DefinedSets_Ipv6PrefixSet struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"config/description" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛDescription []ygot.Annotation `path:"config/@description" ygotAnnotation:"true"`
	Name         *string           `path:"config/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	ΛName        []ygot.Annotation `path:"config/@name|@name" ygotAnnotation:"true"`
	Prefix       []string          `path:"config/prefix" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛPrefix      []ygot.Annotation `path:"config/@prefix" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that DefinedSets_Ipv6PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_Ipv6PrefixSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrefix retrieves the value of the leaf Prefix from the DefinedSets_Ipv6PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *DefinedSets_Ipv6PrefixSet) GetPrefix() []string {
	if t == nil || t.Prefix == nil {
		return nil
	}
	return t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_Ipv6PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_Ipv6PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_Ipv6PrefixSet struct, which is a YANG list entry.
func (t *DefinedSets_Ipv6PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv6PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_Ipv6PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_Ipv6PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_Ipv6PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_Ipv6PrefixSet.
func (*DefinedSets_Ipv6PrefixSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// DefinedSets_PortSet represents the /openconfig-defined-sets/defined-sets/port-sets/port-set YANG schema element.
type DefinedSets_PortSet struct {
	ΛMetadata    []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	Description  *string                          `path:"config/description" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛDescription []ygot.Annotation                `path:"config/@description" ygotAnnotation:"true"`
	Name         *string                          `path:"config/name|name" module:"openconfig-defined-sets/openconfig-defined-sets|openconfig-defined-sets"`
	ΛName        []ygot.Annotation                `path:"config/@name|@name" ygotAnnotation:"true"`
	Port         []DefinedSets_PortSet_Port_Union `path:"config/port" module:"openconfig-defined-sets/openconfig-defined-sets"`
	ΛPort        []ygot.Annotation                `path:"config/@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that DefinedSets_PortSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DefinedSets_PortSet) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the DefinedSets_PortSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *DefinedSets_PortSet) GetPort() []DefinedSets_PortSet_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the DefinedSets_PortSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *DefinedSets_PortSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the DefinedSets_PortSet struct, which is a YANG list entry.
func (t *DefinedSets_PortSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_PortSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DefinedSets_PortSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DefinedSets_PortSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DefinedSets_PortSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of DefinedSets_PortSet.
func (*DefinedSets_PortSet) ΛBelongingModule() string {
	return "openconfig-defined-sets"
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata         []ygot.Annotation           `path:"@" ygotAnnotation:"true"`
	Acl               *Acl                        `path:"acl" module:"openconfig-acl"`
	ΛAcl              []ygot.Annotation           `path:"@acl" ygotAnnotation:"true"`
	Aps               *Aps                        `path:"aps" module:"openconfig-transport-line-protection"`
	ΛAps              []ygot.Annotation           `path:"@aps" ygotAnnotation:"true"`
	Bfd               *Bfd                        `path:"bfd" module:"openconfig-bfd"`
	ΛBfd              []ygot.Annotation           `path:"@bfd" ygotAnnotation:"true"`
	Component         map[string]*Component       `path:"components/component" module:"openconfig-platform/openconfig-platform"`
	ΛComponent        []ygot.Annotation           `path:"components/@component" ygotAnnotation:"true"`
	DefinedSets       *DefinedSets                `path:"defined-sets" module:"openconfig-defined-sets"`
	ΛDefinedSets      []ygot.Annotation           `path:"@defined-sets" ygotAnnotation:"true"`
	EthernetSegment   map[string]*EthernetSegment `path:"ethernet-segments/ethernet-segment" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛEthernetSegment  []ygot.Annotation           `path:"ethernet-segments/@ethernet-segment" ygotAnnotation:"true"`
	Interface         map[string]*Interface       `path:"interfaces/interface" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛInterface        []ygot.Annotation           `path:"interfaces/@interface" ygotAnnotation:"true"`
	Keychain          map[string]*Keychain        `path:"keychains/keychain" module:"openconfig-keychain/openconfig-keychain"`
	ΛKeychain         []ygot.Annotation           `path:"keychains/@keychain" ygotAnnotation:"true"`
	Lacp              *Lacp                       `path:"lacp" module:"openconfig-lacp"`
	ΛLacp             []ygot.Annotation           `path:"@lacp" ygotAnnotation:"true"`
	Lldp              *Lldp                       `path:"lldp" module:"openconfig-lldp"`
	ΛLldp             []ygot.Annotation           `path:"@lldp" ygotAnnotation:"true"`
	Macsec            *Macsec                     `path:"macsec" module:"openconfig-macsec"`
	ΛMacsec           []ygot.Annotation           `path:"@macsec" ygotAnnotation:"true"`
	Messages          *Messages                   `path:"messages" module:"openconfig-messages"`
	ΛMessages         []ygot.Annotation           `path:"@messages" ygotAnnotation:"true"`
	NetworkInstance   map[string]*NetworkInstance `path:"network-instances/network-instance" module:"openconfig-network-instance/openconfig-network-instance"`
	ΛNetworkInstance  []ygot.Annotation           `path:"network-instances/@network-instance" ygotAnnotation:"true"`
	OpticalAmplifier  *OpticalAmplifier           `path:"optical-amplifier" module:"openconfig-optical-amplifier"`
	ΛOpticalAmplifier []ygot.Annotation           `path:"@optical-amplifier" ygotAnnotation:"true"`
	Probe             map[string]*Probe           `path:"probes/probe" module:"openconfig-probes/openconfig-probes"`
	ΛProbe            []ygot.Annotation           `path:"probes/@probe" ygotAnnotation:"true"`
	Qos               *Qos                        `path:"qos" module:"openconfig-qos"`
	ΛQos              []ygot.Annotation           `path:"@qos" ygotAnnotation:"true"`
	RelayAgent        *RelayAgent                 `path:"relay-agent" module:"openconfig-relay-agent"`
	ΛRelayAgent       []ygot.Annotation           `path:"@relay-agent" ygotAnnotation:"true"`
	RoutingPolicy     *RoutingPolicy              `path:"routing-policy" module:"openconfig-routing-policy"`
	ΛRoutingPolicy    []ygot.Annotation           `path:"@routing-policy" ygotAnnotation:"true"`
	Sampling          *Sampling                   `path:"sampling" module:"openconfig-sampling"`
	ΛSampling         []ygot.Annotation           `path:"@sampling" ygotAnnotation:"true"`
	Stp               *Stp                        `path:"stp" module:"openconfig-spanning-tree"`
	ΛStp              []ygot.Annotation           `path:"@stp" ygotAnnotation:"true"`
	System            *System                     `path:"system" module:"openconfig-system"`
	ΛSystem           []ygot.Annotation           `path:"@system" ygotAnnotation:"true"`
	TelemetrySystem   *TelemetrySystem            `path:"telemetry-system" module:"openconfig-telemetry"`
	ΛTelemetrySystem  []ygot.Annotation           `path:"@telemetry-system" ygotAnnotation:"true"`
	TerminalDevice    *TerminalDevice             `path:"terminal-device" module:"openconfig-terminal-device"`
	ΛTerminalDevice   []ygot.Annotation           `path:"@terminal-device" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewComponent(Name string) (*Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateComponent(Name string) *Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetComponent(Name string) *Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// DeleteComponent deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteComponent(Name string) {
	key := Name

	delete(t.Component, key)
}

// AppendComponent appends the supplied Component struct to the
// list Component of Device. If the key value(s) specified in
// the supplied Component already exist in the list, an error is
// returned.
func (t *Device) AppendComponent(v *Component) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// NewEthernetSegment creates a new entry in the EthernetSegment list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewEthernetSegment(Name string) (*EthernetSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*EthernetSegment)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSegment", key)
	}

	t.EthernetSegment[key] = &EthernetSegment{
		Name: &Name,
	}

	return t.EthernetSegment[key], nil
}

// RenameEthernetSegment renames an entry in the list EthernetSegment within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameEthernetSegment(oldK, newK string) error {
	if _, ok := t.EthernetSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSegment", newK)
	}

	e, ok := t.EthernetSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSegment", oldK)
	}
	e.Name = &newK

	t.EthernetSegment[newK] = e
	delete(t.EthernetSegment, oldK)
	return nil
}

// GetOrCreateEthernetSegment retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateEthernetSegment(Name string) *EthernetSegment {

	key := Name

	if v, ok := t.EthernetSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSegment(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSegment got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSegment retrieves the value with the specified key from
// the EthernetSegment map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetEthernetSegment(Name string) *EthernetSegment {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EthernetSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSegment deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteEthernetSegment(Name string) {
	key := Name

	delete(t.EthernetSegment, key)
}

// AppendEthernetSegment appends the supplied EthernetSegment struct to the
// list EthernetSegment of Device. If the key value(s) specified in
// the supplied EthernetSegment already exist in the list, an error is
// returned.
func (t *Device) AppendEthernetSegment(v *EthernetSegment) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*EthernetSegment)
	}

	if _, ok := t.EthernetSegment[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSegment %v", key)
	}

	t.EthernetSegment[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Device. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Device) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewKeychain creates a new entry in the Keychain list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewKeychain(Name string) (*Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.Name = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateKeychain(Name string) *Keychain {

	key := Name

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetKeychain(Name string) *Keychain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteKeychain(Name string) {
	key := Name

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied Keychain struct to the
// list Keychain of Device. If the key value(s) specified in
// the supplied Keychain already exist in the list, an error is
// returned.
func (t *Device) AppendKeychain(v *Keychain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewNetworkInstance(Name string) (*NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateNetworkInstance(Name string) *NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetNetworkInstance(Name string) *NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied NetworkInstance struct to the
// list NetworkInstance of Device. If the key value(s) specified in
// the supplied NetworkInstance already exist in the list, an error is
// returned.
func (t *Device) AppendNetworkInstance(v *NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// NewProbe creates a new entry in the Probe list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewProbe(Name string) (*Probe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Probe == nil {
		t.Probe = make(map[string]*Probe)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Probe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Probe", key)
	}

	t.Probe[key] = &Probe{
		Name: &Name,
	}

	return t.Probe[key], nil
}

// RenameProbe renames an entry in the list Probe within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameProbe(oldK, newK string) error {
	if _, ok := t.Probe[newK]; ok {
		return fmt.Errorf("key %v already exists in Probe", newK)
	}

	e, ok := t.Probe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Probe", oldK)
	}
	e.Name = &newK

	t.Probe[newK] = e
	delete(t.Probe, oldK)
	return nil
}

// GetOrCreateProbe retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateProbe(Name string) *Probe {

	key := Name

	if v, ok := t.Probe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProbe(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProbe got unexpected error: %v", err))
	}
	return v
}

// GetProbe retrieves the value with the specified key from
// the Probe map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetProbe(Name string) *Probe {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Probe[key]; ok {
		return lm
	}
	return nil
}

// DeleteProbe deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteProbe(Name string) {
	key := Name

	delete(t.Probe, key)
}

// AppendProbe appends the supplied Probe struct to the
// list Probe of Device. If the key value(s) specified in
// the supplied Probe already exist in the list, an error is
// returned.
func (t *Device) AppendProbe(v *Probe) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Probe == nil {
		t.Probe = make(map[string]*Probe)
	}

	if _, ok := t.Probe[key]; ok {
		return fmt.Errorf("duplicate key for list Probe %v", key)
	}

	t.Probe[key] = v
	return nil
}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateAcl() *Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &Acl{}
	return t.Acl
}

// GetOrCreateAps retrieves the value of the Aps field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateAps() *Aps {
	if t.Aps != nil {
		return t.Aps
	}
	t.Aps = &Aps{}
	return t.Aps
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateBfd() *Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &Bfd{}
	return t.Bfd
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateDefinedSets() *DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &DefinedSets{}
	return t.DefinedSets
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLacp() *Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLldp() *Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &Lldp{}
	return t.Lldp
}

// GetOrCreateMacsec retrieves the value of the Macsec field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateMacsec() *Macsec {
	if t.Macsec != nil {
		return t.Macsec
	}
	t.Macsec = &Macsec{}
	return t.Macsec
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateMessages() *Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &Messages{}
	return t.Messages
}

// GetOrCreateOpticalAmplifier retrieves the value of the OpticalAmplifier field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateOpticalAmplifier() *OpticalAmplifier {
	if t.OpticalAmplifier != nil {
		return t.OpticalAmplifier
	}
	t.OpticalAmplifier = &OpticalAmplifier{}
	return t.OpticalAmplifier
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateQos() *Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &Qos{}
	return t.Qos
}

// GetOrCreateRelayAgent retrieves the value of the RelayAgent field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateRelayAgent() *RelayAgent {
	if t.RelayAgent != nil {
		return t.RelayAgent
	}
	t.RelayAgent = &RelayAgent{}
	return t.RelayAgent
}

// GetOrCreateRoutingPolicy retrieves the value of the RoutingPolicy field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateRoutingPolicy() *RoutingPolicy {
	if t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	t.RoutingPolicy = &RoutingPolicy{}
	return t.RoutingPolicy
}

// GetOrCreateSampling retrieves the value of the Sampling field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSampling() *Sampling {
	if t.Sampling != nil {
		return t.Sampling
	}
	t.Sampling = &Sampling{}
	return t.Sampling
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateStp() *Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &Stp{}
	return t.Stp
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSystem() *System {
	if t.System != nil {
		return t.System
	}
	t.System = &System{}
	return t.System
}

// GetOrCreateTelemetrySystem retrieves the value of the TelemetrySystem field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateTelemetrySystem() *TelemetrySystem {
	if t.TelemetrySystem != nil {
		return t.TelemetrySystem
	}
	t.TelemetrySystem = &TelemetrySystem{}
	return t.TelemetrySystem
}

// GetOrCreateTerminalDevice retrieves the value of the TerminalDevice field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateTerminalDevice() *TerminalDevice {
	if t.TerminalDevice != nil {
		return t.TerminalDevice
	}
	t.TerminalDevice = &TerminalDevice{}
	return t.TerminalDevice
}

// GetAcl returns the value of the Acl struct pointer
// from Device. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetAcl() *Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// GetAps returns the value of the Aps struct pointer
// from Device. If the receiver or the field Aps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetAps() *Aps {
	if t != nil && t.Aps != nil {
		return t.Aps
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from Device. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetBfd() *Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from Device. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetDefinedSets() *DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from Device. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLacp() *Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from Device. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLldp() *Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetMacsec returns the value of the Macsec struct pointer
// from Device. If the receiver or the field Macsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetMacsec() *Macsec {
	if t != nil && t.Macsec != nil {
		return t.Macsec
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from Device. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetMessages() *Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetOpticalAmplifier returns the value of the OpticalAmplifier struct pointer
// from Device. If the receiver or the field OpticalAmplifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetOpticalAmplifier() *OpticalAmplifier {
	if t != nil && t.OpticalAmplifier != nil {
		return t.OpticalAmplifier
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from Device. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetQos() *Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRelayAgent returns the value of the RelayAgent struct pointer
// from Device. If the receiver or the field RelayAgent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetRelayAgent() *RelayAgent {
	if t != nil && t.RelayAgent != nil {
		return t.RelayAgent
	}
	return nil
}

// GetRoutingPolicy returns the value of the RoutingPolicy struct pointer
// from Device. If the receiver or the field RoutingPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetRoutingPolicy() *RoutingPolicy {
	if t != nil && t.RoutingPolicy != nil {
		return t.RoutingPolicy
	}
	return nil
}

// GetSampling returns the value of the Sampling struct pointer
// from Device. If the receiver or the field Sampling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSampling() *Sampling {
	if t != nil && t.Sampling != nil {
		return t.Sampling
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from Device. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetStp() *Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Device. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSystem() *System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTelemetrySystem returns the value of the TelemetrySystem struct pointer
// from Device. If the receiver or the field TelemetrySystem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetTelemetrySystem() *TelemetrySystem {
	if t != nil && t.TelemetrySystem != nil {
		return t.TelemetrySystem
	}
	return nil
}

// GetTerminalDevice returns the value of the TerminalDevice struct pointer
// from Device. If the receiver or the field TerminalDevice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetTerminalDevice() *TerminalDevice {
	if t != nil && t.TerminalDevice != nil {
		return t.TerminalDevice
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acl.PopulateDefaults()
	t.Aps.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.DefinedSets.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.Macsec.PopulateDefaults()
	t.Messages.PopulateDefaults()
	t.OpticalAmplifier.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.RelayAgent.PopulateDefaults()
	t.RoutingPolicy.PopulateDefaults()
	t.Sampling.PopulateDefaults()
	t.Stp.PopulateDefaults()
	t.System.PopulateDefaults()
	t.TelemetrySystem.PopulateDefaults()
	t.TerminalDevice.PopulateDefaults()
	for _, e := range t.Component {
		e.PopulateDefaults()
	}
	for _, e := range t.EthernetSegment {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
	for _, e := range t.Probe {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// EthernetSegment represents the /openconfig-ethernet-segments/ethernet-segments/ethernet-segment YANG schema element.
type EthernetSegment struct {
	ΛMetadata       []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	DfElection      *EthernetSegment_DfElection      `path:"df-election" module:"openconfig-ethernet-segments"`
	ΛDfElection     []ygot.Annotation                `path:"@df-election" ygotAnnotation:"true"`
	Esi             EthernetSegment_Esi_Union        `path:"config/esi" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛEsi            []ygot.Annotation                `path:"config/@esi" ygotAnnotation:"true"`
	EsiType         E_EvpnTypes_EsiType              `path:"config/esi-type" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛEsiType        []ygot.Annotation                `path:"config/@esi-type" ygotAnnotation:"true"`
	Interface       *string                          `path:"config/interface" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛInterface      []ygot.Annotation                `path:"config/@interface" ygotAnnotation:"true"`
	Name            *string                          `path:"config/name|name" module:"openconfig-ethernet-segments/openconfig-ethernet-segments|openconfig-ethernet-segments"`
	ΛName           []ygot.Annotation                `path:"config/@name|@name" ygotAnnotation:"true"`
	RedundancyMode  E_EvpnTypes_EVPN_REDUNDANCY_MODE `path:"config/redundancy-mode" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛRedundancyMode []ygot.Annotation                `path:"config/@redundancy-mode" ygotAnnotation:"true"`
	Subinterface    *uint32                          `path:"config/subinterface" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛSubinterface   []ygot.Annotation                `path:"config/@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EthernetSegment) IsYANGGoStruct() {}

// GetOrCreateDfElection retrieves the value of the DfElection field
// or returns the existing field if it already exists.
func (t *EthernetSegment) GetOrCreateDfElection() *EthernetSegment_DfElection {
	if t.DfElection != nil {
		return t.DfElection
	}
	t.DfElection = &EthernetSegment_DfElection{}
	return t.DfElection
}

// GetDfElection returns the value of the DfElection struct pointer
// from EthernetSegment. If the receiver or the field DfElection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *EthernetSegment) GetDfElection() *EthernetSegment_DfElection {
	if t != nil && t.DfElection != nil {
		return t.DfElection
	}
	return nil
}

// GetEsi retrieves the value of the leaf Esi from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetEsi() EthernetSegment_Esi_Union {
	if t == nil || t.Esi == nil {
		return nil
	}
	return t.Esi
}

// GetEsiType retrieves the value of the leaf EsiType from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsiType is set, it can
// safely use t.GetEsiType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsiType == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetEsiType() E_EvpnTypes_EsiType {
	if t == nil || t.EsiType == 0 {
		return EvpnTypes_EsiType_TYPE_0_OPERATOR_CONFIGURED
	}
	return t.EsiType
}

// GetInterface retrieves the value of the leaf Interface from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetName retrieves the value of the leaf Name from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedundancyMode retrieves the value of the leaf RedundancyMode from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundancyMode is set, it can
// safely use t.GetRedundancyMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundancyMode == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetRedundancyMode() E_EvpnTypes_EVPN_REDUNDANCY_MODE {
	if t == nil || t.RedundancyMode == 0 {
		return 0
	}
	return t.RedundancyMode
}

// GetSubinterface retrieves the value of the leaf Subinterface from the EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *EthernetSegment) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EsiType == 0 {
		t.EsiType = EvpnTypes_EsiType_TYPE_0_OPERATOR_CONFIGURED
	}
	t.DfElection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the EthernetSegment struct, which is a YANG list entry.
func (t *EthernetSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *EthernetSegment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of EthernetSegment.
func (*EthernetSegment) ΛBelongingModule() string {
	return "openconfig-ethernet-segments"
}

// EthernetSegment_DfElection represents the /openconfig-ethernet-segments/ethernet-segments/ethernet-segment/df-election YANG schema element.
type EthernetSegment_DfElection struct {
	ΛMetadata         []ygot.Annotation             `path:"@" ygotAnnotation:"true"`
	DfElectionMethod  E_DfElection_DfElectionMethod `path:"config/df-election-method" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛDfElectionMethod []ygot.Annotation             `path:"config/@df-election-method" ygotAnnotation:"true"`
	ElectionWaitTime  *uint32                       `path:"config/election-wait-time" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛElectionWaitTime []ygot.Annotation             `path:"config/@election-wait-time" ygotAnnotation:"true"`
	Preference        *uint16                       `path:"config/preference" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛPreference       []ygot.Annotation             `path:"config/@preference" ygotAnnotation:"true"`
	Revertive         *bool                         `path:"config/revertive" module:"openconfig-ethernet-segments/openconfig-ethernet-segments"`
	ΛRevertive        []ygot.Annotation             `path:"config/@revertive" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that EthernetSegment_DfElection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EthernetSegment_DfElection) IsYANGGoStruct() {}

// GetDfElectionMethod retrieves the value of the leaf DfElectionMethod from the EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfElectionMethod is set, it can
// safely use t.GetDfElectionMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfElectionMethod == nil' before retrieving the leaf's value.
func (t *EthernetSegment_DfElection) GetDfElectionMethod() E_DfElection_DfElectionMethod {
	if t == nil || t.DfElectionMethod == 0 {
		return 0
	}
	return t.DfElectionMethod
}

// GetElectionWaitTime retrieves the value of the leaf ElectionWaitTime from the EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ElectionWaitTime is set, it can
// safely use t.GetElectionWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ElectionWaitTime == nil' before retrieving the leaf's value.
func (t *EthernetSegment_DfElection) GetElectionWaitTime() uint32 {
	if t == nil || t.ElectionWaitTime == nil {
		return 0
	}
	return *t.ElectionWaitTime
}

// GetPreference retrieves the value of the leaf Preference from the EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *EthernetSegment_DfElection) GetPreference() uint16 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRevertive retrieves the value of the leaf Revertive from the EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revertive is set, it can
// safely use t.GetRevertive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revertive == nil' before retrieving the leaf's value.
func (t *EthernetSegment_DfElection) GetRevertive() bool {
	if t == nil || t.Revertive == nil {
		return true
	}
	return *t.Revertive
}

// PopulateDefaults recursively populates unset leaf fields in the EthernetSegment_DfElection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *EthernetSegment_DfElection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Revertive == nil {
		var v bool = true
		t.Revertive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *EthernetSegment_DfElection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["EthernetSegment_DfElection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *EthernetSegment_DfElection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *EthernetSegment_DfElection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of EthernetSegment_DfElection.
func (*EthernetSegment_DfElection) ΛBelongingModule() string {
	return "openconfig-ethernet-segments"
}

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	ΛMetadata         []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	AdminStatus       E_Interface_AdminStatus            `path:"state/admin-status" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛAdminStatus      []ygot.Annotation                  `path:"state/@admin-status" ygotAnnotation:"true"`
	Aggregation       *Interface_Aggregation             `path:"aggregation" module:"openconfig-if-aggregate"`
	ΛAggregation      []ygot.Annotation                  `path:"@aggregation" ygotAnnotation:"true"`
	Counters          *Interface_Counters                `path:"state/counters" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛCounters         []ygot.Annotation                  `path:"state/@counters" ygotAnnotation:"true"`
	Cpu               *bool                              `path:"state/cpu" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛCpu              []ygot.Annotation                  `path:"state/@cpu" ygotAnnotation:"true"`
	Description       *string                            `path:"config/description" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛDescription      []ygot.Annotation                  `path:"config/@description" ygotAnnotation:"true"`
	Enabled           *bool                              `path:"config/enabled" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛEnabled          []ygot.Annotation                  `path:"config/@enabled" ygotAnnotation:"true"`
	Ethernet          *Interface_Ethernet                `path:"ethernet" module:"openconfig-if-ethernet"`
	ΛEthernet         []ygot.Annotation                  `path:"@ethernet" ygotAnnotation:"true"`
	HardwarePort      *string                            `path:"state/hardware-port" module:"openconfig-interfaces/openconfig-platform-port"`
	ΛHardwarePort     []ygot.Annotation                  `path:"state/@hardware-port" ygotAnnotation:"true"`
	HoldTime          *Interface_HoldTime                `path:"hold-time" module:"openconfig-interfaces"`
	ΛHoldTime         []ygot.Annotation                  `path:"@hold-time" ygotAnnotation:"true"`
	Ifindex           *uint32                            `path:"state/ifindex" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛIfindex          []ygot.Annotation                  `path:"state/@ifindex" ygotAnnotation:"true"`
	LastChange        *uint64                            `path:"state/last-change" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛLastChange       []ygot.Annotation                  `path:"state/@last-change" ygotAnnotation:"true"`
	Logical           *bool                              `path:"state/logical" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛLogical          []ygot.Annotation                  `path:"state/@logical" ygotAnnotation:"true"`
	LoopbackMode      E_TransportTypes_LoopbackModeType  `path:"config/loopback-mode" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛLoopbackMode     []ygot.Annotation                  `path:"config/@loopback-mode" ygotAnnotation:"true"`
	Management        *bool                              `path:"state/management" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛManagement       []ygot.Annotation                  `path:"state/@management" ygotAnnotation:"true"`
	Mtu               *uint16                            `path:"config/mtu" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛMtu              []ygot.Annotation                  `path:"config/@mtu" ygotAnnotation:"true"`
	Name              *string                            `path:"config/name|name" module:"openconfig-interfaces/openconfig-interfaces|openconfig-interfaces"`
	ΛName             []ygot.Annotation                  `path:"config/@name|@name" ygotAnnotation:"true"`
	OperStatus        E_Interface_OperStatus             `path:"state/oper-status" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛOperStatus       []ygot.Annotation                  `path:"state/@oper-status" ygotAnnotation:"true"`
	PenaltyBasedAied  *Interface_PenaltyBasedAied        `path:"penalty-based-aied" module:"openconfig-interfaces"`
	ΛPenaltyBasedAied []ygot.Annotation                  `path:"@penalty-based-aied" ygotAnnotation:"true"`
	PhysicalChannel   []uint16                           `path:"state/physical-channel" module:"openconfig-interfaces/openconfig-platform-transceiver"`
	ΛPhysicalChannel  []ygot.Annotation                  `path:"state/@physical-channel" ygotAnnotation:"true"`
	RoutedVlan        *Interface_RoutedVlan              `path:"routed-vlan" module:"openconfig-vlan"`
	ΛRoutedVlan       []ygot.Annotation                  `path:"@routed-vlan" ygotAnnotation:"true"`
	Sonet             *Interface_Sonet                   `path:"sonet" module:"openconfig-transport-line-common"`
	ΛSonet            []ygot.Annotation                  `path:"@sonet" ygotAnnotation:"true"`
	Subinterface      map[uint32]*Interface_Subinterface `path:"subinterfaces/subinterface" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛSubinterface     []ygot.Annotation                  `path:"subinterfaces/@subinterface" ygotAnnotation:"true"`
	Tpid              E_VlanTypes_TPID_TYPES             `path:"config/tpid" module:"openconfig-interfaces/openconfig-vlan"`
	ΛTpid             []ygot.Annotation                  `path:"config/@tpid" ygotAnnotation:"true"`
	Transceiver       *string                            `path:"state/transceiver" module:"openconfig-interfaces/openconfig-platform-transceiver"`
	ΛTransceiver      []ygot.Annotation                  `path:"state/@transceiver" ygotAnnotation:"true"`
	Type              E_IETFInterfaces_InterfaceType     `path:"config/type" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛType             []ygot.Annotation                  `path:"config/@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) *Interface_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) *Interface_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver Interface. If there is no such element, the function
// is a no-op.
func (t *Interface) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied Interface_Subinterface struct to the
// list Subinterface of Interface. If the key value(s) specified in
// the supplied Interface_Subinterface already exist in the list, an error is
// returned.
func (t *Interface) AppendSubinterface(v *Interface_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateAggregation() *Interface_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &Interface_Aggregation{}
	return t.Aggregation
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateEthernet() *Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreatePenaltyBasedAied retrieves the value of the PenaltyBasedAied field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreatePenaltyBasedAied() *Interface_PenaltyBasedAied {
	if t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	t.PenaltyBasedAied = &Interface_PenaltyBasedAied{}
	return t.PenaltyBasedAied
}

// GetOrCreateRoutedVlan retrieves the value of the RoutedVlan field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateRoutedVlan() *Interface_RoutedVlan {
	if t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	t.RoutedVlan = &Interface_RoutedVlan{}
	return t.RoutedVlan
}

// GetOrCreateSonet retrieves the value of the Sonet field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateSonet() *Interface_Sonet {
	if t.Sonet != nil {
		return t.Sonet
	}
	t.Sonet = &Interface_Sonet{}
	return t.Sonet
}

// GetAggregation returns the value of the Aggregation struct pointer
// from Interface. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetAggregation() *Interface_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetEthernet() *Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetPenaltyBasedAied returns the value of the PenaltyBasedAied struct pointer
// from Interface. If the receiver or the field PenaltyBasedAied is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetPenaltyBasedAied() *Interface_PenaltyBasedAied {
	if t != nil && t.PenaltyBasedAied != nil {
		return t.PenaltyBasedAied
	}
	return nil
}

// GetRoutedVlan returns the value of the RoutedVlan struct pointer
// from Interface. If the receiver or the field RoutedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetRoutedVlan() *Interface_RoutedVlan {
	if t != nil && t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	return nil
}

// GetSonet returns the value of the Sonet struct pointer
// from Interface. If the receiver or the field Sonet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetSonet() *Interface_Sonet {
	if t != nil && t.Sonet != nil {
		return t.Sonet
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminStatus is set, it can
// safely use t.GetAdminStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminStatus == nil' before retrieving the leaf's value.
func (t *Interface) GetAdminStatus() E_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetCpu retrieves the value of the leaf Cpu from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpu is set, it can
// safely use t.GetCpu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpu == nil' before retrieving the leaf's value.
func (t *Interface) GetCpu() bool {
	if t == nil || t.Cpu == nil {
		return false
	}
	return *t.Cpu
}

// GetDescription retrieves the value of the leaf Description from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHardwarePort retrieves the value of the leaf HardwarePort from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HardwarePort is set, it can
// safely use t.GetHardwarePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HardwarePort == nil' before retrieving the leaf's value.
func (t *Interface) GetHardwarePort() string {
	if t == nil || t.HardwarePort == nil {
		return ""
	}
	return *t.HardwarePort
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *Interface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastChange is set, it can
// safely use t.GetLastChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastChange == nil' before retrieving the leaf's value.
func (t *Interface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Logical is set, it can
// safely use t.GetLogical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Logical == nil' before retrieving the leaf's value.
func (t *Interface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopbackMode is set, it can
// safely use t.GetLoopbackMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopbackMode == nil' before retrieving the leaf's value.
func (t *Interface) GetLoopbackMode() E_TransportTypes_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return TransportTypes_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetManagement retrieves the value of the leaf Management from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Management is set, it can
// safely use t.GetManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Management == nil' before retrieving the leaf's value.
func (t *Interface) GetManagement() bool {
	if t == nil || t.Management == nil {
		return false
	}
	return *t.Management
}

// GetMtu retrieves the value of the leaf Mtu from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *Interface) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperStatus is set, it can
// safely use t.GetOperStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperStatus == nil' before retrieving the leaf's value.
func (t *Interface) GetOperStatus() E_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PhysicalChannel is set, it can
// safely use t.GetPhysicalChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PhysicalChannel == nil' before retrieving the leaf's value.
func (t *Interface) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTpid retrieves the value of the leaf Tpid from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tpid is set, it can
// safely use t.GetTpid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tpid == nil' before retrieving the leaf's value.
func (t *Interface) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return VlanTypes_TPID_TYPES_TPID_0X8100
	}
	return t.Tpid
}

// GetTransceiver retrieves the value of the leaf Transceiver from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transceiver is set, it can
// safely use t.GetTransceiver() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transceiver == nil' before retrieving the leaf's value.
func (t *Interface) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// GetType retrieves the value of the leaf Type from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Interface) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enabled == nil {
		var v bool = true
		t.Enabled = &v
	}
	if t.LoopbackMode == 0 {
		t.LoopbackMode = TransportTypes_LoopbackModeType_NONE
	}
	if t.Tpid == 0 {
		t.Tpid = VlanTypes_TPID_TYPES_TPID_0X8100
	}
	t.Aggregation.PopulateDefaults()
	t.Counters.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.PenaltyBasedAied.PopulateDefaults()
	t.RoutedVlan.PopulateDefaults()
	t.Sonet.PopulateDefaults()
	for _, e := range t.Subinterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface.
func (*Interface) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_Aggregation struct {
	ΛMetadata     []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	LagSpeed      *uint32                             `path:"state/lag-speed" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	ΛLagSpeed     []ygot.Annotation                   `path:"state/@lag-speed" ygotAnnotation:"true"`
	LagType       E_IfAggregate_AggregationType       `path:"config/lag-type" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	ΛLagType      []ygot.Annotation                   `path:"config/@lag-type" ygotAnnotation:"true"`
	Member        []string                            `path:"state/member" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	ΛMember       []ygot.Annotation                   `path:"state/@member" ygotAnnotation:"true"`
	MinLinks      *uint16                             `path:"config/min-links" module:"openconfig-if-aggregate/openconfig-if-aggregate"`
	ΛMinLinks     []ygot.Annotation                   `path:"config/@min-links" ygotAnnotation:"true"`
	SwitchedVlan  *Interface_Aggregation_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan []ygot.Annotation                   `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation) IsYANGGoStruct() {}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Aggregation) GetOrCreateSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Aggregation_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Aggregation. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Aggregation) GetSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetLagSpeed retrieves the value of the leaf LagSpeed from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagSpeed is set, it can
// safely use t.GetLagSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagSpeed() uint32 {
	if t == nil || t.LagSpeed == nil {
		return 0
	}
	return *t.LagSpeed
}

// GetLagType retrieves the value of the leaf LagType from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagType is set, it can
// safely use t.GetLagType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagType == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagType() E_IfAggregate_AggregationType {
	if t == nil || t.LagType == 0 {
		return 0
	}
	return t.LagType
}

// GetMember retrieves the value of the leaf Member from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetMinLinks retrieves the value of the leaf MinLinks from the Interface_Aggregation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinLinks is set, it can
// safely use t.GetMinLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinLinks == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMinLinks() uint16 {
	if t == nil || t.MinLinks == nil {
		return 0
	}
	return *t.MinLinks
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Aggregation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Aggregation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SwitchedVlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Aggregation.
func (*Interface_Aggregation) ΛBelongingModule() string {
	return "openconfig-if-aggregate"
}

// Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan struct {
	ΛMetadata      []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                               `path:"config/access-vlan" module:"openconfig-vlan/openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                     `path:"config/@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_VlanTypes_VlanModeType                              `path:"config/interface-mode" module:"openconfig-vlan/openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                     `path:"config/@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                               `path:"config/native-vlan" module:"openconfig-vlan/openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                     `path:"config/@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union `path:"config/trunk-vlans" module:"openconfig-vlan/openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                     `path:"config/@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessVlan is set, it can
// safely use t.GetAccessVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessVlan == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceMode is set, it can
// safely use t.GetInterfaceMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceMode == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NativeVlan is set, it can
// safely use t.GetNativeVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NativeVlan == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Aggregation_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrunkVlans is set, it can
// safely use t.GetTrunkVlans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrunkVlans == nil' before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetTrunkVlans() []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Aggregation_SwitchedVlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Aggregation_SwitchedVlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Aggregation_SwitchedVlan.
func (*Interface_Aggregation_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
	Resets              *uint64           `path:"resets" module:"openconfig-interfaces"`
	ΛResets             []ygot.Annotation `path:"@resets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CarrierTransitions is set, it can
// safely use t.GetCarrierTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CarrierTransitions == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBroadcastPkts is set, it can
// safely use t.GetInBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InDiscards is set, it can
// safely use t.GetInDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InErrors is set, it can
// safely use t.GetInErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFcsErrors is set, it can
// safely use t.GetInFcsErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFcsErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMulticastPkts is set, it can
// safely use t.GetInMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnicastPkts is set, it can
// safely use t.GetInUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUnknownProtos is set, it can
// safely use t.GetInUnknownProtos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUnknownProtos == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastClear is set, it can
// safely use t.GetLastClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastClear == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutBroadcastPkts is set, it can
// safely use t.GetOutBroadcastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutBroadcastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutDiscards is set, it can
// safely use t.GetOutDiscards() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutDiscards == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutErrors is set, it can
// safely use t.GetOutErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutErrors == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMulticastPkts is set, it can
// safely use t.GetOutMulticastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMulticastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutUnicastPkts is set, it can
// safely use t.GetOutUnicastPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutUnicastPkts == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// GetResets retrieves the value of the leaf Resets from the Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resets is set, it can
// safely use t.GetResets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resets == nil' before retrieving the leaf's value.
func (t *Interface_Counters) GetResets() uint64 {
	if t == nil || t.Resets == nil {
		return 0
	}
	return *t.Resets
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Counters.
func (*Interface_Counters) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_Ethernet struct {
	ΛMetadata               []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	AggregateId             *string                          `path:"config/aggregate-id" module:"openconfig-if-ethernet/openconfig-if-aggregate"`
	ΛAggregateId            []ygot.Annotation                `path:"config/@aggregate-id" ygotAnnotation:"true"`
	AutoNegotiate           *bool                            `path:"config/auto-negotiate" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛAutoNegotiate          []ygot.Annotation                `path:"config/@auto-negotiate" ygotAnnotation:"true"`
	Counters                *Interface_Ethernet_Counters     `path:"state/counters" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛCounters               []ygot.Annotation                `path:"state/@counters" ygotAnnotation:"true"`
	DuplexMode              E_Ethernet_DuplexMode            `path:"config/duplex-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛDuplexMode             []ygot.Annotation                `path:"config/@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl       *bool                            `path:"config/enable-flow-control" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛEnableFlowControl      []ygot.Annotation                `path:"config/@enable-flow-control" ygotAnnotation:"true"`
	FecMode                 E_IfEthernet_INTERFACE_FEC       `path:"config/fec-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛFecMode                []ygot.Annotation                `path:"config/@fec-mode" ygotAnnotation:"true"`
	HwMacAddress            *string                          `path:"state/hw-mac-address" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛHwMacAddress           []ygot.Annotation                `path:"state/@hw-mac-address" ygotAnnotation:"true"`
	MacAddress              *string                          `path:"config/mac-address" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛMacAddress             []ygot.Annotation                `path:"config/@mac-address" ygotAnnotation:"true"`
	NegotiatedDuplexMode    E_Ethernet_NegotiatedDuplexMode  `path:"state/negotiated-duplex-mode" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛNegotiatedDuplexMode   []ygot.Annotation                `path:"state/@negotiated-duplex-mode" ygotAnnotation:"true"`
	NegotiatedPortSpeed     E_IfEthernet_ETHERNET_SPEED      `path:"state/negotiated-port-speed" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛNegotiatedPortSpeed    []ygot.Annotation                `path:"state/@negotiated-port-speed" ygotAnnotation:"true"`
	PortSpeed               E_IfEthernet_ETHERNET_SPEED      `path:"config/port-speed" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛPortSpeed              []ygot.Annotation                `path:"config/@port-speed" ygotAnnotation:"true"`
	StandaloneLinkTraining  *bool                            `path:"config/standalone-link-training" module:"openconfig-if-ethernet/openconfig-if-ethernet"`
	ΛStandaloneLinkTraining []ygot.Annotation                `path:"config/@standalone-link-training" ygotAnnotation:"true"`
	SwitchedVlan            *Interface_Ethernet_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
	ΛSwitchedVlan           []ygot.Annotation                `path:"@switched-vlan" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateCounters() *Interface_Ethernet_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Ethernet_Counters{}
	return t.Counters
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Ethernet_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Ethernet. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetCounters() *Interface_Ethernet_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Ethernet. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetAggregateId retrieves the value of the leaf AggregateId from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateId is set, it can
// safely use t.GetAggregateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateId == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAggregateId() string {
	if t == nil || t.AggregateId == nil {
		return ""
	}
	return *t.AggregateId
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoNegotiate is set, it can
// safely use t.GetAutoNegotiate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoNegotiate == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplexMode is set, it can
// safely use t.GetDuplexMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplexMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetDuplexMode() E_Ethernet_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableFlowControl is set, it can
// safely use t.GetEnableFlowControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableFlowControl == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetFecMode retrieves the value of the leaf FecMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecMode is set, it can
// safely use t.GetFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetFecMode() E_IfEthernet_INTERFACE_FEC {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetHwMacAddress retrieves the value of the leaf HwMacAddress from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HwMacAddress is set, it can
// safely use t.GetHwMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HwMacAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetHwMacAddress() string {
	if t == nil || t.HwMacAddress == nil {
		return ""
	}
	return *t.HwMacAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNegotiatedDuplexMode retrieves the value of the leaf NegotiatedDuplexMode from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NegotiatedDuplexMode is set, it can
// safely use t.GetNegotiatedDuplexMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NegotiatedDuplexMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedDuplexMode() E_Ethernet_NegotiatedDuplexMode {
	if t == nil || t.NegotiatedDuplexMode == 0 {
		return 0
	}
	return t.NegotiatedDuplexMode
}

// GetNegotiatedPortSpeed retrieves the value of the leaf NegotiatedPortSpeed from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NegotiatedPortSpeed is set, it can
// safely use t.GetNegotiatedPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NegotiatedPortSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.NegotiatedPortSpeed == 0 {
		return 0
	}
	return t.NegotiatedPortSpeed
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSpeed is set, it can
// safely use t.GetPortSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSpeed == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// GetStandaloneLinkTraining retrieves the value of the leaf StandaloneLinkTraining from the Interface_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandaloneLinkTraining is set, it can
// safely use t.GetStandaloneLinkTraining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandaloneLinkTraining == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet) GetStandaloneLinkTraining() bool {
	if t == nil || t.StandaloneLinkTraining == nil {
		return false
	}
	return *t.StandaloneLinkTraining
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoNegotiate == nil {
		var v bool = true
		t.AutoNegotiate = &v
	}
	if t.EnableFlowControl == nil {
		var v bool = false
		t.EnableFlowControl = &v
	}
	if t.StandaloneLinkTraining == nil {
		var v bool = false
		t.StandaloneLinkTraining = &v
	}
	t.Counters.PopulateDefaults()
	t.SwitchedVlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet.
func (*Interface_Ethernet) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// Interface_Ethernet_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_Counters struct {
	ΛMetadata            []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	In_8021QFrames       *uint64                                     `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	ΛIn_8021QFrames      []ygot.Annotation                           `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors        *uint64                                     `path:"in-block-errors" module:"openconfig-if-ethernet"`
	ΛInBlockErrors       []ygot.Annotation                           `path:"@in-block-errors" ygotAnnotation:"true"`
	InCarrierErrors      *uint64                                     `path:"in-carrier-errors" module:"openconfig-if-ethernet"`
	ΛInCarrierErrors     []ygot.Annotation                           `path:"@in-carrier-errors" ygotAnnotation:"true"`
	InCrcErrors          *uint64                                     `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	ΛInCrcErrors         []ygot.Annotation                           `path:"@in-crc-errors" ygotAnnotation:"true"`
	InDistribution       *Interface_Ethernet_Counters_InDistribution `path:"in-distribution" module:"openconfig-if-ethernet-ext"`
	ΛInDistribution      []ygot.Annotation                           `path:"@in-distribution" ygotAnnotation:"true"`
	InFragmentFrames     *uint64                                     `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	ΛInFragmentFrames    []ygot.Annotation                           `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InInterruptedTx      *uint64                                     `path:"in-interrupted-tx" module:"openconfig-if-ethernet"`
	ΛInInterruptedTx     []ygot.Annotation                           `path:"@in-interrupted-tx" ygotAnnotation:"true"`
	InJabberFrames       *uint64                                     `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	ΛInJabberFrames      []ygot.Annotation                           `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InLateCollision      *uint64                                     `path:"in-late-collision" module:"openconfig-if-ethernet"`
	ΛInLateCollision     []ygot.Annotation                           `path:"@in-late-collision" ygotAnnotation:"true"`
	InMacControlFrames   *uint64                                     `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛInMacControlFrames  []ygot.Annotation                           `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacErrorsRx        *uint64                                     `path:"in-mac-errors-rx" module:"openconfig-if-ethernet"`
	ΛInMacErrorsRx       []ygot.Annotation                           `path:"@in-mac-errors-rx" ygotAnnotation:"true"`
	InMacPauseFrames     *uint64                                     `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛInMacPauseFrames    []ygot.Annotation                           `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InMaxsizeExceeded    *uint64                                     `path:"in-maxsize-exceeded" module:"openconfig-if-ethernet"`
	ΛInMaxsizeExceeded   []ygot.Annotation                           `path:"@in-maxsize-exceeded" ygotAnnotation:"true"`
	InOversizeFrames     *uint64                                     `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	ΛInOversizeFrames    []ygot.Annotation                           `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InSingleCollision    *uint64                                     `path:"in-single-collision" module:"openconfig-if-ethernet"`
	ΛInSingleCollision   []ygot.Annotation                           `path:"@in-single-collision" ygotAnnotation:"true"`
	InSymbolError        *uint64                                     `path:"in-symbol-error" module:"openconfig-if-ethernet"`
	ΛInSymbolError       []ygot.Annotation                           `path:"@in-symbol-error" ygotAnnotation:"true"`
	InUndersizeFrames    *uint64                                     `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	ΛInUndersizeFrames   []ygot.Annotation                           `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames      *uint64                                     `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	ΛOut_8021QFrames     []ygot.Annotation                           `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutMacControlFrames  *uint64                                     `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛOutMacControlFrames []ygot.Annotation                           `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacErrorsTx       *uint64                                     `path:"out-mac-errors-tx" module:"openconfig-if-ethernet"`
	ΛOutMacErrorsTx      []ygot.Annotation                           `path:"@out-mac-errors-tx" ygotAnnotation:"true"`
	OutMacPauseFrames    *uint64                                     `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛOutMacPauseFrames   []ygot.Annotation                           `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters) IsYANGGoStruct() {}

// GetOrCreateInDistribution retrieves the value of the InDistribution field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet_Counters) GetOrCreateInDistribution() *Interface_Ethernet_Counters_InDistribution {
	if t.InDistribution != nil {
		return t.InDistribution
	}
	t.InDistribution = &Interface_Ethernet_Counters_InDistribution{}
	return t.InDistribution
}

// GetInDistribution returns the value of the InDistribution struct pointer
// from Interface_Ethernet_Counters. If the receiver or the field InDistribution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet_Counters) GetInDistribution() *Interface_Ethernet_Counters_InDistribution {
	if t != nil && t.InDistribution != nil {
		return t.InDistribution
	}
	return nil
}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if In_8021QFrames is set, it can
// safely use t.GetIn_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.In_8021QFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InBlockErrors is set, it can
// safely use t.GetInBlockErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InBlockErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCarrierErrors retrieves the value of the leaf InCarrierErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCarrierErrors is set, it can
// safely use t.GetInCarrierErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCarrierErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCarrierErrors() uint64 {
	if t == nil || t.InCarrierErrors == nil {
		return 0
	}
	return *t.InCarrierErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InCrcErrors is set, it can
// safely use t.GetInCrcErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InCrcErrors == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFragmentFrames is set, it can
// safely use t.GetInFragmentFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFragmentFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInInterruptedTx retrieves the value of the leaf InInterruptedTx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InInterruptedTx is set, it can
// safely use t.GetInInterruptedTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InInterruptedTx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInInterruptedTx() uint64 {
	if t == nil || t.InInterruptedTx == nil {
		return 0
	}
	return *t.InInterruptedTx
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InJabberFrames is set, it can
// safely use t.GetInJabberFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InJabberFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInLateCollision retrieves the value of the leaf InLateCollision from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLateCollision is set, it can
// safely use t.GetInLateCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLateCollision == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInLateCollision() uint64 {
	if t == nil || t.InLateCollision == nil {
		return 0
	}
	return *t.InLateCollision
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacControlFrames is set, it can
// safely use t.GetInMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacControlFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacErrorsRx retrieves the value of the leaf InMacErrorsRx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacErrorsRx is set, it can
// safely use t.GetInMacErrorsRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacErrorsRx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacErrorsRx() uint64 {
	if t == nil || t.InMacErrorsRx == nil {
		return 0
	}
	return *t.InMacErrorsRx
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMacPauseFrames is set, it can
// safely use t.GetInMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMacPauseFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInMaxsizeExceeded retrieves the value of the leaf InMaxsizeExceeded from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InMaxsizeExceeded is set, it can
// safely use t.GetInMaxsizeExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InMaxsizeExceeded == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMaxsizeExceeded() uint64 {
	if t == nil || t.InMaxsizeExceeded == nil {
		return 0
	}
	return *t.InMaxsizeExceeded
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOversizeFrames is set, it can
// safely use t.GetInOversizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOversizeFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInSingleCollision retrieves the value of the leaf InSingleCollision from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSingleCollision is set, it can
// safely use t.GetInSingleCollision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSingleCollision == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSingleCollision() uint64 {
	if t == nil || t.InSingleCollision == nil {
		return 0
	}
	return *t.InSingleCollision
}

// GetInSymbolError retrieves the value of the leaf InSymbolError from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InSymbolError is set, it can
// safely use t.GetInSymbolError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InSymbolError == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSymbolError() uint64 {
	if t == nil || t.InSymbolError == nil {
		return 0
	}
	return *t.InSymbolError
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUndersizeFrames is set, it can
// safely use t.GetInUndersizeFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUndersizeFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Out_8021QFrames is set, it can
// safely use t.GetOut_8021QFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Out_8021QFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacControlFrames is set, it can
// safely use t.GetOutMacControlFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacControlFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacErrorsTx retrieves the value of the leaf OutMacErrorsTx from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacErrorsTx is set, it can
// safely use t.GetOutMacErrorsTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacErrorsTx == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacErrorsTx() uint64 {
	if t == nil || t.OutMacErrorsTx == nil {
		return 0
	}
	return *t.OutMacErrorsTx
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the Interface_Ethernet_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutMacPauseFrames is set, it can
// safely use t.GetOutMacPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutMacPauseFrames == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InDistribution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet_Counters.
func (*Interface_Ethernet_Counters) ΛBelongingModule() string {
	return "openconfig-if-ethernet"
}

// Interface_Ethernet_Counters_InDistribution represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-distribution YANG schema element.
type Interface_Ethernet_Counters_InDistribution struct {
	ΛMetadata                 []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InFrames_1024_1518Octets  *uint64           `path:"in-frames-1024-1518-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_1024_1518Octets []ygot.Annotation `path:"@in-frames-1024-1518-octets" ygotAnnotation:"true"`
	InFrames_128_255Octets    *uint64           `path:"in-frames-128-255-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_128_255Octets   []ygot.Annotation `path:"@in-frames-128-255-octets" ygotAnnotation:"true"`
	InFrames_256_511Octets    *uint64           `path:"in-frames-256-511-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_256_511Octets   []ygot.Annotation `path:"@in-frames-256-511-octets" ygotAnnotation:"true"`
	InFrames_512_1023Octets   *uint64           `path:"in-frames-512-1023-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_512_1023Octets  []ygot.Annotation `path:"@in-frames-512-1023-octets" ygotAnnotation:"true"`
	InFrames_64Octets         *uint64           `path:"in-frames-64-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_64Octets        []ygot.Annotation `path:"@in-frames-64-octets" ygotAnnotation:"true"`
	InFrames_65_127Octets     *uint64           `path:"in-frames-65-127-octets" module:"openconfig-if-ethernet-ext"`
	ΛInFrames_65_127Octets    []ygot.Annotation `path:"@in-frames-65-127-octets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters_InDistribution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters_InDistribution) IsYANGGoStruct() {}

// GetInFrames_1024_1518Octets retrieves the value of the leaf InFrames_1024_1518Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_1024_1518Octets is set, it can
// safely use t.GetInFrames_1024_1518Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_1024_1518Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_1024_1518Octets() uint64 {
	if t == nil || t.InFrames_1024_1518Octets == nil {
		return 0
	}
	return *t.InFrames_1024_1518Octets
}

// GetInFrames_128_255Octets retrieves the value of the leaf InFrames_128_255Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_128_255Octets is set, it can
// safely use t.GetInFrames_128_255Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_128_255Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_128_255Octets() uint64 {
	if t == nil || t.InFrames_128_255Octets == nil {
		return 0
	}
	return *t.InFrames_128_255Octets
}

// GetInFrames_256_511Octets retrieves the value of the leaf InFrames_256_511Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_256_511Octets is set, it can
// safely use t.GetInFrames_256_511Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_256_511Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_256_511Octets() uint64 {
	if t == nil || t.InFrames_256_511Octets == nil {
		return 0
	}
	return *t.InFrames_256_511Octets
}

// GetInFrames_512_1023Octets retrieves the value of the leaf InFrames_512_1023Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_512_1023Octets is set, it can
// safely use t.GetInFrames_512_1023Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_512_1023Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_512_1023Octets() uint64 {
	if t == nil || t.InFrames_512_1023Octets == nil {
		return 0
	}
	return *t.InFrames_512_1023Octets
}

// GetInFrames_64Octets retrieves the value of the leaf InFrames_64Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_64Octets is set, it can
// safely use t.GetInFrames_64Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_64Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_64Octets() uint64 {
	if t == nil || t.InFrames_64Octets == nil {
		return 0
	}
	return *t.InFrames_64Octets
}

// GetInFrames_65_127Octets retrieves the value of the leaf InFrames_65_127Octets from the Interface_Ethernet_Counters_InDistribution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames_65_127Octets is set, it can
// safely use t.GetInFrames_65_127Octets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames_65_127Octets == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters_InDistribution) GetInFrames_65_127Octets() uint64 {
	if t == nil || t.InFrames_65_127Octets == nil {
		return 0
	}
	return *t.InFrames_65_127Octets
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet_Counters_InDistribution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet_Counters_InDistribution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters_InDistribution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_Counters_InDistribution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters_InDistribution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_Counters_InDistribution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet_Counters_InDistribution.
func (*Interface_Ethernet_Counters_InDistribution) ΛBelongingModule() string {
	return "openconfig-if-ethernet-ext"
}

// Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan struct {
	ΛMetadata      []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	AccessVlan     *uint16                                            `path:"config/access-vlan" module:"openconfig-vlan/openconfig-vlan"`
	ΛAccessVlan    []ygot.Annotation                                  `path:"config/@access-vlan" ygotAnnotation:"true"`
	InterfaceMode  E_VlanTypes_VlanModeType                           `path:"config/interface-mode" module:"openconfig-vlan/openconfig-vlan"`
	ΛInterfaceMode []ygot.Annotation                                  `path:"config/@interface-mode" ygotAnnotation:"true"`
	NativeVlan     *uint16                                            `path:"config/native-vlan" module:"openconfig-vlan/openconfig-vlan"`
	ΛNativeVlan    []ygot.Annotation                                  `path:"config/@native-vlan" ygotAnnotation:"true"`
	TrunkVlans     []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union `path:"config/trunk-vlans" module:"openconfig-vlan/openconfig-vlan"`
	ΛTrunkVlans    []ygot.Annotation                                  `path:"config/@trunk-vlans" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessVlan is set, it can
// safely use t.GetAccessVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessVlan == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceMode is set, it can
// safely use t.GetInterfaceMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceMode == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NativeVlan is set, it can
// safely use t.GetNativeVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NativeVlan == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Ethernet_SwitchedVlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrunkVlans is set, it can
// safely use t.GetTrunkVlans() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrunkVlans == nil' before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetTrunkVlans() []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ethernet_SwitchedVlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ethernet_SwitchedVlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ethernet_SwitchedVlan.
func (*Interface_Ethernet_SwitchedVlan) ΛBelongingModule() string {
	return "openconfig-vlan"
}

// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"config/down" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"config/@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"config/up" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"config/@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the Interface_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *Interface_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the Interface_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *Interface_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_HoldTime.
func (*Interface_HoldTime) ΛBelongingModule() string {
	return "openconfig-interfaces"
}

// Interface_PenaltyBasedAied represents the /openconfig-interfaces/interfaces/interface/penalty-based-aied YANG schema element.
type Interface_PenaltyBasedAied struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DecayHalfLife      *uint32           `path:"config/decay-half-life" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛDecayHalfLife     []ygot.Annotation `path:"config/@decay-half-life" ygotAnnotation:"true"`
	FlapPenalty        *uint32           `path:"config/flap-penalty" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛFlapPenalty       []ygot.Annotation `path:"config/@flap-penalty" ygotAnnotation:"true"`
	MaxSuppressTime    *uint32           `path:"config/max-suppress-time" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛMaxSuppressTime   []ygot.Annotation `path:"config/@max-suppress-time" ygotAnnotation:"true"`
	ReuseThreshold     *uint32           `path:"config/reuse-threshold" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛReuseThreshold    []ygot.Annotation `path:"config/@reuse-threshold" ygotAnnotation:"true"`
	SuppressThreshold  *uint32           `path:"config/suppress-threshold" module:"openconfig-interfaces/openconfig-interfaces"`
	ΛSuppressThreshold []ygot.Annotation `path:"config/@suppress-threshold" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_PenaltyBasedAied implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_PenaltyBasedAied) IsYANGGoStruct() {}

// GetDecayHalfLife retrieves the value of the leaf DecayHalfLife from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecayHalfLife is set, it can
// safely use t.GetDecayHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecayHalfLife == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetDecayHalfLife() uint32 {
	if t == nil || t.DecayHalfLife == nil {
		return 0
	}
	return *t.DecayHalfLife
}

// GetFlapPenalty retrieves the value of the leaf FlapPenalty from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlapPenalty is set, it can
// safely use t.GetFlapPenalty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlapPenalty == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetFlapPenalty() uint32 {
	if t == nil || t.FlapPenalty == nil {
		return 0
	}
	return *t.FlapPenalty
}

// GetMaxSuppressTime retrieves the value of the leaf MaxSuppressTime from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppressTime is set, it can
// safely use t.GetMaxSuppressTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppressTime == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetMaxSuppressTime() uint32 {
	if t == nil || t.MaxSuppressTime == nil {
		return 0
	}
	return *t.MaxSuppressTime
}

// GetReuseThreshold retrieves the value of the leaf ReuseThreshold from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseThreshold is set, it can
// safely use t.GetReuseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseThreshold == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetReuseThreshold() uint32 {
	if t == nil || t.ReuseThreshold == nil {
		return 0
	}
	return *t.ReuseThreshold
}

// GetSuppressThreshold retrieves the value of the leaf SuppressThreshold from the Interface_PenaltyBasedAied
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressThreshold is set, it can
// safely use t.GetSuppressThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressThreshold == nil' before retrieving the leaf's value.
func (t *Interface_PenaltyBasedAied) GetSuppressThreshold() uint32 {
	if t == nil || t.SuppressThreshold == nil {
		return 0
	}
	return *t.SuppressThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_PenaltyBasedAied
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_PenaltyBasedAied) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DecayHalfLife == nil {
		var v uint32 = 0
		t.DecayHalfLife = &v
	}
	if t.FlapPenalty == nil {
		var v uint32 = 0
		t.FlapPenalty = &v
	}
	if t.MaxSuppressTime == nil {
		var v uint32 = 0
		t.MaxSuppressTime = &v
	}
	if t.ReuseThreshold == nil {
		var v uint32 = 0
		t.ReuseThreshold = &v
	}
	if t.SuppressThreshold == nil {
		var v uint32 = 0
		t.SuppressThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_PenaltyBasedAied) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_PenaltyBasedAied"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_PenaltyBasedAied) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_PenaltyBasedAied) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_PenaltyBasedAied.
func (*Interface_PenaltyBasedAied) ΛBelongingModule() string {
	return "openconfig-interfaces"
}
