/*
Package ocygot is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.12/genutil/names.go
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/defined-sets/openconfig-defined-sets.yang
  - public/release/models/ethernet-segments/openconfig-ethernet-segments.yang
  - public/release/models/flex-algo/openconfig-flexalgo.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/keychain/openconfig-keychain.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls.yang
  - public/release/models/multicast/openconfig-igmp.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/optical-transport/openconfig-optical-amplifier.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-line-protection.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/pcep/openconfig-pcep.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/probes/openconfig-probes.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling.yang
  - public/release/models/segment-routing/openconfig-segment-routing.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/telemetry/openconfig-telemetry.yang
  - public/release/models/vlan/openconfig-vlan.yang

Imported modules were sourced from:
  - public/...
*/
package ocygot

import (
	"github.com/openconfig/ygot/ygot"
)

// NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/keepalive YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/keepalive YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/redelegation-timeout-interval YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/redelegation-timeout-interval YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/state-timeout-interval YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/state-timeout-interval YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPathAny struct {
	*ygot.NodePath
}

// DeadTimer (leaf): Interval after which PCE session is declared dead.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dead-timer"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/dead-timer"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath) DeadTimer() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPath {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dead-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeadTimer (leaf): Interval after which PCE session is declared dead.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dead-timer"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/dead-timer"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny) DeadTimer() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPathAny {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_DeadTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dead-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keepalive (leaf): Interval for sending keepalive messages over PCE session.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/keepalive"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/keepalive"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath) Keepalive() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePath {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "keepalive"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keepalive (leaf): Interval for sending keepalive messages over PCE session.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/keepalive"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/keepalive"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny) Keepalive() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePathAny {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_KeepalivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "keepalive"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedelegationTimeoutInterval (leaf): When a PCEP session is terminated, the period of time a PCC waits
// before revoking LSP delegation and attempting to redelegate LSPs
// associated with the terminated PCEP session to an alternate PCE.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/redelegation-timeout-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/redelegation-timeout-interval"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath) RedelegationTimeoutInterval() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPath {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "redelegation-timeout-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedelegationTimeoutInterval (leaf): When a PCEP session is terminated, the period of time a PCC waits
// before revoking LSP delegation and attempting to redelegate LSPs
// associated with the terminated PCEP session to an alternate PCE.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/redelegation-timeout-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/redelegation-timeout-interval"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny) RedelegationTimeoutInterval() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPathAny {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_RedelegationTimeoutIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "redelegation-timeout-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateTimeoutInterval (leaf): When a PCEP session is terminated, the period of time a PCC waits
// before before flushing LSP state associated with that PCEP session
// and reverting to operator-defined default parameters or behaviors.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/state-timeout-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/state-timeout-interval"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPath) StateTimeoutInterval() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPath {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "state-timeout-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateTimeoutInterval (leaf): When a PCEP session is terminated, the period of time a PCC waits
// before before flushing LSP state associated with that PCEP session
// and reverting to operator-defined default parameters or behaviors.
// ----------------------------------------
// Defining module: "openconfig-pcep"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/state-timeout-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers/config/state-timeout-interval"
func (n *NetworkInstance_Protocol_Pcep_PathComputationServer_TimersPathAny) StateTimeoutInterval() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPathAny {
	return &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers_StateTimeoutIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "state-timeout-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_PimPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim YANG schema element.
type NetworkInstance_Protocol_PimPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_PimPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim YANG schema element.
type NetworkInstance_Protocol_PimPathAny struct {
	*ygot.NodePath
}

// Global (container): This container defines global PIM configuration and state
// information.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global"
func (n *NetworkInstance_Protocol_PimPath) Global() *NetworkInstance_Protocol_Pim_GlobalPath {
	return &NetworkInstance_Protocol_Pim_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): This container defines global PIM configuration and state
// information.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global"
func (n *NetworkInstance_Protocol_PimPathAny) Global() *NetworkInstance_Protocol_Pim_GlobalPathAny {
	return &NetworkInstance_Protocol_Pim_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): This container defines interface PIM configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Protocol_PimPath) InterfaceAny() *NetworkInstance_Protocol_Pim_InterfacePathAny {
	return &NetworkInstance_Protocol_Pim_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): This container defines interface PIM configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Protocol_PimPathAny) InterfaceAny() *NetworkInstance_Protocol_Pim_InterfacePathAny {
	return &NetworkInstance_Protocol_Pim_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): This container defines interface PIM configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Protocol_PimPath) Interface(InterfaceId string) *NetworkInstance_Protocol_Pim_InterfacePath {
	return &NetworkInstance_Protocol_Pim_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): This container defines interface PIM configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
// InterfaceId: string
func (n *NetworkInstance_Protocol_PimPathAny) Interface(InterfaceId string) *NetworkInstance_Protocol_Pim_InterfacePathAny {
	return &NetworkInstance_Protocol_Pim_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_NeighborCountPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count YANG schema element.
type NetworkInstance_Protocol_Pim_Global_NeighborCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count YANG schema element.
type NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny struct {
	*ygot.NodePath
}

// Counters (container): Global PIM counters.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Counters() *NetworkInstance_Protocol_Pim_Global_CountersPath {
	return &NetworkInstance_Protocol_Pim_Global_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Global PIM counters.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Counters() *NetworkInstance_Protocol_Pim_Global_CountersPathAny {
	return &NetworkInstance_Protocol_Pim_Global_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumGroups (leaf): Limit the number of accepted (S, G) and (*, G)
// PIM join states on the network-instance.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) MaximumGroups() *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath {
	return &NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumGroups (leaf): Limit the number of accepted (S, G) and (*, G)
// PIM join states on the network-instance.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) MaximumGroups() *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny {
	return &NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborCount (leaf): Number of adjacent PIM neighbors.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-count"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) NeighborCount() *NetworkInstance_Protocol_Pim_Global_NeighborCountPath {
	return &NetworkInstance_Protocol_Pim_Global_NeighborCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborCount (leaf): Number of adjacent PIM neighbors.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-count"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) NeighborCount() *NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny {
	return &NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// RendezvousPointAny (list): Defines a rendezvous point (RP) for sparse mode multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rendezvous-points/rendezvous-point"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
// Address (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) RendezvousPointAny() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// RendezvousPointAny (list): Defines a rendezvous point (RP) for sparse mode multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rendezvous-points/rendezvous-point"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
// Address (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) RendezvousPointAny() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// RendezvousPoint (list): Defines a rendezvous point (RP) for sparse mode multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rendezvous-points/rendezvous-point"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
// Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) RendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPointPath{
		NodePath: ygot.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// RendezvousPoint (list): Defines a rendezvous point (RP) for sparse mode multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "rendezvous-points/rendezvous-point"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
// Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) RendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// SourceAny (list): A multicast source that has been joined.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sources-joined/source"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
// Address (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) SourceAny() *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	return &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// SourceAny (list): A multicast source that has been joined.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sources-joined/source"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
// Address (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) SourceAny() *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	return &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
}

// Source (list): A multicast source that has been joined.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sources-joined/source"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
// Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Source(Address string) *NetworkInstance_Protocol_Pim_Global_SourcePath {
	return &NetworkInstance_Protocol_Pim_Global_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Source (list): A multicast source that has been joined.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sources-joined/source"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
// Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Source(Address string) *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	return &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
}

// Ssm (container): Source specific multicast (SSM).
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ssm"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/ssm"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Ssm() *NetworkInstance_Protocol_Pim_Global_SsmPath {
	return &NetworkInstance_Protocol_Pim_Global_SsmPath{
		NodePath: ygot.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ssm (container): Source specific multicast (SSM).
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ssm"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/ssm"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Ssm() *NetworkInstance_Protocol_Pim_Global_SsmPathAny {
	return &NetworkInstance_Protocol_Pim_Global_SsmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Global_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny struct {
	*ygot.NodePath
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bootstrap-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) BootstrapMessages() *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath {
	return &NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bootstrap-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) BootstrapMessages() *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloMessages (leaf): Number of hello messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) HelloMessages() *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath {
	return &NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloMessages (leaf): Number of hello messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) HelloMessages() *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "join-prune-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath {
	return &NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "join-prune-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny struct {
	*ygot.NodePath
}

// Address (leaf): IPv4 address of rendezvous point.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) Address() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): IPv4 address of rendezvous point.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) Address() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroups (leaf): List of multicast groups (multicast IP address ranges) for which
// this entry will be used as a rendezvous point. When not
// present the default is equivalent to all valid IP multicast
// addresses.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) MulticastGroups() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroups (leaf): List of multicast groups (multicast IP address ranges) for which
// this entry will be used as a rendezvous point. When not
// present the default is equivalent to all valid IP multicast
// addresses.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) MulticastGroups() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny {
	return &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Global_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_GroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_GroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny struct {
	*ygot.NodePath
}

// Address (leaf): Source address of multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) Address() *NetworkInstance_Protocol_Pim_Global_Source_AddressPath {
	return &NetworkInstance_Protocol_Pim_Global_Source_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): Source address of multicast.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) Address() *NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Group (leaf): Multicast address.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/group"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) Group() *NetworkInstance_Protocol_Pim_Global_Source_GroupPath {
	return &NetworkInstance_Protocol_Pim_Global_Source_GroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Group (leaf): Multicast address.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/group"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) Group() *NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "group"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpstreamInterfaceId (leaf): The upstream interface for this multicast source.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/upstream-interface-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) UpstreamInterfaceId() *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath {
	return &NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpstreamInterfaceId (leaf): The upstream interface for this multicast source.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/upstream-interface-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) UpstreamInterfaceId() *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Global_SsmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SsmPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SsmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SsmPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny struct {
	*ygot.NodePath
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ssm-ranges"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_SsmPath) SsmRanges() *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath {
	return &NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
	}
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ssm-ranges"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_SsmPathAny) SsmRanges() *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny {
	return &NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_BorderRouterPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BorderRouterPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_BsrBorderPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BsrBorderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_DeadTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DeadTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_DrPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DrPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_ModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_ModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_ModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_ModePathAny struct {
	*ygot.NodePath
}

// BorderRouter (leaf): When set to true the interface is set as MBR (multicast border
// router) and allows multicast traffic from sources that are
// outside of the PIM domain.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/border-router"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) BorderRouter() *NetworkInstance_Protocol_Pim_Interface_BorderRouterPath {
	return &NetworkInstance_Protocol_Pim_Interface_BorderRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "border-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// BorderRouter (leaf): When set to true the interface is set as MBR (multicast border
// router) and allows multicast traffic from sources that are
// outside of the PIM domain.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/border-router"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) BorderRouter() *NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "border-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// BsrBorder (leaf): When set to true the device will not send bootstrap router
// messages over this interface. By default these are transmitted
// over all PIM sparse mode (PIM-SM) enabled interfaces.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/bsr-border"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) BsrBorder() *NetworkInstance_Protocol_Pim_Interface_BsrBorderPath {
	return &NetworkInstance_Protocol_Pim_Interface_BsrBorderPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bsr-border"},
			map[string]interface{}{},
			n,
		),
	}
}

// BsrBorder (leaf): When set to true the device will not send bootstrap router
// messages over this interface. By default these are transmitted
// over all PIM sparse mode (PIM-SM) enabled interfaces.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/bsr-border"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) BsrBorder() *NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "bsr-border"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): PIM counters for each interface.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Counters() *NetworkInstance_Protocol_Pim_Interface_CountersPath {
	return &NetworkInstance_Protocol_Pim_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): PIM counters for each interface.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Counters() *NetworkInstance_Protocol_Pim_Interface_CountersPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeadTimer (leaf): Number of missed hello messages after which a neighbor is
// expired.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dead-timer"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) DeadTimer() *NetworkInstance_Protocol_Pim_Interface_DeadTimerPath {
	return &NetworkInstance_Protocol_Pim_Interface_DeadTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dead-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeadTimer (leaf): Number of missed hello messages after which a neighbor is
// expired.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dead-timer"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) DeadTimer() *NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dead-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DrPriority (leaf): The designated router priority of this interface. Larger always
// preferred.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dr-priority"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) DrPriority() *NetworkInstance_Protocol_Pim_Interface_DrPriorityPath {
	return &NetworkInstance_Protocol_Pim_Interface_DrPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dr-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// DrPriority (leaf): The designated router priority of this interface. Larger always
// preferred.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dr-priority"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) DrPriority() *NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dr-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "enable-bfd"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) EnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath {
	return &NetworkInstance_Protocol_Pim_Interface_EnableBfdPath{
		NodePath: ygot.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "enable-bfd"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) EnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnabledPath {
	return &NetworkInstance_Protocol_Pim_Interface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnabledPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Interval at which the router sends the PIM hello messages.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hello-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) HelloInterval() *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath {
	return &NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloInterval (leaf): Interval at which the router sends the PIM hello messages.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hello-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) HelloInterval() *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Reference to an interface on which PIM is enabled.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) InterfaceId() *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Reference to an interface on which PIM is enabled.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) InterfaceId() *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) InterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) InterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneInterval (leaf): Interval at which the router sends the PIM join/prune messages
// toward the upstream RPF neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/join-prune-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) JoinPruneInterval() *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath {
	return &NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "join-prune-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneInterval (leaf): Interval at which the router sends the PIM join/prune messages
// toward the upstream RPF neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/join-prune-interval"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) JoinPruneInterval() *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "join-prune-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumGroups (leaf): Limit the number of (S, G) and (*, G) PIM
// entries accepted on the interface.
// This feature depends on hardware implementation.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) MaximumGroups() *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath {
	return &NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumGroups (leaf): Limit the number of (S, G) and (*, G) PIM
// entries accepted on the interface.
// This feature depends on hardware implementation.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-groups"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) MaximumGroups() *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): PIM mode to use when delivering multicast traffic via this
// interface.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mode"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Mode() *NetworkInstance_Protocol_Pim_Interface_ModePath {
	return &NetworkInstance_Protocol_Pim_Interface_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): PIM mode to use when delivering multicast traffic via this
// interface.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mode"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Mode() *NetworkInstance_Protocol_Pim_Interface_ModePathAny {
	return &NetworkInstance_Protocol_Pim_Interface_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): Details about a specific PIM neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
// NeighborAddress (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_InterfacePath) NeighborAny() *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
}

// NeighborAny (list): Details about a specific PIM neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
// NeighborAddress (wildcarded): string
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) NeighborAny() *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
}

// Neighbor (list): Details about a specific PIM neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
// NeighborAddress: string
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_NeighborPath {
	return &NetworkInstance_Protocol_Pim_Interface_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
}

// Neighbor (list): Details about a specific PIM neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "neighbors/neighbor"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
// NeighborAddress: string
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny struct {
	*ygot.NodePath
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bootstrap-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) BootstrapMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bootstrap-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) BootstrapMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloMessages (leaf): Number of hello messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) HelloMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloMessages (leaf): Number of hello messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "hello-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) HelloMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "join-prune-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath{
		NodePath: ygot.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "join-prune-messages"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath {
	return &NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny struct {
	*ygot.NodePath
}

// DrAddress (leaf): IPv4 address of designated router.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dr-address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) DrAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dr-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DrAddress (leaf): IPv4 address of designated router.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dr-address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) DrAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dr-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): PIM mode in use when delivering multicast traffic
// via this neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mode"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) Mode() *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): PIM mode in use when delivering multicast traffic
// via this neighbor.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mode"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) Mode() *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAddress (leaf): IPv4 address of neighbor router.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAddress (leaf): IPv4 address of neighbor router.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-address"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborEstablished (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency established. It is expressed
// relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// The PIM session uptime can be computed by clients
// as the difference between this value and the
// current time in UTC.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-established"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborEstablished() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-established"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborEstablished (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency established. It is expressed
// relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// The PIM session uptime can be computed by clients
// as the difference between this value and the
// current time in UTC.
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-established"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborEstablished() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-established"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborExpires (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency will expire should hello
// messages fail to arrive from the neighbor. The value
// is expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-expires"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborExpires() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-expires"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborExpires (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency will expire should hello
// messages fail to arrive from the neighbor. The value
// is expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-pim"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/neighbor-expires"
// Path from root: "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborExpires() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny {
	return &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-expires"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_StaticPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_StaticPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/description YANG schema element.
type NetworkInstance_Protocol_Static_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/description YANG schema element.
type NetworkInstance_Protocol_Static_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix YANG schema element.
type NetworkInstance_Protocol_Static_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix YANG schema element.
type NetworkInstance_Protocol_Static_PrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_SetTagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag YANG schema element.
type NetworkInstance_Protocol_Static_SetTagPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_SetTagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag YANG schema element.
type NetworkInstance_Protocol_Static_SetTagPathAny struct {
	*ygot.NodePath
}

// Description (leaf): An optional textual description for the route.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/description"
func (n *NetworkInstance_Protocol_StaticPath) Description() *NetworkInstance_Protocol_Static_DescriptionPath {
	return &NetworkInstance_Protocol_Static_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): An optional textual description for the route.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/description"
func (n *NetworkInstance_Protocol_StaticPathAny) Description() *NetworkInstance_Protocol_Static_DescriptionPathAny {
	return &NetworkInstance_Protocol_Static_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): A list of next-hops to be utilised for the static
// route being specified.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
// Index (wildcarded): string
func (n *NetworkInstance_Protocol_StaticPath) NextHopAny() *NetworkInstance_Protocol_Static_NextHopPathAny {
	return &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): A list of next-hops to be utilised for the static
// route being specified.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
// Index (wildcarded): string
func (n *NetworkInstance_Protocol_StaticPathAny) NextHopAny() *NetworkInstance_Protocol_Static_NextHopPathAny {
	return &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): A list of next-hops to be utilised for the static
// route being specified.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
// Index: string
func (n *NetworkInstance_Protocol_StaticPath) NextHop(Index string) *NetworkInstance_Protocol_Static_NextHopPath {
	return &NetworkInstance_Protocol_Static_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): A list of next-hops to be utilised for the static
// route being specified.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
// Index: string
func (n *NetworkInstance_Protocol_StaticPathAny) NextHop(Index string) *NetworkInstance_Protocol_Static_NextHopPathAny {
	return &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Prefix (leaf): Destination prefix for the static route, either IPv4 or
// IPv6.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix"
func (n *NetworkInstance_Protocol_StaticPath) Prefix() *NetworkInstance_Protocol_Static_PrefixPath {
	return &NetworkInstance_Protocol_Static_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): Destination prefix for the static route, either IPv4 or
// IPv6.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/prefix"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix"
func (n *NetworkInstance_Protocol_StaticPathAny) Prefix() *NetworkInstance_Protocol_Static_PrefixPathAny {
	return &NetworkInstance_Protocol_Static_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-tag"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag"
func (n *NetworkInstance_Protocol_StaticPath) SetTag() *NetworkInstance_Protocol_Static_SetTagPath {
	return &NetworkInstance_Protocol_Static_SetTagPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-tag"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag"
func (n *NetworkInstance_Protocol_StaticPathAny) SetTag() *NetworkInstance_Protocol_Static_SetTagPathAny {
	return &NetworkInstance_Protocol_Static_SetTagPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-tag"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Static_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_MetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_MetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_RecursePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_RecursePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_RecursePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_RecursePathAny struct {
	*ygot.NodePath
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "enable-bfd"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd"
func (n *NetworkInstance_Protocol_Static_NextHopPath) EnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath {
	return &NetworkInstance_Protocol_Static_NextHop_EnableBfdPath{
		NodePath: ygot.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "enable-bfd"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) EnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.  It is observed that implementations typically
// only support a numeric value for this string.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Index() *NetworkInstance_Protocol_Static_NextHop_IndexPath {
	return &NetworkInstance_Protocol_Static_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.  It is observed that implementations typically
// only support a numeric value for this string.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Index() *NetworkInstance_Protocol_Static_NextHop_IndexPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Protocol_Static_NextHopPath) InterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) InterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Metric() *NetworkInstance_Protocol_Static_NextHop_MetricPath {
	return &NetworkInstance_Protocol_Static_NextHop_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Metric() *NetworkInstance_Protocol_Static_NextHop_MetricPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): The next-hop that is to be used for the static route
// - this may be specified as an IP address, an interface
// or a pre-defined next-hop type - for instance, DROP or
// LOCAL_LINK. When this leaf is not set, and the interface-ref
// value is specified for the next-hop, then the system should
// treat the prefix as though it is directly connected to the
// interface.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHopPath) NextHop() *NetworkInstance_Protocol_Static_NextHop_NextHopPath {
	return &NetworkInstance_Protocol_Static_NextHop_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): The next-hop that is to be used for the static route
// - this may be specified as an IP address, an interface
// or a pre-defined next-hop type - for instance, DROP or
// LOCAL_LINK. When this leaf is not set, and the interface-ref
// value is specified for the next-hop, then the system should
// treat the prefix as though it is directly connected to the
// interface.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/next-hop"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) NextHop() *NetworkInstance_Protocol_Static_NextHop_NextHopPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Preference() *NetworkInstance_Protocol_Static_NextHop_PreferencePath {
	return &NetworkInstance_Protocol_Static_NextHop_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Preference() *NetworkInstance_Protocol_Static_NextHop_PreferencePathAny {
	return &NetworkInstance_Protocol_Static_NextHop_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Recurse (leaf): Determines whether the next-hop should be allowed to
// be looked up recursively - i.e., via a RIB entry which has
// been installed by a routing protocol, or another static route
// - rather than needing to be connected directly to an
// interface of the local system within the current network
// instance. When the interface reference specified within the
// next-hop entry is set (i.e., is not null) then forwarding is
// restricted to being via the interface specified - and
// recursion is hence disabled.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/recurse"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Recurse() *NetworkInstance_Protocol_Static_NextHop_RecursePath {
	return &NetworkInstance_Protocol_Static_NextHop_RecursePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "recurse"},
			map[string]interface{}{},
			n,
		),
	}
}

// Recurse (leaf): Determines whether the next-hop should be allowed to
// be looked up recursively - i.e., via a RIB entry which has
// been installed by a routing protocol, or another static route
// - rather than needing to be connected directly to an
// interface of the local system within the current network
// instance. When the interface reference specified within the
// next-hop entry is set (i.e., is not null) then forwarding is
// restricted to being via the interface specified - and
// recursion is hence disabled.
// ----------------------------------------
// Defining module: "openconfig-local-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/recurse"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Recurse() *NetworkInstance_Protocol_Static_NextHop_RecursePathAny {
	return &NetworkInstance_Protocol_Static_NextHop_RecursePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "recurse"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath {
	return &NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
// ----------------------------------------
// Defining module: "openconfig-bfd"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny {
	return &NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_RouteLimitPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_AfiPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/afi YANG schema element.
type NetworkInstance_RouteLimit_AfiPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_AfiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/afi YANG schema element.
type NetworkInstance_RouteLimit_AfiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_AlarmThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold YANG schema element.
type NetworkInstance_RouteLimit_AlarmThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_AlarmThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold YANG schema element.
type NetworkInstance_RouteLimit_AlarmThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_InstalledRoutesPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/installed-routes YANG schema element.
type NetworkInstance_RouteLimit_InstalledRoutesPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_InstalledRoutesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/installed-routes YANG schema element.
type NetworkInstance_RouteLimit_InstalledRoutesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_MaximumPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/maximum YANG schema element.
type NetworkInstance_RouteLimit_MaximumPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_MaximumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/maximum YANG schema element.
type NetworkInstance_RouteLimit_MaximumPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_ThresholdExceededPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded YANG schema element.
type NetworkInstance_RouteLimit_ThresholdExceededPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_ThresholdExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded YANG schema element.
type NetworkInstance_RouteLimit_ThresholdExceededPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_WarningOnlyPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/warning-only YANG schema element.
type NetworkInstance_RouteLimit_WarningOnlyPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteLimit_WarningOnlyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/config/warning-only YANG schema element.
type NetworkInstance_RouteLimit_WarningOnlyPathAny struct {
	*ygot.NodePath
}

// Afi (leaf): The address family for which the route limit applies.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/afi"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/afi"
func (n *NetworkInstance_RouteLimitPath) Afi() *NetworkInstance_RouteLimit_AfiPath {
	return &NetworkInstance_RouteLimit_AfiPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Afi (leaf): The address family for which the route limit applies.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/afi"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/afi"
func (n *NetworkInstance_RouteLimitPathAny) Afi() *NetworkInstance_RouteLimit_AfiPathAny {
	return &NetworkInstance_RouteLimit_AfiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "afi"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmThreshold (leaf): When specified, an alarm should be generated when the threshold
// number of installed routes is reached.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/alarm-threshold"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold"
func (n *NetworkInstance_RouteLimitPath) AlarmThreshold() *NetworkInstance_RouteLimit_AlarmThresholdPath {
	return &NetworkInstance_RouteLimit_AlarmThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alarm-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmThreshold (leaf): When specified, an alarm should be generated when the threshold
// number of installed routes is reached.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/alarm-threshold"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold"
func (n *NetworkInstance_RouteLimitPathAny) AlarmThreshold() *NetworkInstance_RouteLimit_AlarmThresholdPathAny {
	return &NetworkInstance_RouteLimit_AlarmThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "alarm-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstalledRoutes (leaf): The current number of routes installed for the address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/installed-routes"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimitPath) InstalledRoutes() *NetworkInstance_RouteLimit_InstalledRoutesPath {
	return &NetworkInstance_RouteLimit_InstalledRoutesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "installed-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// InstalledRoutes (leaf): The current number of routes installed for the address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/installed-routes"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimitPathAny) InstalledRoutes() *NetworkInstance_RouteLimit_InstalledRoutesPathAny {
	return &NetworkInstance_RouteLimit_InstalledRoutesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "installed-routes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Maximum (leaf): The maximum number of routes for the address family. The
// system should not install more than maximum number of
// prefixes into the RIB unless the warning-only leaf is specified.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/maximum"
func (n *NetworkInstance_RouteLimitPath) Maximum() *NetworkInstance_RouteLimit_MaximumPath {
	return &NetworkInstance_RouteLimit_MaximumPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Maximum (leaf): The maximum number of routes for the address family. The
// system should not install more than maximum number of
// prefixes into the RIB unless the warning-only leaf is specified.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/maximum"
func (n *NetworkInstance_RouteLimitPathAny) Maximum() *NetworkInstance_RouteLimit_MaximumPathAny {
	return &NetworkInstance_RouteLimit_MaximumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdExceeded (leaf): This leaf should be set to true in the case that the threshold
// number of routes has been exceeded.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-exceeded"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimitPath) ThresholdExceeded() *NetworkInstance_RouteLimit_ThresholdExceededPath {
	return &NetworkInstance_RouteLimit_ThresholdExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdExceeded (leaf): This leaf should be set to true in the case that the threshold
// number of routes has been exceeded.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/threshold-exceeded"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimitPathAny) ThresholdExceeded() *NetworkInstance_RouteLimit_ThresholdExceededPathAny {
	return &NetworkInstance_RouteLimit_ThresholdExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningOnly (leaf): When specified, the route limit specified is considered only as
// a warning - and routes should continue to be installed into the
// RIB over the limit specified in the maximum leaf.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/warning-only"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/warning-only"
func (n *NetworkInstance_RouteLimitPath) WarningOnly() *NetworkInstance_RouteLimit_WarningOnlyPath {
	return &NetworkInstance_RouteLimit_WarningOnlyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "warning-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// WarningOnly (leaf): When specified, the route limit specified is considered only as
// a warning - and routes should continue to be installed into the
// RIB over the limit specified in the maximum leaf.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/warning-only"
// Path from root: "/network-instances/network-instance/route-limits/route-limit/config/warning-only"
func (n *NetworkInstance_RouteLimitPathAny) WarningOnly() *NetworkInstance_RouteLimit_WarningOnlyPathAny {
	return &NetworkInstance_RouteLimit_WarningOnlyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "warning-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRoutingPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRoutingPathAny struct {
	*ygot.NodePath
}

// SrgbAny (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srgbs/srgb"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb"
// LocalId (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPath) SrgbAny() *NetworkInstance_SegmentRouting_SrgbPathAny {
	return &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// SrgbAny (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srgbs/srgb"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb"
// LocalId (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPathAny) SrgbAny() *NetworkInstance_SegmentRouting_SrgbPathAny {
	return &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// Srgb (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srgbs/srgb"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb"
// LocalId: string
func (n *NetworkInstance_SegmentRoutingPath) Srgb(LocalId string) *NetworkInstance_SegmentRouting_SrgbPath {
	return &NetworkInstance_SegmentRouting_SrgbPath{
		NodePath: ygot.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// Srgb (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srgbs/srgb"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb"
// LocalId: string
func (n *NetworkInstance_SegmentRoutingPathAny) Srgb(LocalId string) *NetworkInstance_SegmentRouting_SrgbPathAny {
	return &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// SrlbAny (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlbs/srlb"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb"
// LocalId (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPath) SrlbAny() *NetworkInstance_SegmentRouting_SrlbPathAny {
	return &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// SrlbAny (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlbs/srlb"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb"
// LocalId (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPathAny) SrlbAny() *NetworkInstance_SegmentRouting_SrlbPathAny {
	return &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// Srlb (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlbs/srlb"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb"
// LocalId: string
func (n *NetworkInstance_SegmentRoutingPath) Srlb(LocalId string) *NetworkInstance_SegmentRouting_SrlbPath {
	return &NetworkInstance_SegmentRouting_SrlbPath{
		NodePath: ygot.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// Srlb (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "srlbs/srlb"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb"
// LocalId: string
func (n *NetworkInstance_SegmentRoutingPathAny) Srlb(LocalId string) *NetworkInstance_SegmentRouting_SrlbPathAny {
	return &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// TePolicyAny (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color (wildcarded): uint32
// Endpoint (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPath) TePolicyAny() *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": "*"},
			n,
		),
	}
}

// TePolicyAny (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color (wildcarded): uint32
// Endpoint (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicyAny() *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": "*"},
			n,
		),
	}
}

// TePolicyAnyEndpoint (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color: uint32
// Endpoint (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPath) TePolicyAnyEndpoint(Color uint32) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": "*"},
			n,
		),
	}
}

// TePolicyAnyEndpoint (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color: uint32
// Endpoint (wildcarded): string
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicyAnyEndpoint(Color uint32) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": "*"},
			n,
		),
	}
}

// TePolicyAnyColor (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color (wildcarded): uint32
// Endpoint: string
func (n *NetworkInstance_SegmentRoutingPath) TePolicyAnyColor(Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": Endpoint},
			n,
		),
	}
}

// TePolicyAnyColor (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color (wildcarded): uint32
// Endpoint: string
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicyAnyColor(Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": Endpoint},
			n,
		),
	}
}

// TePolicy (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color: uint32
// Endpoint: string
func (n *NetworkInstance_SegmentRoutingPath) TePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPath {
	return &NetworkInstance_SegmentRouting_TePolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": Endpoint},
			n,
		),
	}
}

// TePolicy (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-policies/te-policy"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy"
// Color: uint32
// Endpoint: string
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	return &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": Endpoint},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_SrgbPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_SrgbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_LocalIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_SizePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/size YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_SizePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_SizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/size YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_SizePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_UsedPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/used YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_UsedPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srgb_UsedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/used YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_UsedPathAny struct {
	*ygot.NodePath
}

// DataplaneType (leaf): The dataplane being used to instantiate the SRGB. When MPLS is specified
// the set of MPLS label blocks that are defined in the mpls-label-blocks
// list are used to make up the SRGB. When IPv6 is specified, the set of IPv6
// prefixes specified in the ipv6-prefixes list are used.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dataplane-type"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrgbPath) DataplaneType() *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath {
	return &NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataplaneType (leaf): The dataplane being used to instantiate the SRGB. When MPLS is specified
// the set of MPLS label blocks that are defined in the mpls-label-blocks
// list are used to make up the SRGB. When IPv6 is specified, the set of IPv6
// prefixes specified in the ipv6-prefixes list are used.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dataplane-type"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) DataplaneType() *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny {
	return &NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Prefixes (leaf-list): A list of IPv6 prefixes which are to be used for segment routing using
// the IPv6 dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ipv6-prefixes"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Ipv6Prefixes() *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath {
	return &NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Prefixes (leaf-list): A list of IPv6 prefixes which are to be used for segment routing using
// the IPv6 dataplane.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ipv6-prefixes"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Ipv6Prefixes() *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny {
	return &NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-prefixes"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): Unique identifier for the segment routing global block on
// the local system.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id"
func (n *NetworkInstance_SegmentRouting_SrgbPath) LocalId() *NetworkInstance_SegmentRouting_Srgb_LocalIdPath {
	return &NetworkInstance_SegmentRouting_Srgb_LocalIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): Unique identifier for the segment routing global block on
// the local system.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) LocalId() *NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny {
	return &NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabelBlocks (leaf-list): A list of refences to the label blocks that are used to make
// up the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-label-blocks"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_SrgbPath) MplsLabelBlocks() *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath {
	return &NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabelBlocks (leaf-list): A list of refences to the label blocks that are used to make
// up the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-label-blocks"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) MplsLabelBlocks() *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny {
	return &NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total number of SRGB entries that are available within the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/size"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Size() *NetworkInstance_SegmentRouting_Srgb_SizePath {
	return &NetworkInstance_SegmentRouting_Srgb_SizePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Size (leaf): The total number of SRGB entries that are available within the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/size"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Size() *NetworkInstance_SegmentRouting_Srgb_SizePathAny {
	return &NetworkInstance_SegmentRouting_Srgb_SizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): The total number of SRGB entries that have already been alocated by
// protocols referencing the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/used"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Used() *NetworkInstance_SegmentRouting_Srgb_UsedPath {
	return &NetworkInstance_SegmentRouting_Srgb_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): The total number of SRGB entries that have already been alocated by
// protocols referencing the SRGB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/used"
// Path from root: "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Used() *NetworkInstance_SegmentRouting_Srgb_UsedPathAny {
	return &NetworkInstance_SegmentRouting_Srgb_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_SrlbPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_SrlbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_LocalIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny struct {
	*ygot.NodePath
}

// DataplaneType (leaf): The dataplane that is to be used for the Segment Routing Local Block.
// When MPLS is specified, the local block corresponds to a block of MPLS
// labels; when IPv6 is specified it corresponds to an IPv6 prefix.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dataplane-type"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrlbPath) DataplaneType() *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath {
	return &NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataplaneType (leaf): The dataplane that is to be used for the Segment Routing Local Block.
// When MPLS is specified, the local block corresponds to a block of MPLS
// labels; when IPv6 is specified it corresponds to an IPv6 prefix.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dataplane-type"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) DataplaneType() *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny {
	return &NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Prefix (leaf): The IPv6 prefix that is used for the SRLB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ipv6-prefix"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_SrlbPath) Ipv6Prefix() *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath {
	return &NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Prefix (leaf): The IPv6 prefix that is used for the SRLB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ipv6-prefix"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) Ipv6Prefix() *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny {
	return &NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ipv6-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): A unique local identifier used for the Segment Routing Local Block.
// The identifier is used when referencing the SRLB within other
// contexts.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id"
func (n *NetworkInstance_SegmentRouting_SrlbPath) LocalId() *NetworkInstance_SegmentRouting_Srlb_LocalIdPath {
	return &NetworkInstance_SegmentRouting_Srlb_LocalIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): A unique local identifier used for the Segment Routing Local Block.
// The identifier is used when referencing the SRLB within other
// contexts.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) LocalId() *NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny {
	return &NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabelBlock (leaf): A reference to the MPLS label block that is used to contain the
// SIDs of the SRLB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-label-block"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_SrlbPath) MplsLabelBlock() *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath {
	return &NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-label-block"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabelBlock (leaf): A reference to the MPLS label block that is used to contain the
// SIDs of the SRLB.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-label-block"
// Path from root: "/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) MplsLabelBlock() *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny {
	return &NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-label-block"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicyPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_BsidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_BsidPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_BsidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_BsidPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ColorPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ColorPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_ColorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ColorPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_EndpointPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_NamePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_NamePathAny struct {
	*ygot.NodePath
}

// Active (leaf): A SR-TE policy is marked as active when at least one of its
// candidate paths is valid/active and the policy has been
// instantiated in the forwarding plane.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Active() *NetworkInstance_SegmentRouting_TePolicy_ActivePath {
	return &NetworkInstance_SegmentRouting_TePolicy_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): A SR-TE policy is marked as active when at least one of its
// candidate paths is valid/active and the policy has been
// instantiated in the forwarding plane.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Active() *NetworkInstance_SegmentRouting_TePolicy_ActivePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveSince (leaf): Indication of the time the policy transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-since"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath {
	return &NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveSince (leaf): Indication of the time the policy transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-since"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveTransitions (leaf): The number of transitions to active state for the policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-transitions"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveTransitions (leaf): The number of transitions to active state for the policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-transitions"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bsid (leaf): The Binding SID (BSID) assigned to the SR-TE policy,
// expressed as an MPLS label or IPv6 address. Packets that are
// ingress to the system with active segment matching the SID
// value specified in this leaf should be forwarded according
// to the policy. The specified Binding SID must be removed
// from the segment list by the system.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bsid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Bsid() *NetworkInstance_SegmentRouting_TePolicy_BsidPath {
	return &NetworkInstance_SegmentRouting_TePolicy_BsidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bsid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bsid (leaf): The Binding SID (BSID) assigned to the SR-TE policy,
// expressed as an MPLS label or IPv6 address. Packets that are
// ingress to the system with active segment matching the SID
// value specified in this leaf should be forwarded according
// to the policy. The specified Binding SID must be removed
// from the segment list by the system.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bsid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Bsid() *NetworkInstance_SegmentRouting_TePolicy_BsidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_BsidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bsid"},
			map[string]interface{}{},
			n,
		),
	}
}

// CandidatePathAny (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-paths/candidate-path"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) CandidatePathAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": "*", "originator-asn": "*", "originator-addr": "*", "discriminator": "*"},
			n,
		),
	}
}

// CandidatePathAny (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "candidate-paths/candidate-path"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) CandidatePathAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": "*", "originator-asn": "*", "originator-addr": "*", "discriminator": "*"},
			n,
		),
	}
}

// WithProtocolOrigin sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "protocol-origin" to the specified value.
// ProtocolOrigin: E_SegmentRoutingTypes_SrteProtocolType
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithProtocolOrigin(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygot.ModifyKey(n.NodePath, "protocol-origin", ProtocolOrigin)
	return n
}

// WithOriginatorAsn sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "originator-asn" to the specified value.
// OriginatorAsn: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithOriginatorAsn(OriginatorAsn uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygot.ModifyKey(n.NodePath, "originator-asn", OriginatorAsn)
	return n
}

// WithOriginatorAddr sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "originator-addr" to the specified value.
// OriginatorAddr: string
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithOriginatorAddr(OriginatorAddr string) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygot.ModifyKey(n.NodePath, "originator-addr", OriginatorAddr)
	return n
}

// WithDiscriminator sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "discriminator" to the specified value.
// Discriminator: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithDiscriminator(Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygot.ModifyKey(n.NodePath, "discriminator", Discriminator)
	return n
}

// Color (leaf): When the policy is used for RIB resolution to a specific
// Segment Routing Traffic Engineering path, the policy is used
// when the color required in the policy (which may be specified
// based on the value of a BGP extended colour community) matches
// the value of this leaf. The color being set to 0 indicates
// that the colour is a wildcard in the policy resolution.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Color() *NetworkInstance_SegmentRouting_TePolicy_ColorPath {
	return &NetworkInstance_SegmentRouting_TePolicy_ColorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Color (leaf): When the policy is used for RIB resolution to a specific
// Segment Routing Traffic Engineering path, the policy is used
// when the color required in the policy (which may be specified
// based on the value of a BGP extended colour community) matches
// the value of this leaf. The color being set to 0 indicates
// that the colour is a wildcard in the policy resolution.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Color() *NetworkInstance_SegmentRouting_TePolicy_ColorPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_ColorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of counters on the policy level. They
// count the total traffic forwarded by the policy,
// regardless of its installation source. The counters
// should be persistent across policy state changes and
// switches between active protocols.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CountersPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of counters on the policy level. They
// count the total traffic forwarded by the policy,
// regardless of its installation source. The counters
// should be persistent across policy state changes and
// switches between active protocols.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Endpoint (leaf): When the policy is used for RIB resolution to a Segment
// Routing Traffic Engineering path, the policy is used when the
// required endpoint (which may be the protocol next-hop) matches
// the endpoint address specified in this leaf. When the leaf is
// set to all zeros (0.0.0.0 or ::), the endpoint acts as a
// wildcard in the policy resolution.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/endpoint"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Endpoint() *NetworkInstance_SegmentRouting_TePolicy_EndpointPath {
	return &NetworkInstance_SegmentRouting_TePolicy_EndpointPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// Endpoint (leaf): When the policy is used for RIB resolution to a Segment
// Routing Traffic Engineering path, the policy is used when the
// required endpoint (which may be the protocol next-hop) matches
// the endpoint address specified in this leaf. When the leaf is
// set to all zeros (0.0.0.0 or ::), the endpoint acts as a
// wildcard in the policy resolution.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/endpoint"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Endpoint() *NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The user friendly SR-TE policy name.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Name() *NetworkInstance_SegmentRouting_TePolicy_NamePath {
	return &NetworkInstance_SegmentRouting_TePolicy_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The user friendly SR-TE policy name.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Name() *NetworkInstance_SegmentRouting_TePolicy_NamePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny struct {
	*ygot.NodePath
}

// Active (leaf): A candidate path is active when it is valid and it is
// determined to be the best path of the SR-TE Policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Active() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): A candidate path is active when it is valid and it is
// determined to be the best path of the SR-TE Policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Active() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveSince (leaf): Indication of the time the path transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the
// Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-since"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveSince (leaf): Indication of the time the path transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the
// Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-since"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveTransitions (leaf): The number of transitions to active state for the candidate
// path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-transitions"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActiveTransitions (leaf): The number of transitions to active state for the candidate
// path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active-transitions"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discriminator (leaf): A 32 bit value uniquely identifying the path within the
// context of a policy learnt from a protocol.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discriminator"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Discriminator() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discriminator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Discriminator (leaf): A 32 bit value uniquely identifying the path within the
// context of a policy learnt from a protocol.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/discriminator"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Discriminator() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "discriminator"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enlp (leaf): ENLP (Explicit NULL Label Policy) indicates whether Explicit
// NULL labels are to be pushed on unlabeled IP packets that are
// being steered into a given SR policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enlp"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Enlp() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enlp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enlp (leaf): ENLP (Explicit NULL Label Policy) indicates whether Explicit
// NULL labels are to be pushed on unlabeled IP packets that are
// being steered into a given SR policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/enlp"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Enlp() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enlp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The user friendly SR-TE candidate path name.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Name() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The user friendly SR-TE candidate path name.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/name"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Name() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatorAddr (leaf): The address of the node originating the candidate path.
// Address in IPv4 can be represented as IPv6-encoded-IPv4 e.g.
// ::FFFF:192.168.1.2 or a normal IPv6 address with the lowest
// 32 bits carrying the actual IPv4 address.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/originator-addr"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) OriginatorAddr() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originator-addr"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatorAddr (leaf): The address of the node originating the candidate path.
// Address in IPv4 can be represented as IPv6-encoded-IPv4 e.g.
// ::FFFF:192.168.1.2 or a normal IPv6 address with the lowest
// 32 bits carrying the actual IPv4 address.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/originator-addr"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) OriginatorAddr() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originator-addr"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatorAsn (leaf): The autonomous system that node originating the candidate
// path locates.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/originator-asn"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) OriginatorAsn() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originator-asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginatorAsn (leaf): The autonomous system that node originating the candidate
// path locates.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/originator-asn"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) OriginatorAsn() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "originator-asn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): When there are multiple candidate paths specified a
// particular SR-TE policy. The preference is used to resolve
// between them. And the one with higher preference is
// preferred.
// These paths may be learnt from a dynamic routing protocol,
// or interface to the device, or from other static entries
// configured on the system.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Preference() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): When there are multiple candidate paths specified a
// particular SR-TE policy. The preference is used to resolve
// between them. And the one with higher preference is
// preferred.
// These paths may be learnt from a dynamic routing protocol,
// or interface to the device, or from other static entries
// configured on the system.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/preference"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Preference() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolOrigin (leaf): The component or protocol that originates or signals the
// candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol-origin"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ProtocolOrigin() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolOrigin (leaf): The component or protocol that originates or signals the
// candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/protocol-origin"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ProtocolOrigin() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "protocol-origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentListAny (list): An individual segment list within the list of segment
// lists associated with this candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-lists/segment-list"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
// Id (wildcarded): uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) SegmentListAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// SegmentListAny (list): An individual segment list within the list of segment
// lists associated with this candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-lists/segment-list"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
// Id (wildcarded): uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) SegmentListAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// SegmentList (list): An individual segment list within the list of segment
// lists associated with this candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-lists/segment-list"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
// Id: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) SegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath{
		NodePath: ygot.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// SegmentList (list): An individual segment list within the list of segment
// lists associated with this candidate path.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-lists/segment-list"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
// Id: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) SegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Valid (leaf): A path should be marked as valid when it is usable e.g. the
// at least one segment-list is valid even though the path may
// not be the best.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/valid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): A path should be marked as valid when it is usable e.g. the
// at least one segment-list is valid even though the path may
// not be the best.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/valid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny struct {
	*ygot.NodePath
}

// Counters (container): The counters of traffic steered to the segment-list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The counters of traffic steered to the segment-list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique id identifying the segment-list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Id() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique id identifying the segment-list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Id() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InvalidReason (leaf): If a segment-list is marked as invalid, this leaf should
// indicate the reason.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/invalid-reason"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) InvalidReason() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "invalid-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// InvalidReason (leaf): If a segment-list is marked as invalid, this leaf should
// indicate the reason.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/invalid-reason"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) InvalidReason() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "invalid-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): A next-hop the segment list is resolved to.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) NextHopAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): A next-hop the segment list is resolved to.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) NextHopAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): A next-hop the segment list is resolved to.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) NextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): A next-hop the segment list is resolved to.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) NextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// SidAny (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sids/sid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
// Index (wildcarded): uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) SidAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// SidAny (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sids/sid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
// Index (wildcarded): uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) SidAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Sid (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sids/sid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
// Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Sid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath{
		NodePath: ygot.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Sid (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "sids/sid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
// Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Sid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Valid (leaf): The validity of a segment-list should marked as true
// when it is usable.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/valid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Valid (leaf): The validity of a segment-list should marked as true
// when it is usable.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/valid"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight of the segment list within the set of
// segment lists specified for the candidate path. The
// traffic that is forwarded according to the policy is
// distributed across the set of segment-lists such that
// each list receives weight/(sum of all weights) traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Weight() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight of the segment list within the set of
// segment lists specified for the candidate path. The
// traffic that is forwarded according to the policy is
// distributed across the set of segment-lists such that
// each list receives weight/(sum of all weights) traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Weight() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny struct {
	*ygot.NodePath
}

// Counters (container): The counters of traffic steered to the segment-list on
// per next-hop basis.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): The counters of traffic steered to the segment-list on
// per next-hop basis.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) DecapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) DecapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) EncapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) EncapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) InterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) InterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) IpAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) IpAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) MacAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) MacAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) OriginProtocol() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) OriginProtocol() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) PopTopLabel() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) PopTopLabel() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) ProgrammedIndex() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) ProgrammedIndex() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) PushedMplsLabelStack() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) PushedMplsLabelStack() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath) Interface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny struct {
	*ygot.NodePath
}

// Index (leaf): The index of the SID within the segment list. The segment list is
// applied by ordering the SID entries in ascending numerical order
// beginning at 0.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the SID within the segment list. The segment list is
// applied by ordering the SID entries in ascending numerical order
// beginning at 0.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class (TC) bits to be used if the
// value of the SID is an MPLS label. In the case that the value is
// set to 0, then the local implementation should choose the value.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) MplsTc() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class (TC) bits to be used if the
// value of the SID is an MPLS label. In the case that the value is
// set to 0, then the local implementation should choose the value.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) MplsTc() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTtl (leaf): The TTL to be set if the type of the SID is an MPLS label. If the
// value of the TTL is set to be 0, the value is picked by the local
// implementation.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-ttl"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) MplsTtl() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTtl (leaf): The TTL to be set if the type of the SID is an MPLS label. If the
// value of the TTL is set to be 0, the value is picked by the local
// implementation.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-ttl"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) MplsTtl() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): The value of the SID that is to be used. Specified as an MPLS
// label or IPv6 address.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/value"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) Value() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): The value of the SID that is to be used. Specified as an MPLS
// label or IPv6 address.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/value"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) Value() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_SegmentRouting_TePolicy_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the SR-TE policy. Labeled traffic carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the SR-TE policy. Labeled traffic carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the SR-TE policy. Labeled packets carries an active SID
// (top-most SID in the stack) that matches the BSID associated
// to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the SR-TE policy. Labeled packets carries an active SID
// (top-most SID in the stack) that matches the BSID associated
// to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total incoming bytes steered
// to the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The cumulative counter of the total incoming bytes steered
// to the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the incoming packets steered to
// the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): A cumulative counter of the incoming packets steered to
// the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "in-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of outgoing labeled
// traffic after being steered to the SR-TE policy. Labeled
// traffic carries an active SID (top-most SID in the stack) that
// matches the BSID associated to this policy. The counter should
// include the segments pushed to packets.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of outgoing labeled
// traffic after being steered to the SR-TE policy. Labeled
// traffic carries an active SID (top-most SID in the stack) that
// matches the BSID associated to this policy. The counter should
// include the segments pushed to packets.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the outgoing labeled packets after
// being steered to the SR-TE policy. Labeled packets carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutLabeledPkts (leaf): A cumulative counter of the outgoing labeled packets after
// being steered to the SR-TE policy. Labeled packets carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-labeled-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes after
// being steered to the SR-TE policy. It includes both labeled
// and unlabeled steered traffic. The counter should include the
// segments pushed to packets.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes after
// being steered to the SR-TE policy. It includes both labeled
// and unlabeled steered traffic. The counter should include the
// segments pushed to packets.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-octets"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets after being
// steered to the SR-TE policy. It includes both labeled and
// unlabeled steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): A cumulative counter of the outgoing packets after being
// steered to the SR-TE policy. It includes both labeled and
// unlabeled steered traffic.
// ----------------------------------------
// Defining module: "openconfig-srte-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "out-pkts"
// Path from root: "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny {
	return &NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_TablePath represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePath struct {
	*ygot.NodePath
}

// NetworkInstance_TablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Table_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/tables/table/config/address-family YANG schema element.
type NetworkInstance_Table_AddressFamilyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Table_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table/config/address-family YANG schema element.
type NetworkInstance_Table_AddressFamilyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Table_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/tables/table/config/protocol YANG schema element.
type NetworkInstance_Table_ProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Table_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table/config/protocol YANG schema element.
type NetworkInstance_Table_ProtocolPathAny struct {
	*ygot.NodePath
}

// AddressFamily (leaf): The address family (IPv4, IPv6) of the table's entries
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address-family"
// Path from root: "/network-instances/network-instance/tables/table/config/address-family"
func (n *NetworkInstance_TablePath) AddressFamily() *NetworkInstance_Table_AddressFamilyPath {
	return &NetworkInstance_Table_AddressFamilyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address-family"},
			map[string]interface{}{},
			n,
		),
	}
}

// AddressFamily (leaf): The address family (IPv4, IPv6) of the table's entries
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address-family"
// Path from root: "/network-instances/network-instance/tables/table/config/address-family"
func (n *NetworkInstance_TablePathAny) AddressFamily() *NetworkInstance_Table_AddressFamilyPathAny {
	return &NetworkInstance_Table_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address-family"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Reference to the protocol that the table is associated with.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protocol"
// Path from root: "/network-instances/network-instance/tables/table/config/protocol"
func (n *NetworkInstance_TablePath) Protocol() *NetworkInstance_Table_ProtocolPath {
	return &NetworkInstance_Table_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): Reference to the protocol that the table is associated with.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protocol"
// Path from root: "/network-instances/network-instance/tables/table/config/protocol"
func (n *NetworkInstance_TablePathAny) Protocol() *NetworkInstance_Table_ProtocolPathAny {
	return &NetworkInstance_Table_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_TableConnectionPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/address-family YANG schema element.
type NetworkInstance_TableConnection_AddressFamilyPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/address-family YANG schema element.
type NetworkInstance_TableConnection_AddressFamilyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/default-import-policy YANG schema element.
type NetworkInstance_TableConnection_DefaultImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/default-import-policy YANG schema element.
type NetworkInstance_TableConnection_DefaultImportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DisableMetricPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation YANG schema element.
type NetworkInstance_TableConnection_DisableMetricPropagationPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DisableMetricPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation YANG schema element.
type NetworkInstance_TableConnection_DisableMetricPropagationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DstProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/dst-protocol YANG schema element.
type NetworkInstance_TableConnection_DstProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_DstProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/dst-protocol YANG schema element.
type NetworkInstance_TableConnection_DstProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/import-policy YANG schema element.
type NetworkInstance_TableConnection_ImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/import-policy YANG schema element.
type NetworkInstance_TableConnection_ImportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_SrcProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/src-protocol YANG schema element.
type NetworkInstance_TableConnection_SrcProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_TableConnection_SrcProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/config/src-protocol YANG schema element.
type NetworkInstance_TableConnection_SrcProtocolPathAny struct {
	*ygot.NodePath
}

// AddressFamily (leaf): The address family associated with the connection. This
// must be defined for the source protocol. The target
// address family is implicitly defined by the address family
// specified for the source protocol.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address-family"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/address-family"
func (n *NetworkInstance_TableConnectionPath) AddressFamily() *NetworkInstance_TableConnection_AddressFamilyPath {
	return &NetworkInstance_TableConnection_AddressFamilyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address-family"},
			map[string]interface{}{},
			n,
		),
	}
}

// AddressFamily (leaf): The address family associated with the connection. This
// must be defined for the source protocol. The target
// address family is implicitly defined by the address family
// specified for the source protocol.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address-family"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/address-family"
func (n *NetworkInstance_TableConnectionPathAny) AddressFamily() *NetworkInstance_TableConnection_AddressFamilyPathAny {
	return &NetworkInstance_TableConnection_AddressFamilyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address-family"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/default-import-policy"
func (n *NetworkInstance_TableConnectionPath) DefaultImportPolicy() *NetworkInstance_TableConnection_DefaultImportPolicyPath {
	return &NetworkInstance_TableConnection_DefaultImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/default-import-policy"
func (n *NetworkInstance_TableConnectionPathAny) DefaultImportPolicy() *NetworkInstance_TableConnection_DefaultImportPolicyPathAny {
	return &NetworkInstance_TableConnection_DefaultImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableMetricPropagation (leaf): By default a system may reflect the metric specified in
// the destination protocol according to that which is set in
// the source protocol. For example:
// - IS-IS metric may be reflected in BGP MED (and vice versa)
// - OSPF metric may be reflected in the BGP MED (and vice versa)
// When this leaf is set to true, this reflection behaviour MUST be
// disabled, and rather the metric must be set to the default value,
// or explicitly set by policy.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/disable-metric-propagation"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation"
func (n *NetworkInstance_TableConnectionPath) DisableMetricPropagation() *NetworkInstance_TableConnection_DisableMetricPropagationPath {
	return &NetworkInstance_TableConnection_DisableMetricPropagationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-metric-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// DisableMetricPropagation (leaf): By default a system may reflect the metric specified in
// the destination protocol according to that which is set in
// the source protocol. For example:
// - IS-IS metric may be reflected in BGP MED (and vice versa)
// - OSPF metric may be reflected in the BGP MED (and vice versa)
// When this leaf is set to true, this reflection behaviour MUST be
// disabled, and rather the metric must be set to the default value,
// or explicitly set by policy.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/disable-metric-propagation"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation"
func (n *NetworkInstance_TableConnectionPathAny) DisableMetricPropagation() *NetworkInstance_TableConnection_DisableMetricPropagationPathAny {
	return &NetworkInstance_TableConnection_DisableMetricPropagationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "disable-metric-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstProtocol (leaf): The destination protocol for the table connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dst-protocol"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/dst-protocol"
func (n *NetworkInstance_TableConnectionPath) DstProtocol() *NetworkInstance_TableConnection_DstProtocolPath {
	return &NetworkInstance_TableConnection_DstProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dst-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstProtocol (leaf): The destination protocol for the table connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/dst-protocol"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/dst-protocol"
func (n *NetworkInstance_TableConnectionPathAny) DstProtocol() *NetworkInstance_TableConnection_DstProtocolPathAny {
	return &NetworkInstance_TableConnection_DstProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dst-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/import-policy"
func (n *NetworkInstance_TableConnectionPath) ImportPolicy() *NetworkInstance_TableConnection_ImportPolicyPath {
	return &NetworkInstance_TableConnection_ImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/import-policy"
func (n *NetworkInstance_TableConnectionPathAny) ImportPolicy() *NetworkInstance_TableConnection_ImportPolicyPathAny {
	return &NetworkInstance_TableConnection_ImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcProtocol (leaf): The source protocol for the table connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/src-protocol"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/src-protocol"
func (n *NetworkInstance_TableConnectionPath) SrcProtocol() *NetworkInstance_TableConnection_SrcProtocolPath {
	return &NetworkInstance_TableConnection_SrcProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "src-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcProtocol (leaf): The source protocol for the table connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/src-protocol"
// Path from root: "/network-instances/network-instance/table-connections/table-connection/config/src-protocol"
func (n *NetworkInstance_TableConnectionPathAny) SrcProtocol() *NetworkInstance_TableConnection_SrcProtocolPathAny {
	return &NetworkInstance_TableConnection_SrcProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "src-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_NamePath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/name YANG schema element.
type NetworkInstance_Vlan_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/name YANG schema element.
type NetworkInstance_Vlan_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_StatusPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/status YANG schema element.
type NetworkInstance_Vlan_StatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_StatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/status YANG schema element.
type NetworkInstance_Vlan_StatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_VlanIdPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/vlan-id YANG schema element.
type NetworkInstance_Vlan_VlanIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/config/vlan-id YANG schema element.
type NetworkInstance_Vlan_VlanIdPathAny struct {
	*ygot.NodePath
}

// Name (leaf): Interface VLAN name.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/name"
func (n *NetworkInstance_VlanPath) Name() *NetworkInstance_Vlan_NamePath {
	return &NetworkInstance_Vlan_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Interface VLAN name.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/name"
func (n *NetworkInstance_VlanPathAny) Name() *NetworkInstance_Vlan_NamePathAny {
	return &NetworkInstance_Vlan_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): Admin state of the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/status"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/status"
func (n *NetworkInstance_VlanPath) Status() *NetworkInstance_Vlan_StatusPath {
	return &NetworkInstance_Vlan_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): Admin state of the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/status"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/status"
func (n *NetworkInstance_VlanPathAny) Status() *NetworkInstance_Vlan_StatusPathAny {
	return &NetworkInstance_Vlan_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Interface VLAN id.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan-id"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/vlan-id"
func (n *NetworkInstance_VlanPath) VlanId() *NetworkInstance_Vlan_VlanIdPath {
	return &NetworkInstance_Vlan_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Interface VLAN id.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan-id"
// Path from root: "/network-instances/network-instance/vlans/vlan/config/vlan-id"
func (n *NetworkInstance_VlanPathAny) VlanId() *NetworkInstance_Vlan_VlanIdPathAny {
	return &NetworkInstance_Vlan_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Vlan_MemberPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_MemberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_MemberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_MemberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_Member_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member/state/interface YANG schema element.
type NetworkInstance_Vlan_Member_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Vlan_Member_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member/state/interface YANG schema element.
type NetworkInstance_Vlan_Member_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/vlans/vlan/members/member/state/interface"
func (n *NetworkInstance_Vlan_MemberPath) Interface() *NetworkInstance_Vlan_Member_InterfacePath {
	return &NetworkInstance_Vlan_Member_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/vlans/vlan/members/member/state/interface"
func (n *NetworkInstance_Vlan_MemberPathAny) Interface() *NetworkInstance_Vlan_Member_InterfacePathAny {
	return &NetworkInstance_Vlan_Member_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifierPath represents the /openconfig-optical-amplifier/optical-amplifier YANG schema element.
type OpticalAmplifierPath struct {
	*ygot.NodePath
}

// OpticalAmplifierPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier YANG schema element.
type OpticalAmplifierPathAny struct {
	*ygot.NodePath
}

// AmplifierAny (list): List of optical amplifiers present in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "amplifiers/amplifier"
// Path from root: "/optical-amplifier/amplifiers/amplifier"
// Name (wildcarded): string
func (n *OpticalAmplifierPath) AmplifierAny() *OpticalAmplifier_AmplifierPathAny {
	return &OpticalAmplifier_AmplifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"amplifiers", "amplifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// AmplifierAny (list): List of optical amplifiers present in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "amplifiers/amplifier"
// Path from root: "/optical-amplifier/amplifiers/amplifier"
// Name (wildcarded): string
func (n *OpticalAmplifierPathAny) AmplifierAny() *OpticalAmplifier_AmplifierPathAny {
	return &OpticalAmplifier_AmplifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"amplifiers", "amplifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Amplifier (list): List of optical amplifiers present in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "amplifiers/amplifier"
// Path from root: "/optical-amplifier/amplifiers/amplifier"
// Name: string
func (n *OpticalAmplifierPath) Amplifier(Name string) *OpticalAmplifier_AmplifierPath {
	return &OpticalAmplifier_AmplifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"amplifiers", "amplifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Amplifier (list): List of optical amplifiers present in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "amplifiers/amplifier"
// Path from root: "/optical-amplifier/amplifiers/amplifier"
// Name: string
func (n *OpticalAmplifierPathAny) Amplifier(Name string) *OpticalAmplifier_AmplifierPathAny {
	return &OpticalAmplifier_AmplifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"amplifiers", "amplifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SupervisoryChannelAny (list): List of supervisory channels
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "supervisory-channels/supervisory-channel"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel"
// Interface (wildcarded): string
func (n *OpticalAmplifierPath) SupervisoryChannelAny() *OpticalAmplifier_SupervisoryChannelPathAny {
	return &OpticalAmplifier_SupervisoryChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"supervisory-channels", "supervisory-channel"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// SupervisoryChannelAny (list): List of supervisory channels
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "supervisory-channels/supervisory-channel"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel"
// Interface (wildcarded): string
func (n *OpticalAmplifierPathAny) SupervisoryChannelAny() *OpticalAmplifier_SupervisoryChannelPathAny {
	return &OpticalAmplifier_SupervisoryChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"supervisory-channels", "supervisory-channel"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// SupervisoryChannel (list): List of supervisory channels
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "supervisory-channels/supervisory-channel"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel"
// Interface: string
func (n *OpticalAmplifierPath) SupervisoryChannel(Interface string) *OpticalAmplifier_SupervisoryChannelPath {
	return &OpticalAmplifier_SupervisoryChannelPath{
		NodePath: ygot.NewNodePath(
			[]string{"supervisory-channels", "supervisory-channel"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// SupervisoryChannel (list): List of supervisory channels
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "supervisory-channels/supervisory-channel"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel"
// Interface: string
func (n *OpticalAmplifierPathAny) SupervisoryChannel(Interface string) *OpticalAmplifier_SupervisoryChannelPathAny {
	return &OpticalAmplifier_SupervisoryChannelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"supervisory-channels", "supervisory-channel"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// OpticalAmplifier_AmplifierPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier YANG schema element.
type OpticalAmplifier_AmplifierPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_AmplifierPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier YANG schema element.
type OpticalAmplifier_AmplifierPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_AmpModePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/amp-mode YANG schema element.
type OpticalAmplifier_Amplifier_AmpModePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_AmpModePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/amp-mode YANG schema element.
type OpticalAmplifier_Amplifier_AmpModePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ComponentPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/component YANG schema element.
type OpticalAmplifier_Amplifier_ComponentPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ComponentPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/component YANG schema element.
type OpticalAmplifier_Amplifier_ComponentPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_EgressPortPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/egress-port YANG schema element.
type OpticalAmplifier_Amplifier_EgressPortPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_EgressPortPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/egress-port YANG schema element.
type OpticalAmplifier_Amplifier_EgressPortPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_EnabledPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/enabled YANG schema element.
type OpticalAmplifier_Amplifier_EnabledPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_EnabledPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/enabled YANG schema element.
type OpticalAmplifier_Amplifier_EnabledPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_FiberTypeProfilePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/fiber-type-profile YANG schema element.
type OpticalAmplifier_Amplifier_FiberTypeProfilePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_FiberTypeProfilePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/fiber-type-profile YANG schema element.
type OpticalAmplifier_Amplifier_FiberTypeProfilePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_GainRangePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/gain-range YANG schema element.
type OpticalAmplifier_Amplifier_GainRangePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_GainRangePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/gain-range YANG schema element.
type OpticalAmplifier_Amplifier_GainRangePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_IngressPortPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/ingress-port YANG schema element.
type OpticalAmplifier_Amplifier_IngressPortPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_IngressPortPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/ingress-port YANG schema element.
type OpticalAmplifier_Amplifier_IngressPortPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MaxGainPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/max-gain YANG schema element.
type OpticalAmplifier_Amplifier_MaxGainPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MaxGainPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/max-gain YANG schema element.
type OpticalAmplifier_Amplifier_MaxGainPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MaxOutputPowerPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/max-output-power YANG schema element.
type OpticalAmplifier_Amplifier_MaxOutputPowerPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MaxOutputPowerPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/max-output-power YANG schema element.
type OpticalAmplifier_Amplifier_MaxOutputPowerPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MinGainPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/min-gain YANG schema element.
type OpticalAmplifier_Amplifier_MinGainPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_MinGainPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/min-gain YANG schema element.
type OpticalAmplifier_Amplifier_MinGainPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_NamePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/name YANG schema element.
type OpticalAmplifier_Amplifier_NamePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_NamePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/name YANG schema element.
type OpticalAmplifier_Amplifier_NamePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetGainPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-gain YANG schema element.
type OpticalAmplifier_Amplifier_TargetGainPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetGainPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-gain YANG schema element.
type OpticalAmplifier_Amplifier_TargetGainPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetGainTiltPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-gain-tilt YANG schema element.
type OpticalAmplifier_Amplifier_TargetGainTiltPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetGainTiltPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-gain-tilt YANG schema element.
type OpticalAmplifier_Amplifier_TargetGainTiltPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetOutputPowerPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-output-power YANG schema element.
type OpticalAmplifier_Amplifier_TargetOutputPowerPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/target-output-power YANG schema element.
type OpticalAmplifier_Amplifier_TargetOutputPowerPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TypePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/type YANG schema element.
type OpticalAmplifier_Amplifier_TypePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_TypePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/config/type YANG schema element.
type OpticalAmplifier_Amplifier_TypePathAny struct {
	*ygot.NodePath
}

// ActualGain (container): The actual gain applied by the amplifier in units of
// 0.01dB. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/actual-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain"
func (n *OpticalAmplifier_AmplifierPath) ActualGain() *OpticalAmplifier_Amplifier_ActualGainPath {
	return &OpticalAmplifier_Amplifier_ActualGainPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "actual-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActualGain (container): The actual gain applied by the amplifier in units of
// 0.01dB. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/actual-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain"
func (n *OpticalAmplifier_AmplifierPathAny) ActualGain() *OpticalAmplifier_Amplifier_ActualGainPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "actual-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActualGainTilt (container): The actual tilt applied by the amplifier in units of
// 0.01dB. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/actual-gain-tilt"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt"
func (n *OpticalAmplifier_AmplifierPath) ActualGainTilt() *OpticalAmplifier_Amplifier_ActualGainTiltPath {
	return &OpticalAmplifier_Amplifier_ActualGainTiltPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "actual-gain-tilt"},
			map[string]interface{}{},
			n,
		),
	}
}

// ActualGainTilt (container): The actual tilt applied by the amplifier in units of
// 0.01dB. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/actual-gain-tilt"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt"
func (n *OpticalAmplifier_AmplifierPathAny) ActualGainTilt() *OpticalAmplifier_Amplifier_ActualGainTiltPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTiltPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "actual-gain-tilt"},
			map[string]interface{}{},
			n,
		),
	}
}

// AmpMode (leaf): The operating mode of the amplifier
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/amp-mode"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/amp-mode"
func (n *OpticalAmplifier_AmplifierPath) AmpMode() *OpticalAmplifier_Amplifier_AmpModePath {
	return &OpticalAmplifier_Amplifier_AmpModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "amp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AmpMode (leaf): The operating mode of the amplifier
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/amp-mode"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/amp-mode"
func (n *OpticalAmplifier_AmplifierPathAny) AmpMode() *OpticalAmplifier_Amplifier_AmpModePathAny {
	return &OpticalAmplifier_Amplifier_AmpModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "amp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component (leaf): Reference to the system-supplied physical component that
// the amplifier gain block is contained within. Multiple
// amplifier gain blocks may be contained within the same
// physical component.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/component"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/component"
func (n *OpticalAmplifier_AmplifierPath) Component() *OpticalAmplifier_Amplifier_ComponentPath {
	return &OpticalAmplifier_Amplifier_ComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component (leaf): Reference to the system-supplied physical component that
// the amplifier gain block is contained within. Multiple
// amplifier gain blocks may be contained within the same
// physical component.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/component"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/component"
func (n *OpticalAmplifier_AmplifierPathAny) Component() *OpticalAmplifier_Amplifier_ComponentPathAny {
	return &OpticalAmplifier_Amplifier_ComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "component"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressPort (leaf): Reference to system-supplied name of the amplifier egress
// port. This leaf is only valid for ports of type EGRESS.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/egress-port"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/egress-port"
func (n *OpticalAmplifier_AmplifierPath) EgressPort() *OpticalAmplifier_Amplifier_EgressPortPath {
	return &OpticalAmplifier_Amplifier_EgressPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "egress-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressPort (leaf): Reference to system-supplied name of the amplifier egress
// port. This leaf is only valid for ports of type EGRESS.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/egress-port"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/egress-port"
func (n *OpticalAmplifier_AmplifierPathAny) EgressPort() *OpticalAmplifier_Amplifier_EgressPortPathAny {
	return &OpticalAmplifier_Amplifier_EgressPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "egress-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Turns power on / off to the amplifiers gain module.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/enabled"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/enabled"
func (n *OpticalAmplifier_AmplifierPath) Enabled() *OpticalAmplifier_Amplifier_EnabledPath {
	return &OpticalAmplifier_Amplifier_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Turns power on / off to the amplifiers gain module.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/enabled"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/enabled"
func (n *OpticalAmplifier_AmplifierPathAny) Enabled() *OpticalAmplifier_Amplifier_EnabledPathAny {
	return &OpticalAmplifier_Amplifier_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// FiberTypeProfile (leaf): The fiber type profile specifies details about the
// fiber type which are needed to accurately determine
// the gain and perform efficient amplification. This is
// only needed for Raman type amplifiers.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/fiber-type-profile"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/fiber-type-profile"
func (n *OpticalAmplifier_AmplifierPath) FiberTypeProfile() *OpticalAmplifier_Amplifier_FiberTypeProfilePath {
	return &OpticalAmplifier_Amplifier_FiberTypeProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fiber-type-profile"},
			map[string]interface{}{},
			n,
		),
	}
}

// FiberTypeProfile (leaf): The fiber type profile specifies details about the
// fiber type which are needed to accurately determine
// the gain and perform efficient amplification. This is
// only needed for Raman type amplifiers.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/fiber-type-profile"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/fiber-type-profile"
func (n *OpticalAmplifier_AmplifierPathAny) FiberTypeProfile() *OpticalAmplifier_Amplifier_FiberTypeProfilePathAny {
	return &OpticalAmplifier_Amplifier_FiberTypeProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fiber-type-profile"},
			map[string]interface{}{},
			n,
		),
	}
}

// GainRange (leaf): Selected gain range.  The gain range is a platform-defined
// value indicating the switched gain amplifier setting
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/gain-range"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/gain-range"
func (n *OpticalAmplifier_AmplifierPath) GainRange() *OpticalAmplifier_Amplifier_GainRangePath {
	return &OpticalAmplifier_Amplifier_GainRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "gain-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// GainRange (leaf): Selected gain range.  The gain range is a platform-defined
// value indicating the switched gain amplifier setting
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/gain-range"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/gain-range"
func (n *OpticalAmplifier_AmplifierPathAny) GainRange() *OpticalAmplifier_Amplifier_GainRangePathAny {
	return &OpticalAmplifier_Amplifier_GainRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "gain-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressPort (leaf): Reference to system-supplied name of the amplifier ingress
// port. This leaf is only valid for ports of type INGRESS.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/ingress-port"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/ingress-port"
func (n *OpticalAmplifier_AmplifierPath) IngressPort() *OpticalAmplifier_Amplifier_IngressPortPath {
	return &OpticalAmplifier_Amplifier_IngressPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ingress-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressPort (leaf): Reference to system-supplied name of the amplifier ingress
// port. This leaf is only valid for ports of type INGRESS.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/ingress-port"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/ingress-port"
func (n *OpticalAmplifier_AmplifierPathAny) IngressPort() *OpticalAmplifier_Amplifier_IngressPortPathAny {
	return &OpticalAmplifier_Amplifier_IngressPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ingress-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerCBand (container): The C band (consisting of approximately 191 to 195 THz or
// 1530nm to 1565 nm) input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-c-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band"
func (n *OpticalAmplifier_AmplifierPath) InputPowerCBand() *OpticalAmplifier_Amplifier_InputPowerCBandPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBandPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-c-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerCBand (container): The C band (consisting of approximately 191 to 195 THz or
// 1530nm to 1565 nm) input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-c-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band"
func (n *OpticalAmplifier_AmplifierPathAny) InputPowerCBand() *OpticalAmplifier_Amplifier_InputPowerCBandPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBandPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-c-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerLBand (container): The L band (consisting of approximately 184 to 191 THz or
// 1565 to 1625 nm) input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-l-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band"
func (n *OpticalAmplifier_AmplifierPath) InputPowerLBand() *OpticalAmplifier_Amplifier_InputPowerLBandPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBandPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-l-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerLBand (container): The L band (consisting of approximately 184 to 191 THz or
// 1565 to 1625 nm) input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-l-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band"
func (n *OpticalAmplifier_AmplifierPathAny) InputPowerLBand() *OpticalAmplifier_Amplifier_InputPowerLBandPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBandPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-l-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerTotal (container): The total input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-total"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total"
func (n *OpticalAmplifier_AmplifierPath) InputPowerTotal() *OpticalAmplifier_Amplifier_InputPowerTotalPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-total"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPowerTotal (container): The total input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power-total"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total"
func (n *OpticalAmplifier_AmplifierPathAny) InputPowerTotal() *OpticalAmplifier_Amplifier_InputPowerTotalPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power-total"},
			map[string]interface{}{},
			n,
		),
	}
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. If avg/min/max statistics
// are not supported, just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/laser-bias-current"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current"
func (n *OpticalAmplifier_AmplifierPath) LaserBiasCurrent() *OpticalAmplifier_Amplifier_LaserBiasCurrentPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. If avg/min/max statistics
// are not supported, just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/laser-bias-current"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current"
func (n *OpticalAmplifier_AmplifierPathAny) LaserBiasCurrent() *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxGain (leaf): The maximum allowed gain of the amplifier. This is used
// when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
// to prevent the gain from exceeding a desired threshold. If
// left empty, the platform will apply a maximum gain based on
// hardware specifications.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/max-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/max-gain"
func (n *OpticalAmplifier_AmplifierPath) MaxGain() *OpticalAmplifier_Amplifier_MaxGainPath {
	return &OpticalAmplifier_Amplifier_MaxGainPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxGain (leaf): The maximum allowed gain of the amplifier. This is used
// when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
// to prevent the gain from exceeding a desired threshold. If
// left empty, the platform will apply a maximum gain based on
// hardware specifications.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/max-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/max-gain"
func (n *OpticalAmplifier_AmplifierPathAny) MaxGain() *OpticalAmplifier_Amplifier_MaxGainPathAny {
	return &OpticalAmplifier_Amplifier_MaxGainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxOutputPower (leaf): The maximum optical output power of the amplifier. This
// may be used to prevent the output power from exceeding a
// desired threshold.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/max-output-power"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/max-output-power"
func (n *OpticalAmplifier_AmplifierPath) MaxOutputPower() *OpticalAmplifier_Amplifier_MaxOutputPowerPath {
	return &OpticalAmplifier_Amplifier_MaxOutputPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxOutputPower (leaf): The maximum optical output power of the amplifier. This
// may be used to prevent the output power from exceeding a
// desired threshold.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/max-output-power"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/max-output-power"
func (n *OpticalAmplifier_AmplifierPathAny) MaxOutputPower() *OpticalAmplifier_Amplifier_MaxOutputPowerPathAny {
	return &OpticalAmplifier_Amplifier_MaxOutputPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinGain (leaf): The minimum allowed gain of the amplifier. This is used
// when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
// to prevent the gain from dropping below a desired threshold.
// If left empty, the platform will apply a minimum gain based
// on hardware specifications.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/min-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/min-gain"
func (n *OpticalAmplifier_AmplifierPath) MinGain() *OpticalAmplifier_Amplifier_MinGainPath {
	return &OpticalAmplifier_Amplifier_MinGainPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinGain (leaf): The minimum allowed gain of the amplifier. This is used
// when the amp-mode is in CONSTANT_POWER or DYNAMIC_GAIN mode
// to prevent the gain from dropping below a desired threshold.
// If left empty, the platform will apply a minimum gain based
// on hardware specifications.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/min-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/min-gain"
func (n *OpticalAmplifier_AmplifierPathAny) MinGain() *OpticalAmplifier_Amplifier_MinGainPathAny {
	return &OpticalAmplifier_Amplifier_MinGainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User-defined name assigned to identify a specific amplifier
// in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/name"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/name"
func (n *OpticalAmplifier_AmplifierPath) Name() *OpticalAmplifier_Amplifier_NamePath {
	return &OpticalAmplifier_Amplifier_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User-defined name assigned to identify a specific amplifier
// in the device
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/name"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/name"
func (n *OpticalAmplifier_AmplifierPathAny) Name() *OpticalAmplifier_Amplifier_NamePathAny {
	return &OpticalAmplifier_Amplifier_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalReturnLoss (container): The optical return loss (ORL) is the ratio of the light
// reflected back into the port to the light launched out of
// the port. ORL is in units of 0.01dBm. If avg/min/max
// statistics are not supported, just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/optical-return-loss"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss"
func (n *OpticalAmplifier_AmplifierPath) OpticalReturnLoss() *OpticalAmplifier_Amplifier_OpticalReturnLossPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLossPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "optical-return-loss"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalReturnLoss (container): The optical return loss (ORL) is the ratio of the light
// reflected back into the port to the light launched out of
// the port. ORL is in units of 0.01dBm. If avg/min/max
// statistics are not supported, just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/optical-return-loss"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss"
func (n *OpticalAmplifier_AmplifierPathAny) OpticalReturnLoss() *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLossPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "optical-return-loss"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerCBand (container): The C band (consisting of approximately 191 to 195 THz or
// 1530nm to 1565 nm)output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-c-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band"
func (n *OpticalAmplifier_AmplifierPath) OutputPowerCBand() *OpticalAmplifier_Amplifier_OutputPowerCBandPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBandPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-c-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerCBand (container): The C band (consisting of approximately 191 to 195 THz or
// 1530nm to 1565 nm)output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-c-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band"
func (n *OpticalAmplifier_AmplifierPathAny) OutputPowerCBand() *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBandPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-c-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerLBand (container): The L band (consisting of approximately 184 to 191 THz or
// 1565 to 1625 nm)output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-l-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band"
func (n *OpticalAmplifier_AmplifierPath) OutputPowerLBand() *OpticalAmplifier_Amplifier_OutputPowerLBandPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBandPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-l-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerLBand (container): The L band (consisting of approximately 184 to 191 THz or
// 1565 to 1625 nm)output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-l-band"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band"
func (n *OpticalAmplifier_AmplifierPathAny) OutputPowerLBand() *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBandPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-l-band"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerTotal (container): The total output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-total"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total"
func (n *OpticalAmplifier_AmplifierPath) OutputPowerTotal() *OpticalAmplifier_Amplifier_OutputPowerTotalPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-total"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPowerTotal (container): The total output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power-total"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total"
func (n *OpticalAmplifier_AmplifierPathAny) OutputPowerTotal() *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power-total"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGain (leaf): Positive gain applied by the amplifier. This is used
// when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
// mode to set the target gain that the amplifier should
// achieve.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-gain"
func (n *OpticalAmplifier_AmplifierPath) TargetGain() *OpticalAmplifier_Amplifier_TargetGainPath {
	return &OpticalAmplifier_Amplifier_TargetGainPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGain (leaf): Positive gain applied by the amplifier. This is used
// when the amp-mode is in CONSTANT_GAIN or DYNAMIC_GAIN
// mode to set the target gain that the amplifier should
// achieve.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-gain"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-gain"
func (n *OpticalAmplifier_AmplifierPathAny) TargetGain() *OpticalAmplifier_Amplifier_TargetGainPathAny {
	return &OpticalAmplifier_Amplifier_TargetGainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-gain"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGainTilt (leaf): Gain tilt control
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-gain-tilt"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-gain-tilt"
func (n *OpticalAmplifier_AmplifierPath) TargetGainTilt() *OpticalAmplifier_Amplifier_TargetGainTiltPath {
	return &OpticalAmplifier_Amplifier_TargetGainTiltPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-gain-tilt"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGainTilt (leaf): Gain tilt control
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-gain-tilt"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-gain-tilt"
func (n *OpticalAmplifier_AmplifierPathAny) TargetGainTilt() *OpticalAmplifier_Amplifier_TargetGainTiltPathAny {
	return &OpticalAmplifier_Amplifier_TargetGainTiltPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-gain-tilt"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetOutputPower (leaf): Output optical power of the amplifier.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-output-power"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-output-power"
func (n *OpticalAmplifier_AmplifierPath) TargetOutputPower() *OpticalAmplifier_Amplifier_TargetOutputPowerPath {
	return &OpticalAmplifier_Amplifier_TargetOutputPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetOutputPower (leaf): Output optical power of the amplifier.
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/target-output-power"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/target-output-power"
func (n *OpticalAmplifier_AmplifierPathAny) TargetOutputPower() *OpticalAmplifier_Amplifier_TargetOutputPowerPathAny {
	return &OpticalAmplifier_Amplifier_TargetOutputPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of the amplifier
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/type"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/type"
func (n *OpticalAmplifier_AmplifierPath) Type() *OpticalAmplifier_Amplifier_TypePath {
	return &OpticalAmplifier_Amplifier_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of the amplifier
// ----------------------------------------
// Defining module: "openconfig-optical-amplifier"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/type"
// Path from root: "/optical-amplifier/amplifiers/amplifier/config/type"
func (n *OpticalAmplifier_AmplifierPathAny) Type() *OpticalAmplifier_Amplifier_TypePathAny {
	return &OpticalAmplifier_Amplifier_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_ActualGainPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/avg YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/avg YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/instant YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/instant YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/interval YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/interval YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/max YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/max YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/max-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/max-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/min YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/min YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/min-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGain_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain/min-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGain_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/avg"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) Avg() *OpticalAmplifier_Amplifier_ActualGain_AvgPath {
	return &OpticalAmplifier_Amplifier_ActualGain_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/avg"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) Avg() *OpticalAmplifier_Amplifier_ActualGain_AvgPathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/instant"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) Instant() *OpticalAmplifier_Amplifier_ActualGain_InstantPath {
	return &OpticalAmplifier_Amplifier_ActualGain_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/instant"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) Instant() *OpticalAmplifier_Amplifier_ActualGain_InstantPathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/interval"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) Interval() *OpticalAmplifier_Amplifier_ActualGain_IntervalPath {
	return &OpticalAmplifier_Amplifier_ActualGain_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/interval"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) Interval() *OpticalAmplifier_Amplifier_ActualGain_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/max"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) Max() *OpticalAmplifier_Amplifier_ActualGain_MaxPath {
	return &OpticalAmplifier_Amplifier_ActualGain_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/max"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) Max() *OpticalAmplifier_Amplifier_ActualGain_MaxPathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/max-time"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) MaxTime() *OpticalAmplifier_Amplifier_ActualGain_MaxTimePath {
	return &OpticalAmplifier_Amplifier_ActualGain_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/max-time"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) MaxTime() *OpticalAmplifier_Amplifier_ActualGain_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/min"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) Min() *OpticalAmplifier_Amplifier_ActualGain_MinPath {
	return &OpticalAmplifier_Amplifier_ActualGain_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/min"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) Min() *OpticalAmplifier_Amplifier_ActualGain_MinPathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/min-time"
func (n *OpticalAmplifier_Amplifier_ActualGainPath) MinTime() *OpticalAmplifier_Amplifier_ActualGain_MinTimePath {
	return &OpticalAmplifier_Amplifier_ActualGain_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain/min-time"
func (n *OpticalAmplifier_Amplifier_ActualGainPathAny) MinTime() *OpticalAmplifier_Amplifier_ActualGain_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_ActualGain_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_ActualGainTiltPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTiltPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTiltPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTiltPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/avg YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/avg YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/instant YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/instant YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/interval YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/interval YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min-time YANG schema element.
type OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/avg"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) Avg() *OpticalAmplifier_Amplifier_ActualGainTilt_AvgPath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/avg"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) Avg() *OpticalAmplifier_Amplifier_ActualGainTilt_AvgPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/instant"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) Instant() *OpticalAmplifier_Amplifier_ActualGainTilt_InstantPath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/instant"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) Instant() *OpticalAmplifier_Amplifier_ActualGainTilt_InstantPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/interval"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) Interval() *OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/interval"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) Interval() *OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) Max() *OpticalAmplifier_Amplifier_ActualGainTilt_MaxPath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) Max() *OpticalAmplifier_Amplifier_ActualGainTilt_MaxPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max-time"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) MaxTime() *OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/max-time"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) MaxTime() *OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) Min() *OpticalAmplifier_Amplifier_ActualGainTilt_MinPath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) Min() *OpticalAmplifier_Amplifier_ActualGainTilt_MinPathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min-time"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPath) MinTime() *OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePath {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/actual-gain-tilt/min-time"
func (n *OpticalAmplifier_Amplifier_ActualGainTiltPathAny) MinTime() *OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_ActualGainTilt_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_InputPowerCBandPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBandPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBandPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBandPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) Avg() *OpticalAmplifier_Amplifier_InputPowerCBand_AvgPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) Avg() *OpticalAmplifier_Amplifier_InputPowerCBand_AvgPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) Instant() *OpticalAmplifier_Amplifier_InputPowerCBand_InstantPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) Instant() *OpticalAmplifier_Amplifier_InputPowerCBand_InstantPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) Interval() *OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) Interval() *OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) Max() *OpticalAmplifier_Amplifier_InputPowerCBand_MaxPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) Max() *OpticalAmplifier_Amplifier_InputPowerCBand_MaxPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) MaxTime() *OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) MaxTime() *OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) Min() *OpticalAmplifier_Amplifier_InputPowerCBand_MinPath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) Min() *OpticalAmplifier_Amplifier_InputPowerCBand_MinPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPath) MinTime() *OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-c-band/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerCBandPathAny) MinTime() *OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerCBand_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_InputPowerLBandPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBandPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBandPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBandPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) Avg() *OpticalAmplifier_Amplifier_InputPowerLBand_AvgPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) Avg() *OpticalAmplifier_Amplifier_InputPowerLBand_AvgPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) Instant() *OpticalAmplifier_Amplifier_InputPowerLBand_InstantPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) Instant() *OpticalAmplifier_Amplifier_InputPowerLBand_InstantPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) Interval() *OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) Interval() *OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) Max() *OpticalAmplifier_Amplifier_InputPowerLBand_MaxPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) Max() *OpticalAmplifier_Amplifier_InputPowerLBand_MaxPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) MaxTime() *OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) MaxTime() *OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) Min() *OpticalAmplifier_Amplifier_InputPowerLBand_MinPath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) Min() *OpticalAmplifier_Amplifier_InputPowerLBand_MinPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPath) MinTime() *OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-l-band/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerLBandPathAny) MinTime() *OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerLBand_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_InputPowerTotalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/avg YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/instant YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/interval YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/max YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/max-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/min YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/input-power-total/min-time YANG schema element.
type OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) Avg() *OpticalAmplifier_Amplifier_InputPowerTotal_AvgPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/avg"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) Avg() *OpticalAmplifier_Amplifier_InputPowerTotal_AvgPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) Instant() *OpticalAmplifier_Amplifier_InputPowerTotal_InstantPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/instant"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) Instant() *OpticalAmplifier_Amplifier_InputPowerTotal_InstantPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) Interval() *OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/interval"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) Interval() *OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/max"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) Max() *OpticalAmplifier_Amplifier_InputPowerTotal_MaxPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/max"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) Max() *OpticalAmplifier_Amplifier_InputPowerTotal_MaxPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) MaxTime() *OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/max-time"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) MaxTime() *OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/min"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) Min() *OpticalAmplifier_Amplifier_InputPowerTotal_MinPath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/min"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) Min() *OpticalAmplifier_Amplifier_InputPowerTotal_MinPathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPath) MinTime() *OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePath {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/input-power-total/min-time"
func (n *OpticalAmplifier_Amplifier_InputPowerTotalPathAny) MinTime() *OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_InputPowerTotal_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_LaserBiasCurrentPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrentPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/avg YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/avg YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/instant YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/instant YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/interval YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/interval YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max-time YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max-time YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min-time YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min-time YANG schema element.
type OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/avg"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) Avg() *OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/avg"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) Avg() *OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/instant"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) Instant() *OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/instant"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) Instant() *OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/interval"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) Interval() *OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/interval"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) Interval() *OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) Max() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) Max() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max-time"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) MaxTime() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/max-time"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) MaxTime() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) Min() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) Min() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min-time"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPath) MinTime() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePath {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/laser-bias-current/min-time"
func (n *OpticalAmplifier_Amplifier_LaserBiasCurrentPathAny) MinTime() *OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_OpticalReturnLossPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLossPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLossPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLossPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/avg YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/avg YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/instant YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/instant YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/interval YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/interval YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/avg"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) Avg() *OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/avg"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) Avg() *OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/instant"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) Instant() *OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/instant"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) Instant() *OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/interval"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) Interval() *OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/interval"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) Interval() *OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) Max() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) Max() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max-time"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) MaxTime() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/max-time"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) MaxTime() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) Min() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) Min() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min-time"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPath) MinTime() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePath {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/optical-return-loss/min-time"
func (n *OpticalAmplifier_Amplifier_OpticalReturnLossPathAny) MinTime() *OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_OpticalReturnLoss_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_OutputPowerCBandPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBandPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBandPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBandPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) Avg() *OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) Avg() *OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) Instant() *OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) Instant() *OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) Interval() *OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) Interval() *OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) Max() *OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) Max() *OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) Min() *OpticalAmplifier_Amplifier_OutputPowerCBand_MinPath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) Min() *OpticalAmplifier_Amplifier_OutputPowerCBand_MinPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPath) MinTime() *OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-c-band/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerCBandPathAny) MinTime() *OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerCBand_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_OutputPowerLBandPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBandPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBandPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBandPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) Avg() *OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) Avg() *OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) Instant() *OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) Instant() *OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) Interval() *OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) Interval() *OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) Max() *OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) Max() *OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) Min() *OpticalAmplifier_Amplifier_OutputPowerLBand_MinPath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) Min() *OpticalAmplifier_Amplifier_OutputPowerLBand_MinPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPath) MinTime() *OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-l-band/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerLBandPathAny) MinTime() *OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerLBand_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_Amplifier_OutputPowerTotalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/avg YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/instant YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/interval YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/max YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/max-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/min YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/amplifiers/amplifier/state/output-power-total/min-time YANG schema element.
type OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) Avg() *OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/avg"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) Avg() *OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) Instant() *OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/instant"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) Instant() *OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) Interval() *OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/interval"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) Interval() *OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) Max() *OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/max"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) Max() *OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/max-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) MaxTime() *OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) Min() *OpticalAmplifier_Amplifier_OutputPowerTotal_MinPath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/min"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) Min() *OpticalAmplifier_Amplifier_OutputPowerTotal_MinPathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPath) MinTime() *OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePath {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/amplifiers/amplifier/state/output-power-total/min-time"
func (n *OpticalAmplifier_Amplifier_OutputPowerTotalPathAny) MinTime() *OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePathAny {
	return &OpticalAmplifier_Amplifier_OutputPowerTotal_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_SupervisoryChannelPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel YANG schema element.
type OpticalAmplifier_SupervisoryChannelPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannelPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel YANG schema element.
type OpticalAmplifier_SupervisoryChannelPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InterfacePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/config/interface YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InterfacePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InterfacePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/config/interface YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InterfacePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputFrequencyPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-frequency YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputFrequencyPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputFrequencyPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-frequency YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputFrequencyPathAny struct {
	*ygot.NodePath
}

// InputPower (container): The input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power"
func (n *OpticalAmplifier_SupervisoryChannelPath) InputPower() *OpticalAmplifier_SupervisoryChannel_InputPowerPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputPower (container): The input optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/input-power"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power"
func (n *OpticalAmplifier_SupervisoryChannelPathAny) InputPower() *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to an OSC interface
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/interface"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/config/interface"
func (n *OpticalAmplifier_SupervisoryChannelPath) Interface() *OpticalAmplifier_SupervisoryChannel_InterfacePath {
	return &OpticalAmplifier_SupervisoryChannel_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to an OSC interface
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "config/interface"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/config/interface"
func (n *OpticalAmplifier_SupervisoryChannelPathAny) Interface() *OpticalAmplifier_SupervisoryChannel_InterfacePathAny {
	return &OpticalAmplifier_SupervisoryChannel_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to one decimal precision. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/laser-bias-current"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current"
func (n *OpticalAmplifier_SupervisoryChannelPath) LaserBiasCurrent() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to one decimal precision. If avg/min/max statistics
// are not supported, the target is expected to just supply
// the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/laser-bias-current"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current"
func (n *OpticalAmplifier_SupervisoryChannelPathAny) LaserBiasCurrent() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-frequency"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-frequency"
func (n *OpticalAmplifier_SupervisoryChannelPath) OutputFrequency() *OpticalAmplifier_SupervisoryChannel_OutputFrequencyPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputFrequencyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports.
// ----------------------------------------
// Defining module: "openconfig-platform-transceiver"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-frequency"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-frequency"
func (n *OpticalAmplifier_SupervisoryChannelPathAny) OutputFrequency() *OpticalAmplifier_SupervisoryChannel_OutputFrequencyPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputFrequencyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPower (container): The output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power"
func (n *OpticalAmplifier_SupervisoryChannelPath) OutputPower() *OpticalAmplifier_SupervisoryChannel_OutputPowerPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutputPower (container): The output optical power of this port in units
// of 0.01dBm. If avg/min/max statistics are not supported,
// the target is expected to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-transport-line-common"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "state/output-power"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power"
func (n *OpticalAmplifier_SupervisoryChannelPathAny) OutputPower() *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_SupervisoryChannel_InputPowerPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPowerPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPowerPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPowerPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/avg"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) Avg() *OpticalAmplifier_SupervisoryChannel_InputPower_AvgPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/avg"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) Avg() *OpticalAmplifier_SupervisoryChannel_InputPower_AvgPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/instant"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) Instant() *OpticalAmplifier_SupervisoryChannel_InputPower_InstantPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/instant"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) Instant() *OpticalAmplifier_SupervisoryChannel_InputPower_InstantPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/interval"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) Interval() *OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/interval"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) Interval() *OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) Max() *OpticalAmplifier_SupervisoryChannel_InputPower_MaxPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) Max() *OpticalAmplifier_SupervisoryChannel_InputPower_MaxPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) MaxTime() *OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) MaxTime() *OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) Min() *OpticalAmplifier_SupervisoryChannel_InputPower_MinPath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) Min() *OpticalAmplifier_SupervisoryChannel_InputPower_MinPathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPath) MinTime() *OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePath {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/input-power/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_InputPowerPathAny) MinTime() *OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_InputPower_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/avg"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) Avg() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/avg"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) Avg() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/instant"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) Instant() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/instant"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) Instant() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/interval"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) Interval() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/interval"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) Interval() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) Max() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) Max() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) MaxTime() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) MaxTime() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) Min() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) Min() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPath) MinTime() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePath {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/laser-bias-current/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrentPathAny) MinTime() *OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OpticalAmplifier_SupervisoryChannel_OutputPowerPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPowerPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/avg YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/instant YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/interval YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MinPath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MinPath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MinPathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MinPathAny struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePath represents the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePath struct {
	*ygot.NodePath
}

// OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-optical-amplifier/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min-time YANG schema element.
type OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePathAny struct {
	*ygot.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/avg"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) Avg() *OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "avg"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/avg"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) Avg() *OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/instant"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) Instant() *OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "instant"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/instant"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) Instant() *OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/interval"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) Interval() *OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "interval"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/interval"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) Interval() *OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) Max() *OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the time interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) Max() *OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) MaxTime() *OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "max-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/max-time"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) MaxTime() *OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) Min() *OpticalAmplifier_SupervisoryChannel_OutputPower_MinPath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) Min() *OpticalAmplifier_SupervisoryChannel_OutputPower_MinPathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPath) MinTime() *OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePath {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-optical-amplifier"
// Path from parent: "min-time"
// Path from root: "/optical-amplifier/supervisory-channels/supervisory-channel/state/output-power/min-time"
func (n *OpticalAmplifier_SupervisoryChannel_OutputPowerPathAny) MinTime() *OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePathAny {
	return &OpticalAmplifier_SupervisoryChannel_OutputPower_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbePath represents the /openconfig-probes/probes/probe YANG schema element.
type ProbePath struct {
	*ygot.NodePath
}

// ProbePathAny represents the wildcard version of the /openconfig-probes/probes/probe YANG schema element.
type ProbePathAny struct {
	*ygot.NodePath
}

// Probe_EnabledPath represents the /openconfig-probes/probes/probe/config/enabled YANG schema element.
type Probe_EnabledPath struct {
	*ygot.NodePath
}

// Probe_EnabledPathAny represents the wildcard version of the /openconfig-probes/probes/probe/config/enabled YANG schema element.
type Probe_EnabledPathAny struct {
	*ygot.NodePath
}

// Probe_NamePath represents the /openconfig-probes/probes/probe/config/name YANG schema element.
type Probe_NamePath struct {
	*ygot.NodePath
}

// Probe_NamePathAny represents the wildcard version of the /openconfig-probes/probes/probe/config/name YANG schema element.
type Probe_NamePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Whether the probe is enabled.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/enabled"
// Path from root: "/probes/probe/config/enabled"
func (n *ProbePath) Enabled() *Probe_EnabledPath {
	return &Probe_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the probe is enabled.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/enabled"
// Path from root: "/probes/probe/config/enabled"
func (n *ProbePathAny) Enabled() *Probe_EnabledPathAny {
	return &Probe_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/name"
// Path from root: "/probes/probe/config/name"
func (n *ProbePath) Name() *Probe_NamePath {
	return &Probe_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/name"
// Path from root: "/probes/probe/config/name"
func (n *ProbePathAny) Name() *Probe_NamePathAny {
	return &Probe_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestAny (list): List of tests associated with this probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "tests/test"
// Path from root: "/probes/probe/tests/test"
// Name (wildcarded): string
func (n *ProbePath) TestAny() *Probe_TestPathAny {
	return &Probe_TestPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tests", "test"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TestAny (list): List of tests associated with this probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "tests/test"
// Path from root: "/probes/probe/tests/test"
// Name (wildcarded): string
func (n *ProbePathAny) TestAny() *Probe_TestPathAny {
	return &Probe_TestPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tests", "test"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Test (list): List of tests associated with this probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "tests/test"
// Path from root: "/probes/probe/tests/test"
// Name: string
func (n *ProbePath) Test(Name string) *Probe_TestPath {
	return &Probe_TestPath{
		NodePath: ygot.NewNodePath(
			[]string{"tests", "test"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Test (list): List of tests associated with this probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "tests/test"
// Path from root: "/probes/probe/tests/test"
// Name: string
func (n *ProbePathAny) Test(Name string) *Probe_TestPathAny {
	return &Probe_TestPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tests", "test"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Probe_TestPath represents the /openconfig-probes/probes/probe/tests/test YANG schema element.
type Probe_TestPath struct {
	*ygot.NodePath
}

// Probe_TestPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test YANG schema element.
type Probe_TestPathAny struct {
	*ygot.NodePath
}

// Probe_Test_CountPath represents the /openconfig-probes/probes/probe/tests/test/config/count YANG schema element.
type Probe_Test_CountPath struct {
	*ygot.NodePath
}

// Probe_Test_CountPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/count YANG schema element.
type Probe_Test_CountPathAny struct {
	*ygot.NodePath
}

// Probe_Test_DscpPath represents the /openconfig-probes/probes/probe/tests/test/config/dscp YANG schema element.
type Probe_Test_DscpPath struct {
	*ygot.NodePath
}

// Probe_Test_DscpPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/dscp YANG schema element.
type Probe_Test_DscpPathAny struct {
	*ygot.NodePath
}

// Probe_Test_EnabledPath represents the /openconfig-probes/probes/probe/tests/test/config/enabled YANG schema element.
type Probe_Test_EnabledPath struct {
	*ygot.NodePath
}

// Probe_Test_EnabledPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/enabled YANG schema element.
type Probe_Test_EnabledPathAny struct {
	*ygot.NodePath
}

// Probe_Test_HistorySizePath represents the /openconfig-probes/probes/probe/tests/test/config/history-size YANG schema element.
type Probe_Test_HistorySizePath struct {
	*ygot.NodePath
}

// Probe_Test_HistorySizePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/history-size YANG schema element.
type Probe_Test_HistorySizePathAny struct {
	*ygot.NodePath
}

// Probe_Test_IntervalPath represents the /openconfig-probes/probes/probe/tests/test/config/interval YANG schema element.
type Probe_Test_IntervalPath struct {
	*ygot.NodePath
}

// Probe_Test_IntervalPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/interval YANG schema element.
type Probe_Test_IntervalPathAny struct {
	*ygot.NodePath
}

// Probe_Test_NamePath represents the /openconfig-probes/probes/probe/tests/test/config/name YANG schema element.
type Probe_Test_NamePath struct {
	*ygot.NodePath
}

// Probe_Test_NamePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/name YANG schema element.
type Probe_Test_NamePathAny struct {
	*ygot.NodePath
}

// Probe_Test_SourcePath represents the /openconfig-probes/probes/probe/tests/test/config/source YANG schema element.
type Probe_Test_SourcePath struct {
	*ygot.NodePath
}

// Probe_Test_SourcePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/source YANG schema element.
type Probe_Test_SourcePathAny struct {
	*ygot.NodePath
}

// Probe_Test_SourcePortPath represents the /openconfig-probes/probes/probe/tests/test/config/source-port YANG schema element.
type Probe_Test_SourcePortPath struct {
	*ygot.NodePath
}

// Probe_Test_SourcePortPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/source-port YANG schema element.
type Probe_Test_SourcePortPathAny struct {
	*ygot.NodePath
}

// Probe_Test_TestTypePath represents the /openconfig-probes/probes/probe/tests/test/config/test-type YANG schema element.
type Probe_Test_TestTypePath struct {
	*ygot.NodePath
}

// Probe_Test_TestTypePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/config/test-type YANG schema element.
type Probe_Test_TestTypePathAny struct {
	*ygot.NodePath
}

// Count (leaf): The number of probes per test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/count"
// Path from root: "/probes/probe/tests/test/config/count"
func (n *Probe_TestPath) Count() *Probe_Test_CountPath {
	return &Probe_Test_CountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "count"},
			map[string]interface{}{},
			n,
		),
	}
}

// Count (leaf): The number of probes per test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/count"
// Path from root: "/probes/probe/tests/test/config/count"
func (n *Probe_TestPathAny) Count() *Probe_Test_CountPathAny {
	return &Probe_Test_CountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "count"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): DSCP code points
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/dscp"
// Path from root: "/probes/probe/tests/test/config/dscp"
func (n *Probe_TestPath) Dscp() *Probe_Test_DscpPath {
	return &Probe_Test_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): DSCP code points
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/dscp"
// Path from root: "/probes/probe/tests/test/config/dscp"
func (n *Probe_TestPathAny) Dscp() *Probe_Test_DscpPathAny {
	return &Probe_Test_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the test is enabled.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/enabled"
// Path from root: "/probes/probe/tests/test/config/enabled"
func (n *Probe_TestPath) Enabled() *Probe_Test_EnabledPath {
	return &Probe_Test_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the test is enabled.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/enabled"
// Path from root: "/probes/probe/tests/test/config/enabled"
func (n *Probe_TestPathAny) Enabled() *Probe_Test_EnabledPathAny {
	return &Probe_Test_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// HistorySize (leaf): The number of history entries stored.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/history-size"
// Path from root: "/probes/probe/tests/test/config/history-size"
func (n *Probe_TestPath) HistorySize() *Probe_Test_HistorySizePath {
	return &Probe_Test_HistorySizePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "history-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// HistorySize (leaf): The number of history entries stored.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/history-size"
// Path from root: "/probes/probe/tests/test/config/history-size"
func (n *Probe_TestPathAny) HistorySize() *Probe_Test_HistorySizePathAny {
	return &Probe_Test_HistorySizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "history-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): Time between two consecutive probes.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/interval"
// Path from root: "/probes/probe/tests/test/config/interval"
func (n *Probe_TestPath) Interval() *Probe_Test_IntervalPath {
	return &Probe_Test_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): Time between two consecutive probes.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/interval"
// Path from root: "/probes/probe/tests/test/config/interval"
func (n *Probe_TestPathAny) Interval() *Probe_Test_IntervalPathAny {
	return &Probe_Test_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the test probe
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/name"
// Path from root: "/probes/probe/tests/test/config/name"
func (n *Probe_TestPath) Name() *Probe_Test_NamePath {
	return &Probe_Test_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the test probe
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/name"
// Path from root: "/probes/probe/tests/test/config/name"
func (n *Probe_TestPathAny) Name() *Probe_Test_NamePathAny {
	return &Probe_Test_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Results (container): Contains the results of the tests.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "results"
// Path from root: "/probes/probe/tests/test/results"
func (n *Probe_TestPath) Results() *Probe_Test_ResultsPath {
	return &Probe_Test_ResultsPath{
		NodePath: ygot.NewNodePath(
			[]string{"results"},
			map[string]interface{}{},
			n,
		),
	}
}

// Results (container): Contains the results of the tests.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "results"
// Path from root: "/probes/probe/tests/test/results"
func (n *Probe_TestPathAny) Results() *Probe_Test_ResultsPathAny {
	return &Probe_Test_ResultsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"results"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): Source address used when probing, either IPv4 or IPv6.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/source"
// Path from root: "/probes/probe/tests/test/config/source"
func (n *Probe_TestPath) Source() *Probe_Test_SourcePath {
	return &Probe_Test_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): Source address used when probing, either IPv4 or IPv6.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/source"
// Path from root: "/probes/probe/tests/test/config/source"
func (n *Probe_TestPathAny) Source() *Probe_Test_SourcePathAny {
	return &Probe_Test_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source number used.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/source-port"
// Path from root: "/probes/probe/tests/test/config/source-port"
func (n *Probe_TestPath) SourcePort() *Probe_Test_SourcePortPath {
	return &Probe_Test_SourcePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source number used.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/source-port"
// Path from root: "/probes/probe/tests/test/config/source-port"
func (n *Probe_TestPathAny) SourcePort() *Probe_Test_SourcePortPathAny {
	return &Probe_Test_SourcePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target (container): The target configuration of the test.
// The nature of the target depends on the probe type:
// for HTTP probes we need to provide an URL to poll,
// while ICMP probes require an IP address to monitor.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "target"
// Path from root: "/probes/probe/tests/test/target"
func (n *Probe_TestPath) Target() *Probe_Test_TargetPath {
	return &Probe_Test_TargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target (container): The target configuration of the test.
// The nature of the target depends on the probe type:
// for HTTP probes we need to provide an URL to poll,
// while ICMP probes require an IP address to monitor.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "target"
// Path from root: "/probes/probe/tests/test/target"
func (n *Probe_TestPathAny) Target() *Probe_Test_TargetPathAny {
	return &Probe_Test_TargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestType (leaf): The type of the probe test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/test-type"
// Path from root: "/probes/probe/tests/test/config/test-type"
func (n *Probe_TestPath) TestType() *Probe_Test_TestTypePath {
	return &Probe_Test_TestTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestType (leaf): The type of the probe test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/test-type"
// Path from root: "/probes/probe/tests/test/config/test-type"
func (n *Probe_TestPathAny) TestType() *Probe_Test_TestTypePathAny {
	return &Probe_Test_TestTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "test-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Probe_Test_ResultsPath represents the /openconfig-probes/probes/probe/tests/test/results YANG schema element.
type Probe_Test_ResultsPath struct {
	*ygot.NodePath
}

// Probe_Test_ResultsPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results YANG schema element.
type Probe_Test_ResultsPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_AvgDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/state/avg-delay YANG schema element.
type Probe_Test_Results_AvgDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_AvgDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/avg-delay YANG schema element.
type Probe_Test_Results_AvgDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_FailedPath represents the /openconfig-probes/probes/probe/tests/test/results/state/failed YANG schema element.
type Probe_Test_Results_FailedPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_FailedPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/failed YANG schema element.
type Probe_Test_Results_FailedPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_JitterPath represents the /openconfig-probes/probes/probe/tests/test/results/state/jitter YANG schema element.
type Probe_Test_Results_JitterPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_JitterPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/jitter YANG schema element.
type Probe_Test_Results_JitterPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_LastTestTimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/state/last-test-timestamp YANG schema element.
type Probe_Test_Results_LastTestTimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_LastTestTimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/last-test-timestamp YANG schema element.
type Probe_Test_Results_LastTestTimestampPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_LossPercentagePath represents the /openconfig-probes/probes/probe/tests/test/results/state/loss-percentage YANG schema element.
type Probe_Test_Results_LossPercentagePath struct {
	*ygot.NodePath
}

// Probe_Test_Results_LossPercentagePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/loss-percentage YANG schema element.
type Probe_Test_Results_LossPercentagePathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_MaxDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/state/max-delay YANG schema element.
type Probe_Test_Results_MaxDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_MaxDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/max-delay YANG schema element.
type Probe_Test_Results_MaxDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_MinDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/state/min-delay YANG schema element.
type Probe_Test_Results_MinDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_MinDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/min-delay YANG schema element.
type Probe_Test_Results_MinDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_ProbesReceivedPath represents the /openconfig-probes/probes/probe/tests/test/results/state/probes-received YANG schema element.
type Probe_Test_Results_ProbesReceivedPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_ProbesReceivedPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/probes-received YANG schema element.
type Probe_Test_Results_ProbesReceivedPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_ProbesSentPath represents the /openconfig-probes/probes/probe/tests/test/results/state/probes-sent YANG schema element.
type Probe_Test_Results_ProbesSentPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_ProbesSentPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/probes-sent YANG schema element.
type Probe_Test_Results_ProbesSentPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_StartTimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/state/start-timestamp YANG schema element.
type Probe_Test_Results_StartTimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_StartTimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/start-timestamp YANG schema element.
type Probe_Test_Results_StartTimestampPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_StddevDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/state/stddev-delay YANG schema element.
type Probe_Test_Results_StddevDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_StddevDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/stddev-delay YANG schema element.
type Probe_Test_Results_StddevDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_TestDurationPath represents the /openconfig-probes/probes/probe/tests/test/results/state/test-duration YANG schema element.
type Probe_Test_Results_TestDurationPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_TestDurationPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/test-duration YANG schema element.
type Probe_Test_Results_TestDurationPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_TimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/state/timestamp YANG schema element.
type Probe_Test_Results_TimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_TimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/state/timestamp YANG schema element.
type Probe_Test_Results_TimestampPathAny struct {
	*ygot.NodePath
}

// AvgDelay (leaf): The average delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/avg-delay"
// Path from root: "/probes/probe/tests/test/results/state/avg-delay"
func (n *Probe_Test_ResultsPath) AvgDelay() *Probe_Test_Results_AvgDelayPath {
	return &Probe_Test_Results_AvgDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// AvgDelay (leaf): The average delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/avg-delay"
// Path from root: "/probes/probe/tests/test/results/state/avg-delay"
func (n *Probe_Test_ResultsPathAny) AvgDelay() *Probe_Test_Results_AvgDelayPathAny {
	return &Probe_Test_Results_AvgDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Failed (leaf): Whether the test failed or succeeded.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/failed"
// Path from root: "/probes/probe/tests/test/results/state/failed"
func (n *Probe_Test_ResultsPath) Failed() *Probe_Test_Results_FailedPath {
	return &Probe_Test_Results_FailedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "failed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Failed (leaf): Whether the test failed or succeeded.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/failed"
// Path from root: "/probes/probe/tests/test/results/state/failed"
func (n *Probe_Test_ResultsPathAny) Failed() *Probe_Test_Results_FailedPathAny {
	return &Probe_Test_Results_FailedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "failed"},
			map[string]interface{}{},
			n,
		),
	}
}

// History (container): Historical data of the tests.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "history"
// Path from root: "/probes/probe/tests/test/results/history"
func (n *Probe_Test_ResultsPath) History() *Probe_Test_Results_HistoryPath {
	return &Probe_Test_Results_HistoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"history"},
			map[string]interface{}{},
			n,
		),
	}
}

// History (container): Historical data of the tests.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "history"
// Path from root: "/probes/probe/tests/test/results/history"
func (n *Probe_Test_ResultsPathAny) History() *Probe_Test_Results_HistoryPathAny {
	return &Probe_Test_Results_HistoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"history"},
			map[string]interface{}{},
			n,
		),
	}
}

// Jitter (leaf): The round trip jitter, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/jitter"
// Path from root: "/probes/probe/tests/test/results/state/jitter"
func (n *Probe_Test_ResultsPath) Jitter() *Probe_Test_Results_JitterPath {
	return &Probe_Test_Results_JitterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "jitter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Jitter (leaf): The round trip jitter, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/jitter"
// Path from root: "/probes/probe/tests/test/results/state/jitter"
func (n *Probe_Test_ResultsPathAny) Jitter() *Probe_Test_Results_JitterPathAny {
	return &Probe_Test_Results_JitterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "jitter"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastTestTimestamp (leaf): The timestamp when the test finished.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/last-test-timestamp"
// Path from root: "/probes/probe/tests/test/results/state/last-test-timestamp"
func (n *Probe_Test_ResultsPath) LastTestTimestamp() *Probe_Test_Results_LastTestTimestampPath {
	return &Probe_Test_Results_LastTestTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-test-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastTestTimestamp (leaf): The timestamp when the test finished.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/last-test-timestamp"
// Path from root: "/probes/probe/tests/test/results/state/last-test-timestamp"
func (n *Probe_Test_ResultsPathAny) LastTestTimestamp() *Probe_Test_Results_LastTestTimestampPathAny {
	return &Probe_Test_Results_LastTestTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-test-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPercentage (leaf): The loss percentage.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/loss-percentage"
// Path from root: "/probes/probe/tests/test/results/state/loss-percentage"
func (n *Probe_Test_ResultsPath) LossPercentage() *Probe_Test_Results_LossPercentagePath {
	return &Probe_Test_Results_LossPercentagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPercentage (leaf): The loss percentage.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/loss-percentage"
// Path from root: "/probes/probe/tests/test/results/state/loss-percentage"
func (n *Probe_Test_ResultsPathAny) LossPercentage() *Probe_Test_Results_LossPercentagePathAny {
	return &Probe_Test_Results_LossPercentagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDelay (leaf): The maximum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/max-delay"
// Path from root: "/probes/probe/tests/test/results/state/max-delay"
func (n *Probe_Test_ResultsPath) MaxDelay() *Probe_Test_Results_MaxDelayPath {
	return &Probe_Test_Results_MaxDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDelay (leaf): The maximum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/max-delay"
// Path from root: "/probes/probe/tests/test/results/state/max-delay"
func (n *Probe_Test_ResultsPathAny) MaxDelay() *Probe_Test_Results_MaxDelayPathAny {
	return &Probe_Test_Results_MaxDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): The minimum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/min-delay"
// Path from root: "/probes/probe/tests/test/results/state/min-delay"
func (n *Probe_Test_ResultsPath) MinDelay() *Probe_Test_Results_MinDelayPath {
	return &Probe_Test_Results_MinDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): The minimum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/min-delay"
// Path from root: "/probes/probe/tests/test/results/state/min-delay"
func (n *Probe_Test_ResultsPathAny) MinDelay() *Probe_Test_Results_MinDelayPathAny {
	return &Probe_Test_Results_MinDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesReceived (leaf): Number of test probes received.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-received"
// Path from root: "/probes/probe/tests/test/results/state/probes-received"
func (n *Probe_Test_ResultsPath) ProbesReceived() *Probe_Test_Results_ProbesReceivedPath {
	return &Probe_Test_Results_ProbesReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesReceived (leaf): Number of test probes received.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-received"
// Path from root: "/probes/probe/tests/test/results/state/probes-received"
func (n *Probe_Test_ResultsPathAny) ProbesReceived() *Probe_Test_Results_ProbesReceivedPathAny {
	return &Probe_Test_Results_ProbesReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesSent (leaf): Number of test probes sent.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-sent"
// Path from root: "/probes/probe/tests/test/results/state/probes-sent"
func (n *Probe_Test_ResultsPath) ProbesSent() *Probe_Test_Results_ProbesSentPath {
	return &Probe_Test_Results_ProbesSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesSent (leaf): Number of test probes sent.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-sent"
// Path from root: "/probes/probe/tests/test/results/state/probes-sent"
func (n *Probe_Test_ResultsPathAny) ProbesSent() *Probe_Test_Results_ProbesSentPathAny {
	return &Probe_Test_Results_ProbesSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTimestamp (leaf): The timestamp when the test started.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/start-timestamp"
// Path from root: "/probes/probe/tests/test/results/state/start-timestamp"
func (n *Probe_Test_ResultsPath) StartTimestamp() *Probe_Test_Results_StartTimestampPath {
	return &Probe_Test_Results_StartTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTimestamp (leaf): The timestamp when the test started.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/start-timestamp"
// Path from root: "/probes/probe/tests/test/results/state/start-timestamp"
func (n *Probe_Test_ResultsPathAny) StartTimestamp() *Probe_Test_Results_StartTimestampPathAny {
	return &Probe_Test_Results_StartTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// StddevDelay (leaf): The standard deviation of the delay of the test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/stddev-delay"
// Path from root: "/probes/probe/tests/test/results/state/stddev-delay"
func (n *Probe_Test_ResultsPath) StddevDelay() *Probe_Test_Results_StddevDelayPath {
	return &Probe_Test_Results_StddevDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stddev-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// StddevDelay (leaf): The standard deviation of the delay of the test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/stddev-delay"
// Path from root: "/probes/probe/tests/test/results/state/stddev-delay"
func (n *Probe_Test_ResultsPathAny) StddevDelay() *Probe_Test_Results_StddevDelayPathAny {
	return &Probe_Test_Results_StddevDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stddev-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestDuration (leaf): The duration of the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/test-duration"
// Path from root: "/probes/probe/tests/test/results/state/test-duration"
func (n *Probe_Test_ResultsPath) TestDuration() *Probe_Test_Results_TestDurationPath {
	return &Probe_Test_Results_TestDurationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-duration"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestDuration (leaf): The duration of the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/test-duration"
// Path from root: "/probes/probe/tests/test/results/state/test-duration"
func (n *Probe_Test_ResultsPathAny) TestDuration() *Probe_Test_Results_TestDurationPathAny {
	return &Probe_Test_Results_TestDurationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-duration"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timestamp (leaf): The test timestamp.
// This is not the timestamp when the test
// was actually executed nither when it finished.
// Should be the timestamp when the test has been scheduled.
// It may not be the same with start-timestamp.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/timestamp"
// Path from root: "/probes/probe/tests/test/results/state/timestamp"
func (n *Probe_Test_ResultsPath) Timestamp() *Probe_Test_Results_TimestampPath {
	return &Probe_Test_Results_TimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timestamp (leaf): The test timestamp.
// This is not the timestamp when the test
// was actually executed nither when it finished.
// Should be the timestamp when the test has been scheduled.
// It may not be the same with start-timestamp.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/timestamp"
// Path from root: "/probes/probe/tests/test/results/state/timestamp"
func (n *Probe_Test_ResultsPathAny) Timestamp() *Probe_Test_Results_TimestampPathAny {
	return &Probe_Test_Results_TimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Probe_Test_Results_HistoryPath represents the /openconfig-probes/probes/probe/tests/test/results/history YANG schema element.
type Probe_Test_Results_HistoryPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_HistoryPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history YANG schema element.
type Probe_Test_Results_HistoryPathAny struct {
	*ygot.NodePath
}

// ItemAny (list): List of history items.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "items/item"
// Path from root: "/probes/probe/tests/test/results/history/items/item"
// Id (wildcarded): uint64
func (n *Probe_Test_Results_HistoryPath) ItemAny() *Probe_Test_Results_History_ItemPathAny {
	return &Probe_Test_Results_History_ItemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"items", "item"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// ItemAny (list): List of history items.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "items/item"
// Path from root: "/probes/probe/tests/test/results/history/items/item"
// Id (wildcarded): uint64
func (n *Probe_Test_Results_HistoryPathAny) ItemAny() *Probe_Test_Results_History_ItemPathAny {
	return &Probe_Test_Results_History_ItemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"items", "item"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Item (list): List of history items.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "items/item"
// Path from root: "/probes/probe/tests/test/results/history/items/item"
// Id: uint64
func (n *Probe_Test_Results_HistoryPath) Item(Id uint64) *Probe_Test_Results_History_ItemPath {
	return &Probe_Test_Results_History_ItemPath{
		NodePath: ygot.NewNodePath(
			[]string{"items", "item"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Item (list): List of history items.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "items/item"
// Path from root: "/probes/probe/tests/test/results/history/items/item"
// Id: uint64
func (n *Probe_Test_Results_HistoryPathAny) Item(Id uint64) *Probe_Test_Results_History_ItemPathAny {
	return &Probe_Test_Results_History_ItemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"items", "item"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Probe_Test_Results_History_ItemPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item YANG schema element.
type Probe_Test_Results_History_ItemPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_ItemPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item YANG schema element.
type Probe_Test_Results_History_ItemPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_AvgDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/avg-delay YANG schema element.
type Probe_Test_Results_History_Item_AvgDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_AvgDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/avg-delay YANG schema element.
type Probe_Test_Results_History_Item_AvgDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_EndTimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/end-timestamp YANG schema element.
type Probe_Test_Results_History_Item_EndTimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_EndTimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/end-timestamp YANG schema element.
type Probe_Test_Results_History_Item_EndTimestampPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_FailedPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/failed YANG schema element.
type Probe_Test_Results_History_Item_FailedPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_FailedPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/failed YANG schema element.
type Probe_Test_Results_History_Item_FailedPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_IdPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/id YANG schema element.
type Probe_Test_Results_History_Item_IdPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_IdPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/id YANG schema element.
type Probe_Test_Results_History_Item_IdPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_JitterPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/jitter YANG schema element.
type Probe_Test_Results_History_Item_JitterPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_JitterPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/jitter YANG schema element.
type Probe_Test_Results_History_Item_JitterPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_LossPercentagePath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/loss-percentage YANG schema element.
type Probe_Test_Results_History_Item_LossPercentagePath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_LossPercentagePathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/loss-percentage YANG schema element.
type Probe_Test_Results_History_Item_LossPercentagePathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_MaxDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/max-delay YANG schema element.
type Probe_Test_Results_History_Item_MaxDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_MaxDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/max-delay YANG schema element.
type Probe_Test_Results_History_Item_MaxDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_MinDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/min-delay YANG schema element.
type Probe_Test_Results_History_Item_MinDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_MinDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/min-delay YANG schema element.
type Probe_Test_Results_History_Item_MinDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_ProbesReceivedPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/probes-received YANG schema element.
type Probe_Test_Results_History_Item_ProbesReceivedPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_ProbesReceivedPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/probes-received YANG schema element.
type Probe_Test_Results_History_Item_ProbesReceivedPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_ProbesSentPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/probes-sent YANG schema element.
type Probe_Test_Results_History_Item_ProbesSentPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_ProbesSentPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/probes-sent YANG schema element.
type Probe_Test_Results_History_Item_ProbesSentPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_StartTimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/start-timestamp YANG schema element.
type Probe_Test_Results_History_Item_StartTimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_StartTimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/start-timestamp YANG schema element.
type Probe_Test_Results_History_Item_StartTimestampPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_StddevDelayPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/stddev-delay YANG schema element.
type Probe_Test_Results_History_Item_StddevDelayPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_StddevDelayPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/stddev-delay YANG schema element.
type Probe_Test_Results_History_Item_StddevDelayPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_TestDurationPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/test-duration YANG schema element.
type Probe_Test_Results_History_Item_TestDurationPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_TestDurationPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/test-duration YANG schema element.
type Probe_Test_Results_History_Item_TestDurationPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_TimestampPath represents the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/timestamp YANG schema element.
type Probe_Test_Results_History_Item_TimestampPath struct {
	*ygot.NodePath
}

// Probe_Test_Results_History_Item_TimestampPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/results/history/items/item/state/timestamp YANG schema element.
type Probe_Test_Results_History_Item_TimestampPathAny struct {
	*ygot.NodePath
}

// AvgDelay (leaf): The average delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/avg-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/avg-delay"
func (n *Probe_Test_Results_History_ItemPath) AvgDelay() *Probe_Test_Results_History_Item_AvgDelayPath {
	return &Probe_Test_Results_History_Item_AvgDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// AvgDelay (leaf): The average delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/avg-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/avg-delay"
func (n *Probe_Test_Results_History_ItemPathAny) AvgDelay() *Probe_Test_Results_History_Item_AvgDelayPathAny {
	return &Probe_Test_Results_History_Item_AvgDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "avg-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTimestamp (leaf): The timestamp when the test finished.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/end-timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/end-timestamp"
func (n *Probe_Test_Results_History_ItemPath) EndTimestamp() *Probe_Test_Results_History_Item_EndTimestampPath {
	return &Probe_Test_Results_History_Item_EndTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTimestamp (leaf): The timestamp when the test finished.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/end-timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/end-timestamp"
func (n *Probe_Test_Results_History_ItemPathAny) EndTimestamp() *Probe_Test_Results_History_Item_EndTimestampPathAny {
	return &Probe_Test_Results_History_Item_EndTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "end-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Failed (leaf): Whether the test failed or succeeded.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/failed"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/failed"
func (n *Probe_Test_Results_History_ItemPath) Failed() *Probe_Test_Results_History_Item_FailedPath {
	return &Probe_Test_Results_History_Item_FailedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "failed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Failed (leaf): Whether the test failed or succeeded.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/failed"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/failed"
func (n *Probe_Test_Results_History_ItemPathAny) Failed() *Probe_Test_Results_History_Item_FailedPathAny {
	return &Probe_Test_Results_History_Item_FailedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "failed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The test item ID.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/id"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/id"
func (n *Probe_Test_Results_History_ItemPath) Id() *Probe_Test_Results_History_Item_IdPath {
	return &Probe_Test_Results_History_Item_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The test item ID.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/id"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/id"
func (n *Probe_Test_Results_History_ItemPathAny) Id() *Probe_Test_Results_History_Item_IdPathAny {
	return &Probe_Test_Results_History_Item_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Jitter (leaf): The round trip jitter, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/jitter"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/jitter"
func (n *Probe_Test_Results_History_ItemPath) Jitter() *Probe_Test_Results_History_Item_JitterPath {
	return &Probe_Test_Results_History_Item_JitterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "jitter"},
			map[string]interface{}{},
			n,
		),
	}
}

// Jitter (leaf): The round trip jitter, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/jitter"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/jitter"
func (n *Probe_Test_Results_History_ItemPathAny) Jitter() *Probe_Test_Results_History_Item_JitterPathAny {
	return &Probe_Test_Results_History_Item_JitterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "jitter"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPercentage (leaf): The loss percentage.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/loss-percentage"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/loss-percentage"
func (n *Probe_Test_Results_History_ItemPath) LossPercentage() *Probe_Test_Results_History_Item_LossPercentagePath {
	return &Probe_Test_Results_History_Item_LossPercentagePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// LossPercentage (leaf): The loss percentage.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/loss-percentage"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/loss-percentage"
func (n *Probe_Test_Results_History_ItemPathAny) LossPercentage() *Probe_Test_Results_History_Item_LossPercentagePathAny {
	return &Probe_Test_Results_History_Item_LossPercentagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "loss-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDelay (leaf): The maximum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/max-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/max-delay"
func (n *Probe_Test_Results_History_ItemPath) MaxDelay() *Probe_Test_Results_History_Item_MaxDelayPath {
	return &Probe_Test_Results_History_Item_MaxDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxDelay (leaf): The maximum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/max-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/max-delay"
func (n *Probe_Test_Results_History_ItemPathAny) MaxDelay() *Probe_Test_Results_History_Item_MaxDelayPathAny {
	return &Probe_Test_Results_History_Item_MaxDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): The minimum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/min-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/min-delay"
func (n *Probe_Test_Results_History_ItemPath) MinDelay() *Probe_Test_Results_History_Item_MinDelayPath {
	return &Probe_Test_Results_History_Item_MinDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinDelay (leaf): The minimum delay recorded during the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/min-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/min-delay"
func (n *Probe_Test_Results_History_ItemPathAny) MinDelay() *Probe_Test_Results_History_Item_MinDelayPathAny {
	return &Probe_Test_Results_History_Item_MinDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "min-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesReceived (leaf): Number of test probes received.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-received"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/probes-received"
func (n *Probe_Test_Results_History_ItemPath) ProbesReceived() *Probe_Test_Results_History_Item_ProbesReceivedPath {
	return &Probe_Test_Results_History_Item_ProbesReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesReceived (leaf): Number of test probes received.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-received"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/probes-received"
func (n *Probe_Test_Results_History_ItemPathAny) ProbesReceived() *Probe_Test_Results_History_Item_ProbesReceivedPathAny {
	return &Probe_Test_Results_History_Item_ProbesReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesSent (leaf): Number of test probes sent.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-sent"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/probes-sent"
func (n *Probe_Test_Results_History_ItemPath) ProbesSent() *Probe_Test_Results_History_Item_ProbesSentPath {
	return &Probe_Test_Results_History_Item_ProbesSentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProbesSent (leaf): Number of test probes sent.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/probes-sent"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/probes-sent"
func (n *Probe_Test_Results_History_ItemPathAny) ProbesSent() *Probe_Test_Results_History_Item_ProbesSentPathAny {
	return &Probe_Test_Results_History_Item_ProbesSentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "probes-sent"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTimestamp (leaf): The timestamp when the test started.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/start-timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/start-timestamp"
func (n *Probe_Test_Results_History_ItemPath) StartTimestamp() *Probe_Test_Results_History_Item_StartTimestampPath {
	return &Probe_Test_Results_History_Item_StartTimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTimestamp (leaf): The timestamp when the test started.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/start-timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/start-timestamp"
func (n *Probe_Test_Results_History_ItemPathAny) StartTimestamp() *Probe_Test_Results_History_Item_StartTimestampPathAny {
	return &Probe_Test_Results_History_Item_StartTimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "start-timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// StddevDelay (leaf): The standard deviation of the delay of the test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/stddev-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/stddev-delay"
func (n *Probe_Test_Results_History_ItemPath) StddevDelay() *Probe_Test_Results_History_Item_StddevDelayPath {
	return &Probe_Test_Results_History_Item_StddevDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stddev-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// StddevDelay (leaf): The standard deviation of the delay of the test.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/stddev-delay"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/stddev-delay"
func (n *Probe_Test_Results_History_ItemPathAny) StddevDelay() *Probe_Test_Results_History_Item_StddevDelayPathAny {
	return &Probe_Test_Results_History_Item_StddevDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "stddev-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestDuration (leaf): The duration of the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/test-duration"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/test-duration"
func (n *Probe_Test_Results_History_ItemPath) TestDuration() *Probe_Test_Results_History_Item_TestDurationPath {
	return &Probe_Test_Results_History_Item_TestDurationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-duration"},
			map[string]interface{}{},
			n,
		),
	}
}

// TestDuration (leaf): The duration of the test, in microseconds.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/test-duration"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/test-duration"
func (n *Probe_Test_Results_History_ItemPathAny) TestDuration() *Probe_Test_Results_History_Item_TestDurationPathAny {
	return &Probe_Test_Results_History_Item_TestDurationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "test-duration"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timestamp (leaf): The test timestamp.
// This is not the timestamp when the test
// was actually executed nither when it finished.
// Should be the timestamp when the test has been scheduled.
// It may not be the same with start-timestamp.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/timestamp"
func (n *Probe_Test_Results_History_ItemPath) Timestamp() *Probe_Test_Results_History_Item_TimestampPath {
	return &Probe_Test_Results_History_Item_TimestampPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timestamp (leaf): The test timestamp.
// This is not the timestamp when the test
// was actually executed nither when it finished.
// Should be the timestamp when the test has been scheduled.
// It may not be the same with start-timestamp.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "state/timestamp"
// Path from root: "/probes/probe/tests/test/results/history/items/item/state/timestamp"
func (n *Probe_Test_Results_History_ItemPathAny) Timestamp() *Probe_Test_Results_History_Item_TimestampPathAny {
	return &Probe_Test_Results_History_Item_TimestampPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timestamp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Probe_Test_TargetPath represents the /openconfig-probes/probes/probe/tests/test/target YANG schema element.
type Probe_Test_TargetPath struct {
	*ygot.NodePath
}

// Probe_Test_TargetPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/target YANG schema element.
type Probe_Test_TargetPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Target_AddressPath represents the /openconfig-probes/probes/probe/tests/test/target/config/address YANG schema element.
type Probe_Test_Target_AddressPath struct {
	*ygot.NodePath
}

// Probe_Test_Target_AddressPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/target/config/address YANG schema element.
type Probe_Test_Target_AddressPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Target_PortPath represents the /openconfig-probes/probes/probe/tests/test/target/config/port YANG schema element.
type Probe_Test_Target_PortPath struct {
	*ygot.NodePath
}

// Probe_Test_Target_PortPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/target/config/port YANG schema element.
type Probe_Test_Target_PortPathAny struct {
	*ygot.NodePath
}

// Probe_Test_Target_UrlPath represents the /openconfig-probes/probes/probe/tests/test/target/config/url YANG schema element.
type Probe_Test_Target_UrlPath struct {
	*ygot.NodePath
}

// Probe_Test_Target_UrlPathAny represents the wildcard version of the /openconfig-probes/probes/probe/tests/test/target/config/url YANG schema element.
type Probe_Test_Target_UrlPathAny struct {
	*ygot.NodePath
}

// Address (leaf): IP address of the target, either IPv4 or IPv6.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/address"
// Path from root: "/probes/probe/tests/test/target/config/address"
func (n *Probe_Test_TargetPath) Address() *Probe_Test_Target_AddressPath {
	return &Probe_Test_Target_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): IP address of the target, either IPv4 or IPv6.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/address"
// Path from root: "/probes/probe/tests/test/target/config/address"
func (n *Probe_Test_TargetPathAny) Address() *Probe_Test_Target_AddressPathAny {
	return &Probe_Test_Target_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): Destination port.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/port"
// Path from root: "/probes/probe/tests/test/target/config/port"
func (n *Probe_Test_TargetPath) Port() *Probe_Test_Target_PortPath {
	return &Probe_Test_Target_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (leaf): Destination port.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/port"
// Path from root: "/probes/probe/tests/test/target/config/port"
func (n *Probe_Test_TargetPathAny) Port() *Probe_Test_Target_PortPathAny {
	return &Probe_Test_Target_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Url (leaf): Target URL to probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/url"
// Path from root: "/probes/probe/tests/test/target/config/url"
func (n *Probe_Test_TargetPath) Url() *Probe_Test_Target_UrlPath {
	return &Probe_Test_Target_UrlPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "url"},
			map[string]interface{}{},
			n,
		),
	}
}

// Url (leaf): Target URL to probe.
// ----------------------------------------
// Defining module: "openconfig-probes"
// Instantiating module: "openconfig-probes"
// Path from parent: "config/url"
// Path from root: "/probes/probe/tests/test/target/config/url"
func (n *Probe_Test_TargetPathAny) Url() *Probe_Test_Target_UrlPathAny {
	return &Probe_Test_Target_UrlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "url"},
			map[string]interface{}{},
			n,
		),
	}
}

// QosPath represents the /openconfig-qos/qos YANG schema element.
type QosPath struct {
	*ygot.NodePath
}

// QosPathAny represents the wildcard version of the /openconfig-qos/qos YANG schema element.
type QosPathAny struct {
	*ygot.NodePath
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name (wildcarded): string
func (n *QosPath) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// BufferAllocationProfileAny (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name (wildcarded): string
func (n *QosPathAny) BufferAllocationProfileAny() *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name: string
func (n *QosPath) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePath {
	return &Qos_BufferAllocationProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// BufferAllocationProfile (list): A buffer allocation profile describes a mapping between the queues
// that are instantiated on an interface and the memory that is allocated
// to them on the forwarding complex that they are instantiated. Profiles
// (like queues) are defined in the abstract and instantiated by being
// configured on a particular interface. Separate allocation profiles may
// be used for ingress and egress traffic, with the profile being specified
// within the /qos/interfaces/interface list.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "buffer-allocation-profiles/buffer-allocation-profile"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile"
// Name: string
func (n *QosPathAny) BufferAllocationProfile(Name string) *Qos_BufferAllocationProfilePathAny {
	return &Qos_BufferAllocationProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"buffer-allocation-profiles", "buffer-allocation-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ClassifierAny (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name (wildcarded): string
func (n *QosPath) ClassifierAny() *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ClassifierAny (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name (wildcarded): string
func (n *QosPathAny) ClassifierAny() *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Classifier (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name: string
func (n *QosPath) Classifier(Name string) *Qos_ClassifierPath {
	return &Qos_ClassifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Classifier (list): List of classifier elements
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "classifiers/classifier"
// Path from root: "/qos/classifiers/classifier"
// Name: string
func (n *QosPathAny) Classifier(Name string) *Qos_ClassifierPathAny {
	return &Qos_ClassifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"classifiers", "classifier"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name (wildcarded): string
func (n *QosPath) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ForwardingGroupAny (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name (wildcarded): string
func (n *QosPathAny) ForwardingGroupAny() *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name: string
func (n *QosPath) ForwardingGroup(Name string) *Qos_ForwardingGroupPath {
	return &Qos_ForwardingGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ForwardingGroup (list): List of forwarding groups.  Forwarding groups are
// logical groups of traffic that will receive common
// forwarding treatment.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "forwarding-groups/forwarding-group"
// Path from root: "/qos/forwarding-groups/forwarding-group"
// Name: string
func (n *QosPathAny) ForwardingGroup(Name string) *Qos_ForwardingGroupPathAny {
	return &Qos_ForwardingGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"forwarding-groups", "forwarding-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *QosPath) InterfaceAny() *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId (wildcarded): string
func (n *QosPathAny) InterfaceAny() *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId: string
func (n *QosPath) Interface(InterfaceId string) *Qos_InterfacePath {
	return &Qos_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of interfaces referenced by QoS entities.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
// ----------------------------------------
// Defining module: "openconfig-qos-interfaces"
// Instantiating module: "openconfig-qos"
// Path from parent: "interfaces/interface"
// Path from root: "/qos/interfaces/interface"
// InterfaceId: string
func (n *QosPathAny) Interface(InterfaceId string) *Qos_InterfacePathAny {
	return &Qos_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// QueueAny (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name (wildcarded): string
func (n *QosPath) QueueAny() *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueAny (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name (wildcarded): string
func (n *QosPathAny) QueueAny() *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Queue (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name: string
func (n *QosPath) Queue(Name string) *Qos_QueuePath {
	return &Qos_QueuePath{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Queue (list): List of defined queues
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/queues/queue"
// Name: string
func (n *QosPathAny) Queue(Name string) *Qos_QueuePathAny {
	return &Qos_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name (wildcarded): string
func (n *QosPath) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueManagementProfileAny (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name (wildcarded): string
func (n *QosPathAny) QueueManagementProfileAny() *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name: string
func (n *QosPath) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePath {
	return &Qos_QueueManagementProfilePath{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// QueueManagementProfile (list): A queue management profile within the OpenConfig QoS model
// specifies how packets are ECN marked/dropped for a particular
// instance of a queue on a particular interface. for example,
// whether RED, or WRED is applied to manage the queue's occupancy.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queue-management-profiles/queue-management-profile"
// Path from root: "/qos/queue-management-profiles/queue-management-profile"
// Name: string
func (n *QosPathAny) QueueManagementProfile(Name string) *Qos_QueueManagementProfilePathAny {
	return &Qos_QueueManagementProfilePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queue-management-profiles", "queue-management-profile"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name (wildcarded): string
func (n *QosPath) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SchedulerPolicyAny (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name (wildcarded): string
func (n *QosPathAny) SchedulerPolicyAny() *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name: string
func (n *QosPath) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPath {
	return &Qos_SchedulerPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SchedulerPolicy (list): List of scheduler policies. A scheduler policy is a set of schedulers
// that are to be applied together. Each scheduler within a scheduler
// policy takes an input, and outputs it according to a scheduling
// discipline that is specified within it. The schedulers consume
// resources according to the specification that is provided - which
// may be absolute resource limits, or relative.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "scheduler-policies/scheduler-policy"
// Path from root: "/qos/scheduler-policies/scheduler-policy"
// Name: string
func (n *QosPathAny) SchedulerPolicy(Name string) *Qos_SchedulerPolicyPathAny {
	return &Qos_SchedulerPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scheduler-policies", "scheduler-policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Qos_BufferAllocationProfilePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfilePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfilePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name YANG schema element.
type Qos_BufferAllocationProfile_NamePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name YANG schema element.
type Qos_BufferAllocationProfile_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfilePath) Name() *Qos_BufferAllocationProfile_NamePath {
	return &Qos_BufferAllocationProfile_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Unique string identifying the buffer allocation profile, used to
// reference to the profile on interfaces.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/config/name"
func (n *Qos_BufferAllocationProfilePathAny) Name() *Qos_BufferAllocationProfile_NamePathAny {
	return &Qos_BufferAllocationProfile_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name (wildcarded): string
func (n *Qos_BufferAllocationProfilePath) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// QueueAny (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name (wildcarded): string
func (n *Qos_BufferAllocationProfilePathAny) QueueAny() *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name: string
func (n *Qos_BufferAllocationProfilePath) Queue(Name string) *Qos_BufferAllocationProfile_QueuePath {
	return &Qos_BufferAllocationProfile_QueuePath{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Queue (list): Buffer allocation profile for a specific queue on the interface.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "queues/queue"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue"
// Name: string
func (n *Qos_BufferAllocationProfilePathAny) Queue(Name string) *Qos_BufferAllocationProfile_QueuePathAny {
	return &Qos_BufferAllocationProfile_QueuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"queues", "queue"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Qos_BufferAllocationProfile_QueuePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_QueuePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_QueuePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor YANG schema element.
type Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_NamePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_NamePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name YANG schema element.
type Qos_BufferAllocationProfile_Queue_NamePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type YANG schema element.
type Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal YANG schema element.
type Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPath represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPath struct {
	*ygot.NodePath
}

// Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny represents the wildcard version of the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer YANG schema element.
type Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny struct {
	*ygot.NodePath
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dedicated-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPath {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DedicatedBuffer (leaf): This is the dedicated buffer that is carved for the queue, this is the minimum
// number of bytes reserved for this queue.
// This leaf is mutualy exclusive with dedicated-buffer-temporal leaf
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dedicated-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBuffer() *Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dedicated-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dedicated-buffer-temporal"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
	}
}

// DedicatedBufferTemporal (leaf): This is the dedicated buffer that is carved for the queue. The the minimum
// number of bytes reserved for this queue is calculated by multiplying by interface speed
// queue is attached to and queues minimum, guarantaed transmit share (derived
// form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with dedicated-buffer leaf
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dedicated-buffer-temporal"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dedicated-buffer-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DedicatedBufferTemporal() *Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny {
	return &Qos_BufferAllocationProfile_Queue_DedicatedBufferTemporalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dedicated-buffer-temporal"},
			map[string]interface{}{},
			n,
		),
	}
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dynamic-limit-scaling-factor"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePath) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath {
	return &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
	}
}

// DynamicLimitScalingFactor (leaf): If shared-buffer-limit-type is DYNAMIC_BASED_ON_SCALING_FACTOR, the scaling
// factor and the current free space in the shared pool is used to determine the
// maximum buffer sapce from the shared pool that the queue is allowed to use.
//
// Example: If a queue is using 79MB and the other queues are using 11MB, the
// free buffer is 10MB. If the configured scaling factor is 3 for the queue, the
// maximum buffer space from the shared pool that the queue is allowed to use is
// calculated as (free buffer * 2^scaling factor) ie. 10MB*2^3 = 80MB. Since the
// current usage is 79MB which is < 80MB, the packet is queued.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/dynamic-limit-scaling-factor"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/dynamic-limit-scaling-factor"
func (n *Qos_BufferAllocationProfile_QueuePathAny) DynamicLimitScalingFactor() *Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny {
	return &Qos_BufferAllocationProfile_Queue_DynamicLimitScalingFactorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dynamic-limit-scaling-factor"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_QueuePath) Name() *Qos_BufferAllocationProfile_Queue_NamePath {
	return &Qos_BufferAllocationProfile_Queue_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the queue being referenced within the buffer allocation profile.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/name"
func (n *Qos_BufferAllocationProfile_QueuePathAny) Name() *Qos_BufferAllocationProfile_Queue_NamePathAny {
	return &Qos_BufferAllocationProfile_Queue_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/shared-buffer-limit-type"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePath) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath {
	return &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SharedBufferLimitType (leaf): The type of limit used to specify the amount of buffer space that the queue
// is allowed to use from the shared pool.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/shared-buffer-limit-type"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/shared-buffer-limit-type"
func (n *Qos_BufferAllocationProfile_QueuePathAny) SharedBufferLimitType() *Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny {
	return &Qos_BufferAllocationProfile_Queue_SharedBufferLimitTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shared-buffer-limit-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/static-shared-buffer-limit"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimit (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// This leaf is mutualy exclusive with static-shared-buffer-limit-temporal leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/static-shared-buffer-limit"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimit() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "static-shared-buffer-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/static-shared-buffer-limit-temporal"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePath) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticSharedBufferLimitTemporal (leaf): If the shared-buffer-limit-type is STATIC, then static-shared-buffer-limit-temporal is
// the maximum number of bytes that the queue is allowed to use from the shared
// pool.
// The the number of bytes is calculated by multiplying static-shared-buffer-limit-temporal
// by interface speed the queue is attached to and queues minimum, guarantaed transmit share
// (derived form WRR schedulers weights).
// This leaf shouldbot be used for strict priority scheduled queues.
// This leaf is mutualy exclusive with static-shared-buffer-limit leaf.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/static-shared-buffer-limit-temporal"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/static-shared-buffer-limit-temporal"
func (n *Qos_BufferAllocationProfile_QueuePathAny) StaticSharedBufferLimitTemporal() *Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny {
	return &Qos_BufferAllocationProfile_Queue_StaticSharedBufferLimitTemporalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "static-shared-buffer-limit-temporal"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/use-shared-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePath) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPath {
	return &Qos_BufferAllocationProfile_Queue_UseSharedBufferPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseSharedBuffer (leaf): If the flag is true, then the queue is allowed to use buffers from shared pool
// in additional to the dedicated buffers assigned for this queue.
// ----------------------------------------
// Defining module: "openconfig-qos-mem-mgmt"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/use-shared-buffer"
// Path from root: "/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue/config/use-shared-buffer"
func (n *Qos_BufferAllocationProfile_QueuePathAny) UseSharedBuffer() *Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny {
	return &Qos_BufferAllocationProfile_Queue_UseSharedBufferPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-shared-buffer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_ClassifierPath represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPath struct {
	*ygot.NodePath
}

// Qos_ClassifierPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_ClassifierPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_NamePath represents the /openconfig-qos/qos/classifiers/classifier/config/name YANG schema element.
type Qos_Classifier_NamePath struct {
	*ygot.NodePath
}

// Qos_Classifier_NamePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/config/name YANG schema element.
type Qos_Classifier_NamePathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_TypePath represents the /openconfig-qos/qos/classifiers/classifier/config/type YANG schema element.
type Qos_Classifier_TypePath struct {
	*ygot.NodePath
}

// Qos_Classifier_TypePathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/config/type YANG schema element.
type Qos_Classifier_TypePathAny struct {
	*ygot.NodePath
}

// Name (leaf): User-assigned name of the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/classifiers/classifier/config/name"
func (n *Qos_ClassifierPath) Name() *Qos_Classifier_NamePath {
	return &Qos_Classifier_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): User-assigned name of the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/name"
// Path from root: "/qos/classifiers/classifier/config/name"
func (n *Qos_ClassifierPathAny) Name() *Qos_Classifier_NamePathAny {
	return &Qos_Classifier_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TermAny (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id (wildcarded): string
func (n *Qos_ClassifierPath) TermAny() *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// TermAny (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id (wildcarded): string
func (n *Qos_ClassifierPathAny) TermAny() *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Term (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id: string
func (n *Qos_ClassifierPath) Term(Id string) *Qos_Classifier_TermPath {
	return &Qos_Classifier_TermPath{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Term (list): List of match terms used in the classifier
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "terms/term"
// Path from root: "/qos/classifiers/classifier/terms/term"
// Id: string
func (n *Qos_ClassifierPathAny) Term(Id string) *Qos_Classifier_TermPathAny {
	return &Qos_Classifier_TermPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"terms", "term"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Type (leaf): Type of classifier.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/type"
// Path from root: "/qos/classifiers/classifier/config/type"
func (n *Qos_ClassifierPath) Type() *Qos_Classifier_TypePath {
	return &Qos_Classifier_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of classifier.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/type"
// Path from root: "/qos/classifiers/classifier/config/type"
func (n *Qos_ClassifierPathAny) Type() *Qos_Classifier_TypePathAny {
	return &Qos_Classifier_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_TermPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPath struct {
	*ygot.NodePath
}

// Qos_Classifier_TermPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_TermPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_IdPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/config/id YANG schema element.
type Qos_Classifier_Term_IdPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_IdPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/config/id YANG schema element.
type Qos_Classifier_Term_IdPathAny struct {
	*ygot.NodePath
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "actions"
// Path from root: "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPath) Actions() *Qos_Classifier_Term_ActionsPath {
	return &Qos_Classifier_Term_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Actions to be applied for packets matching the specified
// classification rules.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "actions"
// Path from root: "/qos/classifiers/classifier/terms/term/actions"
func (n *Qos_Classifier_TermPathAny) Actions() *Qos_Classifier_Term_ActionsPathAny {
	return &Qos_Classifier_Term_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conditions"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPath) Conditions() *Qos_Classifier_Term_ConditionsPath {
	return &Qos_Classifier_Term_ConditionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Conditions (container): Conditions for the classifier term. Packets must match all of
// the criteria specified within the match condition to be considered
// matching the term.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "conditions"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions"
func (n *Qos_Classifier_TermPathAny) Conditions() *Qos_Classifier_Term_ConditionsPathAny {
	return &Qos_Classifier_Term_ConditionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Identifier for the match term
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/id"
// Path from root: "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_TermPath) Id() *Qos_Classifier_Term_IdPath {
	return &Qos_Classifier_Term_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Identifier for the match term
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/id"
// Path from root: "/qos/classifiers/classifier/terms/term/config/id"
func (n *Qos_Classifier_TermPathAny) Id() *Qos_Classifier_Term_IdPathAny {
	return &Qos_Classifier_Term_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_ActionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_ActionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_ActionsPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_TargetGroupPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/config/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_TargetGroupPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/config/target-group YANG schema element.
type Qos_Classifier_Term_Actions_TargetGroupPathAny struct {
	*ygot.NodePath
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "remark"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPath) Remark() *Qos_Classifier_Term_Actions_RemarkPath {
	return &Qos_Classifier_Term_Actions_RemarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remark (container): Remark actions to be associated with packets that match the
// classifier term. Where a packet matches these criteria, the
// specified rewrite actions should be performed.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "remark"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark"
func (n *Qos_Classifier_Term_ActionsPathAny) Remark() *Qos_Classifier_Term_Actions_RemarkPathAny {
	return &Qos_Classifier_Term_Actions_RemarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remark"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/target-group"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_ActionsPath) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPath {
	return &Qos_Classifier_Term_Actions_TargetGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// TargetGroup (leaf): References the forwarding group or class to which the
// matched packets should be assigned
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/target-group"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/config/target-group"
func (n *Qos_Classifier_Term_ActionsPathAny) TargetGroup() *Qos_Classifier_Term_Actions_TargetGroupPathAny {
	return &Qos_Classifier_Term_Actions_TargetGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "target-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_Actions_RemarkPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_RemarkPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_RemarkPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetDscpPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetDscpPathAny struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc YANG schema element.
type Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny struct {
	*ygot.NodePath
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-dot1p"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPath {
	return &Qos_Classifier_Term_Actions_Remark_SetDot1PPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDot1P (leaf): Sets the 3-bit class-of-service value in the
// Ethernet packet header for 802.1Q VLAN-tagged packets,
// also known as PCP (priority code point).
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-dot1p"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dot1p"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDot1P() *Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetDot1PPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-dot1p"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPath {
	return &Qos_Classifier_Term_Actions_Remark_SetDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetDscp (leaf): Sets the 6-bit DSCP (differentiated services code point)
// value in the IP packet header.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-dscp"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-dscp"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetDscp() *Qos_Classifier_Term_Actions_Remark_SetDscpPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-mpls-tc"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPath) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPath {
	return &Qos_Classifier_Term_Actions_Remark_SetMplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetMplsTc (leaf): Sets the 3-bit traffic class value (also referred to as EXP
// or CoS) in MPLS packets.
// ----------------------------------------
// Defining module: "openconfig-qos-elements"
// Instantiating module: "openconfig-qos"
// Path from parent: "config/set-mpls-tc"
// Path from root: "/qos/classifiers/classifier/terms/term/actions/remark/config/set-mpls-tc"
func (n *Qos_Classifier_Term_Actions_RemarkPathAny) SetMplsTc() *Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny {
	return &Qos_Classifier_Term_Actions_Remark_SetMplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// Qos_Classifier_Term_ConditionsPath represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPath struct {
	*ygot.NodePath
}

// Qos_Classifier_Term_ConditionsPathAny represents the wildcard version of the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_ConditionsPathAny struct {
	*ygot.NodePath
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv4"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4Path {
	return &Qos_Classifier_Term_Conditions_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv4"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv4"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv4() *Qos_Classifier_Term_Conditions_Ipv4PathAny {
	return &Qos_Classifier_Term_Conditions_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv6"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPath) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6Path {
	return &Qos_Classifier_Term_Conditions_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "ipv6"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/ipv6"
func (n *Qos_Classifier_Term_ConditionsPathAny) Ipv6() *Qos_Classifier_Term_Conditions_Ipv6PathAny {
	return &Qos_Classifier_Term_Conditions_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "l2"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPath) L2() *Qos_Classifier_Term_Conditions_L2Path {
	return &Qos_Classifier_Term_Conditions_L2Path{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "l2"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/l2"
func (n *Qos_Classifier_Term_ConditionsPathAny) L2() *Qos_Classifier_Term_Conditions_L2PathAny {
	return &Qos_Classifier_Term_Conditions_L2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "mpls"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPath) Mpls() *Qos_Classifier_Term_Conditions_MplsPath {
	return &Qos_Classifier_Term_Conditions_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "mpls"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/mpls"
func (n *Qos_Classifier_Term_ConditionsPathAny) Mpls() *Qos_Classifier_Term_Conditions_MplsPathAny {
	return &Qos_Classifier_Term_Conditions_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "transport"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPath) Transport() *Qos_Classifier_Term_Conditions_TransportPath {
	return &Qos_Classifier_Term_Conditions_TransportPath{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-qos"
// Path from parent: "transport"
// Path from root: "/qos/classifiers/classifier/terms/term/conditions/transport"
func (n *Qos_Classifier_Term_ConditionsPathAny) Transport() *Qos_Classifier_Term_Conditions_TransportPathAny {
	return &Qos_Classifier_Term_Conditions_TransportPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}
